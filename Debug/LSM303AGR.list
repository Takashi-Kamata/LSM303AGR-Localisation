
LSM303AGR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000956c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000720  08009740  08009740  00019740  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e60  08009e60  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08009e60  08009e60  00019e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e68  08009e68  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e68  08009e68  00019e68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e6c  08009e6c  00019e6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08009e70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  200001e4  0800a054  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002dc  0800a054  000202dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dfb6  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c02  00000000  00000000  0002e1ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a08  00000000  00000000  0002fdd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000988  00000000  00000000  000307d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002262a  00000000  00000000  00031160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dbdf  00000000  00000000  0005378a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd0df  00000000  00000000  00061369  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012e448  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ddc  00000000  00000000  0012e49c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009724 	.word	0x08009724

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e8 	.word	0x200001e8
 800020c:	08009724 	.word	0x08009724

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b96e 	b.w	8000f7c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468c      	mov	ip, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8083 	bne.w	8000dce <__udivmoddi4+0x116>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d947      	bls.n	8000d5e <__udivmoddi4+0xa6>
 8000cce:	fab2 f282 	clz	r2, r2
 8000cd2:	b142      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	f1c2 0020 	rsb	r0, r2, #32
 8000cd8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cdc:	4091      	lsls	r1, r2
 8000cde:	4097      	lsls	r7, r2
 8000ce0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbbc f6f8 	udiv	r6, ip, r8
 8000cf0:	fa1f fe87 	uxth.w	lr, r7
 8000cf4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfc:	fb06 f10e 	mul.w	r1, r6, lr
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18fb      	adds	r3, r7, r3
 8000d06:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d0a:	f080 8119 	bcs.w	8000f40 <__udivmoddi4+0x288>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8116 	bls.w	8000f40 <__udivmoddi4+0x288>
 8000d14:	3e02      	subs	r6, #2
 8000d16:	443b      	add	r3, r7
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d20:	fb08 3310 	mls	r3, r8, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d2c:	45a6      	cmp	lr, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	193c      	adds	r4, r7, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d36:	f080 8105 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d3a:	45a6      	cmp	lr, r4
 8000d3c:	f240 8102 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d40:	3802      	subs	r0, #2
 8000d42:	443c      	add	r4, r7
 8000d44:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d48:	eba4 040e 	sub.w	r4, r4, lr
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	b11d      	cbz	r5, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c5 4300 	strd	r4, r3, [r5]
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	b902      	cbnz	r2, 8000d62 <__udivmoddi4+0xaa>
 8000d60:	deff      	udf	#255	; 0xff
 8000d62:	fab2 f282 	clz	r2, r2
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	d150      	bne.n	8000e0c <__udivmoddi4+0x154>
 8000d6a:	1bcb      	subs	r3, r1, r7
 8000d6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d70:	fa1f f887 	uxth.w	r8, r7
 8000d74:	2601      	movs	r6, #1
 8000d76:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d7a:	0c21      	lsrs	r1, r4, #16
 8000d7c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb08 f30c 	mul.w	r3, r8, ip
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0xe2>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	f200 80e9 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1ac9      	subs	r1, r1, r3
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000da8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x10c>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x10a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80d9 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e7bf      	b.n	8000d4e <__udivmoddi4+0x96>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0x12e>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80b1 	beq.w	8000f3a <__udivmoddi4+0x282>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x1cc>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0x140>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80b8 	bhi.w	8000f68 <__udivmoddi4+0x2b0>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0103 	sbc.w	r1, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	468c      	mov	ip, r1
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0a8      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000e06:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e0a:	e7a5      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f603 	lsr.w	r6, r0, r3
 8000e14:	4097      	lsls	r7, r2
 8000e16:	fa01 f002 	lsl.w	r0, r1, r2
 8000e1a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1e:	40d9      	lsrs	r1, r3
 8000e20:	4330      	orrs	r0, r6
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e28:	fa1f f887 	uxth.w	r8, r7
 8000e2c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e34:	fb06 f108 	mul.w	r1, r6, r8
 8000e38:	4299      	cmp	r1, r3
 8000e3a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3e:	d909      	bls.n	8000e54 <__udivmoddi4+0x19c>
 8000e40:	18fb      	adds	r3, r7, r3
 8000e42:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e46:	f080 808d 	bcs.w	8000f64 <__udivmoddi4+0x2ac>
 8000e4a:	4299      	cmp	r1, r3
 8000e4c:	f240 808a 	bls.w	8000f64 <__udivmoddi4+0x2ac>
 8000e50:	3e02      	subs	r6, #2
 8000e52:	443b      	add	r3, r7
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b281      	uxth	r1, r0
 8000e58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e64:	fb00 f308 	mul.w	r3, r0, r8
 8000e68:	428b      	cmp	r3, r1
 8000e6a:	d907      	bls.n	8000e7c <__udivmoddi4+0x1c4>
 8000e6c:	1879      	adds	r1, r7, r1
 8000e6e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e72:	d273      	bcs.n	8000f5c <__udivmoddi4+0x2a4>
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d971      	bls.n	8000f5c <__udivmoddi4+0x2a4>
 8000e78:	3802      	subs	r0, #2
 8000e7a:	4439      	add	r1, r7
 8000e7c:	1acb      	subs	r3, r1, r3
 8000e7e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e82:	e778      	b.n	8000d76 <__udivmoddi4+0xbe>
 8000e84:	f1c6 0c20 	rsb	ip, r6, #32
 8000e88:	fa03 f406 	lsl.w	r4, r3, r6
 8000e8c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e90:	431c      	orrs	r4, r3
 8000e92:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e9e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ea2:	431f      	orrs	r7, r3
 8000ea4:	0c3b      	lsrs	r3, r7, #16
 8000ea6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eaa:	fa1f f884 	uxth.w	r8, r4
 8000eae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eb2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000eb6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eba:	458a      	cmp	sl, r1
 8000ebc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x220>
 8000ec6:	1861      	adds	r1, r4, r1
 8000ec8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ecc:	d248      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000ece:	458a      	cmp	sl, r1
 8000ed0:	d946      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000ed2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ed6:	4421      	add	r1, r4
 8000ed8:	eba1 010a 	sub.w	r1, r1, sl
 8000edc:	b2bf      	uxth	r7, r7
 8000ede:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ee2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ee6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eea:	fb00 f808 	mul.w	r8, r0, r8
 8000eee:	45b8      	cmp	r8, r7
 8000ef0:	d907      	bls.n	8000f02 <__udivmoddi4+0x24a>
 8000ef2:	19e7      	adds	r7, r4, r7
 8000ef4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ef8:	d22e      	bcs.n	8000f58 <__udivmoddi4+0x2a0>
 8000efa:	45b8      	cmp	r8, r7
 8000efc:	d92c      	bls.n	8000f58 <__udivmoddi4+0x2a0>
 8000efe:	3802      	subs	r0, #2
 8000f00:	4427      	add	r7, r4
 8000f02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f06:	eba7 0708 	sub.w	r7, r7, r8
 8000f0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f0e:	454f      	cmp	r7, r9
 8000f10:	46c6      	mov	lr, r8
 8000f12:	4649      	mov	r1, r9
 8000f14:	d31a      	bcc.n	8000f4c <__udivmoddi4+0x294>
 8000f16:	d017      	beq.n	8000f48 <__udivmoddi4+0x290>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x27a>
 8000f1a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f1e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f22:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f26:	40f2      	lsrs	r2, r6
 8000f28:	ea4c 0202 	orr.w	r2, ip, r2
 8000f2c:	40f7      	lsrs	r7, r6
 8000f2e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f32:	2600      	movs	r6, #0
 8000f34:	4631      	mov	r1, r6
 8000f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e70b      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6fd      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f48:	4543      	cmp	r3, r8
 8000f4a:	d2e5      	bcs.n	8000f18 <__udivmoddi4+0x260>
 8000f4c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f50:	eb69 0104 	sbc.w	r1, r9, r4
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7df      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e7d2      	b.n	8000f02 <__udivmoddi4+0x24a>
 8000f5c:	4660      	mov	r0, ip
 8000f5e:	e78d      	b.n	8000e7c <__udivmoddi4+0x1c4>
 8000f60:	4681      	mov	r9, r0
 8000f62:	e7b9      	b.n	8000ed8 <__udivmoddi4+0x220>
 8000f64:	4666      	mov	r6, ip
 8000f66:	e775      	b.n	8000e54 <__udivmoddi4+0x19c>
 8000f68:	4630      	mov	r0, r6
 8000f6a:	e74a      	b.n	8000e02 <__udivmoddi4+0x14a>
 8000f6c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f70:	4439      	add	r1, r7
 8000f72:	e713      	b.n	8000d9c <__udivmoddi4+0xe4>
 8000f74:	3802      	subs	r0, #2
 8000f76:	443c      	add	r4, r7
 8000f78:	e724      	b.n	8000dc4 <__udivmoddi4+0x10c>
 8000f7a:	bf00      	nop

08000f7c <__aeabi_idiv0>:
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <main>:
 * Step length
 */
float step_length = 0.7;//in meter

int main(void)
{
 8000f80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f84:	b0fd      	sub	sp, #500	; 0x1f4
 8000f86:	af04      	add	r7, sp, #16
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f88:	f001 fe4c 	bl	8002c24 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8000f8c:	f001 fb2c 	bl	80025e8 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f90:	f001 fbf0 	bl	8002774 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000f94:	f001 fbc4 	bl	8002720 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 8000f98:	f001 fb94 	bl	80026c4 <MX_I2C1_Init>

	/* USER CODE BEGIN 2 */
	__HAL_RCC_I2C1_CLK_ENABLE();
 8000f9c:	1d3b      	adds	r3, r7, #4
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	4b48      	ldr	r3, [pc, #288]	; (80010c4 <main+0x144>)
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa6:	4a47      	ldr	r2, [pc, #284]	; (80010c4 <main+0x144>)
 8000fa8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fac:	6413      	str	r3, [r2, #64]	; 0x40
 8000fae:	4b45      	ldr	r3, [pc, #276]	; (80010c4 <main+0x144>)
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb2:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8000fb6:	1d3b      	adds	r3, r7, #4
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	1d3b      	adds	r3, r7, #4
 8000fbc:	681b      	ldr	r3, [r3, #0]
	char aTxBuffer[16];//Buffer for UART string
	char clear[7] = "\x1B[2J";//Clear Console Command (macOS Terminal)
 8000fbe:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8000fc2:	4941      	ldr	r1, [pc, #260]	; (80010c8 <main+0x148>)
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	c903      	ldmia	r1, {r0, r1}
 8000fc8:	6018      	str	r0, [r3, #0]
 8000fca:	3304      	adds	r3, #4
 8000fcc:	7019      	strb	r1, [r3, #0]
 8000fce:	1d53      	adds	r3, r2, #5
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	801a      	strh	r2, [r3, #0]

	/*
	 * Start LED ON
	 */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);//Signals the system is on
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	2120      	movs	r1, #32
 8000fd8:	483c      	ldr	r0, [pc, #240]	; (80010cc <main+0x14c>)
 8000fda:	f002 f94b 	bl	8003274 <HAL_GPIO_WritePin>

	/*
	* Clear console
	*/
	HAL_UART_Transmit(&huart2,  (uint8_t*)clear, sizeof(clear), 100);
 8000fde:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8000fe2:	2364      	movs	r3, #100	; 0x64
 8000fe4:	2207      	movs	r2, #7
 8000fe6:	483a      	ldr	r0, [pc, #232]	; (80010d0 <main+0x150>)
 8000fe8:	f004 f803 	bl	8004ff2 <HAL_UART_Transmit>

	/*
	 * I2C SCANNER
	 */
	HAL_UART_Transmit(&huart2,  (uint8_t*)"I2C Scan\n\r", 11, 100);
 8000fec:	2364      	movs	r3, #100	; 0x64
 8000fee:	220b      	movs	r2, #11
 8000ff0:	4938      	ldr	r1, [pc, #224]	; (80010d4 <main+0x154>)
 8000ff2:	4837      	ldr	r0, [pc, #220]	; (80010d0 <main+0x150>)
 8000ff4:	f003 fffd 	bl	8004ff2 <HAL_UART_Transmit>
	for (uint8_t i = 0; i < 128; i++) {
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	f887 31b1 	strb.w	r3, [r7, #433]	; 0x1b1
 8000ffe:	e021      	b.n	8001044 <main+0xc4>
		if (HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 3, 5) == HAL_OK) {
 8001000:	f897 31b1 	ldrb.w	r3, [r7, #433]	; 0x1b1
 8001004:	b29b      	uxth	r3, r3
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	b299      	uxth	r1, r3
 800100a:	2305      	movs	r3, #5
 800100c:	2203      	movs	r2, #3
 800100e:	4832      	ldr	r0, [pc, #200]	; (80010d8 <main+0x158>)
 8001010:	f002 fdae 	bl	8003b70 <HAL_I2C_IsDeviceReady>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d10f      	bne.n	800103a <main+0xba>
			HAL_UART_Transmit(&huart2, (uint8_t*)aTxBuffer, sprintf(aTxBuffer, "%d\n\r", i), 100);
 800101a:	f897 21b1 	ldrb.w	r2, [r7, #433]	; 0x1b1
 800101e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001022:	492e      	ldr	r1, [pc, #184]	; (80010dc <main+0x15c>)
 8001024:	4618      	mov	r0, r3
 8001026:	f004 ff49 	bl	8005ebc <siprintf>
 800102a:	4603      	mov	r3, r0
 800102c:	b29a      	uxth	r2, r3
 800102e:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 8001032:	2364      	movs	r3, #100	; 0x64
 8001034:	4826      	ldr	r0, [pc, #152]	; (80010d0 <main+0x150>)
 8001036:	f003 ffdc 	bl	8004ff2 <HAL_UART_Transmit>
	for (uint8_t i = 0; i < 128; i++) {
 800103a:	f897 31b1 	ldrb.w	r3, [r7, #433]	; 0x1b1
 800103e:	3301      	adds	r3, #1
 8001040:	f887 31b1 	strb.w	r3, [r7, #433]	; 0x1b1
 8001044:	f997 31b1 	ldrsb.w	r3, [r7, #433]	; 0x1b1
 8001048:	2b00      	cmp	r3, #0
 800104a:	dad9      	bge.n	8001000 <main+0x80>
		}
	}
	HAL_UART_Transmit(&huart2,  (uint8_t*)"Scanned\n\r", 10, 100);
 800104c:	2364      	movs	r3, #100	; 0x64
 800104e:	220a      	movs	r2, #10
 8001050:	4923      	ldr	r1, [pc, #140]	; (80010e0 <main+0x160>)
 8001052:	481f      	ldr	r0, [pc, #124]	; (80010d0 <main+0x150>)
 8001054:	f003 ffcd 	bl	8004ff2 <HAL_UART_Transmit>

	/*
	 * Start up
	 */
	HAL_Delay(500);
 8001058:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800105c:	f001 fe54 	bl	8002d08 <HAL_Delay>
	 * *************************************** Accelerometer Start Up Sequence ***************************************
	 */
	/*
	 * Check Communication from Accelerometer
	 */
	char acc_enabled[30] = "Accelerometer Enabled\n\r";// UART Buffer
 8001060:	f107 06b0 	add.w	r6, r7, #176	; 0xb0
 8001064:	4b1f      	ldr	r3, [pc, #124]	; (80010e4 <main+0x164>)
 8001066:	4634      	mov	r4, r6
 8001068:	461d      	mov	r5, r3
 800106a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800106c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800106e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001072:	e884 0003 	stmia.w	r4, {r0, r1}
 8001076:	f106 0318 	add.w	r3, r6, #24
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	809a      	strh	r2, [r3, #4]
	uint8_t who_am_i_a_val;
	HAL_StatusTypeDef who_am_i_a_status = HAL_I2C_Mem_Read(&hi2c1, (ACC<<1)|0x1 , WHO_AM_I_A, 1, &who_am_i_a_val, 1, 50);// Read WHOAMI
 8001080:	2332      	movs	r3, #50	; 0x32
 8001082:	9302      	str	r3, [sp, #8]
 8001084:	2301      	movs	r3, #1
 8001086:	9301      	str	r3, [sp, #4]
 8001088:	f107 03af 	add.w	r3, r7, #175	; 0xaf
 800108c:	9300      	str	r3, [sp, #0]
 800108e:	2301      	movs	r3, #1
 8001090:	220f      	movs	r2, #15
 8001092:	2133      	movs	r1, #51	; 0x33
 8001094:	4810      	ldr	r0, [pc, #64]	; (80010d8 <main+0x158>)
 8001096:	f002 fb45 	bl	8003724 <HAL_I2C_Mem_Read>
 800109a:	4603      	mov	r3, r0
 800109c:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
	char ACC_Buffer[32];
	if (who_am_i_a_status == HAL_OK && who_am_i_a_val == 51) {// Who Am I register check
 80010a0:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d11f      	bne.n	80010e8 <main+0x168>
 80010a8:	f107 03af 	add.w	r3, r7, #175	; 0xaf
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	2b33      	cmp	r3, #51	; 0x33
 80010b0:	d11a      	bne.n	80010e8 <main+0x168>
		HAL_UART_Transmit(&huart2, (uint8_t*)acc_enabled , sizeof(acc_enabled), 100);//OK
 80010b2:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 80010b6:	2364      	movs	r3, #100	; 0x64
 80010b8:	221e      	movs	r2, #30
 80010ba:	4805      	ldr	r0, [pc, #20]	; (80010d0 <main+0x150>)
 80010bc:	f003 ff99 	bl	8004ff2 <HAL_UART_Transmit>
 80010c0:	e026      	b.n	8001110 <main+0x190>
 80010c2:	bf00      	nop
 80010c4:	40023800 	.word	0x40023800
 80010c8:	080097f8 	.word	0x080097f8
 80010cc:	40020000 	.word	0x40020000
 80010d0:	20000284 	.word	0x20000284
 80010d4:	08009740 	.word	0x08009740
 80010d8:	20000230 	.word	0x20000230
 80010dc:	0800974c 	.word	0x0800974c
 80010e0:	08009754 	.word	0x08009754
 80010e4:	08009800 	.word	0x08009800
	} else if (who_am_i_a_status != HAL_OK) {
 80010e8:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d00f      	beq.n	8001110 <main+0x190>
		HAL_UART_Transmit(&huart2,  (uint8_t*)ACC_Buffer, sprintf(ACC_Buffer, "%d\n\r", who_am_i_a_status), 100);//BAD
 80010f0:	f897 2157 	ldrb.w	r2, [r7, #343]	; 0x157
 80010f4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80010f8:	4998      	ldr	r1, [pc, #608]	; (800135c <main+0x3dc>)
 80010fa:	4618      	mov	r0, r3
 80010fc:	f004 fede 	bl	8005ebc <siprintf>
 8001100:	4603      	mov	r3, r0
 8001102:	b29a      	uxth	r2, r3
 8001104:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8001108:	2364      	movs	r3, #100	; 0x64
 800110a:	4895      	ldr	r0, [pc, #596]	; (8001360 <main+0x3e0>)
 800110c:	f003 ff71 	bl	8004ff2 <HAL_UART_Transmit>
	}
	/*
	 * Set Control Registers
	 */
	uint8_t CTRL_REG1_A_val = 0x57;
 8001110:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 8001114:	2257      	movs	r2, #87	; 0x57
 8001116:	701a      	strb	r2, [r3, #0]
	uint8_t CTRL_REG2_A_val = 0x00;
 8001118:	f107 038a 	add.w	r3, r7, #138	; 0x8a
 800111c:	2200      	movs	r2, #0
 800111e:	701a      	strb	r2, [r3, #0]
	uint8_t CTRL_REG3_A_val = 0x00;
 8001120:	f107 0389 	add.w	r3, r7, #137	; 0x89
 8001124:	2200      	movs	r2, #0
 8001126:	701a      	strb	r2, [r3, #0]
	uint8_t CTRL_REG4_A_val = 0x81;
 8001128:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800112c:	2281      	movs	r2, #129	; 0x81
 800112e:	701a      	strb	r2, [r3, #0]

	/*
	 * Set
	 */
	HAL_StatusTypeDef CTRL_REG1_A_status = HAL_I2C_Mem_Write(&hi2c1, (ACC<<1), CTRL_REG1_A, 1, &CTRL_REG1_A_val, 1, 50);
 8001130:	2332      	movs	r3, #50	; 0x32
 8001132:	9302      	str	r3, [sp, #8]
 8001134:	2301      	movs	r3, #1
 8001136:	9301      	str	r3, [sp, #4]
 8001138:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 800113c:	9300      	str	r3, [sp, #0]
 800113e:	2301      	movs	r3, #1
 8001140:	2220      	movs	r2, #32
 8001142:	2132      	movs	r1, #50	; 0x32
 8001144:	4887      	ldr	r0, [pc, #540]	; (8001364 <main+0x3e4>)
 8001146:	f002 f9f3 	bl	8003530 <HAL_I2C_Mem_Write>
 800114a:	4603      	mov	r3, r0
 800114c:	f887 3156 	strb.w	r3, [r7, #342]	; 0x156
	HAL_StatusTypeDef CTRL_REG2_A_status = HAL_I2C_Mem_Write(&hi2c1, (ACC<<1), CTRL_REG2_A, 1, &CTRL_REG2_A_val, 1, 50);
 8001150:	2332      	movs	r3, #50	; 0x32
 8001152:	9302      	str	r3, [sp, #8]
 8001154:	2301      	movs	r3, #1
 8001156:	9301      	str	r3, [sp, #4]
 8001158:	f107 038a 	add.w	r3, r7, #138	; 0x8a
 800115c:	9300      	str	r3, [sp, #0]
 800115e:	2301      	movs	r3, #1
 8001160:	2221      	movs	r2, #33	; 0x21
 8001162:	2132      	movs	r1, #50	; 0x32
 8001164:	487f      	ldr	r0, [pc, #508]	; (8001364 <main+0x3e4>)
 8001166:	f002 f9e3 	bl	8003530 <HAL_I2C_Mem_Write>
 800116a:	4603      	mov	r3, r0
 800116c:	f887 3155 	strb.w	r3, [r7, #341]	; 0x155
	HAL_StatusTypeDef CTRL_REG3_A_status = HAL_I2C_Mem_Write(&hi2c1, (ACC<<1), CTRL_REG3_A, 1, &CTRL_REG3_A_val, 1, 50);
 8001170:	2332      	movs	r3, #50	; 0x32
 8001172:	9302      	str	r3, [sp, #8]
 8001174:	2301      	movs	r3, #1
 8001176:	9301      	str	r3, [sp, #4]
 8001178:	f107 0389 	add.w	r3, r7, #137	; 0x89
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	2301      	movs	r3, #1
 8001180:	2222      	movs	r2, #34	; 0x22
 8001182:	2132      	movs	r1, #50	; 0x32
 8001184:	4877      	ldr	r0, [pc, #476]	; (8001364 <main+0x3e4>)
 8001186:	f002 f9d3 	bl	8003530 <HAL_I2C_Mem_Write>
 800118a:	4603      	mov	r3, r0
 800118c:	f887 3154 	strb.w	r3, [r7, #340]	; 0x154
	HAL_StatusTypeDef CTRL_REG4_A_status = HAL_I2C_Mem_Write(&hi2c1, (ACC<<1), CTRL_REG4_A, 1, &CTRL_REG4_A_val, 1, 50);
 8001190:	2332      	movs	r3, #50	; 0x32
 8001192:	9302      	str	r3, [sp, #8]
 8001194:	2301      	movs	r3, #1
 8001196:	9301      	str	r3, [sp, #4]
 8001198:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800119c:	9300      	str	r3, [sp, #0]
 800119e:	2301      	movs	r3, #1
 80011a0:	2223      	movs	r2, #35	; 0x23
 80011a2:	2132      	movs	r1, #50	; 0x32
 80011a4:	486f      	ldr	r0, [pc, #444]	; (8001364 <main+0x3e4>)
 80011a6:	f002 f9c3 	bl	8003530 <HAL_I2C_Mem_Write>
 80011aa:	4603      	mov	r3, r0
 80011ac:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153

	/*
	 * Check if successful
	 */
	if (CTRL_REG1_A_status != HAL_OK) {
 80011b0:	f897 3156 	ldrb.w	r3, [r7, #342]	; 0x156
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d014      	beq.n	80011e2 <main+0x262>
		HAL_UART_Transmit(&huart2,  (uint8_t*)ACC_Buffer, sprintf(ACC_Buffer, "Failed REG1:  %d\n\r", CTRL_REG1_A_status), 100);
 80011b8:	f897 2156 	ldrb.w	r2, [r7, #342]	; 0x156
 80011bc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80011c0:	4969      	ldr	r1, [pc, #420]	; (8001368 <main+0x3e8>)
 80011c2:	4618      	mov	r0, r3
 80011c4:	f004 fe7a 	bl	8005ebc <siprintf>
 80011c8:	4603      	mov	r3, r0
 80011ca:	b29a      	uxth	r2, r3
 80011cc:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 80011d0:	2364      	movs	r3, #100	; 0x64
 80011d2:	4863      	ldr	r0, [pc, #396]	; (8001360 <main+0x3e0>)
 80011d4:	f003 ff0d 	bl	8004ff2 <HAL_UART_Transmit>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);//Turn off LED
 80011d8:	2200      	movs	r2, #0
 80011da:	2120      	movs	r1, #32
 80011dc:	4863      	ldr	r0, [pc, #396]	; (800136c <main+0x3ec>)
 80011de:	f002 f849 	bl	8003274 <HAL_GPIO_WritePin>
	}

	if (CTRL_REG2_A_status != HAL_OK) {
 80011e2:	f897 3155 	ldrb.w	r3, [r7, #341]	; 0x155
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d014      	beq.n	8001214 <main+0x294>
		HAL_UART_Transmit(&huart2,  (uint8_t*)ACC_Buffer, sprintf(ACC_Buffer, "Failed REG2:  %d\n\r", CTRL_REG2_A_status), 100);
 80011ea:	f897 2155 	ldrb.w	r2, [r7, #341]	; 0x155
 80011ee:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80011f2:	495f      	ldr	r1, [pc, #380]	; (8001370 <main+0x3f0>)
 80011f4:	4618      	mov	r0, r3
 80011f6:	f004 fe61 	bl	8005ebc <siprintf>
 80011fa:	4603      	mov	r3, r0
 80011fc:	b29a      	uxth	r2, r3
 80011fe:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8001202:	2364      	movs	r3, #100	; 0x64
 8001204:	4856      	ldr	r0, [pc, #344]	; (8001360 <main+0x3e0>)
 8001206:	f003 fef4 	bl	8004ff2 <HAL_UART_Transmit>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);//Turn off LED
 800120a:	2200      	movs	r2, #0
 800120c:	2120      	movs	r1, #32
 800120e:	4857      	ldr	r0, [pc, #348]	; (800136c <main+0x3ec>)
 8001210:	f002 f830 	bl	8003274 <HAL_GPIO_WritePin>
	}

	if (CTRL_REG3_A_status != HAL_OK) {
 8001214:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8001218:	2b00      	cmp	r3, #0
 800121a:	d014      	beq.n	8001246 <main+0x2c6>
		HAL_UART_Transmit(&huart2,  (uint8_t*)ACC_Buffer, sprintf(ACC_Buffer, "Failed REG3:  %d\n\r", CTRL_REG3_A_status), 100);
 800121c:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8001220:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001224:	4953      	ldr	r1, [pc, #332]	; (8001374 <main+0x3f4>)
 8001226:	4618      	mov	r0, r3
 8001228:	f004 fe48 	bl	8005ebc <siprintf>
 800122c:	4603      	mov	r3, r0
 800122e:	b29a      	uxth	r2, r3
 8001230:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8001234:	2364      	movs	r3, #100	; 0x64
 8001236:	484a      	ldr	r0, [pc, #296]	; (8001360 <main+0x3e0>)
 8001238:	f003 fedb 	bl	8004ff2 <HAL_UART_Transmit>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);//Turn off LED
 800123c:	2200      	movs	r2, #0
 800123e:	2120      	movs	r1, #32
 8001240:	484a      	ldr	r0, [pc, #296]	; (800136c <main+0x3ec>)
 8001242:	f002 f817 	bl	8003274 <HAL_GPIO_WritePin>
	}

	if (CTRL_REG4_A_status != HAL_OK) {
 8001246:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 800124a:	2b00      	cmp	r3, #0
 800124c:	d014      	beq.n	8001278 <main+0x2f8>
		HAL_UART_Transmit(&huart2,  (uint8_t*)ACC_Buffer, sprintf(ACC_Buffer, "Failed REG4:  %d\n\r", CTRL_REG4_A_status), 100);
 800124e:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
 8001252:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001256:	4948      	ldr	r1, [pc, #288]	; (8001378 <main+0x3f8>)
 8001258:	4618      	mov	r0, r3
 800125a:	f004 fe2f 	bl	8005ebc <siprintf>
 800125e:	4603      	mov	r3, r0
 8001260:	b29a      	uxth	r2, r3
 8001262:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8001266:	2364      	movs	r3, #100	; 0x64
 8001268:	483d      	ldr	r0, [pc, #244]	; (8001360 <main+0x3e0>)
 800126a:	f003 fec2 	bl	8004ff2 <HAL_UART_Transmit>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);//Turn off LED
 800126e:	2200      	movs	r2, #0
 8001270:	2120      	movs	r1, #32
 8001272:	483e      	ldr	r0, [pc, #248]	; (800136c <main+0x3ec>)
 8001274:	f001 fffe 	bl	8003274 <HAL_GPIO_WritePin>
	}

	/*
	 * Check Status
	 */
	uint8_t STATUS_REG_A_val = 0;
 8001278:	f107 0387 	add.w	r3, r7, #135	; 0x87
 800127c:	2200      	movs	r2, #0
 800127e:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef STATUS_REG_A_status;

	/*
	 * Read First
	 */
	uint8_t OUT_X_L_A_val = 0x00;
 8001280:	f107 0386 	add.w	r3, r7, #134	; 0x86
 8001284:	2200      	movs	r2, #0
 8001286:	701a      	strb	r2, [r3, #0]
	uint8_t OUT_X_H_A_val = 0x00;
 8001288:	f107 0385 	add.w	r3, r7, #133	; 0x85
 800128c:	2200      	movs	r2, #0
 800128e:	701a      	strb	r2, [r3, #0]
	int16_t OUT_X_A_val = 0x00;
 8001290:	2300      	movs	r3, #0
 8001292:	f8a7 31ae 	strh.w	r3, [r7, #430]	; 0x1ae

	uint8_t OUT_Y_L_A_val = 0x00;
 8001296:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800129a:	2200      	movs	r2, #0
 800129c:	701a      	strb	r2, [r3, #0]
	uint8_t OUT_Y_H_A_val = 0x00;
 800129e:	f107 0383 	add.w	r3, r7, #131	; 0x83
 80012a2:	2200      	movs	r2, #0
 80012a4:	701a      	strb	r2, [r3, #0]
	int16_t OUT_Y_A_val = 0x00;
 80012a6:	2300      	movs	r3, #0
 80012a8:	f8a7 31ac 	strh.w	r3, [r7, #428]	; 0x1ac

	uint8_t OUT_Z_L_A_val = 0x00;
 80012ac:	f107 0382 	add.w	r3, r7, #130	; 0x82
 80012b0:	2200      	movs	r2, #0
 80012b2:	701a      	strb	r2, [r3, #0]
	uint8_t OUT_Z_H_A_val = 0x00;
 80012b4:	f107 0381 	add.w	r3, r7, #129	; 0x81
 80012b8:	2200      	movs	r2, #0
 80012ba:	701a      	strb	r2, [r3, #0]
	int16_t OUT_Z_A_val = 0x00;
 80012bc:	2300      	movs	r3, #0
 80012be:	f8a7 31b2 	strh.w	r3, [r7, #434]	; 0x1b2

	HAL_StatusTypeDef OUT_X_L_A_status = 0x00;
 80012c2:	2300      	movs	r3, #0
 80012c4:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
	HAL_StatusTypeDef OUT_X_H_A_status = 0x00;
 80012c8:	2300      	movs	r3, #0
 80012ca:	f887 3151 	strb.w	r3, [r7, #337]	; 0x151

	HAL_StatusTypeDef OUT_Y_L_A_status = 0x00;
 80012ce:	2300      	movs	r3, #0
 80012d0:	f887 3150 	strb.w	r3, [r7, #336]	; 0x150
	HAL_StatusTypeDef OUT_Y_H_A_status = 0x00;
 80012d4:	2300      	movs	r3, #0
 80012d6:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f

	HAL_StatusTypeDef OUT_Z_L_A_status = 0x00;
 80012da:	2300      	movs	r3, #0
 80012dc:	f887 314e 	strb.w	r3, [r7, #334]	; 0x14e
	HAL_StatusTypeDef OUT_Z_H_A_status = 0x00;
 80012e0:	2300      	movs	r3, #0
 80012e2:	f887 314d 	strb.w	r3, [r7, #333]	; 0x14d
	 * *************************************** Magnetometer Start Up Sequence ***************************************
	 */
	/*
	 * Check Communication from Magnetometer
	 */
	char mag_enabled[50] = "Magnetometer Enabled\n\r";//UART Buffer
 80012e6:	f107 064c 	add.w	r6, r7, #76	; 0x4c
 80012ea:	4b24      	ldr	r3, [pc, #144]	; (800137c <main+0x3fc>)
 80012ec:	4634      	mov	r4, r6
 80012ee:	461d      	mov	r5, r3
 80012f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012f4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80012f8:	6020      	str	r0, [r4, #0]
 80012fa:	3404      	adds	r4, #4
 80012fc:	8021      	strh	r1, [r4, #0]
 80012fe:	3402      	adds	r4, #2
 8001300:	0c0b      	lsrs	r3, r1, #16
 8001302:	7023      	strb	r3, [r4, #0]
 8001304:	f106 0317 	add.w	r3, r6, #23
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	611a      	str	r2, [r3, #16]
 8001314:	615a      	str	r2, [r3, #20]
 8001316:	f8c3 2017 	str.w	r2, [r3, #23]
	uint8_t who_am_i_m_val;
	HAL_StatusTypeDef who_am_i_m_status = HAL_I2C_Mem_Read(&hi2c1, (MAG<<1)|0x1 , WHO_AM_I_M, 1, &who_am_i_m_val, 1, 50);// Read WHOAMI
 800131a:	2332      	movs	r3, #50	; 0x32
 800131c:	9302      	str	r3, [sp, #8]
 800131e:	2301      	movs	r3, #1
 8001320:	9301      	str	r3, [sp, #4]
 8001322:	f107 034b 	add.w	r3, r7, #75	; 0x4b
 8001326:	9300      	str	r3, [sp, #0]
 8001328:	2301      	movs	r3, #1
 800132a:	224f      	movs	r2, #79	; 0x4f
 800132c:	213d      	movs	r1, #61	; 0x3d
 800132e:	480d      	ldr	r0, [pc, #52]	; (8001364 <main+0x3e4>)
 8001330:	f002 f9f8 	bl	8003724 <HAL_I2C_Mem_Read>
 8001334:	4603      	mov	r3, r0
 8001336:	f887 314c 	strb.w	r3, [r7, #332]	; 0x14c
	char MAG_Buffer[32];
	if (who_am_i_m_status == HAL_OK && who_am_i_m_val == 64) {//Check WHO AM I register
 800133a:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800133e:	2b00      	cmp	r3, #0
 8001340:	d11e      	bne.n	8001380 <main+0x400>
 8001342:	f107 034b 	add.w	r3, r7, #75	; 0x4b
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b40      	cmp	r3, #64	; 0x40
 800134a:	d119      	bne.n	8001380 <main+0x400>
		HAL_UART_Transmit(&huart2, (uint8_t*)mag_enabled , sizeof(mag_enabled), 100);//OK
 800134c:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8001350:	2364      	movs	r3, #100	; 0x64
 8001352:	2232      	movs	r2, #50	; 0x32
 8001354:	4802      	ldr	r0, [pc, #8]	; (8001360 <main+0x3e0>)
 8001356:	f003 fe4c 	bl	8004ff2 <HAL_UART_Transmit>
 800135a:	e025      	b.n	80013a8 <main+0x428>
 800135c:	0800974c 	.word	0x0800974c
 8001360:	20000284 	.word	0x20000284
 8001364:	20000230 	.word	0x20000230
 8001368:	08009760 	.word	0x08009760
 800136c:	40020000 	.word	0x40020000
 8001370:	08009774 	.word	0x08009774
 8001374:	08009788 	.word	0x08009788
 8001378:	0800979c 	.word	0x0800979c
 800137c:	08009820 	.word	0x08009820
	} else if (who_am_i_m_status != HAL_OK) {
 8001380:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8001384:	2b00      	cmp	r3, #0
 8001386:	d00f      	beq.n	80013a8 <main+0x428>
		HAL_UART_Transmit(&huart2,  (uint8_t*)MAG_Buffer, sprintf(MAG_Buffer, "%d\n\r", who_am_i_m_status), 100);//BAD
 8001388:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800138c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001390:	498e      	ldr	r1, [pc, #568]	; (80015cc <main+0x64c>)
 8001392:	4618      	mov	r0, r3
 8001394:	f004 fd92 	bl	8005ebc <siprintf>
 8001398:	4603      	mov	r3, r0
 800139a:	b29a      	uxth	r2, r3
 800139c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80013a0:	2364      	movs	r3, #100	; 0x64
 80013a2:	488b      	ldr	r0, [pc, #556]	; (80015d0 <main+0x650>)
 80013a4:	f003 fe25 	bl	8004ff2 <HAL_UART_Transmit>
	}
	/*
	 * Set Control Registers
	 */
	uint8_t CFG_REG_A_M_val = 0x8C;
 80013a8:	f107 0327 	add.w	r3, r7, #39	; 0x27
 80013ac:	228c      	movs	r2, #140	; 0x8c
 80013ae:	701a      	strb	r2, [r3, #0]
	uint8_t CFG_REG_B_M_val = 0x03;
 80013b0:	f107 0326 	add.w	r3, r7, #38	; 0x26
 80013b4:	2203      	movs	r2, #3
 80013b6:	701a      	strb	r2, [r3, #0]
	uint8_t CFG_REG_C_M_val = 0x10;
 80013b8:	f107 0325 	add.w	r3, r7, #37	; 0x25
 80013bc:	2210      	movs	r2, #16
 80013be:	701a      	strb	r2, [r3, #0]

	/*
	 * Set
	 */
	HAL_StatusTypeDef CFG_REG_A_M_Status = HAL_I2C_Mem_Write(&hi2c1, (MAG<<1), CFG_REG_A_M, 1, &CFG_REG_A_M_val, 1, 50);
 80013c0:	2332      	movs	r3, #50	; 0x32
 80013c2:	9302      	str	r3, [sp, #8]
 80013c4:	2301      	movs	r3, #1
 80013c6:	9301      	str	r3, [sp, #4]
 80013c8:	f107 0327 	add.w	r3, r7, #39	; 0x27
 80013cc:	9300      	str	r3, [sp, #0]
 80013ce:	2301      	movs	r3, #1
 80013d0:	2260      	movs	r2, #96	; 0x60
 80013d2:	213c      	movs	r1, #60	; 0x3c
 80013d4:	487f      	ldr	r0, [pc, #508]	; (80015d4 <main+0x654>)
 80013d6:	f002 f8ab 	bl	8003530 <HAL_I2C_Mem_Write>
 80013da:	4603      	mov	r3, r0
 80013dc:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
	HAL_StatusTypeDef CFG_REG_B_M_status = HAL_I2C_Mem_Write(&hi2c1, (MAG<<1), CFG_REG_B_M, 1, &CFG_REG_B_M_val, 1, 50);
 80013e0:	2332      	movs	r3, #50	; 0x32
 80013e2:	9302      	str	r3, [sp, #8]
 80013e4:	2301      	movs	r3, #1
 80013e6:	9301      	str	r3, [sp, #4]
 80013e8:	f107 0326 	add.w	r3, r7, #38	; 0x26
 80013ec:	9300      	str	r3, [sp, #0]
 80013ee:	2301      	movs	r3, #1
 80013f0:	2261      	movs	r2, #97	; 0x61
 80013f2:	213c      	movs	r1, #60	; 0x3c
 80013f4:	4877      	ldr	r0, [pc, #476]	; (80015d4 <main+0x654>)
 80013f6:	f002 f89b 	bl	8003530 <HAL_I2C_Mem_Write>
 80013fa:	4603      	mov	r3, r0
 80013fc:	f887 314a 	strb.w	r3, [r7, #330]	; 0x14a
	HAL_StatusTypeDef CFG_REG_C_M_status = HAL_I2C_Mem_Write(&hi2c1, (MAG<<1), CFG_REG_C_M, 1, &CFG_REG_C_M_val, 1, 50);
 8001400:	2332      	movs	r3, #50	; 0x32
 8001402:	9302      	str	r3, [sp, #8]
 8001404:	2301      	movs	r3, #1
 8001406:	9301      	str	r3, [sp, #4]
 8001408:	f107 0325 	add.w	r3, r7, #37	; 0x25
 800140c:	9300      	str	r3, [sp, #0]
 800140e:	2301      	movs	r3, #1
 8001410:	2262      	movs	r2, #98	; 0x62
 8001412:	213c      	movs	r1, #60	; 0x3c
 8001414:	486f      	ldr	r0, [pc, #444]	; (80015d4 <main+0x654>)
 8001416:	f002 f88b 	bl	8003530 <HAL_I2C_Mem_Write>
 800141a:	4603      	mov	r3, r0
 800141c:	f887 3149 	strb.w	r3, [r7, #329]	; 0x149

	/*
	 * Check if successful
	 */
	if (CFG_REG_A_M_Status != HAL_OK) {
 8001420:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 8001424:	2b00      	cmp	r3, #0
 8001426:	d014      	beq.n	8001452 <main+0x4d2>
		HAL_UART_Transmit(&huart2,  (uint8_t*)MAG_Buffer, sprintf(MAG_Buffer, "Failed REG1:  %d\n\r", CFG_REG_A_M_Status), 100);
 8001428:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 800142c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001430:	4969      	ldr	r1, [pc, #420]	; (80015d8 <main+0x658>)
 8001432:	4618      	mov	r0, r3
 8001434:	f004 fd42 	bl	8005ebc <siprintf>
 8001438:	4603      	mov	r3, r0
 800143a:	b29a      	uxth	r2, r3
 800143c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001440:	2364      	movs	r3, #100	; 0x64
 8001442:	4863      	ldr	r0, [pc, #396]	; (80015d0 <main+0x650>)
 8001444:	f003 fdd5 	bl	8004ff2 <HAL_UART_Transmit>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);//Turn off LED
 8001448:	2200      	movs	r2, #0
 800144a:	2120      	movs	r1, #32
 800144c:	4863      	ldr	r0, [pc, #396]	; (80015dc <main+0x65c>)
 800144e:	f001 ff11 	bl	8003274 <HAL_GPIO_WritePin>
	}

	if (CFG_REG_B_M_status != HAL_OK) {
 8001452:	f897 314a 	ldrb.w	r3, [r7, #330]	; 0x14a
 8001456:	2b00      	cmp	r3, #0
 8001458:	d014      	beq.n	8001484 <main+0x504>
		HAL_UART_Transmit(&huart2,  (uint8_t*)MAG_Buffer, sprintf(MAG_Buffer, "Failed REG2:  %d\n\r", CFG_REG_B_M_status), 100);
 800145a:	f897 214a 	ldrb.w	r2, [r7, #330]	; 0x14a
 800145e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001462:	495f      	ldr	r1, [pc, #380]	; (80015e0 <main+0x660>)
 8001464:	4618      	mov	r0, r3
 8001466:	f004 fd29 	bl	8005ebc <siprintf>
 800146a:	4603      	mov	r3, r0
 800146c:	b29a      	uxth	r2, r3
 800146e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001472:	2364      	movs	r3, #100	; 0x64
 8001474:	4856      	ldr	r0, [pc, #344]	; (80015d0 <main+0x650>)
 8001476:	f003 fdbc 	bl	8004ff2 <HAL_UART_Transmit>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);//Turn off LED
 800147a:	2200      	movs	r2, #0
 800147c:	2120      	movs	r1, #32
 800147e:	4857      	ldr	r0, [pc, #348]	; (80015dc <main+0x65c>)
 8001480:	f001 fef8 	bl	8003274 <HAL_GPIO_WritePin>
	}

	if (CFG_REG_C_M_status != HAL_OK) {
 8001484:	f897 3149 	ldrb.w	r3, [r7, #329]	; 0x149
 8001488:	2b00      	cmp	r3, #0
 800148a:	d014      	beq.n	80014b6 <main+0x536>
		HAL_UART_Transmit(&huart2,  (uint8_t*)MAG_Buffer, sprintf(MAG_Buffer, "Failed REG3:  %d\n\r", CFG_REG_C_M_status), 100);
 800148c:	f897 2149 	ldrb.w	r2, [r7, #329]	; 0x149
 8001490:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001494:	4953      	ldr	r1, [pc, #332]	; (80015e4 <main+0x664>)
 8001496:	4618      	mov	r0, r3
 8001498:	f004 fd10 	bl	8005ebc <siprintf>
 800149c:	4603      	mov	r3, r0
 800149e:	b29a      	uxth	r2, r3
 80014a0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80014a4:	2364      	movs	r3, #100	; 0x64
 80014a6:	484a      	ldr	r0, [pc, #296]	; (80015d0 <main+0x650>)
 80014a8:	f003 fda3 	bl	8004ff2 <HAL_UART_Transmit>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);//Turn off LED
 80014ac:	2200      	movs	r2, #0
 80014ae:	2120      	movs	r1, #32
 80014b0:	484a      	ldr	r0, [pc, #296]	; (80015dc <main+0x65c>)
 80014b2:	f001 fedf 	bl	8003274 <HAL_GPIO_WritePin>
	}

	/*
	 * Check Status
	 */
	uint8_t STATUS_REG_M_val = 0;
 80014b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ba:	2200      	movs	r2, #0
 80014bc:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef STATUS_REG_M_status;

	/*
	 * Read First
	 */
	uint8_t OUTX_L_REG_M_val = 0x00;
 80014be:	f107 0323 	add.w	r3, r7, #35	; 0x23
 80014c2:	2200      	movs	r2, #0
 80014c4:	701a      	strb	r2, [r3, #0]
	uint8_t OUTX_H_REG_M_val = 0x00;
 80014c6:	f107 0322 	add.w	r3, r7, #34	; 0x22
 80014ca:	2200      	movs	r2, #0
 80014cc:	701a      	strb	r2, [r3, #0]
	int16_t OUTX_M_val = 0x00;
 80014ce:	2300      	movs	r3, #0
 80014d0:	f8a7 31b4 	strh.w	r3, [r7, #436]	; 0x1b4

	uint8_t OUTY_L_REG_M_val = 0x00;
 80014d4:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80014d8:	2200      	movs	r2, #0
 80014da:	701a      	strb	r2, [r3, #0]
	uint8_t OUTY_H_REG_M_val = 0x00;
 80014dc:	f107 0320 	add.w	r3, r7, #32
 80014e0:	2200      	movs	r2, #0
 80014e2:	701a      	strb	r2, [r3, #0]
	int16_t OUTY_M_val = 0x00;
 80014e4:	2300      	movs	r3, #0
 80014e6:	f8a7 31cc 	strh.w	r3, [r7, #460]	; 0x1cc

	uint8_t OUTZ_L_REG_M_val = 0x00;
 80014ea:	f107 031f 	add.w	r3, r7, #31
 80014ee:	2200      	movs	r2, #0
 80014f0:	701a      	strb	r2, [r3, #0]
	uint8_t OUTZ_H_REG_M_val = 0x00;
 80014f2:	f107 031e 	add.w	r3, r7, #30
 80014f6:	2200      	movs	r2, #0
 80014f8:	701a      	strb	r2, [r3, #0]
	int16_t OUTZ_M_val = 0x00;
 80014fa:	2300      	movs	r3, #0
 80014fc:	f8a7 31ca 	strh.w	r3, [r7, #458]	; 0x1ca

	HAL_StatusTypeDef OUTX_L_M_status = 0x00;
 8001500:	2300      	movs	r3, #0
 8001502:	f887 3148 	strb.w	r3, [r7, #328]	; 0x148
	HAL_StatusTypeDef OUTX_H_M_status = 0x00;
 8001506:	2300      	movs	r3, #0
 8001508:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	HAL_StatusTypeDef OUTY_L_M_status = 0x00;
 800150c:	2300      	movs	r3, #0
 800150e:	f887 3146 	strb.w	r3, [r7, #326]	; 0x146
	HAL_StatusTypeDef OUTY_H_M_status = 0x00;
 8001512:	2300      	movs	r3, #0
 8001514:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145

	HAL_StatusTypeDef OUTZ_L_M_status = 0x00;
 8001518:	2300      	movs	r3, #0
 800151a:	f887 3144 	strb.w	r3, [r7, #324]	; 0x144
	HAL_StatusTypeDef OUTZ_H_M_status = 0x00;
 800151e:	2300      	movs	r3, #0
 8001520:	f887 3143 	strb.w	r3, [r7, #323]	; 0x143

	/*
	* Button De-bounce
	*/
	int pushed = 0;
 8001524:	2300      	movs	r3, #0
 8001526:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4

	/*
	 * Tick
	 */
	uint32_t current_tick =  HAL_GetTick();
 800152a:	f001 fbe1 	bl	8002cf0 <HAL_GetTick>
 800152e:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c

	/*
	 * Step Detector Variables
	 */
	uint8_t step_counting = 0;
 8001532:	2300      	movs	r3, #0
 8001534:	f887 31c3 	strb.w	r3, [r7, #451]	; 0x1c3
	uint16_t steps = 0;
 8001538:	2300      	movs	r3, #0
 800153a:	f8a7 31b6 	strh.w	r3, [r7, #438]	; 0x1b6
	uint32_t increase_prev = 0;
 800153e:	2300      	movs	r3, #0
 8001540:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8

	/*
	 * Orientation Variables
	 */
	float initial_yaw = 0;
 8001544:	f04f 0300 	mov.w	r3, #0
 8001548:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
	uint8_t offset_measure = 0;
 800154c:	2300      	movs	r3, #0
 800154e:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
	float offset = 11.9758333333;
 8001552:	4b25      	ldr	r3, [pc, #148]	; (80015e8 <main+0x668>)
 8001554:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
	float yaw = 0;
 8001558:	f04f 0300 	mov.w	r3, #0
 800155c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4

	/*
	 * Previous Coordinate
	 */
	float x_pos_prev = 0;
 8001560:	f04f 0300 	mov.w	r3, #0
 8001564:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
	float y_pos_prev = 0;
 8001568:	f04f 0300 	mov.w	r3, #0
 800156c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc

	/*
	 * Send Coordinate Flag
	 */
	uint8_t ready_to_send = 0;
 8001570:	2300      	movs	r3, #0
 8001572:	f887 31ab 	strb.w	r3, [r7, #427]	; 0x1ab

	/*
	 * Stationary G values (offset)
	 */
	float stationary_x = 0;
 8001576:	f04f 0300 	mov.w	r3, #0
 800157a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
	float stationary_y = 0;
 800157e:	f04f 0300 	mov.w	r3, #0
 8001582:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	float stationary_z = 0;
 8001586:	f04f 0300 	mov.w	r3, #0
 800158a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

	/*
	 * Average Accelerometer Variables
	 */
	float avg_x_a = 0;
 800158e:	f04f 0300 	mov.w	r3, #0
 8001592:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
	float avg_y_a = 0;
 8001596:	f04f 0300 	mov.w	r3, #0
 800159a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
	float avg_z_a = 0;
 800159e:	f04f 0300 	mov.w	r3, #0
 80015a2:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
	uint8_t offset_avg_count = 0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197

	/*
	 * Average Magnetometer Variables
	 */
	float avg_x_m = 0;
 80015ac:	f04f 0300 	mov.w	r3, #0
 80015b0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
	float avg_y_m = 0;
 80015b4:	f04f 0300 	mov.w	r3, #0
 80015b8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
	float avg_z_m = 0;
 80015bc:	f04f 0300 	mov.w	r3, #0
 80015c0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	/*
	 * Moving Average - Angle Variables
	 */
	float angles[5];
	float angle_avg;
	for (int i = 0; i<sizeof(angles)/sizeof(float); i++) {
 80015c4:	2300      	movs	r3, #0
 80015c6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80015ca:	e01d      	b.n	8001608 <main+0x688>
 80015cc:	0800974c 	.word	0x0800974c
 80015d0:	20000284 	.word	0x20000284
 80015d4:	20000230 	.word	0x20000230
 80015d8:	08009760 	.word	0x08009760
 80015dc:	40020000 	.word	0x40020000
 80015e0:	08009774 	.word	0x08009774
 80015e4:	08009788 	.word	0x08009788
 80015e8:	413f9d03 	.word	0x413f9d03
		angles[i] = 0;//Initialise Array
 80015ec:	f107 0208 	add.w	r2, r7, #8
 80015f0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	4413      	add	r3, r2
 80015f8:	f04f 0200 	mov.w	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
	for (int i = 0; i<sizeof(angles)/sizeof(float); i++) {
 80015fe:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001602:	3301      	adds	r3, #1
 8001604:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001608:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800160c:	2b04      	cmp	r3, #4
 800160e:	d9ed      	bls.n	80015ec <main+0x66c>
	}
	float turn_prev = 0;
 8001610:	f04f 0300 	mov.w	r3, #0
 8001614:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
	uint8_t angle_count = 0;
 8001618:	2300      	movs	r3, #0
 800161a:	f887 317b 	strb.w	r3, [r7, #379]	; 0x17b

	//Loop
	while (1)
	{
		//Read if new data is available
		STATUS_REG_A_status = HAL_I2C_Mem_Read(&hi2c1, (ACC<<1)|0x1, STATUS_REG_A, 1, &STATUS_REG_A_val, 1, 50);
 800161e:	2332      	movs	r3, #50	; 0x32
 8001620:	9302      	str	r3, [sp, #8]
 8001622:	2301      	movs	r3, #1
 8001624:	9301      	str	r3, [sp, #4]
 8001626:	f107 0387 	add.w	r3, r7, #135	; 0x87
 800162a:	9300      	str	r3, [sp, #0]
 800162c:	2301      	movs	r3, #1
 800162e:	2227      	movs	r2, #39	; 0x27
 8001630:	2133      	movs	r1, #51	; 0x33
 8001632:	48d3      	ldr	r0, [pc, #844]	; (8001980 <main+0xa00>)
 8001634:	f002 f876 	bl	8003724 <HAL_I2C_Mem_Read>
 8001638:	4603      	mov	r3, r0
 800163a:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133

		if (STATUS_REG_A_status == HAL_OK && ((STATUS_REG_A_val & 0x08)>>3) == 1) {//Yes
 800163e:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8001642:	2b00      	cmp	r3, #0
 8001644:	f040 847a 	bne.w	8001f3c <main+0xfbc>
 8001648:	f107 0387 	add.w	r3, r7, #135	; 0x87
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	f003 0308 	and.w	r3, r3, #8
 8001652:	2b00      	cmp	r3, #0
 8001654:	f000 8472 	beq.w	8001f3c <main+0xfbc>
 8001658:	466b      	mov	r3, sp
 800165a:	461e      	mov	r6, r3
			/*
			 * Sampling
			 */
			uint8_t sample_a = 5;
 800165c:	2305      	movs	r3, #5
 800165e:	f887 3132 	strb.w	r3, [r7, #306]	; 0x132
			int16_t arr_x_a[sample_a];
 8001662:	f897 4132 	ldrb.w	r4, [r7, #306]	; 0x132
 8001666:	4623      	mov	r3, r4
 8001668:	3b01      	subs	r3, #1
 800166a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800166e:	b2e0      	uxtb	r0, r4
 8001670:	f04f 0100 	mov.w	r1, #0
 8001674:	f04f 0200 	mov.w	r2, #0
 8001678:	f04f 0300 	mov.w	r3, #0
 800167c:	010b      	lsls	r3, r1, #4
 800167e:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8001682:	0102      	lsls	r2, r0, #4
 8001684:	b2e0      	uxtb	r0, r4
 8001686:	f04f 0100 	mov.w	r1, #0
 800168a:	f04f 0200 	mov.w	r2, #0
 800168e:	f04f 0300 	mov.w	r3, #0
 8001692:	010b      	lsls	r3, r1, #4
 8001694:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8001698:	0102      	lsls	r2, r0, #4
 800169a:	4623      	mov	r3, r4
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	3307      	adds	r3, #7
 80016a0:	08db      	lsrs	r3, r3, #3
 80016a2:	00db      	lsls	r3, r3, #3
 80016a4:	ebad 0d03 	sub.w	sp, sp, r3
 80016a8:	ab04      	add	r3, sp, #16
 80016aa:	3301      	adds	r3, #1
 80016ac:	085b      	lsrs	r3, r3, #1
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
			int16_t arr_y_a[sample_a];
 80016b4:	f897 4132 	ldrb.w	r4, [r7, #306]	; 0x132
 80016b8:	4623      	mov	r3, r4
 80016ba:	3b01      	subs	r3, #1
 80016bc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80016c0:	b2e0      	uxtb	r0, r4
 80016c2:	f04f 0100 	mov.w	r1, #0
 80016c6:	f04f 0200 	mov.w	r2, #0
 80016ca:	f04f 0300 	mov.w	r3, #0
 80016ce:	010b      	lsls	r3, r1, #4
 80016d0:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 80016d4:	0102      	lsls	r2, r0, #4
 80016d6:	b2e0      	uxtb	r0, r4
 80016d8:	f04f 0100 	mov.w	r1, #0
 80016dc:	f04f 0200 	mov.w	r2, #0
 80016e0:	f04f 0300 	mov.w	r3, #0
 80016e4:	010b      	lsls	r3, r1, #4
 80016e6:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 80016ea:	0102      	lsls	r2, r0, #4
 80016ec:	4623      	mov	r3, r4
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	3307      	adds	r3, #7
 80016f2:	08db      	lsrs	r3, r3, #3
 80016f4:	00db      	lsls	r3, r3, #3
 80016f6:	ebad 0d03 	sub.w	sp, sp, r3
 80016fa:	ab04      	add	r3, sp, #16
 80016fc:	3301      	adds	r3, #1
 80016fe:	085b      	lsrs	r3, r3, #1
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
			int16_t arr_z_a[sample_a];
 8001706:	f897 4132 	ldrb.w	r4, [r7, #306]	; 0x132
 800170a:	4623      	mov	r3, r4
 800170c:	3b01      	subs	r3, #1
 800170e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001712:	b2e0      	uxtb	r0, r4
 8001714:	f04f 0100 	mov.w	r1, #0
 8001718:	f04f 0200 	mov.w	r2, #0
 800171c:	f04f 0300 	mov.w	r3, #0
 8001720:	010b      	lsls	r3, r1, #4
 8001722:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8001726:	0102      	lsls	r2, r0, #4
 8001728:	b2e0      	uxtb	r0, r4
 800172a:	f04f 0100 	mov.w	r1, #0
 800172e:	f04f 0200 	mov.w	r2, #0
 8001732:	f04f 0300 	mov.w	r3, #0
 8001736:	010b      	lsls	r3, r1, #4
 8001738:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 800173c:	0102      	lsls	r2, r0, #4
 800173e:	4623      	mov	r3, r4
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	3307      	adds	r3, #7
 8001744:	08db      	lsrs	r3, r3, #3
 8001746:	00db      	lsls	r3, r3, #3
 8001748:	ebad 0d03 	sub.w	sp, sp, r3
 800174c:	ab04      	add	r3, sp, #16
 800174e:	3301      	adds	r3, #1
 8001750:	085b      	lsrs	r3, r3, #1
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
			// Samples for five times
			for (int i=0;i<sample_a;i++) {
 8001758:	2300      	movs	r3, #0
 800175a:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 800175e:	e104      	b.n	800196a <main+0x9ea>
				STATUS_REG_A_status = HAL_I2C_Mem_Read(&hi2c1, (ACC<<1)|0x1, STATUS_REG_A, 1, &STATUS_REG_A_val, 1, 50);
 8001760:	2332      	movs	r3, #50	; 0x32
 8001762:	9302      	str	r3, [sp, #8]
 8001764:	2301      	movs	r3, #1
 8001766:	9301      	str	r3, [sp, #4]
 8001768:	f107 0387 	add.w	r3, r7, #135	; 0x87
 800176c:	9300      	str	r3, [sp, #0]
 800176e:	2301      	movs	r3, #1
 8001770:	2227      	movs	r2, #39	; 0x27
 8001772:	2133      	movs	r1, #51	; 0x33
 8001774:	4882      	ldr	r0, [pc, #520]	; (8001980 <main+0xa00>)
 8001776:	f001 ffd5 	bl	8003724 <HAL_I2C_Mem_Read>
 800177a:	4603      	mov	r3, r0
 800177c:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
				while (((STATUS_REG_A_val & 0x08)>>3) != 1) {// Wait until new values are ready
 8001780:	e00f      	b.n	80017a2 <main+0x822>
					STATUS_REG_A_status = HAL_I2C_Mem_Read(&hi2c1, (ACC<<1)|0x1, STATUS_REG_A, 1, &STATUS_REG_A_val, 1, 50);
 8001782:	2332      	movs	r3, #50	; 0x32
 8001784:	9302      	str	r3, [sp, #8]
 8001786:	2301      	movs	r3, #1
 8001788:	9301      	str	r3, [sp, #4]
 800178a:	f107 0387 	add.w	r3, r7, #135	; 0x87
 800178e:	9300      	str	r3, [sp, #0]
 8001790:	2301      	movs	r3, #1
 8001792:	2227      	movs	r2, #39	; 0x27
 8001794:	2133      	movs	r1, #51	; 0x33
 8001796:	487a      	ldr	r0, [pc, #488]	; (8001980 <main+0xa00>)
 8001798:	f001 ffc4 	bl	8003724 <HAL_I2C_Mem_Read>
 800179c:	4603      	mov	r3, r0
 800179e:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
				while (((STATUS_REG_A_val & 0x08)>>3) != 1) {// Wait until new values are ready
 80017a2:	f107 0387 	add.w	r3, r7, #135	; 0x87
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	f003 0308 	and.w	r3, r3, #8
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d0e8      	beq.n	8001782 <main+0x802>
				}

				// Store
				OUT_X_L_A_status = HAL_I2C_Mem_Read(&hi2c1, (ACC<<1)|0x1, OUT_X_L_A, 1, &OUT_X_L_A_val, 1, 50);
 80017b0:	2332      	movs	r3, #50	; 0x32
 80017b2:	9302      	str	r3, [sp, #8]
 80017b4:	2301      	movs	r3, #1
 80017b6:	9301      	str	r3, [sp, #4]
 80017b8:	f107 0386 	add.w	r3, r7, #134	; 0x86
 80017bc:	9300      	str	r3, [sp, #0]
 80017be:	2301      	movs	r3, #1
 80017c0:	2228      	movs	r2, #40	; 0x28
 80017c2:	2133      	movs	r1, #51	; 0x33
 80017c4:	486e      	ldr	r0, [pc, #440]	; (8001980 <main+0xa00>)
 80017c6:	f001 ffad 	bl	8003724 <HAL_I2C_Mem_Read>
 80017ca:	4603      	mov	r3, r0
 80017cc:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
				OUT_X_H_A_status = HAL_I2C_Mem_Read(&hi2c1, (ACC<<1)|0x1, OUT_X_H_A, 1, &OUT_X_H_A_val, 1, 50);
 80017d0:	2332      	movs	r3, #50	; 0x32
 80017d2:	9302      	str	r3, [sp, #8]
 80017d4:	2301      	movs	r3, #1
 80017d6:	9301      	str	r3, [sp, #4]
 80017d8:	f107 0385 	add.w	r3, r7, #133	; 0x85
 80017dc:	9300      	str	r3, [sp, #0]
 80017de:	2301      	movs	r3, #1
 80017e0:	2229      	movs	r2, #41	; 0x29
 80017e2:	2133      	movs	r1, #51	; 0x33
 80017e4:	4866      	ldr	r0, [pc, #408]	; (8001980 <main+0xa00>)
 80017e6:	f001 ff9d 	bl	8003724 <HAL_I2C_Mem_Read>
 80017ea:	4603      	mov	r3, r0
 80017ec:	f887 3151 	strb.w	r3, [r7, #337]	; 0x151

				OUT_Y_L_A_status = HAL_I2C_Mem_Read(&hi2c1, (ACC<<1)|0x1, OUT_Y_L_A, 1, &OUT_Y_L_A_val, 1, 50);
 80017f0:	2332      	movs	r3, #50	; 0x32
 80017f2:	9302      	str	r3, [sp, #8]
 80017f4:	2301      	movs	r3, #1
 80017f6:	9301      	str	r3, [sp, #4]
 80017f8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80017fc:	9300      	str	r3, [sp, #0]
 80017fe:	2301      	movs	r3, #1
 8001800:	222a      	movs	r2, #42	; 0x2a
 8001802:	2133      	movs	r1, #51	; 0x33
 8001804:	485e      	ldr	r0, [pc, #376]	; (8001980 <main+0xa00>)
 8001806:	f001 ff8d 	bl	8003724 <HAL_I2C_Mem_Read>
 800180a:	4603      	mov	r3, r0
 800180c:	f887 3150 	strb.w	r3, [r7, #336]	; 0x150
				OUT_Y_H_A_status = HAL_I2C_Mem_Read(&hi2c1, (ACC<<1)|0x1, OUT_Y_H_A, 1, &OUT_Y_H_A_val, 1, 50);
 8001810:	2332      	movs	r3, #50	; 0x32
 8001812:	9302      	str	r3, [sp, #8]
 8001814:	2301      	movs	r3, #1
 8001816:	9301      	str	r3, [sp, #4]
 8001818:	f107 0383 	add.w	r3, r7, #131	; 0x83
 800181c:	9300      	str	r3, [sp, #0]
 800181e:	2301      	movs	r3, #1
 8001820:	222b      	movs	r2, #43	; 0x2b
 8001822:	2133      	movs	r1, #51	; 0x33
 8001824:	4856      	ldr	r0, [pc, #344]	; (8001980 <main+0xa00>)
 8001826:	f001 ff7d 	bl	8003724 <HAL_I2C_Mem_Read>
 800182a:	4603      	mov	r3, r0
 800182c:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f

				OUT_Z_L_A_status = HAL_I2C_Mem_Read(&hi2c1, (ACC<<1)|0x1, OUT_Z_L_A, 1, &OUT_Z_L_A_val, 1, 50);
 8001830:	2332      	movs	r3, #50	; 0x32
 8001832:	9302      	str	r3, [sp, #8]
 8001834:	2301      	movs	r3, #1
 8001836:	9301      	str	r3, [sp, #4]
 8001838:	f107 0382 	add.w	r3, r7, #130	; 0x82
 800183c:	9300      	str	r3, [sp, #0]
 800183e:	2301      	movs	r3, #1
 8001840:	222c      	movs	r2, #44	; 0x2c
 8001842:	2133      	movs	r1, #51	; 0x33
 8001844:	484e      	ldr	r0, [pc, #312]	; (8001980 <main+0xa00>)
 8001846:	f001 ff6d 	bl	8003724 <HAL_I2C_Mem_Read>
 800184a:	4603      	mov	r3, r0
 800184c:	f887 314e 	strb.w	r3, [r7, #334]	; 0x14e
				OUT_Z_H_A_status = HAL_I2C_Mem_Read(&hi2c1, (ACC<<1)|0x1, OUT_Z_H_A, 1, &OUT_Z_H_A_val, 1, 50);
 8001850:	2332      	movs	r3, #50	; 0x32
 8001852:	9302      	str	r3, [sp, #8]
 8001854:	2301      	movs	r3, #1
 8001856:	9301      	str	r3, [sp, #4]
 8001858:	f107 0381 	add.w	r3, r7, #129	; 0x81
 800185c:	9300      	str	r3, [sp, #0]
 800185e:	2301      	movs	r3, #1
 8001860:	222d      	movs	r2, #45	; 0x2d
 8001862:	2133      	movs	r1, #51	; 0x33
 8001864:	4846      	ldr	r0, [pc, #280]	; (8001980 <main+0xa00>)
 8001866:	f001 ff5d 	bl	8003724 <HAL_I2C_Mem_Read>
 800186a:	4603      	mov	r3, r0
 800186c:	f887 314d 	strb.w	r3, [r7, #333]	; 0x14d

				// Bitwise operations X, Y, Z registers
				if (OUT_X_L_A_status == HAL_OK && OUT_X_H_A_status == HAL_OK) {
 8001870:	f897 3152 	ldrb.w	r3, [r7, #338]	; 0x152
 8001874:	2b00      	cmp	r3, #0
 8001876:	d11b      	bne.n	80018b0 <main+0x930>
 8001878:	f897 3151 	ldrb.w	r3, [r7, #337]	; 0x151
 800187c:	2b00      	cmp	r3, #0
 800187e:	d117      	bne.n	80018b0 <main+0x930>
					OUT_X_A_val = OUT_X_H_A_val;
 8001880:	f107 0385 	add.w	r3, r7, #133	; 0x85
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	f8a7 31ae 	strh.w	r3, [r7, #430]	; 0x1ae
					OUT_X_A_val <<= 8;
 800188a:	f9b7 31ae 	ldrsh.w	r3, [r7, #430]	; 0x1ae
 800188e:	021b      	lsls	r3, r3, #8
 8001890:	f8a7 31ae 	strh.w	r3, [r7, #430]	; 0x1ae
					OUT_X_A_val |= OUT_X_L_A_val;
 8001894:	f107 0386 	add.w	r3, r7, #134	; 0x86
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	b21a      	sxth	r2, r3
 800189c:	f8b7 31ae 	ldrh.w	r3, [r7, #430]	; 0x1ae
 80018a0:	4313      	orrs	r3, r2
 80018a2:	f8a7 31ae 	strh.w	r3, [r7, #430]	; 0x1ae
					OUT_X_A_val >>= 6;
 80018a6:	f9b7 31ae 	ldrsh.w	r3, [r7, #430]	; 0x1ae
 80018aa:	119b      	asrs	r3, r3, #6
 80018ac:	f8a7 31ae 	strh.w	r3, [r7, #430]	; 0x1ae
				}

				if (OUT_Y_L_A_status == HAL_OK && OUT_Y_H_A_status == HAL_OK) {
 80018b0:	f897 3150 	ldrb.w	r3, [r7, #336]	; 0x150
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d11b      	bne.n	80018f0 <main+0x970>
 80018b8:	f897 314f 	ldrb.w	r3, [r7, #335]	; 0x14f
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d117      	bne.n	80018f0 <main+0x970>
					OUT_Y_A_val = OUT_Y_H_A_val;
 80018c0:	f107 0383 	add.w	r3, r7, #131	; 0x83
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	f8a7 31ac 	strh.w	r3, [r7, #428]	; 0x1ac
					OUT_Y_A_val <<= 8;
 80018ca:	f9b7 31ac 	ldrsh.w	r3, [r7, #428]	; 0x1ac
 80018ce:	021b      	lsls	r3, r3, #8
 80018d0:	f8a7 31ac 	strh.w	r3, [r7, #428]	; 0x1ac
					OUT_Y_A_val |= OUT_Y_L_A_val;
 80018d4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	b21a      	sxth	r2, r3
 80018dc:	f8b7 31ac 	ldrh.w	r3, [r7, #428]	; 0x1ac
 80018e0:	4313      	orrs	r3, r2
 80018e2:	f8a7 31ac 	strh.w	r3, [r7, #428]	; 0x1ac
					OUT_Y_A_val >>= 6;
 80018e6:	f9b7 31ac 	ldrsh.w	r3, [r7, #428]	; 0x1ac
 80018ea:	119b      	asrs	r3, r3, #6
 80018ec:	f8a7 31ac 	strh.w	r3, [r7, #428]	; 0x1ac
				}

				if (OUT_Z_L_A_status == HAL_OK && OUT_Z_H_A_status == HAL_OK) {
 80018f0:	f897 314e 	ldrb.w	r3, [r7, #334]	; 0x14e
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d11b      	bne.n	8001930 <main+0x9b0>
 80018f8:	f897 314d 	ldrb.w	r3, [r7, #333]	; 0x14d
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d117      	bne.n	8001930 <main+0x9b0>
					OUT_Z_A_val = OUT_Z_H_A_val;
 8001900:	f107 0381 	add.w	r3, r7, #129	; 0x81
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	f8a7 31b2 	strh.w	r3, [r7, #434]	; 0x1b2
					OUT_Z_A_val <<= 8;
 800190a:	f9b7 31b2 	ldrsh.w	r3, [r7, #434]	; 0x1b2
 800190e:	021b      	lsls	r3, r3, #8
 8001910:	f8a7 31b2 	strh.w	r3, [r7, #434]	; 0x1b2
					OUT_Z_A_val |= OUT_Z_L_A_val;
 8001914:	f107 0382 	add.w	r3, r7, #130	; 0x82
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	b21a      	sxth	r2, r3
 800191c:	f8b7 31b2 	ldrh.w	r3, [r7, #434]	; 0x1b2
 8001920:	4313      	orrs	r3, r2
 8001922:	f8a7 31b2 	strh.w	r3, [r7, #434]	; 0x1b2
					OUT_Z_A_val >>= 6;
 8001926:	f9b7 31b2 	ldrsh.w	r3, [r7, #434]	; 0x1b2
 800192a:	119b      	asrs	r3, r3, #6
 800192c:	f8a7 31b2 	strh.w	r3, [r7, #434]	; 0x1b2
				}
				arr_x_a[i] = (OUT_X_A_val);
 8001930:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001934:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001938:	f8b7 11ae 	ldrh.w	r1, [r7, #430]	; 0x1ae
 800193c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				arr_y_a[i] = (OUT_Y_A_val);
 8001940:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001944:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001948:	f8b7 11ac 	ldrh.w	r1, [r7, #428]	; 0x1ac
 800194c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				arr_z_a[i] = (OUT_Z_A_val);
 8001950:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001954:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001958:	f8b7 11b2 	ldrh.w	r1, [r7, #434]	; 0x1b2
 800195c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (int i=0;i<sample_a;i++) {
 8001960:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8001964:	3301      	adds	r3, #1
 8001966:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 800196a:	f897 3132 	ldrb.w	r3, [r7, #306]	; 0x132
 800196e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001972:	429a      	cmp	r2, r3
 8001974:	f6ff aef4 	blt.w	8001760 <main+0x7e0>


			}

			//Averaging five samples
			for (int i=0;i<sample_a;i++) {
 8001978:	2300      	movs	r3, #0
 800197a:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 800197e:	e036      	b.n	80019ee <main+0xa6e>
 8001980:	20000230 	.word	0x20000230
				avg_x_a += arr_x_a[i];
 8001984:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001988:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 800198c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001990:	ee07 3a90 	vmov	s15, r3
 8001994:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001998:	ed97 7a68 	vldr	s14, [r7, #416]	; 0x1a0
 800199c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019a0:	edc7 7a68 	vstr	s15, [r7, #416]	; 0x1a0
				avg_y_a += arr_y_a[i];
 80019a4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80019a8:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 80019ac:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80019b0:	ee07 3a90 	vmov	s15, r3
 80019b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019b8:	ed97 7a67 	vldr	s14, [r7, #412]	; 0x19c
 80019bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019c0:	edc7 7a67 	vstr	s15, [r7, #412]	; 0x19c
				avg_z_a += arr_z_a[i];
 80019c4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80019c8:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 80019cc:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80019d0:	ee07 3a90 	vmov	s15, r3
 80019d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019d8:	ed97 7a66 	vldr	s14, [r7, #408]	; 0x198
 80019dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019e0:	edc7 7a66 	vstr	s15, [r7, #408]	; 0x198
			for (int i=0;i<sample_a;i++) {
 80019e4:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80019e8:	3301      	adds	r3, #1
 80019ea:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 80019ee:	f897 3132 	ldrb.w	r3, [r7, #306]	; 0x132
 80019f2:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 80019f6:	429a      	cmp	r2, r3
 80019f8:	dbc4      	blt.n	8001984 <main+0xa04>
			}

			/*
			 * Average Calculation
			 */
			avg_x_a = (avg_x_a / sample_a) * (4.0 / 1023);
 80019fa:	f897 3132 	ldrb.w	r3, [r7, #306]	; 0x132
 80019fe:	ee07 3a90 	vmov	s15, r3
 8001a02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a06:	ed97 7a68 	vldr	s14, [r7, #416]	; 0x1a0
 8001a0a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001a0e:	ee16 0a90 	vmov	r0, s13
 8001a12:	f7fe fdb9 	bl	8000588 <__aeabi_f2d>
 8001a16:	f20f 6394 	addw	r3, pc, #1684	; 0x694
 8001a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a1e:	f7fe fe0b 	bl	8000638 <__aeabi_dmul>
 8001a22:	4602      	mov	r2, r0
 8001a24:	460b      	mov	r3, r1
 8001a26:	4610      	mov	r0, r2
 8001a28:	4619      	mov	r1, r3
 8001a2a:	f7ff f8dd 	bl	8000be8 <__aeabi_d2f>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
			avg_y_a = (avg_y_a / sample_a) * (4.0 / 1023);
 8001a34:	f897 3132 	ldrb.w	r3, [r7, #306]	; 0x132
 8001a38:	ee07 3a90 	vmov	s15, r3
 8001a3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a40:	ed97 7a67 	vldr	s14, [r7, #412]	; 0x19c
 8001a44:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001a48:	ee16 0a90 	vmov	r0, s13
 8001a4c:	f7fe fd9c 	bl	8000588 <__aeabi_f2d>
 8001a50:	f20f 6358 	addw	r3, pc, #1624	; 0x658
 8001a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a58:	f7fe fdee 	bl	8000638 <__aeabi_dmul>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	4610      	mov	r0, r2
 8001a62:	4619      	mov	r1, r3
 8001a64:	f7ff f8c0 	bl	8000be8 <__aeabi_d2f>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
			avg_z_a = (avg_z_a / sample_a) * (4.0 / 1023);
 8001a6e:	f897 3132 	ldrb.w	r3, [r7, #306]	; 0x132
 8001a72:	ee07 3a90 	vmov	s15, r3
 8001a76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a7a:	ed97 7a66 	vldr	s14, [r7, #408]	; 0x198
 8001a7e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001a82:	ee16 0a90 	vmov	r0, s13
 8001a86:	f7fe fd7f 	bl	8000588 <__aeabi_f2d>
 8001a8a:	f20f 6320 	addw	r3, pc, #1568	; 0x620
 8001a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a92:	f7fe fdd1 	bl	8000638 <__aeabi_dmul>
 8001a96:	4602      	mov	r2, r0
 8001a98:	460b      	mov	r3, r1
 8001a9a:	4610      	mov	r0, r2
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	f7ff f8a3 	bl	8000be8 <__aeabi_d2f>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
			HAL_UART_Transmit(&huart2, (uint8_t*)ACC_Buffer, sprintf(ACC_Buffer, "% 06.5f,", avg_x_a), 100); // @suppress("Float formatting support")
			HAL_UART_Transmit(&huart2, (uint8_t*)ACC_Buffer, sprintf(ACC_Buffer, "% 06.5f,", avg_y_a), 100); // @suppress("Float formatting support")
			HAL_UART_Transmit(&huart2, (uint8_t*)ACC_Buffer, sprintf(ACC_Buffer, "% 06.5f\n", avg_z_a), 100); // @suppress("Float formatting support")
			*/

			current_tick = HAL_GetTick();//Current tick
 8001aa8:	f001 f922 	bl	8002cf0 <HAL_GetTick>
 8001aac:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c

			/*
			 * Peak Detector
			 */
			if (avg_x_a > -0.70 && step_counting == 0 && (current_tick - increase_prev) > 400 && ready_to_send == 0) {//Wait for 400ms till next step
 8001ab0:	f8d7 01a0 	ldr.w	r0, [r7, #416]	; 0x1a0
 8001ab4:	f7fe fd68 	bl	8000588 <__aeabi_f2d>
 8001ab8:	f20f 53f8 	addw	r3, pc, #1528	; 0x5f8
 8001abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac0:	f7ff f84a 	bl	8000b58 <__aeabi_dcmpgt>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d016      	beq.n	8001af8 <main+0xb78>
 8001aca:	f897 31c3 	ldrb.w	r3, [r7, #451]	; 0x1c3
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d112      	bne.n	8001af8 <main+0xb78>
 8001ad2:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8001ad6:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001ae0:	d90a      	bls.n	8001af8 <main+0xb78>
 8001ae2:	f897 31ab 	ldrb.w	r3, [r7, #427]	; 0x1ab
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d106      	bne.n	8001af8 <main+0xb78>
				step_counting = 1;
 8001aea:	2301      	movs	r3, #1
 8001aec:	f887 31c3 	strb.w	r3, [r7, #451]	; 0x1c3
				increase_prev = HAL_GetTick();
 8001af0:	f001 f8fe 	bl	8002cf0 <HAL_GetTick>
 8001af4:	f8c7 01b8 	str.w	r0, [r7, #440]	; 0x1b8
			}
			if (step_counting == 1 && avg_x_a < -0.70) {
 8001af8:	f897 31c3 	ldrb.w	r3, [r7, #451]	; 0x1c3
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d117      	bne.n	8001b30 <main+0xbb0>
 8001b00:	f8d7 01a0 	ldr.w	r0, [r7, #416]	; 0x1a0
 8001b04:	f7fe fd40 	bl	8000588 <__aeabi_f2d>
 8001b08:	f20f 53a8 	addw	r3, pc, #1448	; 0x5a8
 8001b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b10:	f7ff f804 	bl	8000b1c <__aeabi_dcmplt>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d00a      	beq.n	8001b30 <main+0xbb0>
				step_counting = 0;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	f887 31c3 	strb.w	r3, [r7, #451]	; 0x1c3
				ready_to_send = 1;
 8001b20:	2301      	movs	r3, #1
 8001b22:	f887 31ab 	strb.w	r3, [r7, #427]	; 0x1ab
				steps++;
 8001b26:	f8b7 31b6 	ldrh.w	r3, [r7, #438]	; 0x1b6
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	f8a7 31b6 	strh.w	r3, [r7, #438]	; 0x1b6
			}
			if (avg_x_a > (stationary_x -0.028) && avg_x_a < (stationary_x + 0.028) && ready_to_send == 1 && step_counting == 0) {//Detect end of a step
 8001b30:	f8d7 01a0 	ldr.w	r0, [r7, #416]	; 0x1a0
 8001b34:	f7fe fd28 	bl	8000588 <__aeabi_f2d>
 8001b38:	4604      	mov	r4, r0
 8001b3a:	460d      	mov	r5, r1
 8001b3c:	f8d7 01a4 	ldr.w	r0, [r7, #420]	; 0x1a4
 8001b40:	f7fe fd22 	bl	8000588 <__aeabi_f2d>
 8001b44:	f20f 5374 	addw	r3, pc, #1396	; 0x574
 8001b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b4c:	f7fe fbbc 	bl	80002c8 <__aeabi_dsub>
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	4620      	mov	r0, r4
 8001b56:	4629      	mov	r1, r5
 8001b58:	f7fe fffe 	bl	8000b58 <__aeabi_dcmpgt>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	f000 81eb 	beq.w	8001f3a <main+0xfba>
 8001b64:	f8d7 01a0 	ldr.w	r0, [r7, #416]	; 0x1a0
 8001b68:	f7fe fd0e 	bl	8000588 <__aeabi_f2d>
 8001b6c:	4604      	mov	r4, r0
 8001b6e:	460d      	mov	r5, r1
 8001b70:	f8d7 01a4 	ldr.w	r0, [r7, #420]	; 0x1a4
 8001b74:	f7fe fd08 	bl	8000588 <__aeabi_f2d>
 8001b78:	f20f 5340 	addw	r3, pc, #1344	; 0x540
 8001b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b80:	f7fe fba4 	bl	80002cc <__adddf3>
 8001b84:	4602      	mov	r2, r0
 8001b86:	460b      	mov	r3, r1
 8001b88:	4620      	mov	r0, r4
 8001b8a:	4629      	mov	r1, r5
 8001b8c:	f7fe ffc6 	bl	8000b1c <__aeabi_dcmplt>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	f000 81d1 	beq.w	8001f3a <main+0xfba>
 8001b98:	f897 31ab 	ldrb.w	r3, [r7, #427]	; 0x1ab
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	f040 81cc 	bne.w	8001f3a <main+0xfba>
 8001ba2:	f897 31c3 	ldrb.w	r3, [r7, #451]	; 0x1c3
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	f040 81c7 	bne.w	8001f3a <main+0xfba>
				ready_to_send = 0;
 8001bac:	2300      	movs	r3, #0
 8001bae:	f887 31ab 	strb.w	r3, [r7, #427]	; 0x1ab
				if (offset_measure == 0) {//If not in initialising stage
 8001bb2:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	f040 814b 	bne.w	8001e52 <main+0xed2>
					float turn = initial_yaw - yaw - offset;
 8001bbc:	ed97 7a6f 	vldr	s14, [r7, #444]	; 0x1bc
 8001bc0:	edd7 7a75 	vldr	s15, [r7, #468]	; 0x1d4
 8001bc4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001bc8:	edd7 7a74 	vldr	s15, [r7, #464]	; 0x1d0
 8001bcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bd0:	edc7 7a44 	vstr	s15, [r7, #272]	; 0x110
					/*
					 * ***** MOVING AVERAGE CALCULATION *****
					 */
					float temp_angle = fabs(turn - turn_prev);
 8001bd4:	ed97 7a44 	vldr	s14, [r7, #272]	; 0x110
 8001bd8:	edd7 7a5f 	vldr	s15, [r7, #380]	; 0x17c
 8001bdc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001be0:	eef0 7ae7 	vabs.f32	s15, s15
 8001be4:	edc7 7a43 	vstr	s15, [r7, #268]	; 0x10c
					if (temp_angle > 30) {
 8001be8:	edd7 7a43 	vldr	s15, [r7, #268]	; 0x10c
 8001bec:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001bf0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bf8:	dd18      	ble.n	8001c2c <main+0xcac>
						for (int i = 0; i<sizeof(angles)/sizeof(float); i++) {
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8001c00:	e00d      	b.n	8001c1e <main+0xc9e>
							angles[i] = 0;// Re-initialise
 8001c02:	f107 0208 	add.w	r2, r7, #8
 8001c06:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	4413      	add	r3, r2
 8001c0e:	f04f 0200 	mov.w	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
						for (int i = 0; i<sizeof(angles)/sizeof(float); i++) {
 8001c14:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001c18:	3301      	adds	r3, #1
 8001c1a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8001c1e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001c22:	2b04      	cmp	r3, #4
 8001c24:	d9ed      	bls.n	8001c02 <main+0xc82>
						}
						angle_count = 0;
 8001c26:	2300      	movs	r3, #0
 8001c28:	f887 317b 	strb.w	r3, [r7, #379]	; 0x17b
					}
					if (angle_count < 5) {
 8001c2c:	f897 317b 	ldrb.w	r3, [r7, #379]	; 0x17b
 8001c30:	2b04      	cmp	r3, #4
 8001c32:	d80d      	bhi.n	8001c50 <main+0xcd0>
						angles[angle_count] = turn;
 8001c34:	f897 317b 	ldrb.w	r3, [r7, #379]	; 0x17b
 8001c38:	f107 0208 	add.w	r2, r7, #8
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	4413      	add	r3, r2
 8001c40:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001c44:	601a      	str	r2, [r3, #0]
						angle_count++;
 8001c46:	f897 317b 	ldrb.w	r3, [r7, #379]	; 0x17b
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	f887 317b 	strb.w	r3, [r7, #379]	; 0x17b
					}
					if (angle_count == 5) {
 8001c50:	f897 317b 	ldrb.w	r3, [r7, #379]	; 0x17b
 8001c54:	2b05      	cmp	r3, #5
 8001c56:	d120      	bne.n	8001c9a <main+0xd1a>
					    for(int i=5-1;i>0;i--)
 8001c58:	2304      	movs	r3, #4
 8001c5a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8001c5e:	e013      	b.n	8001c88 <main+0xd08>
					    {
					    	angles[i]=angles[i-1];
 8001c60:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001c64:	3b01      	subs	r3, #1
 8001c66:	f107 0208 	add.w	r2, r7, #8
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	4413      	add	r3, r2
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	f107 0108 	add.w	r1, r7, #8
 8001c74:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	440b      	add	r3, r1
 8001c7c:	601a      	str	r2, [r3, #0]
					    for(int i=5-1;i>0;i--)
 8001c7e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001c82:	3b01      	subs	r3, #1
 8001c84:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8001c88:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	dce7      	bgt.n	8001c60 <main+0xce0>
					    }
					    angles[0] = turn;
 8001c90:	f107 0308 	add.w	r3, r7, #8
 8001c94:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001c98:	601a      	str	r2, [r3, #0]
					}
					angle_avg = 0;
 8001c9a:	f04f 0300 	mov.w	r3, #0
 8001c9e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
					for (int k=0; k<angle_count; k++) {
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8001ca8:	e012      	b.n	8001cd0 <main+0xd50>
						angle_avg += angles[k];
 8001caa:	f107 0208 	add.w	r2, r7, #8
 8001cae:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	4413      	add	r3, r2
 8001cb6:	edd3 7a00 	vldr	s15, [r3]
 8001cba:	ed97 7a61 	vldr	s14, [r7, #388]	; 0x184
 8001cbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cc2:	edc7 7a61 	vstr	s15, [r7, #388]	; 0x184
					for (int k=0; k<angle_count; k++) {
 8001cc6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001cca:	3301      	adds	r3, #1
 8001ccc:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8001cd0:	f897 317b 	ldrb.w	r3, [r7, #379]	; 0x17b
 8001cd4:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	dbe6      	blt.n	8001caa <main+0xd2a>
					}
					angle_avg = angle_avg / (angle_count);
 8001cdc:	f897 317b 	ldrb.w	r3, [r7, #379]	; 0x17b
 8001ce0:	ee07 3a90 	vmov	s15, r3
 8001ce4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ce8:	edd7 6a61 	vldr	s13, [r7, #388]	; 0x184
 8001cec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cf0:	edc7 7a61 	vstr	s15, [r7, #388]	; 0x184

					/*
					 * Calculate X and Y coordinate
					 */
					float x_pos = x_pos_prev + step_length * 1 * cos(turn * PI/180);
 8001cf4:	f8d7 01d8 	ldr.w	r0, [r7, #472]	; 0x1d8
 8001cf8:	f7fe fc46 	bl	8000588 <__aeabi_f2d>
 8001cfc:	4604      	mov	r4, r0
 8001cfe:	460d      	mov	r5, r1
 8001d00:	4be1      	ldr	r3, [pc, #900]	; (8002088 <main+0x1108>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7fe fc3f 	bl	8000588 <__aeabi_f2d>
 8001d0a:	4680      	mov	r8, r0
 8001d0c:	4689      	mov	r9, r1
 8001d0e:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8001d12:	f7fe fc39 	bl	8000588 <__aeabi_f2d>
 8001d16:	a3da      	add	r3, pc, #872	; (adr r3, 8002080 <main+0x1100>)
 8001d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d1c:	f7fe fc8c 	bl	8000638 <__aeabi_dmul>
 8001d20:	4602      	mov	r2, r0
 8001d22:	460b      	mov	r3, r1
 8001d24:	4610      	mov	r0, r2
 8001d26:	4619      	mov	r1, r3
 8001d28:	f04f 0200 	mov.w	r2, #0
 8001d2c:	4bd7      	ldr	r3, [pc, #860]	; (800208c <main+0x110c>)
 8001d2e:	f7fe fdad 	bl	800088c <__aeabi_ddiv>
 8001d32:	4602      	mov	r2, r0
 8001d34:	460b      	mov	r3, r1
 8001d36:	ec43 2b17 	vmov	d7, r2, r3
 8001d3a:	eeb0 0a47 	vmov.f32	s0, s14
 8001d3e:	eef0 0a67 	vmov.f32	s1, s15
 8001d42:	f006 fae9 	bl	8008318 <cos>
 8001d46:	ec53 2b10 	vmov	r2, r3, d0
 8001d4a:	4640      	mov	r0, r8
 8001d4c:	4649      	mov	r1, r9
 8001d4e:	f7fe fc73 	bl	8000638 <__aeabi_dmul>
 8001d52:	4602      	mov	r2, r0
 8001d54:	460b      	mov	r3, r1
 8001d56:	4620      	mov	r0, r4
 8001d58:	4629      	mov	r1, r5
 8001d5a:	f7fe fab7 	bl	80002cc <__adddf3>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	460b      	mov	r3, r1
 8001d62:	4610      	mov	r0, r2
 8001d64:	4619      	mov	r1, r3
 8001d66:	f7fe ff3f 	bl	8000be8 <__aeabi_d2f>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
					float y_pos = y_pos_prev + step_length * 1 * sin(turn * PI/180);
 8001d70:	f8d7 01dc 	ldr.w	r0, [r7, #476]	; 0x1dc
 8001d74:	f7fe fc08 	bl	8000588 <__aeabi_f2d>
 8001d78:	4604      	mov	r4, r0
 8001d7a:	460d      	mov	r5, r1
 8001d7c:	4bc2      	ldr	r3, [pc, #776]	; (8002088 <main+0x1108>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7fe fc01 	bl	8000588 <__aeabi_f2d>
 8001d86:	4680      	mov	r8, r0
 8001d88:	4689      	mov	r9, r1
 8001d8a:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8001d8e:	f7fe fbfb 	bl	8000588 <__aeabi_f2d>
 8001d92:	a3bb      	add	r3, pc, #748	; (adr r3, 8002080 <main+0x1100>)
 8001d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d98:	f7fe fc4e 	bl	8000638 <__aeabi_dmul>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	460b      	mov	r3, r1
 8001da0:	4610      	mov	r0, r2
 8001da2:	4619      	mov	r1, r3
 8001da4:	f04f 0200 	mov.w	r2, #0
 8001da8:	4bb8      	ldr	r3, [pc, #736]	; (800208c <main+0x110c>)
 8001daa:	f7fe fd6f 	bl	800088c <__aeabi_ddiv>
 8001dae:	4602      	mov	r2, r0
 8001db0:	460b      	mov	r3, r1
 8001db2:	ec43 2b17 	vmov	d7, r2, r3
 8001db6:	eeb0 0a47 	vmov.f32	s0, s14
 8001dba:	eef0 0a67 	vmov.f32	s1, s15
 8001dbe:	f006 fafb 	bl	80083b8 <sin>
 8001dc2:	ec53 2b10 	vmov	r2, r3, d0
 8001dc6:	4640      	mov	r0, r8
 8001dc8:	4649      	mov	r1, r9
 8001dca:	f7fe fc35 	bl	8000638 <__aeabi_dmul>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	4620      	mov	r0, r4
 8001dd4:	4629      	mov	r1, r5
 8001dd6:	f7fe fa79 	bl	80002cc <__adddf3>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	460b      	mov	r3, r1
 8001dde:	4610      	mov	r0, r2
 8001de0:	4619      	mov	r1, r3
 8001de2:	f7fe ff01 	bl	8000be8 <__aeabi_d2f>
 8001de6:	4603      	mov	r3, r0
 8001de8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
						HAL_UART_Transmit(&huart2, (uint8_t*)ACC_Buffer, sprintf(ACC_Buffer, "Heading : % 06.3f degrees,", angle_avg), 100);
						HAL_UART_Transmit(&huart2, (uint8_t*)ACC_Buffer, sprintf(ACC_Buffer, "X : % 06.3f meters,", y_pos), 100);
						HAL_UART_Transmit(&huart2, (uint8_t*)ACC_Buffer, sprintf(ACC_Buffer, "Y : % 06.3f meters\n\r", x_pos), 100);
					}
					if (MODE == 1) {//For MATLAB
						HAL_UART_Transmit(&huart2, (uint8_t*)ACC_Buffer, sprintf(ACC_Buffer, "%f,", x_pos), 100);
 8001dec:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8001df0:	f7fe fbca 	bl	8000588 <__aeabi_f2d>
 8001df4:	4602      	mov	r2, r0
 8001df6:	460b      	mov	r3, r1
 8001df8:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 8001dfc:	49a4      	ldr	r1, [pc, #656]	; (8002090 <main+0x1110>)
 8001dfe:	f004 f85d 	bl	8005ebc <siprintf>
 8001e02:	4603      	mov	r3, r0
 8001e04:	b29a      	uxth	r2, r3
 8001e06:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8001e0a:	2364      	movs	r3, #100	; 0x64
 8001e0c:	48a1      	ldr	r0, [pc, #644]	; (8002094 <main+0x1114>)
 8001e0e:	f003 f8f0 	bl	8004ff2 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart2, (uint8_t*)ACC_Buffer, sprintf(ACC_Buffer, "%f\n\r", y_pos), 100);
 8001e12:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 8001e16:	f7fe fbb7 	bl	8000588 <__aeabi_f2d>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 8001e22:	499d      	ldr	r1, [pc, #628]	; (8002098 <main+0x1118>)
 8001e24:	f004 f84a 	bl	8005ebc <siprintf>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	b29a      	uxth	r2, r3
 8001e2c:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8001e30:	2364      	movs	r3, #100	; 0x64
 8001e32:	4898      	ldr	r0, [pc, #608]	; (8002094 <main+0x1114>)
 8001e34:	f003 f8dd 	bl	8004ff2 <HAL_UART_Transmit>
					}

					//Store previous positions
					x_pos_prev = x_pos;
 8001e38:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001e3c:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
					y_pos_prev = y_pos;
 8001e40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001e44:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
					turn_prev = turn;
 8001e48:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001e4c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001e50:	e073      	b.n	8001f3a <main+0xfba>

				}else if (offset_measure == 1 && (steps) <= 4) {//In initialising stage
 8001e52:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d131      	bne.n	8001ebe <main+0xf3e>
 8001e5a:	f8b7 31b6 	ldrh.w	r3, [r7, #438]	; 0x1b6
 8001e5e:	2b04      	cmp	r3, #4
 8001e60:	d82d      	bhi.n	8001ebe <main+0xf3e>
					//Takes 5 samples initially and averages offset
					float turn = initial_yaw - yaw;
 8001e62:	ed97 7a6f 	vldr	s14, [r7, #444]	; 0x1bc
 8001e66:	edd7 7a75 	vldr	s15, [r7, #468]	; 0x1d4
 8001e6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e6e:	edc7 7a45 	vstr	s15, [r7, #276]	; 0x114
					HAL_UART_Transmit(&huart2, (uint8_t*)ACC_Buffer, sprintf(ACC_Buffer, "Sample %d   Measuring %f\n\r", steps, turn), 100);
 8001e72:	f8b7 41b6 	ldrh.w	r4, [r7, #438]	; 0x1b6
 8001e76:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8001e7a:	f7fe fb85 	bl	8000588 <__aeabi_f2d>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	460b      	mov	r3, r1
 8001e82:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 8001e86:	e9cd 2300 	strd	r2, r3, [sp]
 8001e8a:	4622      	mov	r2, r4
 8001e8c:	4983      	ldr	r1, [pc, #524]	; (800209c <main+0x111c>)
 8001e8e:	f004 f815 	bl	8005ebc <siprintf>
 8001e92:	4603      	mov	r3, r0
 8001e94:	b29a      	uxth	r2, r3
 8001e96:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8001e9a:	2364      	movs	r3, #100	; 0x64
 8001e9c:	487d      	ldr	r0, [pc, #500]	; (8002094 <main+0x1114>)
 8001e9e:	f003 f8a8 	bl	8004ff2 <HAL_UART_Transmit>
					offset += turn;
 8001ea2:	ed97 7a74 	vldr	s14, [r7, #464]	; 0x1d0
 8001ea6:	edd7 7a45 	vldr	s15, [r7, #276]	; 0x114
 8001eaa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eae:	edc7 7a74 	vstr	s15, [r7, #464]	; 0x1d0
					offset_avg_count++;
 8001eb2:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
				}else if (offset_measure == 1 && (steps) <= 4) {//In initialising stage
 8001ebc:	e03d      	b.n	8001f3a <main+0xfba>
				} else if (offset_measure == 1 && (steps) >= 5) {//End of initialising stage
 8001ebe:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d139      	bne.n	8001f3a <main+0xfba>
 8001ec6:	f8b7 31b6 	ldrh.w	r3, [r7, #438]	; 0x1b6
 8001eca:	2b04      	cmp	r3, #4
 8001ecc:	d935      	bls.n	8001f3a <main+0xfba>
					//Finished taking 5 samples
					offset = offset/offset_avg_count;
 8001ece:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8001ed2:	ee07 3a90 	vmov	s15, r3
 8001ed6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001eda:	edd7 6a74 	vldr	s13, [r7, #464]	; 0x1d0
 8001ede:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ee2:	edc7 7a74 	vstr	s15, [r7, #464]	; 0x1d0
					HAL_UART_Transmit(&huart2, (uint8_t*)ACC_Buffer, sprintf(ACC_Buffer, "Offset calculated %f\n\r", offset), 100);
 8001ee6:	f8d7 01d0 	ldr.w	r0, [r7, #464]	; 0x1d0
 8001eea:	f7fe fb4d 	bl	8000588 <__aeabi_f2d>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 8001ef6:	496a      	ldr	r1, [pc, #424]	; (80020a0 <main+0x1120>)
 8001ef8:	f003 ffe0 	bl	8005ebc <siprintf>
 8001efc:	4603      	mov	r3, r0
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8001f04:	2364      	movs	r3, #100	; 0x64
 8001f06:	4863      	ldr	r0, [pc, #396]	; (8002094 <main+0x1114>)
 8001f08:	f003 f873 	bl	8004ff2 <HAL_UART_Transmit>
					//Initialise and ready for measurement
					offset_measure = 0;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
					steps = 0;
 8001f12:	2300      	movs	r3, #0
 8001f14:	f8a7 31b6 	strh.w	r3, [r7, #438]	; 0x1b6
					offset_avg_count = 0;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
					HAL_UART_Transmit(&huart2, (uint8_t*)ACC_Buffer, sprintf(ACC_Buffer, "Ready\n\r"), 100);
 8001f1e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001f22:	4960      	ldr	r1, [pc, #384]	; (80020a4 <main+0x1124>)
 8001f24:	4618      	mov	r0, r3
 8001f26:	f003 ffc9 	bl	8005ebc <siprintf>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	b29a      	uxth	r2, r3
 8001f2e:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8001f32:	2364      	movs	r3, #100	; 0x64
 8001f34:	4857      	ldr	r0, [pc, #348]	; (8002094 <main+0x1114>)
 8001f36:	f003 f85c 	bl	8004ff2 <HAL_UART_Transmit>
 8001f3a:	46b5      	mov	sp, r6

		/*
		 * Magnetometer
		 */

		STATUS_REG_M_status = HAL_I2C_Mem_Read(&hi2c1, (MAG<<1)|0x1, STATUS_REG_M, 1, &STATUS_REG_M_val, 1, 50);//Read if new data is available
 8001f3c:	2332      	movs	r3, #50	; 0x32
 8001f3e:	9302      	str	r3, [sp, #8]
 8001f40:	2301      	movs	r3, #1
 8001f42:	9301      	str	r3, [sp, #4]
 8001f44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f48:	9300      	str	r3, [sp, #0]
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	2267      	movs	r2, #103	; 0x67
 8001f4e:	213d      	movs	r1, #61	; 0x3d
 8001f50:	4855      	ldr	r0, [pc, #340]	; (80020a8 <main+0x1128>)
 8001f52:	f001 fbe7 	bl	8003724 <HAL_I2C_Mem_Read>
 8001f56:	4603      	mov	r3, r0
 8001f58:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103

		if (STATUS_REG_M_status == HAL_OK && ((STATUS_REG_M_val & 0x08)>>3) == 1) {
 8001f5c:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f040 825f 	bne.w	8002424 <main+0x14a4>
 8001f66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	f003 0308 	and.w	r3, r3, #8
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	f000 8257 	beq.w	8002424 <main+0x14a4>
 8001f76:	466b      	mov	r3, sp
 8001f78:	461d      	mov	r5, r3
			/*
			 * Sampling
			 */
			uint8_t sample_m = 10;
 8001f7a:	230a      	movs	r3, #10
 8001f7c:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
			int16_t arr_x_m[sample_m];
 8001f80:	f897 4102 	ldrb.w	r4, [r7, #258]	; 0x102
 8001f84:	4623      	mov	r3, r4
 8001f86:	3b01      	subs	r3, #1
 8001f88:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001f8c:	b2e0      	uxtb	r0, r4
 8001f8e:	f04f 0100 	mov.w	r1, #0
 8001f92:	f04f 0200 	mov.w	r2, #0
 8001f96:	f04f 0300 	mov.w	r3, #0
 8001f9a:	010b      	lsls	r3, r1, #4
 8001f9c:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8001fa0:	0102      	lsls	r2, r0, #4
 8001fa2:	b2e0      	uxtb	r0, r4
 8001fa4:	f04f 0100 	mov.w	r1, #0
 8001fa8:	f04f 0200 	mov.w	r2, #0
 8001fac:	f04f 0300 	mov.w	r3, #0
 8001fb0:	010b      	lsls	r3, r1, #4
 8001fb2:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8001fb6:	0102      	lsls	r2, r0, #4
 8001fb8:	4623      	mov	r3, r4
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	3307      	adds	r3, #7
 8001fbe:	08db      	lsrs	r3, r3, #3
 8001fc0:	00db      	lsls	r3, r3, #3
 8001fc2:	ebad 0d03 	sub.w	sp, sp, r3
 8001fc6:	ab04      	add	r3, sp, #16
 8001fc8:	3301      	adds	r3, #1
 8001fca:	085b      	lsrs	r3, r3, #1
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
			int16_t arr_y_m[sample_m];
 8001fd2:	f897 4102 	ldrb.w	r4, [r7, #258]	; 0x102
 8001fd6:	4623      	mov	r3, r4
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001fde:	b2e0      	uxtb	r0, r4
 8001fe0:	f04f 0100 	mov.w	r1, #0
 8001fe4:	f04f 0200 	mov.w	r2, #0
 8001fe8:	f04f 0300 	mov.w	r3, #0
 8001fec:	010b      	lsls	r3, r1, #4
 8001fee:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8001ff2:	0102      	lsls	r2, r0, #4
 8001ff4:	b2e0      	uxtb	r0, r4
 8001ff6:	f04f 0100 	mov.w	r1, #0
 8001ffa:	f04f 0200 	mov.w	r2, #0
 8001ffe:	f04f 0300 	mov.w	r3, #0
 8002002:	010b      	lsls	r3, r1, #4
 8002004:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8002008:	0102      	lsls	r2, r0, #4
 800200a:	4623      	mov	r3, r4
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	3307      	adds	r3, #7
 8002010:	08db      	lsrs	r3, r3, #3
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	ebad 0d03 	sub.w	sp, sp, r3
 8002018:	ab04      	add	r3, sp, #16
 800201a:	3301      	adds	r3, #1
 800201c:	085b      	lsrs	r3, r3, #1
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			int16_t arr_z_m[sample_m];
 8002024:	f897 4102 	ldrb.w	r4, [r7, #258]	; 0x102
 8002028:	4623      	mov	r3, r4
 800202a:	3b01      	subs	r3, #1
 800202c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002030:	b2e0      	uxtb	r0, r4
 8002032:	f04f 0100 	mov.w	r1, #0
 8002036:	f04f 0200 	mov.w	r2, #0
 800203a:	f04f 0300 	mov.w	r3, #0
 800203e:	010b      	lsls	r3, r1, #4
 8002040:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8002044:	0102      	lsls	r2, r0, #4
 8002046:	b2e0      	uxtb	r0, r4
 8002048:	f04f 0100 	mov.w	r1, #0
 800204c:	f04f 0200 	mov.w	r2, #0
 8002050:	f04f 0300 	mov.w	r3, #0
 8002054:	010b      	lsls	r3, r1, #4
 8002056:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 800205a:	0102      	lsls	r2, r0, #4
 800205c:	4623      	mov	r3, r4
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	3307      	adds	r3, #7
 8002062:	08db      	lsrs	r3, r3, #3
 8002064:	00db      	lsls	r3, r3, #3
 8002066:	ebad 0d03 	sub.w	sp, sp, r3
 800206a:	ab04      	add	r3, sp, #16
 800206c:	3301      	adds	r3, #1
 800206e:	085b      	lsrs	r3, r3, #1
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
			// Samples for ten times
			for (int i=0;i<sample_m;i++) {
 8002076:	2300      	movs	r3, #0
 8002078:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 800207c:	e118      	b.n	80022b0 <main+0x1330>
 800207e:	bf00      	nop
 8002080:	54524550 	.word	0x54524550
 8002084:	400921fb 	.word	0x400921fb
 8002088:	20000004 	.word	0x20000004
 800208c:	40668000 	.word	0x40668000
 8002090:	080097b0 	.word	0x080097b0
 8002094:	20000284 	.word	0x20000284
 8002098:	080097b4 	.word	0x080097b4
 800209c:	080097bc 	.word	0x080097bc
 80020a0:	080097d8 	.word	0x080097d8
 80020a4:	080097f0 	.word	0x080097f0
 80020a8:	20000230 	.word	0x20000230
 80020ac:	00401004 	.word	0x00401004
 80020b0:	3f700401 	.word	0x3f700401
 80020b4:	66666666 	.word	0x66666666
 80020b8:	bfe66666 	.word	0xbfe66666
 80020bc:	3126e979 	.word	0x3126e979
 80020c0:	3f9cac08 	.word	0x3f9cac08

				STATUS_REG_M_status = HAL_I2C_Mem_Read(&hi2c1, (MAG<<1)|0x1, STATUS_REG_M, 1, &STATUS_REG_M_val, 1, 50);
 80020c4:	2332      	movs	r3, #50	; 0x32
 80020c6:	9302      	str	r3, [sp, #8]
 80020c8:	2301      	movs	r3, #1
 80020ca:	9301      	str	r3, [sp, #4]
 80020cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020d0:	9300      	str	r3, [sp, #0]
 80020d2:	2301      	movs	r3, #1
 80020d4:	2267      	movs	r2, #103	; 0x67
 80020d6:	213d      	movs	r1, #61	; 0x3d
 80020d8:	487b      	ldr	r0, [pc, #492]	; (80022c8 <main+0x1348>)
 80020da:	f001 fb23 	bl	8003724 <HAL_I2C_Mem_Read>
 80020de:	4603      	mov	r3, r0
 80020e0:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
				while (((STATUS_REG_M_val & 0x08)>>3) != 1) {// Wait until new values are ready
 80020e4:	e00f      	b.n	8002106 <main+0x1186>
					STATUS_REG_M_status = HAL_I2C_Mem_Read(&hi2c1, (MAG<<1)|0x1, STATUS_REG_M, 1, &STATUS_REG_M_val, 1, 50);
 80020e6:	2332      	movs	r3, #50	; 0x32
 80020e8:	9302      	str	r3, [sp, #8]
 80020ea:	2301      	movs	r3, #1
 80020ec:	9301      	str	r3, [sp, #4]
 80020ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020f2:	9300      	str	r3, [sp, #0]
 80020f4:	2301      	movs	r3, #1
 80020f6:	2267      	movs	r2, #103	; 0x67
 80020f8:	213d      	movs	r1, #61	; 0x3d
 80020fa:	4873      	ldr	r0, [pc, #460]	; (80022c8 <main+0x1348>)
 80020fc:	f001 fb12 	bl	8003724 <HAL_I2C_Mem_Read>
 8002100:	4603      	mov	r3, r0
 8002102:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
				while (((STATUS_REG_M_val & 0x08)>>3) != 1) {// Wait until new values are ready
 8002106:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	f003 0308 	and.w	r3, r3, #8
 8002110:	2b00      	cmp	r3, #0
 8002112:	d0e8      	beq.n	80020e6 <main+0x1166>
				}

				//Store
				OUTX_L_M_status = HAL_I2C_Mem_Read(&hi2c1, (MAG<<1)|0x1, OUTX_L_REG_M, 1, &OUTX_L_REG_M_val, 1, 50);
 8002114:	2332      	movs	r3, #50	; 0x32
 8002116:	9302      	str	r3, [sp, #8]
 8002118:	2301      	movs	r3, #1
 800211a:	9301      	str	r3, [sp, #4]
 800211c:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8002120:	9300      	str	r3, [sp, #0]
 8002122:	2301      	movs	r3, #1
 8002124:	2268      	movs	r2, #104	; 0x68
 8002126:	213d      	movs	r1, #61	; 0x3d
 8002128:	4867      	ldr	r0, [pc, #412]	; (80022c8 <main+0x1348>)
 800212a:	f001 fafb 	bl	8003724 <HAL_I2C_Mem_Read>
 800212e:	4603      	mov	r3, r0
 8002130:	f887 3148 	strb.w	r3, [r7, #328]	; 0x148
				OUTX_H_M_status = HAL_I2C_Mem_Read(&hi2c1, (MAG<<1)|0x1, OUTX_H_REG_M, 1, &OUTX_H_REG_M_val, 1, 50);
 8002134:	2332      	movs	r3, #50	; 0x32
 8002136:	9302      	str	r3, [sp, #8]
 8002138:	2301      	movs	r3, #1
 800213a:	9301      	str	r3, [sp, #4]
 800213c:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8002140:	9300      	str	r3, [sp, #0]
 8002142:	2301      	movs	r3, #1
 8002144:	2269      	movs	r2, #105	; 0x69
 8002146:	213d      	movs	r1, #61	; 0x3d
 8002148:	485f      	ldr	r0, [pc, #380]	; (80022c8 <main+0x1348>)
 800214a:	f001 faeb 	bl	8003724 <HAL_I2C_Mem_Read>
 800214e:	4603      	mov	r3, r0
 8002150:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

				OUTY_L_M_status = HAL_I2C_Mem_Read(&hi2c1, (MAG<<1)|0x1, OUTY_L_REG_M, 1, &OUTY_L_REG_M_val, 1, 50);
 8002154:	2332      	movs	r3, #50	; 0x32
 8002156:	9302      	str	r3, [sp, #8]
 8002158:	2301      	movs	r3, #1
 800215a:	9301      	str	r3, [sp, #4]
 800215c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8002160:	9300      	str	r3, [sp, #0]
 8002162:	2301      	movs	r3, #1
 8002164:	226a      	movs	r2, #106	; 0x6a
 8002166:	213d      	movs	r1, #61	; 0x3d
 8002168:	4857      	ldr	r0, [pc, #348]	; (80022c8 <main+0x1348>)
 800216a:	f001 fadb 	bl	8003724 <HAL_I2C_Mem_Read>
 800216e:	4603      	mov	r3, r0
 8002170:	f887 3146 	strb.w	r3, [r7, #326]	; 0x146
				OUTY_H_M_status = HAL_I2C_Mem_Read(&hi2c1, (MAG<<1)|0x1, OUTY_H_REG_M, 1, &OUTY_H_REG_M_val, 1, 50);
 8002174:	2332      	movs	r3, #50	; 0x32
 8002176:	9302      	str	r3, [sp, #8]
 8002178:	2301      	movs	r3, #1
 800217a:	9301      	str	r3, [sp, #4]
 800217c:	f107 0320 	add.w	r3, r7, #32
 8002180:	9300      	str	r3, [sp, #0]
 8002182:	2301      	movs	r3, #1
 8002184:	226b      	movs	r2, #107	; 0x6b
 8002186:	213d      	movs	r1, #61	; 0x3d
 8002188:	484f      	ldr	r0, [pc, #316]	; (80022c8 <main+0x1348>)
 800218a:	f001 facb 	bl	8003724 <HAL_I2C_Mem_Read>
 800218e:	4603      	mov	r3, r0
 8002190:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145

				OUTZ_L_M_status = HAL_I2C_Mem_Read(&hi2c1, (MAG<<1)|0x1, OUTZ_L_REG_M, 1, &OUTZ_L_REG_M_val, 1, 50);
 8002194:	2332      	movs	r3, #50	; 0x32
 8002196:	9302      	str	r3, [sp, #8]
 8002198:	2301      	movs	r3, #1
 800219a:	9301      	str	r3, [sp, #4]
 800219c:	f107 031f 	add.w	r3, r7, #31
 80021a0:	9300      	str	r3, [sp, #0]
 80021a2:	2301      	movs	r3, #1
 80021a4:	226c      	movs	r2, #108	; 0x6c
 80021a6:	213d      	movs	r1, #61	; 0x3d
 80021a8:	4847      	ldr	r0, [pc, #284]	; (80022c8 <main+0x1348>)
 80021aa:	f001 fabb 	bl	8003724 <HAL_I2C_Mem_Read>
 80021ae:	4603      	mov	r3, r0
 80021b0:	f887 3144 	strb.w	r3, [r7, #324]	; 0x144
				OUTZ_H_M_status = HAL_I2C_Mem_Read(&hi2c1, (MAG<<1)|0x1, OUTZ_H_REG_M, 1, &OUTZ_H_REG_M_val, 1, 50);
 80021b4:	2332      	movs	r3, #50	; 0x32
 80021b6:	9302      	str	r3, [sp, #8]
 80021b8:	2301      	movs	r3, #1
 80021ba:	9301      	str	r3, [sp, #4]
 80021bc:	f107 031e 	add.w	r3, r7, #30
 80021c0:	9300      	str	r3, [sp, #0]
 80021c2:	2301      	movs	r3, #1
 80021c4:	226d      	movs	r2, #109	; 0x6d
 80021c6:	213d      	movs	r1, #61	; 0x3d
 80021c8:	483f      	ldr	r0, [pc, #252]	; (80022c8 <main+0x1348>)
 80021ca:	f001 faab 	bl	8003724 <HAL_I2C_Mem_Read>
 80021ce:	4603      	mov	r3, r0
 80021d0:	f887 3143 	strb.w	r3, [r7, #323]	; 0x143

				// Bitwise operations X, Y, Z registers
				if (OUTX_L_M_status == HAL_OK && OUTX_H_M_status == HAL_OK) {
 80021d4:	f897 3148 	ldrb.w	r3, [r7, #328]	; 0x148
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d116      	bne.n	800220a <main+0x128a>
 80021dc:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d112      	bne.n	800220a <main+0x128a>
					OUTX_M_val = OUTX_H_REG_M_val;
 80021e4:	f107 0322 	add.w	r3, r7, #34	; 0x22
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	f8a7 31b4 	strh.w	r3, [r7, #436]	; 0x1b4
					OUTX_M_val <<= 8;
 80021ee:	f9b7 31b4 	ldrsh.w	r3, [r7, #436]	; 0x1b4
 80021f2:	021b      	lsls	r3, r3, #8
 80021f4:	f8a7 31b4 	strh.w	r3, [r7, #436]	; 0x1b4
					OUTX_M_val |= OUTX_L_REG_M_val;
 80021f8:	f107 0323 	add.w	r3, r7, #35	; 0x23
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	b21a      	sxth	r2, r3
 8002200:	f8b7 31b4 	ldrh.w	r3, [r7, #436]	; 0x1b4
 8002204:	4313      	orrs	r3, r2
 8002206:	f8a7 31b4 	strh.w	r3, [r7, #436]	; 0x1b4
				}

				if (OUTY_L_M_status == HAL_OK && OUTY_H_M_status == HAL_OK) {
 800220a:	f897 3146 	ldrb.w	r3, [r7, #326]	; 0x146
 800220e:	2b00      	cmp	r3, #0
 8002210:	d116      	bne.n	8002240 <main+0x12c0>
 8002212:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 8002216:	2b00      	cmp	r3, #0
 8002218:	d112      	bne.n	8002240 <main+0x12c0>
					OUTY_M_val = OUTY_H_REG_M_val;
 800221a:	f107 0320 	add.w	r3, r7, #32
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	f8a7 31cc 	strh.w	r3, [r7, #460]	; 0x1cc
					OUTY_M_val <<= 8;
 8002224:	f9b7 31cc 	ldrsh.w	r3, [r7, #460]	; 0x1cc
 8002228:	021b      	lsls	r3, r3, #8
 800222a:	f8a7 31cc 	strh.w	r3, [r7, #460]	; 0x1cc
					OUTY_M_val |= OUTY_L_REG_M_val;
 800222e:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	b21a      	sxth	r2, r3
 8002236:	f8b7 31cc 	ldrh.w	r3, [r7, #460]	; 0x1cc
 800223a:	4313      	orrs	r3, r2
 800223c:	f8a7 31cc 	strh.w	r3, [r7, #460]	; 0x1cc
				}

				if (OUTZ_L_M_status == HAL_OK && OUTZ_H_M_status == HAL_OK) {
 8002240:	f897 3144 	ldrb.w	r3, [r7, #324]	; 0x144
 8002244:	2b00      	cmp	r3, #0
 8002246:	d116      	bne.n	8002276 <main+0x12f6>
 8002248:	f897 3143 	ldrb.w	r3, [r7, #323]	; 0x143
 800224c:	2b00      	cmp	r3, #0
 800224e:	d112      	bne.n	8002276 <main+0x12f6>
					OUTZ_M_val = OUTZ_H_REG_M_val;
 8002250:	f107 031e 	add.w	r3, r7, #30
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	f8a7 31ca 	strh.w	r3, [r7, #458]	; 0x1ca
					OUTZ_M_val <<= 8;
 800225a:	f9b7 31ca 	ldrsh.w	r3, [r7, #458]	; 0x1ca
 800225e:	021b      	lsls	r3, r3, #8
 8002260:	f8a7 31ca 	strh.w	r3, [r7, #458]	; 0x1ca
					OUTZ_M_val |= OUTZ_L_REG_M_val;
 8002264:	f107 031f 	add.w	r3, r7, #31
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	b21a      	sxth	r2, r3
 800226c:	f8b7 31ca 	ldrh.w	r3, [r7, #458]	; 0x1ca
 8002270:	4313      	orrs	r3, r2
 8002272:	f8a7 31ca 	strh.w	r3, [r7, #458]	; 0x1ca
				}
				arr_x_m[i] = OUTX_M_val;
 8002276:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800227a:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 800227e:	f8b7 11b4 	ldrh.w	r1, [r7, #436]	; 0x1b4
 8002282:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				arr_y_m[i] = OUTY_M_val;
 8002286:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800228a:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 800228e:	f8b7 11cc 	ldrh.w	r1, [r7, #460]	; 0x1cc
 8002292:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				arr_z_m[i] = OUTZ_M_val;
 8002296:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800229a:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 800229e:	f8b7 11ca 	ldrh.w	r1, [r7, #458]	; 0x1ca
 80022a2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (int i=0;i<sample_m;i++) {
 80022a6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80022aa:	3301      	adds	r3, #1
 80022ac:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 80022b0:	f897 3102 	ldrb.w	r3, [r7, #258]	; 0x102
 80022b4:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 80022b8:	429a      	cmp	r2, r3
 80022ba:	f6ff af03 	blt.w	80020c4 <main+0x1144>
			}

			/*
			 * Averaging ten samples
			 */
			for (int i=0;i<sample_m;i++) {
 80022be:	2300      	movs	r3, #0
 80022c0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80022c4:	e039      	b.n	800233a <main+0x13ba>
 80022c6:	bf00      	nop
 80022c8:	20000230 	.word	0x20000230
 80022cc:	3ac80000 	.word	0x3ac80000
				avg_x_m += arr_x_m[i];
 80022d0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80022d4:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 80022d8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80022dc:	ee07 3a90 	vmov	s15, r3
 80022e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022e4:	ed97 7a64 	vldr	s14, [r7, #400]	; 0x190
 80022e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022ec:	edc7 7a64 	vstr	s15, [r7, #400]	; 0x190
				avg_y_m += arr_y_m[i];
 80022f0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80022f4:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 80022f8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80022fc:	ee07 3a90 	vmov	s15, r3
 8002300:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002304:	ed97 7a63 	vldr	s14, [r7, #396]	; 0x18c
 8002308:	ee77 7a27 	vadd.f32	s15, s14, s15
 800230c:	edc7 7a63 	vstr	s15, [r7, #396]	; 0x18c
				avg_z_m += arr_z_m[i];
 8002310:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002314:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8002318:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800231c:	ee07 3a90 	vmov	s15, r3
 8002320:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002324:	ed97 7a62 	vldr	s14, [r7, #392]	; 0x188
 8002328:	ee77 7a27 	vadd.f32	s15, s14, s15
 800232c:	edc7 7a62 	vstr	s15, [r7, #392]	; 0x188
			for (int i=0;i<sample_m;i++) {
 8002330:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002334:	3301      	adds	r3, #1
 8002336:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 800233a:	f897 3102 	ldrb.w	r3, [r7, #258]	; 0x102
 800233e:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8002342:	429a      	cmp	r2, r3
 8002344:	dbc4      	blt.n	80022d0 <main+0x1350>
			}

			/*
			 * Average Calculation
			 */
			avg_x_m = (avg_x_m / sample_m) * (100.0/65536);
 8002346:	f897 3102 	ldrb.w	r3, [r7, #258]	; 0x102
 800234a:	ee07 3a90 	vmov	s15, r3
 800234e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002352:	edd7 6a64 	vldr	s13, [r7, #400]	; 0x190
 8002356:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800235a:	ed1f 7a24 	vldr	s14, [pc, #-144]	; 80022cc <main+0x134c>
 800235e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002362:	edc7 7a64 	vstr	s15, [r7, #400]	; 0x190
			avg_y_m = (avg_y_m / sample_m) * (100.0/65536);
 8002366:	f897 3102 	ldrb.w	r3, [r7, #258]	; 0x102
 800236a:	ee07 3a90 	vmov	s15, r3
 800236e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002372:	edd7 6a63 	vldr	s13, [r7, #396]	; 0x18c
 8002376:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800237a:	ed1f 7a2c 	vldr	s14, [pc, #-176]	; 80022cc <main+0x134c>
 800237e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002382:	edc7 7a63 	vstr	s15, [r7, #396]	; 0x18c
			avg_z_m = (avg_z_m / sample_m) * (100.0/65536);
 8002386:	f897 3102 	ldrb.w	r3, [r7, #258]	; 0x102
 800238a:	ee07 3a90 	vmov	s15, r3
 800238e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002392:	edd7 6a62 	vldr	s13, [r7, #392]	; 0x188
 8002396:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800239a:	ed1f 7a34 	vldr	s14, [pc, #-208]	; 80022cc <main+0x134c>
 800239e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023a2:	edc7 7a62 	vstr	s15, [r7, #392]	; 0x188


			/*
			 * ***** KALMAN FILTER *****
			 */
			KALMAN(avg_x_m, &P_x_m, &U_hat_x_m, &K_x_m);
 80023a6:	4a56      	ldr	r2, [pc, #344]	; (8002500 <main+0x1580>)
 80023a8:	4956      	ldr	r1, [pc, #344]	; (8002504 <main+0x1584>)
 80023aa:	4857      	ldr	r0, [pc, #348]	; (8002508 <main+0x1588>)
 80023ac:	ed97 0a64 	vldr	s0, [r7, #400]	; 0x190
 80023b0:	f000 f8bc 	bl	800252c <KALMAN>
			KALMAN(avg_y_m, &P_y_m, &U_hat_y_m, &K_y_m);
 80023b4:	4a55      	ldr	r2, [pc, #340]	; (800250c <main+0x158c>)
 80023b6:	4956      	ldr	r1, [pc, #344]	; (8002510 <main+0x1590>)
 80023b8:	4856      	ldr	r0, [pc, #344]	; (8002514 <main+0x1594>)
 80023ba:	ed97 0a63 	vldr	s0, [r7, #396]	; 0x18c
 80023be:	f000 f8b5 	bl	800252c <KALMAN>
			KALMAN(avg_z_m, &P_z_m, &U_hat_z_m, &K_z_m);
 80023c2:	4a55      	ldr	r2, [pc, #340]	; (8002518 <main+0x1598>)
 80023c4:	4955      	ldr	r1, [pc, #340]	; (800251c <main+0x159c>)
 80023c6:	4856      	ldr	r0, [pc, #344]	; (8002520 <main+0x15a0>)
 80023c8:	ed97 0a62 	vldr	s0, [r7, #392]	; 0x188
 80023cc:	f000 f8ae 	bl	800252c <KALMAN>
			*/

			/*
			 * Calculate YAW or Heading Angle
			 */
			yaw = atan2f( U_hat_y_m, U_hat_z_m);
 80023d0:	4b4f      	ldr	r3, [pc, #316]	; (8002510 <main+0x1590>)
 80023d2:	edd3 7a00 	vldr	s15, [r3]
 80023d6:	4b51      	ldr	r3, [pc, #324]	; (800251c <main+0x159c>)
 80023d8:	ed93 7a00 	vldr	s14, [r3]
 80023dc:	eef0 0a47 	vmov.f32	s1, s14
 80023e0:	eeb0 0a67 	vmov.f32	s0, s15
 80023e4:	f006 f83c 	bl	8008460 <atan2f>
 80023e8:	ed87 0a75 	vstr	s0, [r7, #468]	; 0x1d4
			yaw = yaw * 180.0/PI;
 80023ec:	f8d7 01d4 	ldr.w	r0, [r7, #468]	; 0x1d4
 80023f0:	f7fe f8ca 	bl	8000588 <__aeabi_f2d>
 80023f4:	f04f 0200 	mov.w	r2, #0
 80023f8:	4b4a      	ldr	r3, [pc, #296]	; (8002524 <main+0x15a4>)
 80023fa:	f7fe f91d 	bl	8000638 <__aeabi_dmul>
 80023fe:	4602      	mov	r2, r0
 8002400:	460b      	mov	r3, r1
 8002402:	4610      	mov	r0, r2
 8002404:	4619      	mov	r1, r3
 8002406:	a33c      	add	r3, pc, #240	; (adr r3, 80024f8 <main+0x1578>)
 8002408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800240c:	f7fe fa3e 	bl	800088c <__aeabi_ddiv>
 8002410:	4602      	mov	r2, r0
 8002412:	460b      	mov	r3, r1
 8002414:	4610      	mov	r0, r2
 8002416:	4619      	mov	r1, r3
 8002418:	f7fe fbe6 	bl	8000be8 <__aeabi_d2f>
 800241c:	4603      	mov	r3, r0
 800241e:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8002422:	46ad      	mov	sp, r5
		}


		if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 0 && pushed == 0) {//Blue button is pressed
 8002424:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002428:	483f      	ldr	r0, [pc, #252]	; (8002528 <main+0x15a8>)
 800242a:	f000 ff0b 	bl	8003244 <HAL_GPIO_ReadPin>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d14d      	bne.n	80024d0 <main+0x1550>
 8002434:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002438:	2b00      	cmp	r3, #0
 800243a:	d149      	bne.n	80024d0 <main+0x1550>
			//Initialise everything to zero
			angle_count= 0;
 800243c:	2300      	movs	r3, #0
 800243e:	f887 317b 	strb.w	r3, [r7, #379]	; 0x17b
			for (int i = 0; i<sizeof(angles)/sizeof(float); i++) {
 8002442:	2300      	movs	r3, #0
 8002444:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002448:	e00d      	b.n	8002466 <main+0x14e6>
				angles[i] = 0;//initialise
 800244a:	f107 0208 	add.w	r2, r7, #8
 800244e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	4413      	add	r3, r2
 8002456:	f04f 0200 	mov.w	r2, #0
 800245a:	601a      	str	r2, [r3, #0]
			for (int i = 0; i<sizeof(angles)/sizeof(float); i++) {
 800245c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002460:	3301      	adds	r3, #1
 8002462:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002466:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800246a:	2b04      	cmp	r3, #4
 800246c:	d9ed      	bls.n	800244a <main+0x14ca>
			}
			offset_avg_count = 0;
 800246e:	2300      	movs	r3, #0
 8002470:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
			pushed = 1;
 8002474:	2301      	movs	r3, #1
 8002476:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
			initial_yaw = yaw;
 800247a:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800247e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
			offset_measure = 1;
 8002482:	2301      	movs	r3, #1
 8002484:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
			if (MODE == 0) {//For Console
				HAL_UART_Transmit(&huart2, (uint8_t*)ACC_Buffer, sprintf(ACC_Buffer, "Initialising\n\r"), 100);
				HAL_UART_Transmit(&huart2, (uint8_t*)ACC_Buffer, sprintf(ACC_Buffer, "Initial Yaw is %f\n\r", initial_yaw), 100);
			}
			steps = 0;
 8002488:	2300      	movs	r3, #0
 800248a:	f8a7 31b6 	strh.w	r3, [r7, #438]	; 0x1b6
			increase_prev = HAL_GetTick();
 800248e:	f000 fc2f 	bl	8002cf0 <HAL_GetTick>
 8002492:	f8c7 01b8 	str.w	r0, [r7, #440]	; 0x1b8
			offset = 0;
 8002496:	f04f 0300 	mov.w	r3, #0
 800249a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
			x_pos_prev = 0;
 800249e:	f04f 0300 	mov.w	r3, #0
 80024a2:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
			y_pos_prev = 0;
 80024a6:	f04f 0300 	mov.w	r3, #0
 80024aa:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
			if (MODE == 0) {//For Console
				HAL_UART_Transmit(&huart2, (uint8_t*)ACC_Buffer, sprintf(ACC_Buffer, "Stand Still\n\r"), 100);
			}
			HAL_Delay(3000);
 80024ae:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80024b2:	f000 fc29 	bl	8002d08 <HAL_Delay>
			/*
			 * Store Initial Acceleration
			 */
			stationary_x = avg_x_a;
 80024b6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80024ba:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
			stationary_y = avg_y_a;
 80024be:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80024c2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
			stationary_z = avg_z_a;
 80024c6:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80024ca:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
			if (MODE == 0) {//For Console
 80024ce:	e010      	b.n	80024f2 <main+0x1572>
				HAL_UART_Transmit(&huart2, (uint8_t*)ACC_Buffer, sprintf(ACC_Buffer, "Stationary y is %f\n\r", stationary_y), 100);
				HAL_UART_Transmit(&huart2, (uint8_t*)ACC_Buffer, sprintf(ACC_Buffer, "Stationary z is %f\n\r", stationary_z), 100);
				HAL_UART_Transmit(&huart2, (uint8_t*)ACC_Buffer, sprintf(ACC_Buffer, "Do 5 steps don't move forward\n\r"), 100);
			}

		} else if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 1 && pushed == 1) {
 80024d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024d4:	4814      	ldr	r0, [pc, #80]	; (8002528 <main+0x15a8>)
 80024d6:	f000 feb5 	bl	8003244 <HAL_GPIO_ReadPin>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b01      	cmp	r3, #1
 80024de:	f47f a89e 	bne.w	800161e <main+0x69e>
 80024e2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	f47f a899 	bne.w	800161e <main+0x69e>
			pushed = 0;
 80024ec:	2300      	movs	r3, #0
 80024ee:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
		STATUS_REG_A_status = HAL_I2C_Mem_Read(&hi2c1, (ACC<<1)|0x1, STATUS_REG_A, 1, &STATUS_REG_A_val, 1, 50);
 80024f2:	f7ff b894 	b.w	800161e <main+0x69e>
 80024f6:	bf00      	nop
 80024f8:	54524550 	.word	0x54524550
 80024fc:	400921fb 	.word	0x400921fb
 8002500:	20000208 	.word	0x20000208
 8002504:	20000204 	.word	0x20000204
 8002508:	20000200 	.word	0x20000200
 800250c:	20000214 	.word	0x20000214
 8002510:	20000210 	.word	0x20000210
 8002514:	2000020c 	.word	0x2000020c
 8002518:	20000220 	.word	0x20000220
 800251c:	2000021c 	.word	0x2000021c
 8002520:	20000218 	.word	0x20000218
 8002524:	40668000 	.word	0x40668000
 8002528:	40020800 	.word	0x40020800

0800252c <KALMAN>:


/*
 * KALMAN FILTER LINEAR
 */
void KALMAN(float U, float *P, float *U_hat, float *K) {
 800252c:	b480      	push	{r7}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	ed87 0a03 	vstr	s0, [r7, #12]
 8002536:	60b8      	str	r0, [r7, #8]
 8002538:	6079      	str	r1, [r7, #4]
 800253a:	603a      	str	r2, [r7, #0]
	*K = (*P)*H/(H*(*P)*H+R);
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	edd3 7a00 	vldr	s15, [r3]
 8002542:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002546:	ee67 6a87 	vmul.f32	s13, s15, s14
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	edd3 7a00 	vldr	s15, [r3]
 8002550:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002554:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002558:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800255c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002560:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80025e0 <KALMAN+0xb4>
 8002564:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002568:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	edc3 7a00 	vstr	s15, [r3]
	*U_hat = (*U_hat)+(*K)*(U-H*(*U_hat));
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	ed93 7a00 	vldr	s14, [r3]
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	edd3 6a00 	vldr	s13, [r3]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	edd3 7a00 	vldr	s15, [r3]
 8002584:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002588:	ee67 7a86 	vmul.f32	s15, s15, s12
 800258c:	ed97 6a03 	vldr	s12, [r7, #12]
 8002590:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002594:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002598:	ee77 7a27 	vadd.f32	s15, s14, s15
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	edc3 7a00 	vstr	s15, [r3]
	*P=(1-(*K)*H)*(*P)+Q;
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	edd3 7a00 	vldr	s15, [r3]
 80025a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80025ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80025b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	edd3 7a00 	vldr	s15, [r3]
 80025be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025c2:	4b08      	ldr	r3, [pc, #32]	; (80025e4 <KALMAN+0xb8>)
 80025c4:	edd3 7a00 	vldr	s15, [r3]
 80025c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	edc3 7a00 	vstr	s15, [r3]
	return;
 80025d2:	bf00      	nop
}
 80025d4:	3714      	adds	r7, #20
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	3e99999a 	.word	0x3e99999a
 80025e4:	20000000 	.word	0x20000000

080025e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b094      	sub	sp, #80	; 0x50
 80025ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025ee:	f107 031c 	add.w	r3, r7, #28
 80025f2:	2234      	movs	r2, #52	; 0x34
 80025f4:	2100      	movs	r1, #0
 80025f6:	4618      	mov	r0, r3
 80025f8:	f002 ffee 	bl	80055d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025fc:	f107 0308 	add.w	r3, r7, #8
 8002600:	2200      	movs	r2, #0
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	605a      	str	r2, [r3, #4]
 8002606:	609a      	str	r2, [r3, #8]
 8002608:	60da      	str	r2, [r3, #12]
 800260a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800260c:	2300      	movs	r3, #0
 800260e:	607b      	str	r3, [r7, #4]
 8002610:	4b2a      	ldr	r3, [pc, #168]	; (80026bc <SystemClock_Config+0xd4>)
 8002612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002614:	4a29      	ldr	r2, [pc, #164]	; (80026bc <SystemClock_Config+0xd4>)
 8002616:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800261a:	6413      	str	r3, [r2, #64]	; 0x40
 800261c:	4b27      	ldr	r3, [pc, #156]	; (80026bc <SystemClock_Config+0xd4>)
 800261e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002624:	607b      	str	r3, [r7, #4]
 8002626:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002628:	2300      	movs	r3, #0
 800262a:	603b      	str	r3, [r7, #0]
 800262c:	4b24      	ldr	r3, [pc, #144]	; (80026c0 <SystemClock_Config+0xd8>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002634:	4a22      	ldr	r2, [pc, #136]	; (80026c0 <SystemClock_Config+0xd8>)
 8002636:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800263a:	6013      	str	r3, [r2, #0]
 800263c:	4b20      	ldr	r3, [pc, #128]	; (80026c0 <SystemClock_Config+0xd8>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002644:	603b      	str	r3, [r7, #0]
 8002646:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002648:	2302      	movs	r3, #2
 800264a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800264c:	2301      	movs	r3, #1
 800264e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002650:	2310      	movs	r3, #16
 8002652:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002654:	2302      	movs	r3, #2
 8002656:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002658:	2300      	movs	r3, #0
 800265a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800265c:	2310      	movs	r3, #16
 800265e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002660:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002664:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002666:	2304      	movs	r3, #4
 8002668:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800266a:	2302      	movs	r3, #2
 800266c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800266e:	2302      	movs	r3, #2
 8002670:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002672:	f107 031c 	add.w	r3, r7, #28
 8002676:	4618      	mov	r0, r3
 8002678:	f002 f9d0 	bl	8004a1c <HAL_RCC_OscConfig>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002682:	f000 f8e5 	bl	8002850 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002686:	230f      	movs	r3, #15
 8002688:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800268a:	2302      	movs	r3, #2
 800268c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800268e:	2300      	movs	r3, #0
 8002690:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002692:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002696:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002698:	2300      	movs	r3, #0
 800269a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800269c:	f107 0308 	add.w	r3, r7, #8
 80026a0:	2102      	movs	r1, #2
 80026a2:	4618      	mov	r0, r3
 80026a4:	f001 feee 	bl	8004484 <HAL_RCC_ClockConfig>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80026ae:	f000 f8cf 	bl	8002850 <Error_Handler>
  }
}
 80026b2:	bf00      	nop
 80026b4:	3750      	adds	r7, #80	; 0x50
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	40023800 	.word	0x40023800
 80026c0:	40007000 	.word	0x40007000

080026c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80026c8:	4b12      	ldr	r3, [pc, #72]	; (8002714 <MX_I2C1_Init+0x50>)
 80026ca:	4a13      	ldr	r2, [pc, #76]	; (8002718 <MX_I2C1_Init+0x54>)
 80026cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80026ce:	4b11      	ldr	r3, [pc, #68]	; (8002714 <MX_I2C1_Init+0x50>)
 80026d0:	4a12      	ldr	r2, [pc, #72]	; (800271c <MX_I2C1_Init+0x58>)
 80026d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80026d4:	4b0f      	ldr	r3, [pc, #60]	; (8002714 <MX_I2C1_Init+0x50>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80026da:	4b0e      	ldr	r3, [pc, #56]	; (8002714 <MX_I2C1_Init+0x50>)
 80026dc:	2200      	movs	r2, #0
 80026de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026e0:	4b0c      	ldr	r3, [pc, #48]	; (8002714 <MX_I2C1_Init+0x50>)
 80026e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80026e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026e8:	4b0a      	ldr	r3, [pc, #40]	; (8002714 <MX_I2C1_Init+0x50>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80026ee:	4b09      	ldr	r3, [pc, #36]	; (8002714 <MX_I2C1_Init+0x50>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80026f4:	4b07      	ldr	r3, [pc, #28]	; (8002714 <MX_I2C1_Init+0x50>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80026fa:	4b06      	ldr	r3, [pc, #24]	; (8002714 <MX_I2C1_Init+0x50>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002700:	4804      	ldr	r0, [pc, #16]	; (8002714 <MX_I2C1_Init+0x50>)
 8002702:	f000 fdd1 	bl	80032a8 <HAL_I2C_Init>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800270c:	f000 f8a0 	bl	8002850 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002710:	bf00      	nop
 8002712:	bd80      	pop	{r7, pc}
 8002714:	20000230 	.word	0x20000230
 8002718:	40005400 	.word	0x40005400
 800271c:	000186a0 	.word	0x000186a0

08002720 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8002724:	4b11      	ldr	r3, [pc, #68]	; (800276c <MX_USART2_UART_Init+0x4c>)
 8002726:	4a12      	ldr	r2, [pc, #72]	; (8002770 <MX_USART2_UART_Init+0x50>)
 8002728:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800272a:	4b10      	ldr	r3, [pc, #64]	; (800276c <MX_USART2_UART_Init+0x4c>)
 800272c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002730:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002732:	4b0e      	ldr	r3, [pc, #56]	; (800276c <MX_USART2_UART_Init+0x4c>)
 8002734:	2200      	movs	r2, #0
 8002736:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002738:	4b0c      	ldr	r3, [pc, #48]	; (800276c <MX_USART2_UART_Init+0x4c>)
 800273a:	2200      	movs	r2, #0
 800273c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800273e:	4b0b      	ldr	r3, [pc, #44]	; (800276c <MX_USART2_UART_Init+0x4c>)
 8002740:	2200      	movs	r2, #0
 8002742:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002744:	4b09      	ldr	r3, [pc, #36]	; (800276c <MX_USART2_UART_Init+0x4c>)
 8002746:	220c      	movs	r2, #12
 8002748:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800274a:	4b08      	ldr	r3, [pc, #32]	; (800276c <MX_USART2_UART_Init+0x4c>)
 800274c:	2200      	movs	r2, #0
 800274e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002750:	4b06      	ldr	r3, [pc, #24]	; (800276c <MX_USART2_UART_Init+0x4c>)
 8002752:	2200      	movs	r2, #0
 8002754:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002756:	4805      	ldr	r0, [pc, #20]	; (800276c <MX_USART2_UART_Init+0x4c>)
 8002758:	f002 fbfe 	bl	8004f58 <HAL_UART_Init>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002762:	f000 f875 	bl	8002850 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002766:	bf00      	nop
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	20000284 	.word	0x20000284
 8002770:	40004400 	.word	0x40004400

08002774 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b08a      	sub	sp, #40	; 0x28
 8002778:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800277a:	f107 0314 	add.w	r3, r7, #20
 800277e:	2200      	movs	r2, #0
 8002780:	601a      	str	r2, [r3, #0]
 8002782:	605a      	str	r2, [r3, #4]
 8002784:	609a      	str	r2, [r3, #8]
 8002786:	60da      	str	r2, [r3, #12]
 8002788:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800278a:	2300      	movs	r3, #0
 800278c:	613b      	str	r3, [r7, #16]
 800278e:	4b2d      	ldr	r3, [pc, #180]	; (8002844 <MX_GPIO_Init+0xd0>)
 8002790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002792:	4a2c      	ldr	r2, [pc, #176]	; (8002844 <MX_GPIO_Init+0xd0>)
 8002794:	f043 0304 	orr.w	r3, r3, #4
 8002798:	6313      	str	r3, [r2, #48]	; 0x30
 800279a:	4b2a      	ldr	r3, [pc, #168]	; (8002844 <MX_GPIO_Init+0xd0>)
 800279c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279e:	f003 0304 	and.w	r3, r3, #4
 80027a2:	613b      	str	r3, [r7, #16]
 80027a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80027a6:	2300      	movs	r3, #0
 80027a8:	60fb      	str	r3, [r7, #12]
 80027aa:	4b26      	ldr	r3, [pc, #152]	; (8002844 <MX_GPIO_Init+0xd0>)
 80027ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ae:	4a25      	ldr	r2, [pc, #148]	; (8002844 <MX_GPIO_Init+0xd0>)
 80027b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027b4:	6313      	str	r3, [r2, #48]	; 0x30
 80027b6:	4b23      	ldr	r3, [pc, #140]	; (8002844 <MX_GPIO_Init+0xd0>)
 80027b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027c2:	2300      	movs	r3, #0
 80027c4:	60bb      	str	r3, [r7, #8]
 80027c6:	4b1f      	ldr	r3, [pc, #124]	; (8002844 <MX_GPIO_Init+0xd0>)
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	4a1e      	ldr	r2, [pc, #120]	; (8002844 <MX_GPIO_Init+0xd0>)
 80027cc:	f043 0301 	orr.w	r3, r3, #1
 80027d0:	6313      	str	r3, [r2, #48]	; 0x30
 80027d2:	4b1c      	ldr	r3, [pc, #112]	; (8002844 <MX_GPIO_Init+0xd0>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	60bb      	str	r3, [r7, #8]
 80027dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027de:	2300      	movs	r3, #0
 80027e0:	607b      	str	r3, [r7, #4]
 80027e2:	4b18      	ldr	r3, [pc, #96]	; (8002844 <MX_GPIO_Init+0xd0>)
 80027e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e6:	4a17      	ldr	r2, [pc, #92]	; (8002844 <MX_GPIO_Init+0xd0>)
 80027e8:	f043 0302 	orr.w	r3, r3, #2
 80027ec:	6313      	str	r3, [r2, #48]	; 0x30
 80027ee:	4b15      	ldr	r3, [pc, #84]	; (8002844 <MX_GPIO_Init+0xd0>)
 80027f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	607b      	str	r3, [r7, #4]
 80027f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80027fa:	2200      	movs	r2, #0
 80027fc:	2120      	movs	r1, #32
 80027fe:	4812      	ldr	r0, [pc, #72]	; (8002848 <MX_GPIO_Init+0xd4>)
 8002800:	f000 fd38 	bl	8003274 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002804:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002808:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800280a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800280e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002810:	2300      	movs	r3, #0
 8002812:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002814:	f107 0314 	add.w	r3, r7, #20
 8002818:	4619      	mov	r1, r3
 800281a:	480c      	ldr	r0, [pc, #48]	; (800284c <MX_GPIO_Init+0xd8>)
 800281c:	f000 fb7e 	bl	8002f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002820:	2320      	movs	r3, #32
 8002822:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002824:	2301      	movs	r3, #1
 8002826:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002828:	2300      	movs	r3, #0
 800282a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800282c:	2300      	movs	r3, #0
 800282e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002830:	f107 0314 	add.w	r3, r7, #20
 8002834:	4619      	mov	r1, r3
 8002836:	4804      	ldr	r0, [pc, #16]	; (8002848 <MX_GPIO_Init+0xd4>)
 8002838:	f000 fb70 	bl	8002f1c <HAL_GPIO_Init>

}
 800283c:	bf00      	nop
 800283e:	3728      	adds	r7, #40	; 0x28
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	40023800 	.word	0x40023800
 8002848:	40020000 	.word	0x40020000
 800284c:	40020800 	.word	0x40020800

08002850 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002854:	b672      	cpsid	i
}
 8002856:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002858:	e7fe      	b.n	8002858 <Error_Handler+0x8>
	...

0800285c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002862:	2300      	movs	r3, #0
 8002864:	607b      	str	r3, [r7, #4]
 8002866:	4b10      	ldr	r3, [pc, #64]	; (80028a8 <HAL_MspInit+0x4c>)
 8002868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286a:	4a0f      	ldr	r2, [pc, #60]	; (80028a8 <HAL_MspInit+0x4c>)
 800286c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002870:	6453      	str	r3, [r2, #68]	; 0x44
 8002872:	4b0d      	ldr	r3, [pc, #52]	; (80028a8 <HAL_MspInit+0x4c>)
 8002874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002876:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800287a:	607b      	str	r3, [r7, #4]
 800287c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800287e:	2300      	movs	r3, #0
 8002880:	603b      	str	r3, [r7, #0]
 8002882:	4b09      	ldr	r3, [pc, #36]	; (80028a8 <HAL_MspInit+0x4c>)
 8002884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002886:	4a08      	ldr	r2, [pc, #32]	; (80028a8 <HAL_MspInit+0x4c>)
 8002888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800288c:	6413      	str	r3, [r2, #64]	; 0x40
 800288e:	4b06      	ldr	r3, [pc, #24]	; (80028a8 <HAL_MspInit+0x4c>)
 8002890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002896:	603b      	str	r3, [r7, #0]
 8002898:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800289a:	2007      	movs	r0, #7
 800289c:	f000 fb0a 	bl	8002eb4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028a0:	bf00      	nop
 80028a2:	3708      	adds	r7, #8
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	40023800 	.word	0x40023800

080028ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b08a      	sub	sp, #40	; 0x28
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b4:	f107 0314 	add.w	r3, r7, #20
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	605a      	str	r2, [r3, #4]
 80028be:	609a      	str	r2, [r3, #8]
 80028c0:	60da      	str	r2, [r3, #12]
 80028c2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a19      	ldr	r2, [pc, #100]	; (8002930 <HAL_I2C_MspInit+0x84>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d12c      	bne.n	8002928 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ce:	2300      	movs	r3, #0
 80028d0:	613b      	str	r3, [r7, #16]
 80028d2:	4b18      	ldr	r3, [pc, #96]	; (8002934 <HAL_I2C_MspInit+0x88>)
 80028d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d6:	4a17      	ldr	r2, [pc, #92]	; (8002934 <HAL_I2C_MspInit+0x88>)
 80028d8:	f043 0302 	orr.w	r3, r3, #2
 80028dc:	6313      	str	r3, [r2, #48]	; 0x30
 80028de:	4b15      	ldr	r3, [pc, #84]	; (8002934 <HAL_I2C_MspInit+0x88>)
 80028e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	613b      	str	r3, [r7, #16]
 80028e8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80028ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80028ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028f0:	2312      	movs	r3, #18
 80028f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f4:	2300      	movs	r3, #0
 80028f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028f8:	2303      	movs	r3, #3
 80028fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80028fc:	2304      	movs	r3, #4
 80028fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002900:	f107 0314 	add.w	r3, r7, #20
 8002904:	4619      	mov	r1, r3
 8002906:	480c      	ldr	r0, [pc, #48]	; (8002938 <HAL_I2C_MspInit+0x8c>)
 8002908:	f000 fb08 	bl	8002f1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800290c:	2300      	movs	r3, #0
 800290e:	60fb      	str	r3, [r7, #12]
 8002910:	4b08      	ldr	r3, [pc, #32]	; (8002934 <HAL_I2C_MspInit+0x88>)
 8002912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002914:	4a07      	ldr	r2, [pc, #28]	; (8002934 <HAL_I2C_MspInit+0x88>)
 8002916:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800291a:	6413      	str	r3, [r2, #64]	; 0x40
 800291c:	4b05      	ldr	r3, [pc, #20]	; (8002934 <HAL_I2C_MspInit+0x88>)
 800291e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002920:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002924:	60fb      	str	r3, [r7, #12]
 8002926:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002928:	bf00      	nop
 800292a:	3728      	adds	r7, #40	; 0x28
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	40005400 	.word	0x40005400
 8002934:	40023800 	.word	0x40023800
 8002938:	40020400 	.word	0x40020400

0800293c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b08a      	sub	sp, #40	; 0x28
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002944:	f107 0314 	add.w	r3, r7, #20
 8002948:	2200      	movs	r2, #0
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	605a      	str	r2, [r3, #4]
 800294e:	609a      	str	r2, [r3, #8]
 8002950:	60da      	str	r2, [r3, #12]
 8002952:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a19      	ldr	r2, [pc, #100]	; (80029c0 <HAL_UART_MspInit+0x84>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d12b      	bne.n	80029b6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800295e:	2300      	movs	r3, #0
 8002960:	613b      	str	r3, [r7, #16]
 8002962:	4b18      	ldr	r3, [pc, #96]	; (80029c4 <HAL_UART_MspInit+0x88>)
 8002964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002966:	4a17      	ldr	r2, [pc, #92]	; (80029c4 <HAL_UART_MspInit+0x88>)
 8002968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800296c:	6413      	str	r3, [r2, #64]	; 0x40
 800296e:	4b15      	ldr	r3, [pc, #84]	; (80029c4 <HAL_UART_MspInit+0x88>)
 8002970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002976:	613b      	str	r3, [r7, #16]
 8002978:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800297a:	2300      	movs	r3, #0
 800297c:	60fb      	str	r3, [r7, #12]
 800297e:	4b11      	ldr	r3, [pc, #68]	; (80029c4 <HAL_UART_MspInit+0x88>)
 8002980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002982:	4a10      	ldr	r2, [pc, #64]	; (80029c4 <HAL_UART_MspInit+0x88>)
 8002984:	f043 0301 	orr.w	r3, r3, #1
 8002988:	6313      	str	r3, [r2, #48]	; 0x30
 800298a:	4b0e      	ldr	r3, [pc, #56]	; (80029c4 <HAL_UART_MspInit+0x88>)
 800298c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298e:	f003 0301 	and.w	r3, r3, #1
 8002992:	60fb      	str	r3, [r7, #12]
 8002994:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002996:	230c      	movs	r3, #12
 8002998:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800299a:	2302      	movs	r3, #2
 800299c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299e:	2300      	movs	r3, #0
 80029a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029a2:	2303      	movs	r3, #3
 80029a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80029a6:	2307      	movs	r3, #7
 80029a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029aa:	f107 0314 	add.w	r3, r7, #20
 80029ae:	4619      	mov	r1, r3
 80029b0:	4805      	ldr	r0, [pc, #20]	; (80029c8 <HAL_UART_MspInit+0x8c>)
 80029b2:	f000 fab3 	bl	8002f1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80029b6:	bf00      	nop
 80029b8:	3728      	adds	r7, #40	; 0x28
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	40004400 	.word	0x40004400
 80029c4:	40023800 	.word	0x40023800
 80029c8:	40020000 	.word	0x40020000

080029cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80029d0:	e7fe      	b.n	80029d0 <NMI_Handler+0x4>

080029d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029d2:	b480      	push	{r7}
 80029d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029d6:	e7fe      	b.n	80029d6 <HardFault_Handler+0x4>

080029d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029dc:	e7fe      	b.n	80029dc <MemManage_Handler+0x4>

080029de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029de:	b480      	push	{r7}
 80029e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029e2:	e7fe      	b.n	80029e2 <BusFault_Handler+0x4>

080029e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029e8:	e7fe      	b.n	80029e8 <UsageFault_Handler+0x4>

080029ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029ea:	b480      	push	{r7}
 80029ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029ee:	bf00      	nop
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029fc:	bf00      	nop
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr

08002a06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a06:	b480      	push	{r7}
 8002a08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a0a:	bf00      	nop
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a18:	f000 f956 	bl	8002cc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a1c:	bf00      	nop
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0
	return 1;
 8002a24:	2301      	movs	r3, #1
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <_kill>:

int _kill(int pid, int sig)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002a3a:	f002 fda3 	bl	8005584 <__errno>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2216      	movs	r2, #22
 8002a42:	601a      	str	r2, [r3, #0]
	return -1;
 8002a44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3708      	adds	r7, #8
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <_exit>:

void _exit (int status)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002a58:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f7ff ffe7 	bl	8002a30 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002a62:	e7fe      	b.n	8002a62 <_exit+0x12>

08002a64 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a70:	2300      	movs	r3, #0
 8002a72:	617b      	str	r3, [r7, #20]
 8002a74:	e00a      	b.n	8002a8c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002a76:	f3af 8000 	nop.w
 8002a7a:	4601      	mov	r1, r0
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	1c5a      	adds	r2, r3, #1
 8002a80:	60ba      	str	r2, [r7, #8]
 8002a82:	b2ca      	uxtb	r2, r1
 8002a84:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	3301      	adds	r3, #1
 8002a8a:	617b      	str	r3, [r7, #20]
 8002a8c:	697a      	ldr	r2, [r7, #20]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	dbf0      	blt.n	8002a76 <_read+0x12>
	}

return len;
 8002a94:	687b      	ldr	r3, [r7, #4]
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3718      	adds	r7, #24
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b086      	sub	sp, #24
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	60f8      	str	r0, [r7, #12]
 8002aa6:	60b9      	str	r1, [r7, #8]
 8002aa8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aaa:	2300      	movs	r3, #0
 8002aac:	617b      	str	r3, [r7, #20]
 8002aae:	e009      	b.n	8002ac4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	1c5a      	adds	r2, r3, #1
 8002ab4:	60ba      	str	r2, [r7, #8]
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	617b      	str	r3, [r7, #20]
 8002ac4:	697a      	ldr	r2, [r7, #20]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	dbf1      	blt.n	8002ab0 <_write+0x12>
	}
	return len;
 8002acc:	687b      	ldr	r3, [r7, #4]
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3718      	adds	r7, #24
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <_close>:

int _close(int file)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	b083      	sub	sp, #12
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
	return -1;
 8002ade:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	370c      	adds	r7, #12
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr

08002aee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002aee:	b480      	push	{r7}
 8002af0:	b083      	sub	sp, #12
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
 8002af6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002afe:	605a      	str	r2, [r3, #4]
	return 0;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr

08002b0e <_isatty>:

int _isatty(int file)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b083      	sub	sp, #12
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
	return 1;
 8002b16:	2301      	movs	r3, #1
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
	return 0;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3714      	adds	r7, #20
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
	...

08002b40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b48:	4a14      	ldr	r2, [pc, #80]	; (8002b9c <_sbrk+0x5c>)
 8002b4a:	4b15      	ldr	r3, [pc, #84]	; (8002ba0 <_sbrk+0x60>)
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b54:	4b13      	ldr	r3, [pc, #76]	; (8002ba4 <_sbrk+0x64>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d102      	bne.n	8002b62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b5c:	4b11      	ldr	r3, [pc, #68]	; (8002ba4 <_sbrk+0x64>)
 8002b5e:	4a12      	ldr	r2, [pc, #72]	; (8002ba8 <_sbrk+0x68>)
 8002b60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b62:	4b10      	ldr	r3, [pc, #64]	; (8002ba4 <_sbrk+0x64>)
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4413      	add	r3, r2
 8002b6a:	693a      	ldr	r2, [r7, #16]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d207      	bcs.n	8002b80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b70:	f002 fd08 	bl	8005584 <__errno>
 8002b74:	4603      	mov	r3, r0
 8002b76:	220c      	movs	r2, #12
 8002b78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b7e:	e009      	b.n	8002b94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b80:	4b08      	ldr	r3, [pc, #32]	; (8002ba4 <_sbrk+0x64>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b86:	4b07      	ldr	r3, [pc, #28]	; (8002ba4 <_sbrk+0x64>)
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	4a05      	ldr	r2, [pc, #20]	; (8002ba4 <_sbrk+0x64>)
 8002b90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b92:	68fb      	ldr	r3, [r7, #12]
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3718      	adds	r7, #24
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	20020000 	.word	0x20020000
 8002ba0:	00000400 	.word	0x00000400
 8002ba4:	20000224 	.word	0x20000224
 8002ba8:	200002e0 	.word	0x200002e0

08002bac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002bb0:	4b06      	ldr	r3, [pc, #24]	; (8002bcc <SystemInit+0x20>)
 8002bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bb6:	4a05      	ldr	r2, [pc, #20]	; (8002bcc <SystemInit+0x20>)
 8002bb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bc0:	bf00      	nop
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	e000ed00 	.word	0xe000ed00

08002bd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002bd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002bd4:	480d      	ldr	r0, [pc, #52]	; (8002c0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002bd6:	490e      	ldr	r1, [pc, #56]	; (8002c10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002bd8:	4a0e      	ldr	r2, [pc, #56]	; (8002c14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002bda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bdc:	e002      	b.n	8002be4 <LoopCopyDataInit>

08002bde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002be0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002be2:	3304      	adds	r3, #4

08002be4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002be4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002be6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002be8:	d3f9      	bcc.n	8002bde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bea:	4a0b      	ldr	r2, [pc, #44]	; (8002c18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002bec:	4c0b      	ldr	r4, [pc, #44]	; (8002c1c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002bee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bf0:	e001      	b.n	8002bf6 <LoopFillZerobss>

08002bf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bf4:	3204      	adds	r2, #4

08002bf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bf8:	d3fb      	bcc.n	8002bf2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002bfa:	f7ff ffd7 	bl	8002bac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bfe:	f002 fcc7 	bl	8005590 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c02:	f7fe f9bd 	bl	8000f80 <main>
  bx  lr    
 8002c06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002c08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c10:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002c14:	08009e70 	.word	0x08009e70
  ldr r2, =_sbss
 8002c18:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002c1c:	200002dc 	.word	0x200002dc

08002c20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c20:	e7fe      	b.n	8002c20 <ADC_IRQHandler>
	...

08002c24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c28:	4b0e      	ldr	r3, [pc, #56]	; (8002c64 <HAL_Init+0x40>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a0d      	ldr	r2, [pc, #52]	; (8002c64 <HAL_Init+0x40>)
 8002c2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c34:	4b0b      	ldr	r3, [pc, #44]	; (8002c64 <HAL_Init+0x40>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a0a      	ldr	r2, [pc, #40]	; (8002c64 <HAL_Init+0x40>)
 8002c3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c40:	4b08      	ldr	r3, [pc, #32]	; (8002c64 <HAL_Init+0x40>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a07      	ldr	r2, [pc, #28]	; (8002c64 <HAL_Init+0x40>)
 8002c46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c4c:	2003      	movs	r0, #3
 8002c4e:	f000 f931 	bl	8002eb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c52:	2000      	movs	r0, #0
 8002c54:	f000 f808 	bl	8002c68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c58:	f7ff fe00 	bl	800285c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	40023c00 	.word	0x40023c00

08002c68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c70:	4b12      	ldr	r3, [pc, #72]	; (8002cbc <HAL_InitTick+0x54>)
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	4b12      	ldr	r3, [pc, #72]	; (8002cc0 <HAL_InitTick+0x58>)
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	4619      	mov	r1, r3
 8002c7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c86:	4618      	mov	r0, r3
 8002c88:	f000 f93b 	bl	8002f02 <HAL_SYSTICK_Config>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e00e      	b.n	8002cb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2b0f      	cmp	r3, #15
 8002c9a:	d80a      	bhi.n	8002cb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	6879      	ldr	r1, [r7, #4]
 8002ca0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ca4:	f000 f911 	bl	8002eca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ca8:	4a06      	ldr	r2, [pc, #24]	; (8002cc4 <HAL_InitTick+0x5c>)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	e000      	b.n	8002cb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3708      	adds	r7, #8
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	20000008 	.word	0x20000008
 8002cc0:	20000010 	.word	0x20000010
 8002cc4:	2000000c 	.word	0x2000000c

08002cc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ccc:	4b06      	ldr	r3, [pc, #24]	; (8002ce8 <HAL_IncTick+0x20>)
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	4b06      	ldr	r3, [pc, #24]	; (8002cec <HAL_IncTick+0x24>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	4a04      	ldr	r2, [pc, #16]	; (8002cec <HAL_IncTick+0x24>)
 8002cda:	6013      	str	r3, [r2, #0]
}
 8002cdc:	bf00      	nop
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	20000010 	.word	0x20000010
 8002cec:	200002c8 	.word	0x200002c8

08002cf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  return uwTick;
 8002cf4:	4b03      	ldr	r3, [pc, #12]	; (8002d04 <HAL_GetTick+0x14>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	200002c8 	.word	0x200002c8

08002d08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d10:	f7ff ffee 	bl	8002cf0 <HAL_GetTick>
 8002d14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d20:	d005      	beq.n	8002d2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d22:	4b0a      	ldr	r3, [pc, #40]	; (8002d4c <HAL_Delay+0x44>)
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	461a      	mov	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d2e:	bf00      	nop
 8002d30:	f7ff ffde 	bl	8002cf0 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d8f7      	bhi.n	8002d30 <HAL_Delay+0x28>
  {
  }
}
 8002d40:	bf00      	nop
 8002d42:	bf00      	nop
 8002d44:	3710      	adds	r7, #16
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	20000010 	.word	0x20000010

08002d50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f003 0307 	and.w	r3, r3, #7
 8002d5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d60:	4b0c      	ldr	r3, [pc, #48]	; (8002d94 <__NVIC_SetPriorityGrouping+0x44>)
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d66:	68ba      	ldr	r2, [r7, #8]
 8002d68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d82:	4a04      	ldr	r2, [pc, #16]	; (8002d94 <__NVIC_SetPriorityGrouping+0x44>)
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	60d3      	str	r3, [r2, #12]
}
 8002d88:	bf00      	nop
 8002d8a:	3714      	adds	r7, #20
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr
 8002d94:	e000ed00 	.word	0xe000ed00

08002d98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d9c:	4b04      	ldr	r3, [pc, #16]	; (8002db0 <__NVIC_GetPriorityGrouping+0x18>)
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	0a1b      	lsrs	r3, r3, #8
 8002da2:	f003 0307 	and.w	r3, r3, #7
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr
 8002db0:	e000ed00 	.word	0xe000ed00

08002db4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	4603      	mov	r3, r0
 8002dbc:	6039      	str	r1, [r7, #0]
 8002dbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	db0a      	blt.n	8002dde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	b2da      	uxtb	r2, r3
 8002dcc:	490c      	ldr	r1, [pc, #48]	; (8002e00 <__NVIC_SetPriority+0x4c>)
 8002dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd2:	0112      	lsls	r2, r2, #4
 8002dd4:	b2d2      	uxtb	r2, r2
 8002dd6:	440b      	add	r3, r1
 8002dd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ddc:	e00a      	b.n	8002df4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	b2da      	uxtb	r2, r3
 8002de2:	4908      	ldr	r1, [pc, #32]	; (8002e04 <__NVIC_SetPriority+0x50>)
 8002de4:	79fb      	ldrb	r3, [r7, #7]
 8002de6:	f003 030f 	and.w	r3, r3, #15
 8002dea:	3b04      	subs	r3, #4
 8002dec:	0112      	lsls	r2, r2, #4
 8002dee:	b2d2      	uxtb	r2, r2
 8002df0:	440b      	add	r3, r1
 8002df2:	761a      	strb	r2, [r3, #24]
}
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr
 8002e00:	e000e100 	.word	0xe000e100
 8002e04:	e000ed00 	.word	0xe000ed00

08002e08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b089      	sub	sp, #36	; 0x24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f003 0307 	and.w	r3, r3, #7
 8002e1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	f1c3 0307 	rsb	r3, r3, #7
 8002e22:	2b04      	cmp	r3, #4
 8002e24:	bf28      	it	cs
 8002e26:	2304      	movcs	r3, #4
 8002e28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	3304      	adds	r3, #4
 8002e2e:	2b06      	cmp	r3, #6
 8002e30:	d902      	bls.n	8002e38 <NVIC_EncodePriority+0x30>
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	3b03      	subs	r3, #3
 8002e36:	e000      	b.n	8002e3a <NVIC_EncodePriority+0x32>
 8002e38:	2300      	movs	r3, #0
 8002e3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	fa02 f303 	lsl.w	r3, r2, r3
 8002e46:	43da      	mvns	r2, r3
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	401a      	ands	r2, r3
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	fa01 f303 	lsl.w	r3, r1, r3
 8002e5a:	43d9      	mvns	r1, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e60:	4313      	orrs	r3, r2
         );
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3724      	adds	r7, #36	; 0x24
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
	...

08002e70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e80:	d301      	bcc.n	8002e86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e82:	2301      	movs	r3, #1
 8002e84:	e00f      	b.n	8002ea6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e86:	4a0a      	ldr	r2, [pc, #40]	; (8002eb0 <SysTick_Config+0x40>)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e8e:	210f      	movs	r1, #15
 8002e90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e94:	f7ff ff8e 	bl	8002db4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e98:	4b05      	ldr	r3, [pc, #20]	; (8002eb0 <SysTick_Config+0x40>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e9e:	4b04      	ldr	r3, [pc, #16]	; (8002eb0 <SysTick_Config+0x40>)
 8002ea0:	2207      	movs	r2, #7
 8002ea2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3708      	adds	r7, #8
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	e000e010 	.word	0xe000e010

08002eb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f7ff ff47 	bl	8002d50 <__NVIC_SetPriorityGrouping>
}
 8002ec2:	bf00      	nop
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b086      	sub	sp, #24
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	60b9      	str	r1, [r7, #8]
 8002ed4:	607a      	str	r2, [r7, #4]
 8002ed6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002edc:	f7ff ff5c 	bl	8002d98 <__NVIC_GetPriorityGrouping>
 8002ee0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	68b9      	ldr	r1, [r7, #8]
 8002ee6:	6978      	ldr	r0, [r7, #20]
 8002ee8:	f7ff ff8e 	bl	8002e08 <NVIC_EncodePriority>
 8002eec:	4602      	mov	r2, r0
 8002eee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ef2:	4611      	mov	r1, r2
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7ff ff5d 	bl	8002db4 <__NVIC_SetPriority>
}
 8002efa:	bf00      	nop
 8002efc:	3718      	adds	r7, #24
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b082      	sub	sp, #8
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f7ff ffb0 	bl	8002e70 <SysTick_Config>
 8002f10:	4603      	mov	r3, r0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
	...

08002f1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b089      	sub	sp, #36	; 0x24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f26:	2300      	movs	r3, #0
 8002f28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f32:	2300      	movs	r3, #0
 8002f34:	61fb      	str	r3, [r7, #28]
 8002f36:	e165      	b.n	8003204 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f38:	2201      	movs	r2, #1
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	697a      	ldr	r2, [r7, #20]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f4c:	693a      	ldr	r2, [r7, #16]
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	f040 8154 	bne.w	80031fe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f003 0303 	and.w	r3, r3, #3
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d005      	beq.n	8002f6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d130      	bne.n	8002fd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	005b      	lsls	r3, r3, #1
 8002f78:	2203      	movs	r2, #3
 8002f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7e:	43db      	mvns	r3, r3
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	4013      	ands	r3, r2
 8002f84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	68da      	ldr	r2, [r3, #12]
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	69ba      	ldr	r2, [r7, #24]
 8002f9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fac:	43db      	mvns	r3, r3
 8002fae:	69ba      	ldr	r2, [r7, #24]
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	091b      	lsrs	r3, r3, #4
 8002fba:	f003 0201 	and.w	r2, r3, #1
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f003 0303 	and.w	r3, r3, #3
 8002fd8:	2b03      	cmp	r3, #3
 8002fda:	d017      	beq.n	800300c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	005b      	lsls	r3, r3, #1
 8002fe6:	2203      	movs	r2, #3
 8002fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fec:	43db      	mvns	r3, r3
 8002fee:	69ba      	ldr	r2, [r7, #24]
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	689a      	ldr	r2, [r3, #8]
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	4313      	orrs	r3, r2
 8003004:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f003 0303 	and.w	r3, r3, #3
 8003014:	2b02      	cmp	r3, #2
 8003016:	d123      	bne.n	8003060 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	08da      	lsrs	r2, r3, #3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	3208      	adds	r2, #8
 8003020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003024:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	f003 0307 	and.w	r3, r3, #7
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	220f      	movs	r2, #15
 8003030:	fa02 f303 	lsl.w	r3, r2, r3
 8003034:	43db      	mvns	r3, r3
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	4013      	ands	r3, r2
 800303a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	691a      	ldr	r2, [r3, #16]
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	f003 0307 	and.w	r3, r3, #7
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	fa02 f303 	lsl.w	r3, r2, r3
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	4313      	orrs	r3, r2
 8003050:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	08da      	lsrs	r2, r3, #3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	3208      	adds	r2, #8
 800305a:	69b9      	ldr	r1, [r7, #24]
 800305c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	2203      	movs	r2, #3
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	43db      	mvns	r3, r3
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	4013      	ands	r3, r2
 8003076:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f003 0203 	and.w	r2, r3, #3
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	fa02 f303 	lsl.w	r3, r2, r3
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	4313      	orrs	r3, r2
 800308c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800309c:	2b00      	cmp	r3, #0
 800309e:	f000 80ae 	beq.w	80031fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030a2:	2300      	movs	r3, #0
 80030a4:	60fb      	str	r3, [r7, #12]
 80030a6:	4b5d      	ldr	r3, [pc, #372]	; (800321c <HAL_GPIO_Init+0x300>)
 80030a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030aa:	4a5c      	ldr	r2, [pc, #368]	; (800321c <HAL_GPIO_Init+0x300>)
 80030ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030b0:	6453      	str	r3, [r2, #68]	; 0x44
 80030b2:	4b5a      	ldr	r3, [pc, #360]	; (800321c <HAL_GPIO_Init+0x300>)
 80030b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030ba:	60fb      	str	r3, [r7, #12]
 80030bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030be:	4a58      	ldr	r2, [pc, #352]	; (8003220 <HAL_GPIO_Init+0x304>)
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	089b      	lsrs	r3, r3, #2
 80030c4:	3302      	adds	r3, #2
 80030c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	f003 0303 	and.w	r3, r3, #3
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	220f      	movs	r2, #15
 80030d6:	fa02 f303 	lsl.w	r3, r2, r3
 80030da:	43db      	mvns	r3, r3
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	4013      	ands	r3, r2
 80030e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a4f      	ldr	r2, [pc, #316]	; (8003224 <HAL_GPIO_Init+0x308>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d025      	beq.n	8003136 <HAL_GPIO_Init+0x21a>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a4e      	ldr	r2, [pc, #312]	; (8003228 <HAL_GPIO_Init+0x30c>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d01f      	beq.n	8003132 <HAL_GPIO_Init+0x216>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a4d      	ldr	r2, [pc, #308]	; (800322c <HAL_GPIO_Init+0x310>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d019      	beq.n	800312e <HAL_GPIO_Init+0x212>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a4c      	ldr	r2, [pc, #304]	; (8003230 <HAL_GPIO_Init+0x314>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d013      	beq.n	800312a <HAL_GPIO_Init+0x20e>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a4b      	ldr	r2, [pc, #300]	; (8003234 <HAL_GPIO_Init+0x318>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d00d      	beq.n	8003126 <HAL_GPIO_Init+0x20a>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a4a      	ldr	r2, [pc, #296]	; (8003238 <HAL_GPIO_Init+0x31c>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d007      	beq.n	8003122 <HAL_GPIO_Init+0x206>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a49      	ldr	r2, [pc, #292]	; (800323c <HAL_GPIO_Init+0x320>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d101      	bne.n	800311e <HAL_GPIO_Init+0x202>
 800311a:	2306      	movs	r3, #6
 800311c:	e00c      	b.n	8003138 <HAL_GPIO_Init+0x21c>
 800311e:	2307      	movs	r3, #7
 8003120:	e00a      	b.n	8003138 <HAL_GPIO_Init+0x21c>
 8003122:	2305      	movs	r3, #5
 8003124:	e008      	b.n	8003138 <HAL_GPIO_Init+0x21c>
 8003126:	2304      	movs	r3, #4
 8003128:	e006      	b.n	8003138 <HAL_GPIO_Init+0x21c>
 800312a:	2303      	movs	r3, #3
 800312c:	e004      	b.n	8003138 <HAL_GPIO_Init+0x21c>
 800312e:	2302      	movs	r3, #2
 8003130:	e002      	b.n	8003138 <HAL_GPIO_Init+0x21c>
 8003132:	2301      	movs	r3, #1
 8003134:	e000      	b.n	8003138 <HAL_GPIO_Init+0x21c>
 8003136:	2300      	movs	r3, #0
 8003138:	69fa      	ldr	r2, [r7, #28]
 800313a:	f002 0203 	and.w	r2, r2, #3
 800313e:	0092      	lsls	r2, r2, #2
 8003140:	4093      	lsls	r3, r2
 8003142:	69ba      	ldr	r2, [r7, #24]
 8003144:	4313      	orrs	r3, r2
 8003146:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003148:	4935      	ldr	r1, [pc, #212]	; (8003220 <HAL_GPIO_Init+0x304>)
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	089b      	lsrs	r3, r3, #2
 800314e:	3302      	adds	r3, #2
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003156:	4b3a      	ldr	r3, [pc, #232]	; (8003240 <HAL_GPIO_Init+0x324>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	43db      	mvns	r3, r3
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	4013      	ands	r3, r2
 8003164:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d003      	beq.n	800317a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003172:	69ba      	ldr	r2, [r7, #24]
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	4313      	orrs	r3, r2
 8003178:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800317a:	4a31      	ldr	r2, [pc, #196]	; (8003240 <HAL_GPIO_Init+0x324>)
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003180:	4b2f      	ldr	r3, [pc, #188]	; (8003240 <HAL_GPIO_Init+0x324>)
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	43db      	mvns	r3, r3
 800318a:	69ba      	ldr	r2, [r7, #24]
 800318c:	4013      	ands	r3, r2
 800318e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d003      	beq.n	80031a4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031a4:	4a26      	ldr	r2, [pc, #152]	; (8003240 <HAL_GPIO_Init+0x324>)
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031aa:	4b25      	ldr	r3, [pc, #148]	; (8003240 <HAL_GPIO_Init+0x324>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	43db      	mvns	r3, r3
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	4013      	ands	r3, r2
 80031b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d003      	beq.n	80031ce <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80031c6:	69ba      	ldr	r2, [r7, #24]
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031ce:	4a1c      	ldr	r2, [pc, #112]	; (8003240 <HAL_GPIO_Init+0x324>)
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031d4:	4b1a      	ldr	r3, [pc, #104]	; (8003240 <HAL_GPIO_Init+0x324>)
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	43db      	mvns	r3, r3
 80031de:	69ba      	ldr	r2, [r7, #24]
 80031e0:	4013      	ands	r3, r2
 80031e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d003      	beq.n	80031f8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031f8:	4a11      	ldr	r2, [pc, #68]	; (8003240 <HAL_GPIO_Init+0x324>)
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	3301      	adds	r3, #1
 8003202:	61fb      	str	r3, [r7, #28]
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	2b0f      	cmp	r3, #15
 8003208:	f67f ae96 	bls.w	8002f38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800320c:	bf00      	nop
 800320e:	bf00      	nop
 8003210:	3724      	adds	r7, #36	; 0x24
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	40023800 	.word	0x40023800
 8003220:	40013800 	.word	0x40013800
 8003224:	40020000 	.word	0x40020000
 8003228:	40020400 	.word	0x40020400
 800322c:	40020800 	.word	0x40020800
 8003230:	40020c00 	.word	0x40020c00
 8003234:	40021000 	.word	0x40021000
 8003238:	40021400 	.word	0x40021400
 800323c:	40021800 	.word	0x40021800
 8003240:	40013c00 	.word	0x40013c00

08003244 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003244:	b480      	push	{r7}
 8003246:	b085      	sub	sp, #20
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	460b      	mov	r3, r1
 800324e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	691a      	ldr	r2, [r3, #16]
 8003254:	887b      	ldrh	r3, [r7, #2]
 8003256:	4013      	ands	r3, r2
 8003258:	2b00      	cmp	r3, #0
 800325a:	d002      	beq.n	8003262 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800325c:	2301      	movs	r3, #1
 800325e:	73fb      	strb	r3, [r7, #15]
 8003260:	e001      	b.n	8003266 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003262:	2300      	movs	r3, #0
 8003264:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003266:	7bfb      	ldrb	r3, [r7, #15]
}
 8003268:	4618      	mov	r0, r3
 800326a:	3714      	adds	r7, #20
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	460b      	mov	r3, r1
 800327e:	807b      	strh	r3, [r7, #2]
 8003280:	4613      	mov	r3, r2
 8003282:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003284:	787b      	ldrb	r3, [r7, #1]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d003      	beq.n	8003292 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800328a:	887a      	ldrh	r2, [r7, #2]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003290:	e003      	b.n	800329a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003292:	887b      	ldrh	r3, [r7, #2]
 8003294:	041a      	lsls	r2, r3, #16
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	619a      	str	r2, [r3, #24]
}
 800329a:	bf00      	nop
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
	...

080032a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d101      	bne.n	80032ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e12b      	b.n	8003512 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d106      	bne.n	80032d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f7ff faec 	bl	80028ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2224      	movs	r2, #36	; 0x24
 80032d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f022 0201 	bic.w	r2, r2, #1
 80032ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800330a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800330c:	f001 f9ac 	bl	8004668 <HAL_RCC_GetPCLK1Freq>
 8003310:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	4a81      	ldr	r2, [pc, #516]	; (800351c <HAL_I2C_Init+0x274>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d807      	bhi.n	800332c <HAL_I2C_Init+0x84>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	4a80      	ldr	r2, [pc, #512]	; (8003520 <HAL_I2C_Init+0x278>)
 8003320:	4293      	cmp	r3, r2
 8003322:	bf94      	ite	ls
 8003324:	2301      	movls	r3, #1
 8003326:	2300      	movhi	r3, #0
 8003328:	b2db      	uxtb	r3, r3
 800332a:	e006      	b.n	800333a <HAL_I2C_Init+0x92>
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	4a7d      	ldr	r2, [pc, #500]	; (8003524 <HAL_I2C_Init+0x27c>)
 8003330:	4293      	cmp	r3, r2
 8003332:	bf94      	ite	ls
 8003334:	2301      	movls	r3, #1
 8003336:	2300      	movhi	r3, #0
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d001      	beq.n	8003342 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e0e7      	b.n	8003512 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	4a78      	ldr	r2, [pc, #480]	; (8003528 <HAL_I2C_Init+0x280>)
 8003346:	fba2 2303 	umull	r2, r3, r2, r3
 800334a:	0c9b      	lsrs	r3, r3, #18
 800334c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68ba      	ldr	r2, [r7, #8]
 800335e:	430a      	orrs	r2, r1
 8003360:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	6a1b      	ldr	r3, [r3, #32]
 8003368:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	4a6a      	ldr	r2, [pc, #424]	; (800351c <HAL_I2C_Init+0x274>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d802      	bhi.n	800337c <HAL_I2C_Init+0xd4>
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	3301      	adds	r3, #1
 800337a:	e009      	b.n	8003390 <HAL_I2C_Init+0xe8>
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003382:	fb02 f303 	mul.w	r3, r2, r3
 8003386:	4a69      	ldr	r2, [pc, #420]	; (800352c <HAL_I2C_Init+0x284>)
 8003388:	fba2 2303 	umull	r2, r3, r2, r3
 800338c:	099b      	lsrs	r3, r3, #6
 800338e:	3301      	adds	r3, #1
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	6812      	ldr	r2, [r2, #0]
 8003394:	430b      	orrs	r3, r1
 8003396:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80033a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	495c      	ldr	r1, [pc, #368]	; (800351c <HAL_I2C_Init+0x274>)
 80033ac:	428b      	cmp	r3, r1
 80033ae:	d819      	bhi.n	80033e4 <HAL_I2C_Init+0x13c>
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	1e59      	subs	r1, r3, #1
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	005b      	lsls	r3, r3, #1
 80033ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80033be:	1c59      	adds	r1, r3, #1
 80033c0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80033c4:	400b      	ands	r3, r1
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00a      	beq.n	80033e0 <HAL_I2C_Init+0x138>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	1e59      	subs	r1, r3, #1
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	005b      	lsls	r3, r3, #1
 80033d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80033d8:	3301      	adds	r3, #1
 80033da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033de:	e051      	b.n	8003484 <HAL_I2C_Init+0x1dc>
 80033e0:	2304      	movs	r3, #4
 80033e2:	e04f      	b.n	8003484 <HAL_I2C_Init+0x1dc>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d111      	bne.n	8003410 <HAL_I2C_Init+0x168>
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	1e58      	subs	r0, r3, #1
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6859      	ldr	r1, [r3, #4]
 80033f4:	460b      	mov	r3, r1
 80033f6:	005b      	lsls	r3, r3, #1
 80033f8:	440b      	add	r3, r1
 80033fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80033fe:	3301      	adds	r3, #1
 8003400:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003404:	2b00      	cmp	r3, #0
 8003406:	bf0c      	ite	eq
 8003408:	2301      	moveq	r3, #1
 800340a:	2300      	movne	r3, #0
 800340c:	b2db      	uxtb	r3, r3
 800340e:	e012      	b.n	8003436 <HAL_I2C_Init+0x18e>
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	1e58      	subs	r0, r3, #1
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6859      	ldr	r1, [r3, #4]
 8003418:	460b      	mov	r3, r1
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	440b      	add	r3, r1
 800341e:	0099      	lsls	r1, r3, #2
 8003420:	440b      	add	r3, r1
 8003422:	fbb0 f3f3 	udiv	r3, r0, r3
 8003426:	3301      	adds	r3, #1
 8003428:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800342c:	2b00      	cmp	r3, #0
 800342e:	bf0c      	ite	eq
 8003430:	2301      	moveq	r3, #1
 8003432:	2300      	movne	r3, #0
 8003434:	b2db      	uxtb	r3, r3
 8003436:	2b00      	cmp	r3, #0
 8003438:	d001      	beq.n	800343e <HAL_I2C_Init+0x196>
 800343a:	2301      	movs	r3, #1
 800343c:	e022      	b.n	8003484 <HAL_I2C_Init+0x1dc>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d10e      	bne.n	8003464 <HAL_I2C_Init+0x1bc>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	1e58      	subs	r0, r3, #1
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6859      	ldr	r1, [r3, #4]
 800344e:	460b      	mov	r3, r1
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	440b      	add	r3, r1
 8003454:	fbb0 f3f3 	udiv	r3, r0, r3
 8003458:	3301      	adds	r3, #1
 800345a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800345e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003462:	e00f      	b.n	8003484 <HAL_I2C_Init+0x1dc>
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	1e58      	subs	r0, r3, #1
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6859      	ldr	r1, [r3, #4]
 800346c:	460b      	mov	r3, r1
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	440b      	add	r3, r1
 8003472:	0099      	lsls	r1, r3, #2
 8003474:	440b      	add	r3, r1
 8003476:	fbb0 f3f3 	udiv	r3, r0, r3
 800347a:	3301      	adds	r3, #1
 800347c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003480:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003484:	6879      	ldr	r1, [r7, #4]
 8003486:	6809      	ldr	r1, [r1, #0]
 8003488:	4313      	orrs	r3, r2
 800348a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	69da      	ldr	r2, [r3, #28]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a1b      	ldr	r3, [r3, #32]
 800349e:	431a      	orrs	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	430a      	orrs	r2, r1
 80034a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80034b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	6911      	ldr	r1, [r2, #16]
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	68d2      	ldr	r2, [r2, #12]
 80034be:	4311      	orrs	r1, r2
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	6812      	ldr	r2, [r2, #0]
 80034c4:	430b      	orrs	r3, r1
 80034c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	695a      	ldr	r2, [r3, #20]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	431a      	orrs	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	430a      	orrs	r2, r1
 80034e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f042 0201 	orr.w	r2, r2, #1
 80034f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2220      	movs	r2, #32
 80034fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3710      	adds	r7, #16
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	000186a0 	.word	0x000186a0
 8003520:	001e847f 	.word	0x001e847f
 8003524:	003d08ff 	.word	0x003d08ff
 8003528:	431bde83 	.word	0x431bde83
 800352c:	10624dd3 	.word	0x10624dd3

08003530 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b088      	sub	sp, #32
 8003534:	af02      	add	r7, sp, #8
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	4608      	mov	r0, r1
 800353a:	4611      	mov	r1, r2
 800353c:	461a      	mov	r2, r3
 800353e:	4603      	mov	r3, r0
 8003540:	817b      	strh	r3, [r7, #10]
 8003542:	460b      	mov	r3, r1
 8003544:	813b      	strh	r3, [r7, #8]
 8003546:	4613      	mov	r3, r2
 8003548:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800354a:	f7ff fbd1 	bl	8002cf0 <HAL_GetTick>
 800354e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003556:	b2db      	uxtb	r3, r3
 8003558:	2b20      	cmp	r3, #32
 800355a:	f040 80d9 	bne.w	8003710 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	9300      	str	r3, [sp, #0]
 8003562:	2319      	movs	r3, #25
 8003564:	2201      	movs	r2, #1
 8003566:	496d      	ldr	r1, [pc, #436]	; (800371c <HAL_I2C_Mem_Write+0x1ec>)
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f000 fdad 	bl	80040c8 <I2C_WaitOnFlagUntilTimeout>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d001      	beq.n	8003578 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003574:	2302      	movs	r3, #2
 8003576:	e0cc      	b.n	8003712 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800357e:	2b01      	cmp	r3, #1
 8003580:	d101      	bne.n	8003586 <HAL_I2C_Mem_Write+0x56>
 8003582:	2302      	movs	r3, #2
 8003584:	e0c5      	b.n	8003712 <HAL_I2C_Mem_Write+0x1e2>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2201      	movs	r2, #1
 800358a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0301 	and.w	r3, r3, #1
 8003598:	2b01      	cmp	r3, #1
 800359a:	d007      	beq.n	80035ac <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f042 0201 	orr.w	r2, r2, #1
 80035aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2221      	movs	r2, #33	; 0x21
 80035c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2240      	movs	r2, #64	; 0x40
 80035c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6a3a      	ldr	r2, [r7, #32]
 80035d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80035dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e2:	b29a      	uxth	r2, r3
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	4a4d      	ldr	r2, [pc, #308]	; (8003720 <HAL_I2C_Mem_Write+0x1f0>)
 80035ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80035ee:	88f8      	ldrh	r0, [r7, #6]
 80035f0:	893a      	ldrh	r2, [r7, #8]
 80035f2:	8979      	ldrh	r1, [r7, #10]
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	9301      	str	r3, [sp, #4]
 80035f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035fa:	9300      	str	r3, [sp, #0]
 80035fc:	4603      	mov	r3, r0
 80035fe:	68f8      	ldr	r0, [r7, #12]
 8003600:	f000 fbe4 	bl	8003dcc <I2C_RequestMemoryWrite>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d052      	beq.n	80036b0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e081      	b.n	8003712 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800360e:	697a      	ldr	r2, [r7, #20]
 8003610:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	f000 fe2e 	bl	8004274 <I2C_WaitOnTXEFlagUntilTimeout>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00d      	beq.n	800363a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003622:	2b04      	cmp	r3, #4
 8003624:	d107      	bne.n	8003636 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003634:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e06b      	b.n	8003712 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363e:	781a      	ldrb	r2, [r3, #0]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364a:	1c5a      	adds	r2, r3, #1
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003654:	3b01      	subs	r3, #1
 8003656:	b29a      	uxth	r2, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003660:	b29b      	uxth	r3, r3
 8003662:	3b01      	subs	r3, #1
 8003664:	b29a      	uxth	r2, r3
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	695b      	ldr	r3, [r3, #20]
 8003670:	f003 0304 	and.w	r3, r3, #4
 8003674:	2b04      	cmp	r3, #4
 8003676:	d11b      	bne.n	80036b0 <HAL_I2C_Mem_Write+0x180>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800367c:	2b00      	cmp	r3, #0
 800367e:	d017      	beq.n	80036b0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003684:	781a      	ldrb	r2, [r3, #0]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003690:	1c5a      	adds	r2, r3, #1
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800369a:	3b01      	subs	r3, #1
 800369c:	b29a      	uxth	r2, r3
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	3b01      	subs	r3, #1
 80036aa:	b29a      	uxth	r2, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d1aa      	bne.n	800360e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036b8:	697a      	ldr	r2, [r7, #20]
 80036ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036bc:	68f8      	ldr	r0, [r7, #12]
 80036be:	f000 fe1a 	bl	80042f6 <I2C_WaitOnBTFFlagUntilTimeout>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d00d      	beq.n	80036e4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036cc:	2b04      	cmp	r3, #4
 80036ce:	d107      	bne.n	80036e0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036de:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e016      	b.n	8003712 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2220      	movs	r2, #32
 80036f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800370c:	2300      	movs	r3, #0
 800370e:	e000      	b.n	8003712 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003710:	2302      	movs	r3, #2
  }
}
 8003712:	4618      	mov	r0, r3
 8003714:	3718      	adds	r7, #24
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	00100002 	.word	0x00100002
 8003720:	ffff0000 	.word	0xffff0000

08003724 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b08c      	sub	sp, #48	; 0x30
 8003728:	af02      	add	r7, sp, #8
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	4608      	mov	r0, r1
 800372e:	4611      	mov	r1, r2
 8003730:	461a      	mov	r2, r3
 8003732:	4603      	mov	r3, r0
 8003734:	817b      	strh	r3, [r7, #10]
 8003736:	460b      	mov	r3, r1
 8003738:	813b      	strh	r3, [r7, #8]
 800373a:	4613      	mov	r3, r2
 800373c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800373e:	f7ff fad7 	bl	8002cf0 <HAL_GetTick>
 8003742:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800374a:	b2db      	uxtb	r3, r3
 800374c:	2b20      	cmp	r3, #32
 800374e:	f040 8208 	bne.w	8003b62 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003754:	9300      	str	r3, [sp, #0]
 8003756:	2319      	movs	r3, #25
 8003758:	2201      	movs	r2, #1
 800375a:	497b      	ldr	r1, [pc, #492]	; (8003948 <HAL_I2C_Mem_Read+0x224>)
 800375c:	68f8      	ldr	r0, [r7, #12]
 800375e:	f000 fcb3 	bl	80040c8 <I2C_WaitOnFlagUntilTimeout>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d001      	beq.n	800376c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003768:	2302      	movs	r3, #2
 800376a:	e1fb      	b.n	8003b64 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003772:	2b01      	cmp	r3, #1
 8003774:	d101      	bne.n	800377a <HAL_I2C_Mem_Read+0x56>
 8003776:	2302      	movs	r3, #2
 8003778:	e1f4      	b.n	8003b64 <HAL_I2C_Mem_Read+0x440>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2201      	movs	r2, #1
 800377e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0301 	and.w	r3, r3, #1
 800378c:	2b01      	cmp	r3, #1
 800378e:	d007      	beq.n	80037a0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f042 0201 	orr.w	r2, r2, #1
 800379e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2222      	movs	r2, #34	; 0x22
 80037b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2240      	movs	r2, #64	; 0x40
 80037bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80037d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d6:	b29a      	uxth	r2, r3
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	4a5b      	ldr	r2, [pc, #364]	; (800394c <HAL_I2C_Mem_Read+0x228>)
 80037e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037e2:	88f8      	ldrh	r0, [r7, #6]
 80037e4:	893a      	ldrh	r2, [r7, #8]
 80037e6:	8979      	ldrh	r1, [r7, #10]
 80037e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ea:	9301      	str	r3, [sp, #4]
 80037ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ee:	9300      	str	r3, [sp, #0]
 80037f0:	4603      	mov	r3, r0
 80037f2:	68f8      	ldr	r0, [r7, #12]
 80037f4:	f000 fb80 	bl	8003ef8 <I2C_RequestMemoryRead>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e1b0      	b.n	8003b64 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003806:	2b00      	cmp	r3, #0
 8003808:	d113      	bne.n	8003832 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800380a:	2300      	movs	r3, #0
 800380c:	623b      	str	r3, [r7, #32]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	695b      	ldr	r3, [r3, #20]
 8003814:	623b      	str	r3, [r7, #32]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	699b      	ldr	r3, [r3, #24]
 800381c:	623b      	str	r3, [r7, #32]
 800381e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800382e:	601a      	str	r2, [r3, #0]
 8003830:	e184      	b.n	8003b3c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003836:	2b01      	cmp	r3, #1
 8003838:	d11b      	bne.n	8003872 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003848:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800384a:	2300      	movs	r3, #0
 800384c:	61fb      	str	r3, [r7, #28]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	695b      	ldr	r3, [r3, #20]
 8003854:	61fb      	str	r3, [r7, #28]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	61fb      	str	r3, [r7, #28]
 800385e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800386e:	601a      	str	r2, [r3, #0]
 8003870:	e164      	b.n	8003b3c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003876:	2b02      	cmp	r3, #2
 8003878:	d11b      	bne.n	80038b2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003888:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003898:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800389a:	2300      	movs	r3, #0
 800389c:	61bb      	str	r3, [r7, #24]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	695b      	ldr	r3, [r3, #20]
 80038a4:	61bb      	str	r3, [r7, #24]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	699b      	ldr	r3, [r3, #24]
 80038ac:	61bb      	str	r3, [r7, #24]
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	e144      	b.n	8003b3c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038b2:	2300      	movs	r3, #0
 80038b4:	617b      	str	r3, [r7, #20]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	695b      	ldr	r3, [r3, #20]
 80038bc:	617b      	str	r3, [r7, #20]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	617b      	str	r3, [r7, #20]
 80038c6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80038c8:	e138      	b.n	8003b3c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ce:	2b03      	cmp	r3, #3
 80038d0:	f200 80f1 	bhi.w	8003ab6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d123      	bne.n	8003924 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80038e0:	68f8      	ldr	r0, [r7, #12]
 80038e2:	f000 fd49 	bl	8004378 <I2C_WaitOnRXNEFlagUntilTimeout>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d001      	beq.n	80038f0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e139      	b.n	8003b64 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	691a      	ldr	r2, [r3, #16]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fa:	b2d2      	uxtb	r2, r2
 80038fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003902:	1c5a      	adds	r2, r3, #1
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800390c:	3b01      	subs	r3, #1
 800390e:	b29a      	uxth	r2, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003918:	b29b      	uxth	r3, r3
 800391a:	3b01      	subs	r3, #1
 800391c:	b29a      	uxth	r2, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003922:	e10b      	b.n	8003b3c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003928:	2b02      	cmp	r3, #2
 800392a:	d14e      	bne.n	80039ca <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800392c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392e:	9300      	str	r3, [sp, #0]
 8003930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003932:	2200      	movs	r2, #0
 8003934:	4906      	ldr	r1, [pc, #24]	; (8003950 <HAL_I2C_Mem_Read+0x22c>)
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f000 fbc6 	bl	80040c8 <I2C_WaitOnFlagUntilTimeout>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d008      	beq.n	8003954 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e10e      	b.n	8003b64 <HAL_I2C_Mem_Read+0x440>
 8003946:	bf00      	nop
 8003948:	00100002 	.word	0x00100002
 800394c:	ffff0000 	.word	0xffff0000
 8003950:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003962:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	691a      	ldr	r2, [r3, #16]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396e:	b2d2      	uxtb	r2, r2
 8003970:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003976:	1c5a      	adds	r2, r3, #1
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003980:	3b01      	subs	r3, #1
 8003982:	b29a      	uxth	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800398c:	b29b      	uxth	r3, r3
 800398e:	3b01      	subs	r3, #1
 8003990:	b29a      	uxth	r2, r3
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	691a      	ldr	r2, [r3, #16]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a0:	b2d2      	uxtb	r2, r2
 80039a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a8:	1c5a      	adds	r2, r3, #1
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039b2:	3b01      	subs	r3, #1
 80039b4:	b29a      	uxth	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039be:	b29b      	uxth	r3, r3
 80039c0:	3b01      	subs	r3, #1
 80039c2:	b29a      	uxth	r2, r3
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80039c8:	e0b8      	b.n	8003b3c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039cc:	9300      	str	r3, [sp, #0]
 80039ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039d0:	2200      	movs	r2, #0
 80039d2:	4966      	ldr	r1, [pc, #408]	; (8003b6c <HAL_I2C_Mem_Read+0x448>)
 80039d4:	68f8      	ldr	r0, [r7, #12]
 80039d6:	f000 fb77 	bl	80040c8 <I2C_WaitOnFlagUntilTimeout>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d001      	beq.n	80039e4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e0bf      	b.n	8003b64 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	691a      	ldr	r2, [r3, #16]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fe:	b2d2      	uxtb	r2, r2
 8003a00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a06:	1c5a      	adds	r2, r3, #1
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a10:	3b01      	subs	r3, #1
 8003a12:	b29a      	uxth	r2, r3
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	b29a      	uxth	r2, r3
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a28:	9300      	str	r3, [sp, #0]
 8003a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	494f      	ldr	r1, [pc, #316]	; (8003b6c <HAL_I2C_Mem_Read+0x448>)
 8003a30:	68f8      	ldr	r0, [r7, #12]
 8003a32:	f000 fb49 	bl	80040c8 <I2C_WaitOnFlagUntilTimeout>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d001      	beq.n	8003a40 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e091      	b.n	8003b64 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	691a      	ldr	r2, [r3, #16]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5a:	b2d2      	uxtb	r2, r2
 8003a5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a62:	1c5a      	adds	r2, r3, #1
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	b29a      	uxth	r2, r3
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	b29a      	uxth	r2, r3
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	691a      	ldr	r2, [r3, #16]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8c:	b2d2      	uxtb	r2, r2
 8003a8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a94:	1c5a      	adds	r2, r3, #1
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	b29a      	uxth	r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	3b01      	subs	r3, #1
 8003aae:	b29a      	uxth	r2, r3
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ab4:	e042      	b.n	8003b3c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ab6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ab8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003aba:	68f8      	ldr	r0, [r7, #12]
 8003abc:	f000 fc5c 	bl	8004378 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d001      	beq.n	8003aca <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e04c      	b.n	8003b64 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	691a      	ldr	r2, [r3, #16]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad4:	b2d2      	uxtb	r2, r2
 8003ad6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003adc:	1c5a      	adds	r2, r3, #1
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	b29a      	uxth	r2, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	3b01      	subs	r3, #1
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	f003 0304 	and.w	r3, r3, #4
 8003b06:	2b04      	cmp	r3, #4
 8003b08:	d118      	bne.n	8003b3c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	691a      	ldr	r2, [r3, #16]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b14:	b2d2      	uxtb	r2, r2
 8003b16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1c:	1c5a      	adds	r2, r3, #1
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b26:	3b01      	subs	r3, #1
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	3b01      	subs	r3, #1
 8003b36:	b29a      	uxth	r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	f47f aec2 	bne.w	80038ca <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2220      	movs	r2, #32
 8003b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	e000      	b.n	8003b64 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003b62:	2302      	movs	r3, #2
  }
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3728      	adds	r7, #40	; 0x28
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	00010004 	.word	0x00010004

08003b70 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b08a      	sub	sp, #40	; 0x28
 8003b74:	af02      	add	r7, sp, #8
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	607a      	str	r2, [r7, #4]
 8003b7a:	603b      	str	r3, [r7, #0]
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003b80:	f7ff f8b6 	bl	8002cf0 <HAL_GetTick>
 8003b84:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003b86:	2301      	movs	r3, #1
 8003b88:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b20      	cmp	r3, #32
 8003b94:	f040 8111 	bne.w	8003dba <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	9300      	str	r3, [sp, #0]
 8003b9c:	2319      	movs	r3, #25
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	4988      	ldr	r1, [pc, #544]	; (8003dc4 <HAL_I2C_IsDeviceReady+0x254>)
 8003ba2:	68f8      	ldr	r0, [r7, #12]
 8003ba4:	f000 fa90 	bl	80040c8 <I2C_WaitOnFlagUntilTimeout>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d001      	beq.n	8003bb2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003bae:	2302      	movs	r3, #2
 8003bb0:	e104      	b.n	8003dbc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d101      	bne.n	8003bc0 <HAL_I2C_IsDeviceReady+0x50>
 8003bbc:	2302      	movs	r3, #2
 8003bbe:	e0fd      	b.n	8003dbc <HAL_I2C_IsDeviceReady+0x24c>
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d007      	beq.n	8003be6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f042 0201 	orr.w	r2, r2, #1
 8003be4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bf4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2224      	movs	r2, #36	; 0x24
 8003bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2200      	movs	r2, #0
 8003c02:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	4a70      	ldr	r2, [pc, #448]	; (8003dc8 <HAL_I2C_IsDeviceReady+0x258>)
 8003c08:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c18:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	9300      	str	r3, [sp, #0]
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c26:	68f8      	ldr	r0, [r7, #12]
 8003c28:	f000 fa4e 	bl	80040c8 <I2C_WaitOnFlagUntilTimeout>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00d      	beq.n	8003c4e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c40:	d103      	bne.n	8003c4a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c48:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e0b6      	b.n	8003dbc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c4e:	897b      	ldrh	r3, [r7, #10]
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	461a      	mov	r2, r3
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c5c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003c5e:	f7ff f847 	bl	8002cf0 <HAL_GetTick>
 8003c62:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	bf0c      	ite	eq
 8003c72:	2301      	moveq	r3, #1
 8003c74:	2300      	movne	r3, #0
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	695b      	ldr	r3, [r3, #20]
 8003c80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c88:	bf0c      	ite	eq
 8003c8a:	2301      	moveq	r3, #1
 8003c8c:	2300      	movne	r3, #0
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003c92:	e025      	b.n	8003ce0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003c94:	f7ff f82c 	bl	8002cf0 <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	683a      	ldr	r2, [r7, #0]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d302      	bcc.n	8003caa <HAL_I2C_IsDeviceReady+0x13a>
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d103      	bne.n	8003cb2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	22a0      	movs	r2, #160	; 0xa0
 8003cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	695b      	ldr	r3, [r3, #20]
 8003cb8:	f003 0302 	and.w	r3, r3, #2
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	bf0c      	ite	eq
 8003cc0:	2301      	moveq	r3, #1
 8003cc2:	2300      	movne	r3, #0
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cd6:	bf0c      	ite	eq
 8003cd8:	2301      	moveq	r3, #1
 8003cda:	2300      	movne	r3, #0
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	2ba0      	cmp	r3, #160	; 0xa0
 8003cea:	d005      	beq.n	8003cf8 <HAL_I2C_IsDeviceReady+0x188>
 8003cec:	7dfb      	ldrb	r3, [r7, #23]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d102      	bne.n	8003cf8 <HAL_I2C_IsDeviceReady+0x188>
 8003cf2:	7dbb      	ldrb	r3, [r7, #22]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d0cd      	beq.n	8003c94 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	695b      	ldr	r3, [r3, #20]
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d129      	bne.n	8003d62 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d1c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d1e:	2300      	movs	r3, #0
 8003d20:	613b      	str	r3, [r7, #16]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	695b      	ldr	r3, [r3, #20]
 8003d28:	613b      	str	r3, [r7, #16]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	699b      	ldr	r3, [r3, #24]
 8003d30:	613b      	str	r3, [r7, #16]
 8003d32:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	9300      	str	r3, [sp, #0]
 8003d38:	2319      	movs	r3, #25
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	4921      	ldr	r1, [pc, #132]	; (8003dc4 <HAL_I2C_IsDeviceReady+0x254>)
 8003d3e:	68f8      	ldr	r0, [r7, #12]
 8003d40:	f000 f9c2 	bl	80040c8 <I2C_WaitOnFlagUntilTimeout>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d001      	beq.n	8003d4e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e036      	b.n	8003dbc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2220      	movs	r2, #32
 8003d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	e02c      	b.n	8003dbc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d70:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d7a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	9300      	str	r3, [sp, #0]
 8003d80:	2319      	movs	r3, #25
 8003d82:	2201      	movs	r2, #1
 8003d84:	490f      	ldr	r1, [pc, #60]	; (8003dc4 <HAL_I2C_IsDeviceReady+0x254>)
 8003d86:	68f8      	ldr	r0, [r7, #12]
 8003d88:	f000 f99e 	bl	80040c8 <I2C_WaitOnFlagUntilTimeout>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d001      	beq.n	8003d96 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e012      	b.n	8003dbc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	3301      	adds	r3, #1
 8003d9a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003d9c:	69ba      	ldr	r2, [r7, #24]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	f4ff af32 	bcc.w	8003c0a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2220      	movs	r2, #32
 8003daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e000      	b.n	8003dbc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003dba:	2302      	movs	r3, #2
  }
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3720      	adds	r7, #32
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	00100002 	.word	0x00100002
 8003dc8:	ffff0000 	.word	0xffff0000

08003dcc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b088      	sub	sp, #32
 8003dd0:	af02      	add	r7, sp, #8
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	4608      	mov	r0, r1
 8003dd6:	4611      	mov	r1, r2
 8003dd8:	461a      	mov	r2, r3
 8003dda:	4603      	mov	r3, r0
 8003ddc:	817b      	strh	r3, [r7, #10]
 8003dde:	460b      	mov	r3, r1
 8003de0:	813b      	strh	r3, [r7, #8]
 8003de2:	4613      	mov	r3, r2
 8003de4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003df4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df8:	9300      	str	r3, [sp, #0]
 8003dfa:	6a3b      	ldr	r3, [r7, #32]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e02:	68f8      	ldr	r0, [r7, #12]
 8003e04:	f000 f960 	bl	80040c8 <I2C_WaitOnFlagUntilTimeout>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d00d      	beq.n	8003e2a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e1c:	d103      	bne.n	8003e26 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e24:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e05f      	b.n	8003eea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e2a:	897b      	ldrh	r3, [r7, #10]
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	461a      	mov	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e38:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3c:	6a3a      	ldr	r2, [r7, #32]
 8003e3e:	492d      	ldr	r1, [pc, #180]	; (8003ef4 <I2C_RequestMemoryWrite+0x128>)
 8003e40:	68f8      	ldr	r0, [r7, #12]
 8003e42:	f000 f998 	bl	8004176 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d001      	beq.n	8003e50 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e04c      	b.n	8003eea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e50:	2300      	movs	r3, #0
 8003e52:	617b      	str	r3, [r7, #20]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	695b      	ldr	r3, [r3, #20]
 8003e5a:	617b      	str	r3, [r7, #20]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	617b      	str	r3, [r7, #20]
 8003e64:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e68:	6a39      	ldr	r1, [r7, #32]
 8003e6a:	68f8      	ldr	r0, [r7, #12]
 8003e6c:	f000 fa02 	bl	8004274 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00d      	beq.n	8003e92 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7a:	2b04      	cmp	r3, #4
 8003e7c:	d107      	bne.n	8003e8e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e8c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e02b      	b.n	8003eea <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e92:	88fb      	ldrh	r3, [r7, #6]
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d105      	bne.n	8003ea4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e98:	893b      	ldrh	r3, [r7, #8]
 8003e9a:	b2da      	uxtb	r2, r3
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	611a      	str	r2, [r3, #16]
 8003ea2:	e021      	b.n	8003ee8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ea4:	893b      	ldrh	r3, [r7, #8]
 8003ea6:	0a1b      	lsrs	r3, r3, #8
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	b2da      	uxtb	r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eb4:	6a39      	ldr	r1, [r7, #32]
 8003eb6:	68f8      	ldr	r0, [r7, #12]
 8003eb8:	f000 f9dc 	bl	8004274 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00d      	beq.n	8003ede <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec6:	2b04      	cmp	r3, #4
 8003ec8:	d107      	bne.n	8003eda <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ed8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e005      	b.n	8003eea <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ede:	893b      	ldrh	r3, [r7, #8]
 8003ee0:	b2da      	uxtb	r2, r3
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3718      	adds	r7, #24
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	00010002 	.word	0x00010002

08003ef8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b088      	sub	sp, #32
 8003efc:	af02      	add	r7, sp, #8
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	4608      	mov	r0, r1
 8003f02:	4611      	mov	r1, r2
 8003f04:	461a      	mov	r2, r3
 8003f06:	4603      	mov	r3, r0
 8003f08:	817b      	strh	r3, [r7, #10]
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	813b      	strh	r3, [r7, #8]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f20:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f30:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f34:	9300      	str	r3, [sp, #0]
 8003f36:	6a3b      	ldr	r3, [r7, #32]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f3e:	68f8      	ldr	r0, [r7, #12]
 8003f40:	f000 f8c2 	bl	80040c8 <I2C_WaitOnFlagUntilTimeout>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00d      	beq.n	8003f66 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f58:	d103      	bne.n	8003f62 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f60:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e0aa      	b.n	80040bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f66:	897b      	ldrh	r3, [r7, #10]
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f74:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f78:	6a3a      	ldr	r2, [r7, #32]
 8003f7a:	4952      	ldr	r1, [pc, #328]	; (80040c4 <I2C_RequestMemoryRead+0x1cc>)
 8003f7c:	68f8      	ldr	r0, [r7, #12]
 8003f7e:	f000 f8fa 	bl	8004176 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d001      	beq.n	8003f8c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e097      	b.n	80040bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	617b      	str	r3, [r7, #20]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	617b      	str	r3, [r7, #20]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	617b      	str	r3, [r7, #20]
 8003fa0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fa4:	6a39      	ldr	r1, [r7, #32]
 8003fa6:	68f8      	ldr	r0, [r7, #12]
 8003fa8:	f000 f964 	bl	8004274 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d00d      	beq.n	8003fce <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb6:	2b04      	cmp	r3, #4
 8003fb8:	d107      	bne.n	8003fca <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fc8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e076      	b.n	80040bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003fce:	88fb      	ldrh	r3, [r7, #6]
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d105      	bne.n	8003fe0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003fd4:	893b      	ldrh	r3, [r7, #8]
 8003fd6:	b2da      	uxtb	r2, r3
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	611a      	str	r2, [r3, #16]
 8003fde:	e021      	b.n	8004024 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003fe0:	893b      	ldrh	r3, [r7, #8]
 8003fe2:	0a1b      	lsrs	r3, r3, #8
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	b2da      	uxtb	r2, r3
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ff0:	6a39      	ldr	r1, [r7, #32]
 8003ff2:	68f8      	ldr	r0, [r7, #12]
 8003ff4:	f000 f93e 	bl	8004274 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00d      	beq.n	800401a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004002:	2b04      	cmp	r3, #4
 8004004:	d107      	bne.n	8004016 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004014:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e050      	b.n	80040bc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800401a:	893b      	ldrh	r3, [r7, #8]
 800401c:	b2da      	uxtb	r2, r3
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004024:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004026:	6a39      	ldr	r1, [r7, #32]
 8004028:	68f8      	ldr	r0, [r7, #12]
 800402a:	f000 f923 	bl	8004274 <I2C_WaitOnTXEFlagUntilTimeout>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d00d      	beq.n	8004050 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004038:	2b04      	cmp	r3, #4
 800403a:	d107      	bne.n	800404c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800404a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e035      	b.n	80040bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800405e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004062:	9300      	str	r3, [sp, #0]
 8004064:	6a3b      	ldr	r3, [r7, #32]
 8004066:	2200      	movs	r2, #0
 8004068:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800406c:	68f8      	ldr	r0, [r7, #12]
 800406e:	f000 f82b 	bl	80040c8 <I2C_WaitOnFlagUntilTimeout>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d00d      	beq.n	8004094 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004082:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004086:	d103      	bne.n	8004090 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800408e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e013      	b.n	80040bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004094:	897b      	ldrh	r3, [r7, #10]
 8004096:	b2db      	uxtb	r3, r3
 8004098:	f043 0301 	orr.w	r3, r3, #1
 800409c:	b2da      	uxtb	r2, r3
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a6:	6a3a      	ldr	r2, [r7, #32]
 80040a8:	4906      	ldr	r1, [pc, #24]	; (80040c4 <I2C_RequestMemoryRead+0x1cc>)
 80040aa:	68f8      	ldr	r0, [r7, #12]
 80040ac:	f000 f863 	bl	8004176 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d001      	beq.n	80040ba <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e000      	b.n	80040bc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3718      	adds	r7, #24
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	00010002 	.word	0x00010002

080040c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	603b      	str	r3, [r7, #0]
 80040d4:	4613      	mov	r3, r2
 80040d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040d8:	e025      	b.n	8004126 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040e0:	d021      	beq.n	8004126 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040e2:	f7fe fe05 	bl	8002cf0 <HAL_GetTick>
 80040e6:	4602      	mov	r2, r0
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	683a      	ldr	r2, [r7, #0]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d302      	bcc.n	80040f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d116      	bne.n	8004126 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2200      	movs	r2, #0
 80040fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2220      	movs	r2, #32
 8004102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004112:	f043 0220 	orr.w	r2, r3, #32
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e023      	b.n	800416e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	0c1b      	lsrs	r3, r3, #16
 800412a:	b2db      	uxtb	r3, r3
 800412c:	2b01      	cmp	r3, #1
 800412e:	d10d      	bne.n	800414c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	43da      	mvns	r2, r3
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	4013      	ands	r3, r2
 800413c:	b29b      	uxth	r3, r3
 800413e:	2b00      	cmp	r3, #0
 8004140:	bf0c      	ite	eq
 8004142:	2301      	moveq	r3, #1
 8004144:	2300      	movne	r3, #0
 8004146:	b2db      	uxtb	r3, r3
 8004148:	461a      	mov	r2, r3
 800414a:	e00c      	b.n	8004166 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	699b      	ldr	r3, [r3, #24]
 8004152:	43da      	mvns	r2, r3
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	4013      	ands	r3, r2
 8004158:	b29b      	uxth	r3, r3
 800415a:	2b00      	cmp	r3, #0
 800415c:	bf0c      	ite	eq
 800415e:	2301      	moveq	r3, #1
 8004160:	2300      	movne	r3, #0
 8004162:	b2db      	uxtb	r3, r3
 8004164:	461a      	mov	r2, r3
 8004166:	79fb      	ldrb	r3, [r7, #7]
 8004168:	429a      	cmp	r2, r3
 800416a:	d0b6      	beq.n	80040da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3710      	adds	r7, #16
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}

08004176 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004176:	b580      	push	{r7, lr}
 8004178:	b084      	sub	sp, #16
 800417a:	af00      	add	r7, sp, #0
 800417c:	60f8      	str	r0, [r7, #12]
 800417e:	60b9      	str	r1, [r7, #8]
 8004180:	607a      	str	r2, [r7, #4]
 8004182:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004184:	e051      	b.n	800422a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	695b      	ldr	r3, [r3, #20]
 800418c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004190:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004194:	d123      	bne.n	80041de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041a4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041ae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2200      	movs	r2, #0
 80041b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2220      	movs	r2, #32
 80041ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ca:	f043 0204 	orr.w	r2, r3, #4
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e046      	b.n	800426c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041e4:	d021      	beq.n	800422a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041e6:	f7fe fd83 	bl	8002cf0 <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d302      	bcc.n	80041fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d116      	bne.n	800422a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2200      	movs	r2, #0
 8004200:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2220      	movs	r2, #32
 8004206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004216:	f043 0220 	orr.w	r2, r3, #32
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e020      	b.n	800426c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	0c1b      	lsrs	r3, r3, #16
 800422e:	b2db      	uxtb	r3, r3
 8004230:	2b01      	cmp	r3, #1
 8004232:	d10c      	bne.n	800424e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	695b      	ldr	r3, [r3, #20]
 800423a:	43da      	mvns	r2, r3
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	4013      	ands	r3, r2
 8004240:	b29b      	uxth	r3, r3
 8004242:	2b00      	cmp	r3, #0
 8004244:	bf14      	ite	ne
 8004246:	2301      	movne	r3, #1
 8004248:	2300      	moveq	r3, #0
 800424a:	b2db      	uxtb	r3, r3
 800424c:	e00b      	b.n	8004266 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	699b      	ldr	r3, [r3, #24]
 8004254:	43da      	mvns	r2, r3
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	4013      	ands	r3, r2
 800425a:	b29b      	uxth	r3, r3
 800425c:	2b00      	cmp	r3, #0
 800425e:	bf14      	ite	ne
 8004260:	2301      	movne	r3, #1
 8004262:	2300      	moveq	r3, #0
 8004264:	b2db      	uxtb	r3, r3
 8004266:	2b00      	cmp	r3, #0
 8004268:	d18d      	bne.n	8004186 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800426a:	2300      	movs	r3, #0
}
 800426c:	4618      	mov	r0, r3
 800426e:	3710      	adds	r7, #16
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	60b9      	str	r1, [r7, #8]
 800427e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004280:	e02d      	b.n	80042de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004282:	68f8      	ldr	r0, [r7, #12]
 8004284:	f000 f8ce 	bl	8004424 <I2C_IsAcknowledgeFailed>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d001      	beq.n	8004292 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e02d      	b.n	80042ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004298:	d021      	beq.n	80042de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800429a:	f7fe fd29 	bl	8002cf0 <HAL_GetTick>
 800429e:	4602      	mov	r2, r0
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	68ba      	ldr	r2, [r7, #8]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d302      	bcc.n	80042b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d116      	bne.n	80042de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2200      	movs	r2, #0
 80042b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2220      	movs	r2, #32
 80042ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ca:	f043 0220 	orr.w	r2, r3, #32
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e007      	b.n	80042ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	695b      	ldr	r3, [r3, #20]
 80042e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042e8:	2b80      	cmp	r3, #128	; 0x80
 80042ea:	d1ca      	bne.n	8004282 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3710      	adds	r7, #16
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}

080042f6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042f6:	b580      	push	{r7, lr}
 80042f8:	b084      	sub	sp, #16
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	60f8      	str	r0, [r7, #12]
 80042fe:	60b9      	str	r1, [r7, #8]
 8004300:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004302:	e02d      	b.n	8004360 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004304:	68f8      	ldr	r0, [r7, #12]
 8004306:	f000 f88d 	bl	8004424 <I2C_IsAcknowledgeFailed>
 800430a:	4603      	mov	r3, r0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d001      	beq.n	8004314 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e02d      	b.n	8004370 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800431a:	d021      	beq.n	8004360 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800431c:	f7fe fce8 	bl	8002cf0 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	68ba      	ldr	r2, [r7, #8]
 8004328:	429a      	cmp	r2, r3
 800432a:	d302      	bcc.n	8004332 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d116      	bne.n	8004360 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2200      	movs	r2, #0
 8004336:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2220      	movs	r2, #32
 800433c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434c:	f043 0220 	orr.w	r2, r3, #32
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e007      	b.n	8004370 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	695b      	ldr	r3, [r3, #20]
 8004366:	f003 0304 	and.w	r3, r3, #4
 800436a:	2b04      	cmp	r3, #4
 800436c:	d1ca      	bne.n	8004304 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800436e:	2300      	movs	r3, #0
}
 8004370:	4618      	mov	r0, r3
 8004372:	3710      	adds	r7, #16
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004384:	e042      	b.n	800440c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	695b      	ldr	r3, [r3, #20]
 800438c:	f003 0310 	and.w	r3, r3, #16
 8004390:	2b10      	cmp	r3, #16
 8004392:	d119      	bne.n	80043c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f06f 0210 	mvn.w	r2, #16
 800439c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2200      	movs	r2, #0
 80043a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2220      	movs	r2, #32
 80043a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e029      	b.n	800441c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043c8:	f7fe fc92 	bl	8002cf0 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	68ba      	ldr	r2, [r7, #8]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d302      	bcc.n	80043de <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d116      	bne.n	800440c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2200      	movs	r2, #0
 80043e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2220      	movs	r2, #32
 80043e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f8:	f043 0220 	orr.w	r2, r3, #32
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e007      	b.n	800441c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	695b      	ldr	r3, [r3, #20]
 8004412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004416:	2b40      	cmp	r3, #64	; 0x40
 8004418:	d1b5      	bne.n	8004386 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	3710      	adds	r7, #16
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}

08004424 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004436:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800443a:	d11b      	bne.n	8004474 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004444:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2220      	movs	r2, #32
 8004450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004460:	f043 0204 	orr.w	r2, r3, #4
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e000      	b.n	8004476 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	370c      	adds	r7, #12
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
	...

08004484 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d101      	bne.n	8004498 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e0cc      	b.n	8004632 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004498:	4b68      	ldr	r3, [pc, #416]	; (800463c <HAL_RCC_ClockConfig+0x1b8>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 030f 	and.w	r3, r3, #15
 80044a0:	683a      	ldr	r2, [r7, #0]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d90c      	bls.n	80044c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044a6:	4b65      	ldr	r3, [pc, #404]	; (800463c <HAL_RCC_ClockConfig+0x1b8>)
 80044a8:	683a      	ldr	r2, [r7, #0]
 80044aa:	b2d2      	uxtb	r2, r2
 80044ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ae:	4b63      	ldr	r3, [pc, #396]	; (800463c <HAL_RCC_ClockConfig+0x1b8>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 030f 	and.w	r3, r3, #15
 80044b6:	683a      	ldr	r2, [r7, #0]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d001      	beq.n	80044c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e0b8      	b.n	8004632 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0302 	and.w	r3, r3, #2
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d020      	beq.n	800450e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0304 	and.w	r3, r3, #4
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d005      	beq.n	80044e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044d8:	4b59      	ldr	r3, [pc, #356]	; (8004640 <HAL_RCC_ClockConfig+0x1bc>)
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	4a58      	ldr	r2, [pc, #352]	; (8004640 <HAL_RCC_ClockConfig+0x1bc>)
 80044de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80044e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0308 	and.w	r3, r3, #8
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d005      	beq.n	80044fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044f0:	4b53      	ldr	r3, [pc, #332]	; (8004640 <HAL_RCC_ClockConfig+0x1bc>)
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	4a52      	ldr	r2, [pc, #328]	; (8004640 <HAL_RCC_ClockConfig+0x1bc>)
 80044f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80044fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044fc:	4b50      	ldr	r3, [pc, #320]	; (8004640 <HAL_RCC_ClockConfig+0x1bc>)
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	494d      	ldr	r1, [pc, #308]	; (8004640 <HAL_RCC_ClockConfig+0x1bc>)
 800450a:	4313      	orrs	r3, r2
 800450c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0301 	and.w	r3, r3, #1
 8004516:	2b00      	cmp	r3, #0
 8004518:	d044      	beq.n	80045a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	2b01      	cmp	r3, #1
 8004520:	d107      	bne.n	8004532 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004522:	4b47      	ldr	r3, [pc, #284]	; (8004640 <HAL_RCC_ClockConfig+0x1bc>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d119      	bne.n	8004562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e07f      	b.n	8004632 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	2b02      	cmp	r3, #2
 8004538:	d003      	beq.n	8004542 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800453e:	2b03      	cmp	r3, #3
 8004540:	d107      	bne.n	8004552 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004542:	4b3f      	ldr	r3, [pc, #252]	; (8004640 <HAL_RCC_ClockConfig+0x1bc>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d109      	bne.n	8004562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e06f      	b.n	8004632 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004552:	4b3b      	ldr	r3, [pc, #236]	; (8004640 <HAL_RCC_ClockConfig+0x1bc>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0302 	and.w	r3, r3, #2
 800455a:	2b00      	cmp	r3, #0
 800455c:	d101      	bne.n	8004562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e067      	b.n	8004632 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004562:	4b37      	ldr	r3, [pc, #220]	; (8004640 <HAL_RCC_ClockConfig+0x1bc>)
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f023 0203 	bic.w	r2, r3, #3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	4934      	ldr	r1, [pc, #208]	; (8004640 <HAL_RCC_ClockConfig+0x1bc>)
 8004570:	4313      	orrs	r3, r2
 8004572:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004574:	f7fe fbbc 	bl	8002cf0 <HAL_GetTick>
 8004578:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800457a:	e00a      	b.n	8004592 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800457c:	f7fe fbb8 	bl	8002cf0 <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	f241 3288 	movw	r2, #5000	; 0x1388
 800458a:	4293      	cmp	r3, r2
 800458c:	d901      	bls.n	8004592 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e04f      	b.n	8004632 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004592:	4b2b      	ldr	r3, [pc, #172]	; (8004640 <HAL_RCC_ClockConfig+0x1bc>)
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	f003 020c 	and.w	r2, r3, #12
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d1eb      	bne.n	800457c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045a4:	4b25      	ldr	r3, [pc, #148]	; (800463c <HAL_RCC_ClockConfig+0x1b8>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 030f 	and.w	r3, r3, #15
 80045ac:	683a      	ldr	r2, [r7, #0]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d20c      	bcs.n	80045cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045b2:	4b22      	ldr	r3, [pc, #136]	; (800463c <HAL_RCC_ClockConfig+0x1b8>)
 80045b4:	683a      	ldr	r2, [r7, #0]
 80045b6:	b2d2      	uxtb	r2, r2
 80045b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ba:	4b20      	ldr	r3, [pc, #128]	; (800463c <HAL_RCC_ClockConfig+0x1b8>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 030f 	and.w	r3, r3, #15
 80045c2:	683a      	ldr	r2, [r7, #0]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d001      	beq.n	80045cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e032      	b.n	8004632 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0304 	and.w	r3, r3, #4
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d008      	beq.n	80045ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045d8:	4b19      	ldr	r3, [pc, #100]	; (8004640 <HAL_RCC_ClockConfig+0x1bc>)
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	4916      	ldr	r1, [pc, #88]	; (8004640 <HAL_RCC_ClockConfig+0x1bc>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0308 	and.w	r3, r3, #8
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d009      	beq.n	800460a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045f6:	4b12      	ldr	r3, [pc, #72]	; (8004640 <HAL_RCC_ClockConfig+0x1bc>)
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	00db      	lsls	r3, r3, #3
 8004604:	490e      	ldr	r1, [pc, #56]	; (8004640 <HAL_RCC_ClockConfig+0x1bc>)
 8004606:	4313      	orrs	r3, r2
 8004608:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800460a:	f000 f855 	bl	80046b8 <HAL_RCC_GetSysClockFreq>
 800460e:	4602      	mov	r2, r0
 8004610:	4b0b      	ldr	r3, [pc, #44]	; (8004640 <HAL_RCC_ClockConfig+0x1bc>)
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	091b      	lsrs	r3, r3, #4
 8004616:	f003 030f 	and.w	r3, r3, #15
 800461a:	490a      	ldr	r1, [pc, #40]	; (8004644 <HAL_RCC_ClockConfig+0x1c0>)
 800461c:	5ccb      	ldrb	r3, [r1, r3]
 800461e:	fa22 f303 	lsr.w	r3, r2, r3
 8004622:	4a09      	ldr	r2, [pc, #36]	; (8004648 <HAL_RCC_ClockConfig+0x1c4>)
 8004624:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004626:	4b09      	ldr	r3, [pc, #36]	; (800464c <HAL_RCC_ClockConfig+0x1c8>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4618      	mov	r0, r3
 800462c:	f7fe fb1c 	bl	8002c68 <HAL_InitTick>

  return HAL_OK;
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	3710      	adds	r7, #16
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	40023c00 	.word	0x40023c00
 8004640:	40023800 	.word	0x40023800
 8004644:	08009854 	.word	0x08009854
 8004648:	20000008 	.word	0x20000008
 800464c:	2000000c 	.word	0x2000000c

08004650 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004650:	b480      	push	{r7}
 8004652:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004654:	4b03      	ldr	r3, [pc, #12]	; (8004664 <HAL_RCC_GetHCLKFreq+0x14>)
 8004656:	681b      	ldr	r3, [r3, #0]
}
 8004658:	4618      	mov	r0, r3
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr
 8004662:	bf00      	nop
 8004664:	20000008 	.word	0x20000008

08004668 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800466c:	f7ff fff0 	bl	8004650 <HAL_RCC_GetHCLKFreq>
 8004670:	4602      	mov	r2, r0
 8004672:	4b05      	ldr	r3, [pc, #20]	; (8004688 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	0a9b      	lsrs	r3, r3, #10
 8004678:	f003 0307 	and.w	r3, r3, #7
 800467c:	4903      	ldr	r1, [pc, #12]	; (800468c <HAL_RCC_GetPCLK1Freq+0x24>)
 800467e:	5ccb      	ldrb	r3, [r1, r3]
 8004680:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004684:	4618      	mov	r0, r3
 8004686:	bd80      	pop	{r7, pc}
 8004688:	40023800 	.word	0x40023800
 800468c:	08009864 	.word	0x08009864

08004690 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004694:	f7ff ffdc 	bl	8004650 <HAL_RCC_GetHCLKFreq>
 8004698:	4602      	mov	r2, r0
 800469a:	4b05      	ldr	r3, [pc, #20]	; (80046b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	0b5b      	lsrs	r3, r3, #13
 80046a0:	f003 0307 	and.w	r3, r3, #7
 80046a4:	4903      	ldr	r1, [pc, #12]	; (80046b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046a6:	5ccb      	ldrb	r3, [r1, r3]
 80046a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	40023800 	.word	0x40023800
 80046b4:	08009864 	.word	0x08009864

080046b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046bc:	b088      	sub	sp, #32
 80046be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80046c0:	2300      	movs	r3, #0
 80046c2:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80046c4:	2300      	movs	r3, #0
 80046c6:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80046c8:	2300      	movs	r3, #0
 80046ca:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80046cc:	2300      	movs	r3, #0
 80046ce:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80046d0:	2300      	movs	r3, #0
 80046d2:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046d4:	4bce      	ldr	r3, [pc, #824]	; (8004a10 <HAL_RCC_GetSysClockFreq+0x358>)
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f003 030c 	and.w	r3, r3, #12
 80046dc:	2b0c      	cmp	r3, #12
 80046de:	f200 818d 	bhi.w	80049fc <HAL_RCC_GetSysClockFreq+0x344>
 80046e2:	a201      	add	r2, pc, #4	; (adr r2, 80046e8 <HAL_RCC_GetSysClockFreq+0x30>)
 80046e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e8:	0800471d 	.word	0x0800471d
 80046ec:	080049fd 	.word	0x080049fd
 80046f0:	080049fd 	.word	0x080049fd
 80046f4:	080049fd 	.word	0x080049fd
 80046f8:	08004723 	.word	0x08004723
 80046fc:	080049fd 	.word	0x080049fd
 8004700:	080049fd 	.word	0x080049fd
 8004704:	080049fd 	.word	0x080049fd
 8004708:	08004729 	.word	0x08004729
 800470c:	080049fd 	.word	0x080049fd
 8004710:	080049fd 	.word	0x080049fd
 8004714:	080049fd 	.word	0x080049fd
 8004718:	0800489d 	.word	0x0800489d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800471c:	4bbd      	ldr	r3, [pc, #756]	; (8004a14 <HAL_RCC_GetSysClockFreq+0x35c>)
 800471e:	61bb      	str	r3, [r7, #24]
       break;
 8004720:	e16f      	b.n	8004a02 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004722:	4bbd      	ldr	r3, [pc, #756]	; (8004a18 <HAL_RCC_GetSysClockFreq+0x360>)
 8004724:	61bb      	str	r3, [r7, #24]
      break;
 8004726:	e16c      	b.n	8004a02 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004728:	4bb9      	ldr	r3, [pc, #740]	; (8004a10 <HAL_RCC_GetSysClockFreq+0x358>)
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004730:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004732:	4bb7      	ldr	r3, [pc, #732]	; (8004a10 <HAL_RCC_GetSysClockFreq+0x358>)
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d053      	beq.n	80047e6 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800473e:	4bb4      	ldr	r3, [pc, #720]	; (8004a10 <HAL_RCC_GetSysClockFreq+0x358>)
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	099b      	lsrs	r3, r3, #6
 8004744:	461a      	mov	r2, r3
 8004746:	f04f 0300 	mov.w	r3, #0
 800474a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800474e:	f04f 0100 	mov.w	r1, #0
 8004752:	ea02 0400 	and.w	r4, r2, r0
 8004756:	603c      	str	r4, [r7, #0]
 8004758:	400b      	ands	r3, r1
 800475a:	607b      	str	r3, [r7, #4]
 800475c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004760:	4620      	mov	r0, r4
 8004762:	4629      	mov	r1, r5
 8004764:	f04f 0200 	mov.w	r2, #0
 8004768:	f04f 0300 	mov.w	r3, #0
 800476c:	014b      	lsls	r3, r1, #5
 800476e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004772:	0142      	lsls	r2, r0, #5
 8004774:	4610      	mov	r0, r2
 8004776:	4619      	mov	r1, r3
 8004778:	4623      	mov	r3, r4
 800477a:	1ac0      	subs	r0, r0, r3
 800477c:	462b      	mov	r3, r5
 800477e:	eb61 0103 	sbc.w	r1, r1, r3
 8004782:	f04f 0200 	mov.w	r2, #0
 8004786:	f04f 0300 	mov.w	r3, #0
 800478a:	018b      	lsls	r3, r1, #6
 800478c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004790:	0182      	lsls	r2, r0, #6
 8004792:	1a12      	subs	r2, r2, r0
 8004794:	eb63 0301 	sbc.w	r3, r3, r1
 8004798:	f04f 0000 	mov.w	r0, #0
 800479c:	f04f 0100 	mov.w	r1, #0
 80047a0:	00d9      	lsls	r1, r3, #3
 80047a2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80047a6:	00d0      	lsls	r0, r2, #3
 80047a8:	4602      	mov	r2, r0
 80047aa:	460b      	mov	r3, r1
 80047ac:	4621      	mov	r1, r4
 80047ae:	1852      	adds	r2, r2, r1
 80047b0:	4629      	mov	r1, r5
 80047b2:	eb43 0101 	adc.w	r1, r3, r1
 80047b6:	460b      	mov	r3, r1
 80047b8:	f04f 0000 	mov.w	r0, #0
 80047bc:	f04f 0100 	mov.w	r1, #0
 80047c0:	0259      	lsls	r1, r3, #9
 80047c2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80047c6:	0250      	lsls	r0, r2, #9
 80047c8:	4602      	mov	r2, r0
 80047ca:	460b      	mov	r3, r1
 80047cc:	4610      	mov	r0, r2
 80047ce:	4619      	mov	r1, r3
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	461a      	mov	r2, r3
 80047d4:	f04f 0300 	mov.w	r3, #0
 80047d8:	f7fc fa56 	bl	8000c88 <__aeabi_uldivmod>
 80047dc:	4602      	mov	r2, r0
 80047de:	460b      	mov	r3, r1
 80047e0:	4613      	mov	r3, r2
 80047e2:	61fb      	str	r3, [r7, #28]
 80047e4:	e04c      	b.n	8004880 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047e6:	4b8a      	ldr	r3, [pc, #552]	; (8004a10 <HAL_RCC_GetSysClockFreq+0x358>)
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	099b      	lsrs	r3, r3, #6
 80047ec:	461a      	mov	r2, r3
 80047ee:	f04f 0300 	mov.w	r3, #0
 80047f2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80047f6:	f04f 0100 	mov.w	r1, #0
 80047fa:	ea02 0a00 	and.w	sl, r2, r0
 80047fe:	ea03 0b01 	and.w	fp, r3, r1
 8004802:	4650      	mov	r0, sl
 8004804:	4659      	mov	r1, fp
 8004806:	f04f 0200 	mov.w	r2, #0
 800480a:	f04f 0300 	mov.w	r3, #0
 800480e:	014b      	lsls	r3, r1, #5
 8004810:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004814:	0142      	lsls	r2, r0, #5
 8004816:	4610      	mov	r0, r2
 8004818:	4619      	mov	r1, r3
 800481a:	ebb0 000a 	subs.w	r0, r0, sl
 800481e:	eb61 010b 	sbc.w	r1, r1, fp
 8004822:	f04f 0200 	mov.w	r2, #0
 8004826:	f04f 0300 	mov.w	r3, #0
 800482a:	018b      	lsls	r3, r1, #6
 800482c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004830:	0182      	lsls	r2, r0, #6
 8004832:	1a12      	subs	r2, r2, r0
 8004834:	eb63 0301 	sbc.w	r3, r3, r1
 8004838:	f04f 0000 	mov.w	r0, #0
 800483c:	f04f 0100 	mov.w	r1, #0
 8004840:	00d9      	lsls	r1, r3, #3
 8004842:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004846:	00d0      	lsls	r0, r2, #3
 8004848:	4602      	mov	r2, r0
 800484a:	460b      	mov	r3, r1
 800484c:	eb12 020a 	adds.w	r2, r2, sl
 8004850:	eb43 030b 	adc.w	r3, r3, fp
 8004854:	f04f 0000 	mov.w	r0, #0
 8004858:	f04f 0100 	mov.w	r1, #0
 800485c:	0299      	lsls	r1, r3, #10
 800485e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004862:	0290      	lsls	r0, r2, #10
 8004864:	4602      	mov	r2, r0
 8004866:	460b      	mov	r3, r1
 8004868:	4610      	mov	r0, r2
 800486a:	4619      	mov	r1, r3
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	461a      	mov	r2, r3
 8004870:	f04f 0300 	mov.w	r3, #0
 8004874:	f7fc fa08 	bl	8000c88 <__aeabi_uldivmod>
 8004878:	4602      	mov	r2, r0
 800487a:	460b      	mov	r3, r1
 800487c:	4613      	mov	r3, r2
 800487e:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004880:	4b63      	ldr	r3, [pc, #396]	; (8004a10 <HAL_RCC_GetSysClockFreq+0x358>)
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	0c1b      	lsrs	r3, r3, #16
 8004886:	f003 0303 	and.w	r3, r3, #3
 800488a:	3301      	adds	r3, #1
 800488c:	005b      	lsls	r3, r3, #1
 800488e:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8004890:	69fa      	ldr	r2, [r7, #28]
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	fbb2 f3f3 	udiv	r3, r2, r3
 8004898:	61bb      	str	r3, [r7, #24]
      break;
 800489a:	e0b2      	b.n	8004a02 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800489c:	4b5c      	ldr	r3, [pc, #368]	; (8004a10 <HAL_RCC_GetSysClockFreq+0x358>)
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048a4:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048a6:	4b5a      	ldr	r3, [pc, #360]	; (8004a10 <HAL_RCC_GetSysClockFreq+0x358>)
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d04d      	beq.n	800494e <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048b2:	4b57      	ldr	r3, [pc, #348]	; (8004a10 <HAL_RCC_GetSysClockFreq+0x358>)
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	099b      	lsrs	r3, r3, #6
 80048b8:	461a      	mov	r2, r3
 80048ba:	f04f 0300 	mov.w	r3, #0
 80048be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80048c2:	f04f 0100 	mov.w	r1, #0
 80048c6:	ea02 0800 	and.w	r8, r2, r0
 80048ca:	ea03 0901 	and.w	r9, r3, r1
 80048ce:	4640      	mov	r0, r8
 80048d0:	4649      	mov	r1, r9
 80048d2:	f04f 0200 	mov.w	r2, #0
 80048d6:	f04f 0300 	mov.w	r3, #0
 80048da:	014b      	lsls	r3, r1, #5
 80048dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80048e0:	0142      	lsls	r2, r0, #5
 80048e2:	4610      	mov	r0, r2
 80048e4:	4619      	mov	r1, r3
 80048e6:	ebb0 0008 	subs.w	r0, r0, r8
 80048ea:	eb61 0109 	sbc.w	r1, r1, r9
 80048ee:	f04f 0200 	mov.w	r2, #0
 80048f2:	f04f 0300 	mov.w	r3, #0
 80048f6:	018b      	lsls	r3, r1, #6
 80048f8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80048fc:	0182      	lsls	r2, r0, #6
 80048fe:	1a12      	subs	r2, r2, r0
 8004900:	eb63 0301 	sbc.w	r3, r3, r1
 8004904:	f04f 0000 	mov.w	r0, #0
 8004908:	f04f 0100 	mov.w	r1, #0
 800490c:	00d9      	lsls	r1, r3, #3
 800490e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004912:	00d0      	lsls	r0, r2, #3
 8004914:	4602      	mov	r2, r0
 8004916:	460b      	mov	r3, r1
 8004918:	eb12 0208 	adds.w	r2, r2, r8
 800491c:	eb43 0309 	adc.w	r3, r3, r9
 8004920:	f04f 0000 	mov.w	r0, #0
 8004924:	f04f 0100 	mov.w	r1, #0
 8004928:	0259      	lsls	r1, r3, #9
 800492a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800492e:	0250      	lsls	r0, r2, #9
 8004930:	4602      	mov	r2, r0
 8004932:	460b      	mov	r3, r1
 8004934:	4610      	mov	r0, r2
 8004936:	4619      	mov	r1, r3
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	461a      	mov	r2, r3
 800493c:	f04f 0300 	mov.w	r3, #0
 8004940:	f7fc f9a2 	bl	8000c88 <__aeabi_uldivmod>
 8004944:	4602      	mov	r2, r0
 8004946:	460b      	mov	r3, r1
 8004948:	4613      	mov	r3, r2
 800494a:	61fb      	str	r3, [r7, #28]
 800494c:	e04a      	b.n	80049e4 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800494e:	4b30      	ldr	r3, [pc, #192]	; (8004a10 <HAL_RCC_GetSysClockFreq+0x358>)
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	099b      	lsrs	r3, r3, #6
 8004954:	461a      	mov	r2, r3
 8004956:	f04f 0300 	mov.w	r3, #0
 800495a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800495e:	f04f 0100 	mov.w	r1, #0
 8004962:	ea02 0400 	and.w	r4, r2, r0
 8004966:	ea03 0501 	and.w	r5, r3, r1
 800496a:	4620      	mov	r0, r4
 800496c:	4629      	mov	r1, r5
 800496e:	f04f 0200 	mov.w	r2, #0
 8004972:	f04f 0300 	mov.w	r3, #0
 8004976:	014b      	lsls	r3, r1, #5
 8004978:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800497c:	0142      	lsls	r2, r0, #5
 800497e:	4610      	mov	r0, r2
 8004980:	4619      	mov	r1, r3
 8004982:	1b00      	subs	r0, r0, r4
 8004984:	eb61 0105 	sbc.w	r1, r1, r5
 8004988:	f04f 0200 	mov.w	r2, #0
 800498c:	f04f 0300 	mov.w	r3, #0
 8004990:	018b      	lsls	r3, r1, #6
 8004992:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004996:	0182      	lsls	r2, r0, #6
 8004998:	1a12      	subs	r2, r2, r0
 800499a:	eb63 0301 	sbc.w	r3, r3, r1
 800499e:	f04f 0000 	mov.w	r0, #0
 80049a2:	f04f 0100 	mov.w	r1, #0
 80049a6:	00d9      	lsls	r1, r3, #3
 80049a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80049ac:	00d0      	lsls	r0, r2, #3
 80049ae:	4602      	mov	r2, r0
 80049b0:	460b      	mov	r3, r1
 80049b2:	1912      	adds	r2, r2, r4
 80049b4:	eb45 0303 	adc.w	r3, r5, r3
 80049b8:	f04f 0000 	mov.w	r0, #0
 80049bc:	f04f 0100 	mov.w	r1, #0
 80049c0:	0299      	lsls	r1, r3, #10
 80049c2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80049c6:	0290      	lsls	r0, r2, #10
 80049c8:	4602      	mov	r2, r0
 80049ca:	460b      	mov	r3, r1
 80049cc:	4610      	mov	r0, r2
 80049ce:	4619      	mov	r1, r3
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	461a      	mov	r2, r3
 80049d4:	f04f 0300 	mov.w	r3, #0
 80049d8:	f7fc f956 	bl	8000c88 <__aeabi_uldivmod>
 80049dc:	4602      	mov	r2, r0
 80049de:	460b      	mov	r3, r1
 80049e0:	4613      	mov	r3, r2
 80049e2:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80049e4:	4b0a      	ldr	r3, [pc, #40]	; (8004a10 <HAL_RCC_GetSysClockFreq+0x358>)
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	0f1b      	lsrs	r3, r3, #28
 80049ea:	f003 0307 	and.w	r3, r3, #7
 80049ee:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80049f0:	69fa      	ldr	r2, [r7, #28]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049f8:	61bb      	str	r3, [r7, #24]
      break;
 80049fa:	e002      	b.n	8004a02 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049fc:	4b05      	ldr	r3, [pc, #20]	; (8004a14 <HAL_RCC_GetSysClockFreq+0x35c>)
 80049fe:	61bb      	str	r3, [r7, #24]
      break;
 8004a00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a02:	69bb      	ldr	r3, [r7, #24]
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3720      	adds	r7, #32
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a0e:	bf00      	nop
 8004a10:	40023800 	.word	0x40023800
 8004a14:	00f42400 	.word	0x00f42400
 8004a18:	007a1200 	.word	0x007a1200

08004a1c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b086      	sub	sp, #24
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d101      	bne.n	8004a2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e28d      	b.n	8004f4a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0301 	and.w	r3, r3, #1
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	f000 8083 	beq.w	8004b42 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004a3c:	4b94      	ldr	r3, [pc, #592]	; (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	f003 030c 	and.w	r3, r3, #12
 8004a44:	2b04      	cmp	r3, #4
 8004a46:	d019      	beq.n	8004a7c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004a48:	4b91      	ldr	r3, [pc, #580]	; (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004a50:	2b08      	cmp	r3, #8
 8004a52:	d106      	bne.n	8004a62 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004a54:	4b8e      	ldr	r3, [pc, #568]	; (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a60:	d00c      	beq.n	8004a7c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a62:	4b8b      	ldr	r3, [pc, #556]	; (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004a6a:	2b0c      	cmp	r3, #12
 8004a6c:	d112      	bne.n	8004a94 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a6e:	4b88      	ldr	r3, [pc, #544]	; (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a7a:	d10b      	bne.n	8004a94 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a7c:	4b84      	ldr	r3, [pc, #528]	; (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d05b      	beq.n	8004b40 <HAL_RCC_OscConfig+0x124>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d157      	bne.n	8004b40 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e25a      	b.n	8004f4a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a9c:	d106      	bne.n	8004aac <HAL_RCC_OscConfig+0x90>
 8004a9e:	4b7c      	ldr	r3, [pc, #496]	; (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a7b      	ldr	r2, [pc, #492]	; (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004aa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004aa8:	6013      	str	r3, [r2, #0]
 8004aaa:	e01d      	b.n	8004ae8 <HAL_RCC_OscConfig+0xcc>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ab4:	d10c      	bne.n	8004ad0 <HAL_RCC_OscConfig+0xb4>
 8004ab6:	4b76      	ldr	r3, [pc, #472]	; (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a75      	ldr	r2, [pc, #468]	; (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004abc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ac0:	6013      	str	r3, [r2, #0]
 8004ac2:	4b73      	ldr	r3, [pc, #460]	; (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a72      	ldr	r2, [pc, #456]	; (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004ac8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004acc:	6013      	str	r3, [r2, #0]
 8004ace:	e00b      	b.n	8004ae8 <HAL_RCC_OscConfig+0xcc>
 8004ad0:	4b6f      	ldr	r3, [pc, #444]	; (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a6e      	ldr	r2, [pc, #440]	; (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004ad6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ada:	6013      	str	r3, [r2, #0]
 8004adc:	4b6c      	ldr	r3, [pc, #432]	; (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a6b      	ldr	r2, [pc, #428]	; (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004ae2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ae6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d013      	beq.n	8004b18 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004af0:	f7fe f8fe 	bl	8002cf0 <HAL_GetTick>
 8004af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004af6:	e008      	b.n	8004b0a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004af8:	f7fe f8fa 	bl	8002cf0 <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	2b64      	cmp	r3, #100	; 0x64
 8004b04:	d901      	bls.n	8004b0a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e21f      	b.n	8004f4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b0a:	4b61      	ldr	r3, [pc, #388]	; (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d0f0      	beq.n	8004af8 <HAL_RCC_OscConfig+0xdc>
 8004b16:	e014      	b.n	8004b42 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b18:	f7fe f8ea 	bl	8002cf0 <HAL_GetTick>
 8004b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b1e:	e008      	b.n	8004b32 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b20:	f7fe f8e6 	bl	8002cf0 <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	2b64      	cmp	r3, #100	; 0x64
 8004b2c:	d901      	bls.n	8004b32 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e20b      	b.n	8004f4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b32:	4b57      	ldr	r3, [pc, #348]	; (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1f0      	bne.n	8004b20 <HAL_RCC_OscConfig+0x104>
 8004b3e:	e000      	b.n	8004b42 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 0302 	and.w	r3, r3, #2
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d06f      	beq.n	8004c2e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004b4e:	4b50      	ldr	r3, [pc, #320]	; (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	f003 030c 	and.w	r3, r3, #12
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d017      	beq.n	8004b8a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004b5a:	4b4d      	ldr	r3, [pc, #308]	; (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004b62:	2b08      	cmp	r3, #8
 8004b64:	d105      	bne.n	8004b72 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004b66:	4b4a      	ldr	r3, [pc, #296]	; (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00b      	beq.n	8004b8a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b72:	4b47      	ldr	r3, [pc, #284]	; (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004b7a:	2b0c      	cmp	r3, #12
 8004b7c:	d11c      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b7e:	4b44      	ldr	r3, [pc, #272]	; (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d116      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b8a:	4b41      	ldr	r3, [pc, #260]	; (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0302 	and.w	r3, r3, #2
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d005      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x186>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d001      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e1d3      	b.n	8004f4a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ba2:	4b3b      	ldr	r3, [pc, #236]	; (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	00db      	lsls	r3, r3, #3
 8004bb0:	4937      	ldr	r1, [pc, #220]	; (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bb6:	e03a      	b.n	8004c2e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d020      	beq.n	8004c02 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bc0:	4b34      	ldr	r3, [pc, #208]	; (8004c94 <HAL_RCC_OscConfig+0x278>)
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc6:	f7fe f893 	bl	8002cf0 <HAL_GetTick>
 8004bca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bcc:	e008      	b.n	8004be0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bce:	f7fe f88f 	bl	8002cf0 <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d901      	bls.n	8004be0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e1b4      	b.n	8004f4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004be0:	4b2b      	ldr	r3, [pc, #172]	; (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0302 	and.w	r3, r3, #2
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d0f0      	beq.n	8004bce <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bec:	4b28      	ldr	r3, [pc, #160]	; (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	691b      	ldr	r3, [r3, #16]
 8004bf8:	00db      	lsls	r3, r3, #3
 8004bfa:	4925      	ldr	r1, [pc, #148]	; (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	600b      	str	r3, [r1, #0]
 8004c00:	e015      	b.n	8004c2e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c02:	4b24      	ldr	r3, [pc, #144]	; (8004c94 <HAL_RCC_OscConfig+0x278>)
 8004c04:	2200      	movs	r2, #0
 8004c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c08:	f7fe f872 	bl	8002cf0 <HAL_GetTick>
 8004c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c0e:	e008      	b.n	8004c22 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c10:	f7fe f86e 	bl	8002cf0 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d901      	bls.n	8004c22 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e193      	b.n	8004f4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c22:	4b1b      	ldr	r3, [pc, #108]	; (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0302 	and.w	r3, r3, #2
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d1f0      	bne.n	8004c10 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0308 	and.w	r3, r3, #8
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d036      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d016      	beq.n	8004c70 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c42:	4b15      	ldr	r3, [pc, #84]	; (8004c98 <HAL_RCC_OscConfig+0x27c>)
 8004c44:	2201      	movs	r2, #1
 8004c46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c48:	f7fe f852 	bl	8002cf0 <HAL_GetTick>
 8004c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c4e:	e008      	b.n	8004c62 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c50:	f7fe f84e 	bl	8002cf0 <HAL_GetTick>
 8004c54:	4602      	mov	r2, r0
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d901      	bls.n	8004c62 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e173      	b.n	8004f4a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c62:	4b0b      	ldr	r3, [pc, #44]	; (8004c90 <HAL_RCC_OscConfig+0x274>)
 8004c64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c66:	f003 0302 	and.w	r3, r3, #2
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d0f0      	beq.n	8004c50 <HAL_RCC_OscConfig+0x234>
 8004c6e:	e01b      	b.n	8004ca8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c70:	4b09      	ldr	r3, [pc, #36]	; (8004c98 <HAL_RCC_OscConfig+0x27c>)
 8004c72:	2200      	movs	r2, #0
 8004c74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c76:	f7fe f83b 	bl	8002cf0 <HAL_GetTick>
 8004c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c7c:	e00e      	b.n	8004c9c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c7e:	f7fe f837 	bl	8002cf0 <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d907      	bls.n	8004c9c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e15c      	b.n	8004f4a <HAL_RCC_OscConfig+0x52e>
 8004c90:	40023800 	.word	0x40023800
 8004c94:	42470000 	.word	0x42470000
 8004c98:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c9c:	4b8a      	ldr	r3, [pc, #552]	; (8004ec8 <HAL_RCC_OscConfig+0x4ac>)
 8004c9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ca0:	f003 0302 	and.w	r3, r3, #2
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d1ea      	bne.n	8004c7e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0304 	and.w	r3, r3, #4
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f000 8097 	beq.w	8004de4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cba:	4b83      	ldr	r3, [pc, #524]	; (8004ec8 <HAL_RCC_OscConfig+0x4ac>)
 8004cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d10f      	bne.n	8004ce6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	60bb      	str	r3, [r7, #8]
 8004cca:	4b7f      	ldr	r3, [pc, #508]	; (8004ec8 <HAL_RCC_OscConfig+0x4ac>)
 8004ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cce:	4a7e      	ldr	r2, [pc, #504]	; (8004ec8 <HAL_RCC_OscConfig+0x4ac>)
 8004cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8004cd6:	4b7c      	ldr	r3, [pc, #496]	; (8004ec8 <HAL_RCC_OscConfig+0x4ac>)
 8004cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cde:	60bb      	str	r3, [r7, #8]
 8004ce0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ce6:	4b79      	ldr	r3, [pc, #484]	; (8004ecc <HAL_RCC_OscConfig+0x4b0>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d118      	bne.n	8004d24 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cf2:	4b76      	ldr	r3, [pc, #472]	; (8004ecc <HAL_RCC_OscConfig+0x4b0>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a75      	ldr	r2, [pc, #468]	; (8004ecc <HAL_RCC_OscConfig+0x4b0>)
 8004cf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cfe:	f7fd fff7 	bl	8002cf0 <HAL_GetTick>
 8004d02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d04:	e008      	b.n	8004d18 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d06:	f7fd fff3 	bl	8002cf0 <HAL_GetTick>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	d901      	bls.n	8004d18 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	e118      	b.n	8004f4a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d18:	4b6c      	ldr	r3, [pc, #432]	; (8004ecc <HAL_RCC_OscConfig+0x4b0>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d0f0      	beq.n	8004d06 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d106      	bne.n	8004d3a <HAL_RCC_OscConfig+0x31e>
 8004d2c:	4b66      	ldr	r3, [pc, #408]	; (8004ec8 <HAL_RCC_OscConfig+0x4ac>)
 8004d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d30:	4a65      	ldr	r2, [pc, #404]	; (8004ec8 <HAL_RCC_OscConfig+0x4ac>)
 8004d32:	f043 0301 	orr.w	r3, r3, #1
 8004d36:	6713      	str	r3, [r2, #112]	; 0x70
 8004d38:	e01c      	b.n	8004d74 <HAL_RCC_OscConfig+0x358>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	2b05      	cmp	r3, #5
 8004d40:	d10c      	bne.n	8004d5c <HAL_RCC_OscConfig+0x340>
 8004d42:	4b61      	ldr	r3, [pc, #388]	; (8004ec8 <HAL_RCC_OscConfig+0x4ac>)
 8004d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d46:	4a60      	ldr	r2, [pc, #384]	; (8004ec8 <HAL_RCC_OscConfig+0x4ac>)
 8004d48:	f043 0304 	orr.w	r3, r3, #4
 8004d4c:	6713      	str	r3, [r2, #112]	; 0x70
 8004d4e:	4b5e      	ldr	r3, [pc, #376]	; (8004ec8 <HAL_RCC_OscConfig+0x4ac>)
 8004d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d52:	4a5d      	ldr	r2, [pc, #372]	; (8004ec8 <HAL_RCC_OscConfig+0x4ac>)
 8004d54:	f043 0301 	orr.w	r3, r3, #1
 8004d58:	6713      	str	r3, [r2, #112]	; 0x70
 8004d5a:	e00b      	b.n	8004d74 <HAL_RCC_OscConfig+0x358>
 8004d5c:	4b5a      	ldr	r3, [pc, #360]	; (8004ec8 <HAL_RCC_OscConfig+0x4ac>)
 8004d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d60:	4a59      	ldr	r2, [pc, #356]	; (8004ec8 <HAL_RCC_OscConfig+0x4ac>)
 8004d62:	f023 0301 	bic.w	r3, r3, #1
 8004d66:	6713      	str	r3, [r2, #112]	; 0x70
 8004d68:	4b57      	ldr	r3, [pc, #348]	; (8004ec8 <HAL_RCC_OscConfig+0x4ac>)
 8004d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d6c:	4a56      	ldr	r2, [pc, #344]	; (8004ec8 <HAL_RCC_OscConfig+0x4ac>)
 8004d6e:	f023 0304 	bic.w	r3, r3, #4
 8004d72:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d015      	beq.n	8004da8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d7c:	f7fd ffb8 	bl	8002cf0 <HAL_GetTick>
 8004d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d82:	e00a      	b.n	8004d9a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d84:	f7fd ffb4 	bl	8002cf0 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d901      	bls.n	8004d9a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	e0d7      	b.n	8004f4a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d9a:	4b4b      	ldr	r3, [pc, #300]	; (8004ec8 <HAL_RCC_OscConfig+0x4ac>)
 8004d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d9e:	f003 0302 	and.w	r3, r3, #2
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d0ee      	beq.n	8004d84 <HAL_RCC_OscConfig+0x368>
 8004da6:	e014      	b.n	8004dd2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004da8:	f7fd ffa2 	bl	8002cf0 <HAL_GetTick>
 8004dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dae:	e00a      	b.n	8004dc6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004db0:	f7fd ff9e 	bl	8002cf0 <HAL_GetTick>
 8004db4:	4602      	mov	r2, r0
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d901      	bls.n	8004dc6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e0c1      	b.n	8004f4a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dc6:	4b40      	ldr	r3, [pc, #256]	; (8004ec8 <HAL_RCC_OscConfig+0x4ac>)
 8004dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dca:	f003 0302 	and.w	r3, r3, #2
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d1ee      	bne.n	8004db0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004dd2:	7dfb      	ldrb	r3, [r7, #23]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d105      	bne.n	8004de4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dd8:	4b3b      	ldr	r3, [pc, #236]	; (8004ec8 <HAL_RCC_OscConfig+0x4ac>)
 8004dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ddc:	4a3a      	ldr	r2, [pc, #232]	; (8004ec8 <HAL_RCC_OscConfig+0x4ac>)
 8004dde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004de2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	699b      	ldr	r3, [r3, #24]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	f000 80ad 	beq.w	8004f48 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004dee:	4b36      	ldr	r3, [pc, #216]	; (8004ec8 <HAL_RCC_OscConfig+0x4ac>)
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f003 030c 	and.w	r3, r3, #12
 8004df6:	2b08      	cmp	r3, #8
 8004df8:	d060      	beq.n	8004ebc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	699b      	ldr	r3, [r3, #24]
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d145      	bne.n	8004e8e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e02:	4b33      	ldr	r3, [pc, #204]	; (8004ed0 <HAL_RCC_OscConfig+0x4b4>)
 8004e04:	2200      	movs	r2, #0
 8004e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e08:	f7fd ff72 	bl	8002cf0 <HAL_GetTick>
 8004e0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e0e:	e008      	b.n	8004e22 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e10:	f7fd ff6e 	bl	8002cf0 <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d901      	bls.n	8004e22 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e093      	b.n	8004f4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e22:	4b29      	ldr	r3, [pc, #164]	; (8004ec8 <HAL_RCC_OscConfig+0x4ac>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d1f0      	bne.n	8004e10 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	69da      	ldr	r2, [r3, #28]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a1b      	ldr	r3, [r3, #32]
 8004e36:	431a      	orrs	r2, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3c:	019b      	lsls	r3, r3, #6
 8004e3e:	431a      	orrs	r2, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e44:	085b      	lsrs	r3, r3, #1
 8004e46:	3b01      	subs	r3, #1
 8004e48:	041b      	lsls	r3, r3, #16
 8004e4a:	431a      	orrs	r2, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e50:	061b      	lsls	r3, r3, #24
 8004e52:	431a      	orrs	r2, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e58:	071b      	lsls	r3, r3, #28
 8004e5a:	491b      	ldr	r1, [pc, #108]	; (8004ec8 <HAL_RCC_OscConfig+0x4ac>)
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e60:	4b1b      	ldr	r3, [pc, #108]	; (8004ed0 <HAL_RCC_OscConfig+0x4b4>)
 8004e62:	2201      	movs	r2, #1
 8004e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e66:	f7fd ff43 	bl	8002cf0 <HAL_GetTick>
 8004e6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e6c:	e008      	b.n	8004e80 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e6e:	f7fd ff3f 	bl	8002cf0 <HAL_GetTick>
 8004e72:	4602      	mov	r2, r0
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d901      	bls.n	8004e80 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e064      	b.n	8004f4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e80:	4b11      	ldr	r3, [pc, #68]	; (8004ec8 <HAL_RCC_OscConfig+0x4ac>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d0f0      	beq.n	8004e6e <HAL_RCC_OscConfig+0x452>
 8004e8c:	e05c      	b.n	8004f48 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e8e:	4b10      	ldr	r3, [pc, #64]	; (8004ed0 <HAL_RCC_OscConfig+0x4b4>)
 8004e90:	2200      	movs	r2, #0
 8004e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e94:	f7fd ff2c 	bl	8002cf0 <HAL_GetTick>
 8004e98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e9a:	e008      	b.n	8004eae <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e9c:	f7fd ff28 	bl	8002cf0 <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d901      	bls.n	8004eae <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e04d      	b.n	8004f4a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eae:	4b06      	ldr	r3, [pc, #24]	; (8004ec8 <HAL_RCC_OscConfig+0x4ac>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d1f0      	bne.n	8004e9c <HAL_RCC_OscConfig+0x480>
 8004eba:	e045      	b.n	8004f48 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	699b      	ldr	r3, [r3, #24]
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d107      	bne.n	8004ed4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e040      	b.n	8004f4a <HAL_RCC_OscConfig+0x52e>
 8004ec8:	40023800 	.word	0x40023800
 8004ecc:	40007000 	.word	0x40007000
 8004ed0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ed4:	4b1f      	ldr	r3, [pc, #124]	; (8004f54 <HAL_RCC_OscConfig+0x538>)
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	699b      	ldr	r3, [r3, #24]
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d030      	beq.n	8004f44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d129      	bne.n	8004f44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d122      	bne.n	8004f44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f04:	4013      	ands	r3, r2
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004f0a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d119      	bne.n	8004f44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f1a:	085b      	lsrs	r3, r3, #1
 8004f1c:	3b01      	subs	r3, #1
 8004f1e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d10f      	bne.n	8004f44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d107      	bne.n	8004f44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f3e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d001      	beq.n	8004f48 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e000      	b.n	8004f4a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004f48:	2300      	movs	r3, #0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3718      	adds	r7, #24
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	40023800 	.word	0x40023800

08004f58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d101      	bne.n	8004f6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e03f      	b.n	8004fea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d106      	bne.n	8004f84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f7fd fcdc 	bl	800293c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2224      	movs	r2, #36	; 0x24
 8004f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68da      	ldr	r2, [r3, #12]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f000 f929 	bl	80051f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	691a      	ldr	r2, [r3, #16]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004fb0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	695a      	ldr	r2, [r3, #20]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fc0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	68da      	ldr	r2, [r3, #12]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fd0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2220      	movs	r2, #32
 8004fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2220      	movs	r2, #32
 8004fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3708      	adds	r7, #8
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}

08004ff2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ff2:	b580      	push	{r7, lr}
 8004ff4:	b08a      	sub	sp, #40	; 0x28
 8004ff6:	af02      	add	r7, sp, #8
 8004ff8:	60f8      	str	r0, [r7, #12]
 8004ffa:	60b9      	str	r1, [r7, #8]
 8004ffc:	603b      	str	r3, [r7, #0]
 8004ffe:	4613      	mov	r3, r2
 8005000:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005002:	2300      	movs	r3, #0
 8005004:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800500c:	b2db      	uxtb	r3, r3
 800500e:	2b20      	cmp	r3, #32
 8005010:	d17c      	bne.n	800510c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d002      	beq.n	800501e <HAL_UART_Transmit+0x2c>
 8005018:	88fb      	ldrh	r3, [r7, #6]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d101      	bne.n	8005022 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e075      	b.n	800510e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005028:	2b01      	cmp	r3, #1
 800502a:	d101      	bne.n	8005030 <HAL_UART_Transmit+0x3e>
 800502c:	2302      	movs	r3, #2
 800502e:	e06e      	b.n	800510e <HAL_UART_Transmit+0x11c>
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2200      	movs	r2, #0
 800503c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2221      	movs	r2, #33	; 0x21
 8005042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005046:	f7fd fe53 	bl	8002cf0 <HAL_GetTick>
 800504a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	88fa      	ldrh	r2, [r7, #6]
 8005050:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	88fa      	ldrh	r2, [r7, #6]
 8005056:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005060:	d108      	bne.n	8005074 <HAL_UART_Transmit+0x82>
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d104      	bne.n	8005074 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800506a:	2300      	movs	r3, #0
 800506c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	61bb      	str	r3, [r7, #24]
 8005072:	e003      	b.n	800507c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005078:	2300      	movs	r3, #0
 800507a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2200      	movs	r2, #0
 8005080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005084:	e02a      	b.n	80050dc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	9300      	str	r3, [sp, #0]
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	2200      	movs	r2, #0
 800508e:	2180      	movs	r1, #128	; 0x80
 8005090:	68f8      	ldr	r0, [r7, #12]
 8005092:	f000 f840 	bl	8005116 <UART_WaitOnFlagUntilTimeout>
 8005096:	4603      	mov	r3, r0
 8005098:	2b00      	cmp	r3, #0
 800509a:	d001      	beq.n	80050a0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800509c:	2303      	movs	r3, #3
 800509e:	e036      	b.n	800510e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d10b      	bne.n	80050be <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050a6:	69bb      	ldr	r3, [r7, #24]
 80050a8:	881b      	ldrh	r3, [r3, #0]
 80050aa:	461a      	mov	r2, r3
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	3302      	adds	r3, #2
 80050ba:	61bb      	str	r3, [r7, #24]
 80050bc:	e007      	b.n	80050ce <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	781a      	ldrb	r2, [r3, #0]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	3301      	adds	r3, #1
 80050cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	3b01      	subs	r3, #1
 80050d6:	b29a      	uxth	r2, r3
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d1cf      	bne.n	8005086 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	9300      	str	r3, [sp, #0]
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	2200      	movs	r2, #0
 80050ee:	2140      	movs	r1, #64	; 0x40
 80050f0:	68f8      	ldr	r0, [r7, #12]
 80050f2:	f000 f810 	bl	8005116 <UART_WaitOnFlagUntilTimeout>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d001      	beq.n	8005100 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	e006      	b.n	800510e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2220      	movs	r2, #32
 8005104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005108:	2300      	movs	r3, #0
 800510a:	e000      	b.n	800510e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800510c:	2302      	movs	r3, #2
  }
}
 800510e:	4618      	mov	r0, r3
 8005110:	3720      	adds	r7, #32
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}

08005116 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005116:	b580      	push	{r7, lr}
 8005118:	b090      	sub	sp, #64	; 0x40
 800511a:	af00      	add	r7, sp, #0
 800511c:	60f8      	str	r0, [r7, #12]
 800511e:	60b9      	str	r1, [r7, #8]
 8005120:	603b      	str	r3, [r7, #0]
 8005122:	4613      	mov	r3, r2
 8005124:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005126:	e050      	b.n	80051ca <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005128:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800512a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800512e:	d04c      	beq.n	80051ca <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005130:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005132:	2b00      	cmp	r3, #0
 8005134:	d007      	beq.n	8005146 <UART_WaitOnFlagUntilTimeout+0x30>
 8005136:	f7fd fddb 	bl	8002cf0 <HAL_GetTick>
 800513a:	4602      	mov	r2, r0
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005142:	429a      	cmp	r2, r3
 8005144:	d241      	bcs.n	80051ca <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	330c      	adds	r3, #12
 800514c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800514e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005150:	e853 3f00 	ldrex	r3, [r3]
 8005154:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005158:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800515c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	330c      	adds	r3, #12
 8005164:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005166:	637a      	str	r2, [r7, #52]	; 0x34
 8005168:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800516a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800516c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800516e:	e841 2300 	strex	r3, r2, [r1]
 8005172:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1e5      	bne.n	8005146 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	3314      	adds	r3, #20
 8005180:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	e853 3f00 	ldrex	r3, [r3]
 8005188:	613b      	str	r3, [r7, #16]
   return(result);
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	f023 0301 	bic.w	r3, r3, #1
 8005190:	63bb      	str	r3, [r7, #56]	; 0x38
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	3314      	adds	r3, #20
 8005198:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800519a:	623a      	str	r2, [r7, #32]
 800519c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800519e:	69f9      	ldr	r1, [r7, #28]
 80051a0:	6a3a      	ldr	r2, [r7, #32]
 80051a2:	e841 2300 	strex	r3, r2, [r1]
 80051a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d1e5      	bne.n	800517a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2220      	movs	r2, #32
 80051b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2220      	movs	r2, #32
 80051ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2200      	movs	r2, #0
 80051c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80051c6:	2303      	movs	r3, #3
 80051c8:	e00f      	b.n	80051ea <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	4013      	ands	r3, r2
 80051d4:	68ba      	ldr	r2, [r7, #8]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	bf0c      	ite	eq
 80051da:	2301      	moveq	r3, #1
 80051dc:	2300      	movne	r3, #0
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	461a      	mov	r2, r3
 80051e2:	79fb      	ldrb	r3, [r7, #7]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d09f      	beq.n	8005128 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3740      	adds	r7, #64	; 0x40
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
	...

080051f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051f8:	b09f      	sub	sp, #124	; 0x7c
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005208:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800520a:	68d9      	ldr	r1, [r3, #12]
 800520c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	ea40 0301 	orr.w	r3, r0, r1
 8005214:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005216:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005218:	689a      	ldr	r2, [r3, #8]
 800521a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	431a      	orrs	r2, r3
 8005220:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005222:	695b      	ldr	r3, [r3, #20]
 8005224:	431a      	orrs	r2, r3
 8005226:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005228:	69db      	ldr	r3, [r3, #28]
 800522a:	4313      	orrs	r3, r2
 800522c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800522e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005238:	f021 010c 	bic.w	r1, r1, #12
 800523c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005242:	430b      	orrs	r3, r1
 8005244:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005246:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	695b      	ldr	r3, [r3, #20]
 800524c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005250:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005252:	6999      	ldr	r1, [r3, #24]
 8005254:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	ea40 0301 	orr.w	r3, r0, r1
 800525c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800525e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	4bc5      	ldr	r3, [pc, #788]	; (8005578 <UART_SetConfig+0x384>)
 8005264:	429a      	cmp	r2, r3
 8005266:	d004      	beq.n	8005272 <UART_SetConfig+0x7e>
 8005268:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	4bc3      	ldr	r3, [pc, #780]	; (800557c <UART_SetConfig+0x388>)
 800526e:	429a      	cmp	r2, r3
 8005270:	d103      	bne.n	800527a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005272:	f7ff fa0d 	bl	8004690 <HAL_RCC_GetPCLK2Freq>
 8005276:	6778      	str	r0, [r7, #116]	; 0x74
 8005278:	e002      	b.n	8005280 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800527a:	f7ff f9f5 	bl	8004668 <HAL_RCC_GetPCLK1Freq>
 800527e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005280:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005282:	69db      	ldr	r3, [r3, #28]
 8005284:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005288:	f040 80b6 	bne.w	80053f8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800528c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800528e:	461c      	mov	r4, r3
 8005290:	f04f 0500 	mov.w	r5, #0
 8005294:	4622      	mov	r2, r4
 8005296:	462b      	mov	r3, r5
 8005298:	1891      	adds	r1, r2, r2
 800529a:	6439      	str	r1, [r7, #64]	; 0x40
 800529c:	415b      	adcs	r3, r3
 800529e:	647b      	str	r3, [r7, #68]	; 0x44
 80052a0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80052a4:	1912      	adds	r2, r2, r4
 80052a6:	eb45 0303 	adc.w	r3, r5, r3
 80052aa:	f04f 0000 	mov.w	r0, #0
 80052ae:	f04f 0100 	mov.w	r1, #0
 80052b2:	00d9      	lsls	r1, r3, #3
 80052b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80052b8:	00d0      	lsls	r0, r2, #3
 80052ba:	4602      	mov	r2, r0
 80052bc:	460b      	mov	r3, r1
 80052be:	1911      	adds	r1, r2, r4
 80052c0:	6639      	str	r1, [r7, #96]	; 0x60
 80052c2:	416b      	adcs	r3, r5
 80052c4:	667b      	str	r3, [r7, #100]	; 0x64
 80052c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	461a      	mov	r2, r3
 80052cc:	f04f 0300 	mov.w	r3, #0
 80052d0:	1891      	adds	r1, r2, r2
 80052d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80052d4:	415b      	adcs	r3, r3
 80052d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80052dc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80052e0:	f7fb fcd2 	bl	8000c88 <__aeabi_uldivmod>
 80052e4:	4602      	mov	r2, r0
 80052e6:	460b      	mov	r3, r1
 80052e8:	4ba5      	ldr	r3, [pc, #660]	; (8005580 <UART_SetConfig+0x38c>)
 80052ea:	fba3 2302 	umull	r2, r3, r3, r2
 80052ee:	095b      	lsrs	r3, r3, #5
 80052f0:	011e      	lsls	r6, r3, #4
 80052f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052f4:	461c      	mov	r4, r3
 80052f6:	f04f 0500 	mov.w	r5, #0
 80052fa:	4622      	mov	r2, r4
 80052fc:	462b      	mov	r3, r5
 80052fe:	1891      	adds	r1, r2, r2
 8005300:	6339      	str	r1, [r7, #48]	; 0x30
 8005302:	415b      	adcs	r3, r3
 8005304:	637b      	str	r3, [r7, #52]	; 0x34
 8005306:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800530a:	1912      	adds	r2, r2, r4
 800530c:	eb45 0303 	adc.w	r3, r5, r3
 8005310:	f04f 0000 	mov.w	r0, #0
 8005314:	f04f 0100 	mov.w	r1, #0
 8005318:	00d9      	lsls	r1, r3, #3
 800531a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800531e:	00d0      	lsls	r0, r2, #3
 8005320:	4602      	mov	r2, r0
 8005322:	460b      	mov	r3, r1
 8005324:	1911      	adds	r1, r2, r4
 8005326:	65b9      	str	r1, [r7, #88]	; 0x58
 8005328:	416b      	adcs	r3, r5
 800532a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800532c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	461a      	mov	r2, r3
 8005332:	f04f 0300 	mov.w	r3, #0
 8005336:	1891      	adds	r1, r2, r2
 8005338:	62b9      	str	r1, [r7, #40]	; 0x28
 800533a:	415b      	adcs	r3, r3
 800533c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800533e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005342:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005346:	f7fb fc9f 	bl	8000c88 <__aeabi_uldivmod>
 800534a:	4602      	mov	r2, r0
 800534c:	460b      	mov	r3, r1
 800534e:	4b8c      	ldr	r3, [pc, #560]	; (8005580 <UART_SetConfig+0x38c>)
 8005350:	fba3 1302 	umull	r1, r3, r3, r2
 8005354:	095b      	lsrs	r3, r3, #5
 8005356:	2164      	movs	r1, #100	; 0x64
 8005358:	fb01 f303 	mul.w	r3, r1, r3
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	00db      	lsls	r3, r3, #3
 8005360:	3332      	adds	r3, #50	; 0x32
 8005362:	4a87      	ldr	r2, [pc, #540]	; (8005580 <UART_SetConfig+0x38c>)
 8005364:	fba2 2303 	umull	r2, r3, r2, r3
 8005368:	095b      	lsrs	r3, r3, #5
 800536a:	005b      	lsls	r3, r3, #1
 800536c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005370:	441e      	add	r6, r3
 8005372:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005374:	4618      	mov	r0, r3
 8005376:	f04f 0100 	mov.w	r1, #0
 800537a:	4602      	mov	r2, r0
 800537c:	460b      	mov	r3, r1
 800537e:	1894      	adds	r4, r2, r2
 8005380:	623c      	str	r4, [r7, #32]
 8005382:	415b      	adcs	r3, r3
 8005384:	627b      	str	r3, [r7, #36]	; 0x24
 8005386:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800538a:	1812      	adds	r2, r2, r0
 800538c:	eb41 0303 	adc.w	r3, r1, r3
 8005390:	f04f 0400 	mov.w	r4, #0
 8005394:	f04f 0500 	mov.w	r5, #0
 8005398:	00dd      	lsls	r5, r3, #3
 800539a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800539e:	00d4      	lsls	r4, r2, #3
 80053a0:	4622      	mov	r2, r4
 80053a2:	462b      	mov	r3, r5
 80053a4:	1814      	adds	r4, r2, r0
 80053a6:	653c      	str	r4, [r7, #80]	; 0x50
 80053a8:	414b      	adcs	r3, r1
 80053aa:	657b      	str	r3, [r7, #84]	; 0x54
 80053ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	461a      	mov	r2, r3
 80053b2:	f04f 0300 	mov.w	r3, #0
 80053b6:	1891      	adds	r1, r2, r2
 80053b8:	61b9      	str	r1, [r7, #24]
 80053ba:	415b      	adcs	r3, r3
 80053bc:	61fb      	str	r3, [r7, #28]
 80053be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053c2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80053c6:	f7fb fc5f 	bl	8000c88 <__aeabi_uldivmod>
 80053ca:	4602      	mov	r2, r0
 80053cc:	460b      	mov	r3, r1
 80053ce:	4b6c      	ldr	r3, [pc, #432]	; (8005580 <UART_SetConfig+0x38c>)
 80053d0:	fba3 1302 	umull	r1, r3, r3, r2
 80053d4:	095b      	lsrs	r3, r3, #5
 80053d6:	2164      	movs	r1, #100	; 0x64
 80053d8:	fb01 f303 	mul.w	r3, r1, r3
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	00db      	lsls	r3, r3, #3
 80053e0:	3332      	adds	r3, #50	; 0x32
 80053e2:	4a67      	ldr	r2, [pc, #412]	; (8005580 <UART_SetConfig+0x38c>)
 80053e4:	fba2 2303 	umull	r2, r3, r2, r3
 80053e8:	095b      	lsrs	r3, r3, #5
 80053ea:	f003 0207 	and.w	r2, r3, #7
 80053ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4432      	add	r2, r6
 80053f4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80053f6:	e0b9      	b.n	800556c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80053f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053fa:	461c      	mov	r4, r3
 80053fc:	f04f 0500 	mov.w	r5, #0
 8005400:	4622      	mov	r2, r4
 8005402:	462b      	mov	r3, r5
 8005404:	1891      	adds	r1, r2, r2
 8005406:	6139      	str	r1, [r7, #16]
 8005408:	415b      	adcs	r3, r3
 800540a:	617b      	str	r3, [r7, #20]
 800540c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005410:	1912      	adds	r2, r2, r4
 8005412:	eb45 0303 	adc.w	r3, r5, r3
 8005416:	f04f 0000 	mov.w	r0, #0
 800541a:	f04f 0100 	mov.w	r1, #0
 800541e:	00d9      	lsls	r1, r3, #3
 8005420:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005424:	00d0      	lsls	r0, r2, #3
 8005426:	4602      	mov	r2, r0
 8005428:	460b      	mov	r3, r1
 800542a:	eb12 0804 	adds.w	r8, r2, r4
 800542e:	eb43 0905 	adc.w	r9, r3, r5
 8005432:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	4618      	mov	r0, r3
 8005438:	f04f 0100 	mov.w	r1, #0
 800543c:	f04f 0200 	mov.w	r2, #0
 8005440:	f04f 0300 	mov.w	r3, #0
 8005444:	008b      	lsls	r3, r1, #2
 8005446:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800544a:	0082      	lsls	r2, r0, #2
 800544c:	4640      	mov	r0, r8
 800544e:	4649      	mov	r1, r9
 8005450:	f7fb fc1a 	bl	8000c88 <__aeabi_uldivmod>
 8005454:	4602      	mov	r2, r0
 8005456:	460b      	mov	r3, r1
 8005458:	4b49      	ldr	r3, [pc, #292]	; (8005580 <UART_SetConfig+0x38c>)
 800545a:	fba3 2302 	umull	r2, r3, r3, r2
 800545e:	095b      	lsrs	r3, r3, #5
 8005460:	011e      	lsls	r6, r3, #4
 8005462:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005464:	4618      	mov	r0, r3
 8005466:	f04f 0100 	mov.w	r1, #0
 800546a:	4602      	mov	r2, r0
 800546c:	460b      	mov	r3, r1
 800546e:	1894      	adds	r4, r2, r2
 8005470:	60bc      	str	r4, [r7, #8]
 8005472:	415b      	adcs	r3, r3
 8005474:	60fb      	str	r3, [r7, #12]
 8005476:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800547a:	1812      	adds	r2, r2, r0
 800547c:	eb41 0303 	adc.w	r3, r1, r3
 8005480:	f04f 0400 	mov.w	r4, #0
 8005484:	f04f 0500 	mov.w	r5, #0
 8005488:	00dd      	lsls	r5, r3, #3
 800548a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800548e:	00d4      	lsls	r4, r2, #3
 8005490:	4622      	mov	r2, r4
 8005492:	462b      	mov	r3, r5
 8005494:	1814      	adds	r4, r2, r0
 8005496:	64bc      	str	r4, [r7, #72]	; 0x48
 8005498:	414b      	adcs	r3, r1
 800549a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800549c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	4618      	mov	r0, r3
 80054a2:	f04f 0100 	mov.w	r1, #0
 80054a6:	f04f 0200 	mov.w	r2, #0
 80054aa:	f04f 0300 	mov.w	r3, #0
 80054ae:	008b      	lsls	r3, r1, #2
 80054b0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80054b4:	0082      	lsls	r2, r0, #2
 80054b6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80054ba:	f7fb fbe5 	bl	8000c88 <__aeabi_uldivmod>
 80054be:	4602      	mov	r2, r0
 80054c0:	460b      	mov	r3, r1
 80054c2:	4b2f      	ldr	r3, [pc, #188]	; (8005580 <UART_SetConfig+0x38c>)
 80054c4:	fba3 1302 	umull	r1, r3, r3, r2
 80054c8:	095b      	lsrs	r3, r3, #5
 80054ca:	2164      	movs	r1, #100	; 0x64
 80054cc:	fb01 f303 	mul.w	r3, r1, r3
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	011b      	lsls	r3, r3, #4
 80054d4:	3332      	adds	r3, #50	; 0x32
 80054d6:	4a2a      	ldr	r2, [pc, #168]	; (8005580 <UART_SetConfig+0x38c>)
 80054d8:	fba2 2303 	umull	r2, r3, r2, r3
 80054dc:	095b      	lsrs	r3, r3, #5
 80054de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054e2:	441e      	add	r6, r3
 80054e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054e6:	4618      	mov	r0, r3
 80054e8:	f04f 0100 	mov.w	r1, #0
 80054ec:	4602      	mov	r2, r0
 80054ee:	460b      	mov	r3, r1
 80054f0:	1894      	adds	r4, r2, r2
 80054f2:	603c      	str	r4, [r7, #0]
 80054f4:	415b      	adcs	r3, r3
 80054f6:	607b      	str	r3, [r7, #4]
 80054f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054fc:	1812      	adds	r2, r2, r0
 80054fe:	eb41 0303 	adc.w	r3, r1, r3
 8005502:	f04f 0400 	mov.w	r4, #0
 8005506:	f04f 0500 	mov.w	r5, #0
 800550a:	00dd      	lsls	r5, r3, #3
 800550c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005510:	00d4      	lsls	r4, r2, #3
 8005512:	4622      	mov	r2, r4
 8005514:	462b      	mov	r3, r5
 8005516:	eb12 0a00 	adds.w	sl, r2, r0
 800551a:	eb43 0b01 	adc.w	fp, r3, r1
 800551e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	4618      	mov	r0, r3
 8005524:	f04f 0100 	mov.w	r1, #0
 8005528:	f04f 0200 	mov.w	r2, #0
 800552c:	f04f 0300 	mov.w	r3, #0
 8005530:	008b      	lsls	r3, r1, #2
 8005532:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005536:	0082      	lsls	r2, r0, #2
 8005538:	4650      	mov	r0, sl
 800553a:	4659      	mov	r1, fp
 800553c:	f7fb fba4 	bl	8000c88 <__aeabi_uldivmod>
 8005540:	4602      	mov	r2, r0
 8005542:	460b      	mov	r3, r1
 8005544:	4b0e      	ldr	r3, [pc, #56]	; (8005580 <UART_SetConfig+0x38c>)
 8005546:	fba3 1302 	umull	r1, r3, r3, r2
 800554a:	095b      	lsrs	r3, r3, #5
 800554c:	2164      	movs	r1, #100	; 0x64
 800554e:	fb01 f303 	mul.w	r3, r1, r3
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	011b      	lsls	r3, r3, #4
 8005556:	3332      	adds	r3, #50	; 0x32
 8005558:	4a09      	ldr	r2, [pc, #36]	; (8005580 <UART_SetConfig+0x38c>)
 800555a:	fba2 2303 	umull	r2, r3, r2, r3
 800555e:	095b      	lsrs	r3, r3, #5
 8005560:	f003 020f 	and.w	r2, r3, #15
 8005564:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4432      	add	r2, r6
 800556a:	609a      	str	r2, [r3, #8]
}
 800556c:	bf00      	nop
 800556e:	377c      	adds	r7, #124	; 0x7c
 8005570:	46bd      	mov	sp, r7
 8005572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005576:	bf00      	nop
 8005578:	40011000 	.word	0x40011000
 800557c:	40011400 	.word	0x40011400
 8005580:	51eb851f 	.word	0x51eb851f

08005584 <__errno>:
 8005584:	4b01      	ldr	r3, [pc, #4]	; (800558c <__errno+0x8>)
 8005586:	6818      	ldr	r0, [r3, #0]
 8005588:	4770      	bx	lr
 800558a:	bf00      	nop
 800558c:	20000014 	.word	0x20000014

08005590 <__libc_init_array>:
 8005590:	b570      	push	{r4, r5, r6, lr}
 8005592:	4d0d      	ldr	r5, [pc, #52]	; (80055c8 <__libc_init_array+0x38>)
 8005594:	4c0d      	ldr	r4, [pc, #52]	; (80055cc <__libc_init_array+0x3c>)
 8005596:	1b64      	subs	r4, r4, r5
 8005598:	10a4      	asrs	r4, r4, #2
 800559a:	2600      	movs	r6, #0
 800559c:	42a6      	cmp	r6, r4
 800559e:	d109      	bne.n	80055b4 <__libc_init_array+0x24>
 80055a0:	4d0b      	ldr	r5, [pc, #44]	; (80055d0 <__libc_init_array+0x40>)
 80055a2:	4c0c      	ldr	r4, [pc, #48]	; (80055d4 <__libc_init_array+0x44>)
 80055a4:	f004 f8be 	bl	8009724 <_init>
 80055a8:	1b64      	subs	r4, r4, r5
 80055aa:	10a4      	asrs	r4, r4, #2
 80055ac:	2600      	movs	r6, #0
 80055ae:	42a6      	cmp	r6, r4
 80055b0:	d105      	bne.n	80055be <__libc_init_array+0x2e>
 80055b2:	bd70      	pop	{r4, r5, r6, pc}
 80055b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80055b8:	4798      	blx	r3
 80055ba:	3601      	adds	r6, #1
 80055bc:	e7ee      	b.n	800559c <__libc_init_array+0xc>
 80055be:	f855 3b04 	ldr.w	r3, [r5], #4
 80055c2:	4798      	blx	r3
 80055c4:	3601      	adds	r6, #1
 80055c6:	e7f2      	b.n	80055ae <__libc_init_array+0x1e>
 80055c8:	08009e68 	.word	0x08009e68
 80055cc:	08009e68 	.word	0x08009e68
 80055d0:	08009e68 	.word	0x08009e68
 80055d4:	08009e6c 	.word	0x08009e6c

080055d8 <memset>:
 80055d8:	4402      	add	r2, r0
 80055da:	4603      	mov	r3, r0
 80055dc:	4293      	cmp	r3, r2
 80055de:	d100      	bne.n	80055e2 <memset+0xa>
 80055e0:	4770      	bx	lr
 80055e2:	f803 1b01 	strb.w	r1, [r3], #1
 80055e6:	e7f9      	b.n	80055dc <memset+0x4>

080055e8 <__cvt>:
 80055e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80055ec:	ec55 4b10 	vmov	r4, r5, d0
 80055f0:	2d00      	cmp	r5, #0
 80055f2:	460e      	mov	r6, r1
 80055f4:	4619      	mov	r1, r3
 80055f6:	462b      	mov	r3, r5
 80055f8:	bfbb      	ittet	lt
 80055fa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80055fe:	461d      	movlt	r5, r3
 8005600:	2300      	movge	r3, #0
 8005602:	232d      	movlt	r3, #45	; 0x2d
 8005604:	700b      	strb	r3, [r1, #0]
 8005606:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005608:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800560c:	4691      	mov	r9, r2
 800560e:	f023 0820 	bic.w	r8, r3, #32
 8005612:	bfbc      	itt	lt
 8005614:	4622      	movlt	r2, r4
 8005616:	4614      	movlt	r4, r2
 8005618:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800561c:	d005      	beq.n	800562a <__cvt+0x42>
 800561e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005622:	d100      	bne.n	8005626 <__cvt+0x3e>
 8005624:	3601      	adds	r6, #1
 8005626:	2102      	movs	r1, #2
 8005628:	e000      	b.n	800562c <__cvt+0x44>
 800562a:	2103      	movs	r1, #3
 800562c:	ab03      	add	r3, sp, #12
 800562e:	9301      	str	r3, [sp, #4]
 8005630:	ab02      	add	r3, sp, #8
 8005632:	9300      	str	r3, [sp, #0]
 8005634:	ec45 4b10 	vmov	d0, r4, r5
 8005638:	4653      	mov	r3, sl
 800563a:	4632      	mov	r2, r6
 800563c:	f000 fcec 	bl	8006018 <_dtoa_r>
 8005640:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005644:	4607      	mov	r7, r0
 8005646:	d102      	bne.n	800564e <__cvt+0x66>
 8005648:	f019 0f01 	tst.w	r9, #1
 800564c:	d022      	beq.n	8005694 <__cvt+0xac>
 800564e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005652:	eb07 0906 	add.w	r9, r7, r6
 8005656:	d110      	bne.n	800567a <__cvt+0x92>
 8005658:	783b      	ldrb	r3, [r7, #0]
 800565a:	2b30      	cmp	r3, #48	; 0x30
 800565c:	d10a      	bne.n	8005674 <__cvt+0x8c>
 800565e:	2200      	movs	r2, #0
 8005660:	2300      	movs	r3, #0
 8005662:	4620      	mov	r0, r4
 8005664:	4629      	mov	r1, r5
 8005666:	f7fb fa4f 	bl	8000b08 <__aeabi_dcmpeq>
 800566a:	b918      	cbnz	r0, 8005674 <__cvt+0x8c>
 800566c:	f1c6 0601 	rsb	r6, r6, #1
 8005670:	f8ca 6000 	str.w	r6, [sl]
 8005674:	f8da 3000 	ldr.w	r3, [sl]
 8005678:	4499      	add	r9, r3
 800567a:	2200      	movs	r2, #0
 800567c:	2300      	movs	r3, #0
 800567e:	4620      	mov	r0, r4
 8005680:	4629      	mov	r1, r5
 8005682:	f7fb fa41 	bl	8000b08 <__aeabi_dcmpeq>
 8005686:	b108      	cbz	r0, 800568c <__cvt+0xa4>
 8005688:	f8cd 900c 	str.w	r9, [sp, #12]
 800568c:	2230      	movs	r2, #48	; 0x30
 800568e:	9b03      	ldr	r3, [sp, #12]
 8005690:	454b      	cmp	r3, r9
 8005692:	d307      	bcc.n	80056a4 <__cvt+0xbc>
 8005694:	9b03      	ldr	r3, [sp, #12]
 8005696:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005698:	1bdb      	subs	r3, r3, r7
 800569a:	4638      	mov	r0, r7
 800569c:	6013      	str	r3, [r2, #0]
 800569e:	b004      	add	sp, #16
 80056a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056a4:	1c59      	adds	r1, r3, #1
 80056a6:	9103      	str	r1, [sp, #12]
 80056a8:	701a      	strb	r2, [r3, #0]
 80056aa:	e7f0      	b.n	800568e <__cvt+0xa6>

080056ac <__exponent>:
 80056ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80056ae:	4603      	mov	r3, r0
 80056b0:	2900      	cmp	r1, #0
 80056b2:	bfb8      	it	lt
 80056b4:	4249      	neglt	r1, r1
 80056b6:	f803 2b02 	strb.w	r2, [r3], #2
 80056ba:	bfb4      	ite	lt
 80056bc:	222d      	movlt	r2, #45	; 0x2d
 80056be:	222b      	movge	r2, #43	; 0x2b
 80056c0:	2909      	cmp	r1, #9
 80056c2:	7042      	strb	r2, [r0, #1]
 80056c4:	dd2a      	ble.n	800571c <__exponent+0x70>
 80056c6:	f10d 0407 	add.w	r4, sp, #7
 80056ca:	46a4      	mov	ip, r4
 80056cc:	270a      	movs	r7, #10
 80056ce:	46a6      	mov	lr, r4
 80056d0:	460a      	mov	r2, r1
 80056d2:	fb91 f6f7 	sdiv	r6, r1, r7
 80056d6:	fb07 1516 	mls	r5, r7, r6, r1
 80056da:	3530      	adds	r5, #48	; 0x30
 80056dc:	2a63      	cmp	r2, #99	; 0x63
 80056de:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80056e2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80056e6:	4631      	mov	r1, r6
 80056e8:	dcf1      	bgt.n	80056ce <__exponent+0x22>
 80056ea:	3130      	adds	r1, #48	; 0x30
 80056ec:	f1ae 0502 	sub.w	r5, lr, #2
 80056f0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80056f4:	1c44      	adds	r4, r0, #1
 80056f6:	4629      	mov	r1, r5
 80056f8:	4561      	cmp	r1, ip
 80056fa:	d30a      	bcc.n	8005712 <__exponent+0x66>
 80056fc:	f10d 0209 	add.w	r2, sp, #9
 8005700:	eba2 020e 	sub.w	r2, r2, lr
 8005704:	4565      	cmp	r5, ip
 8005706:	bf88      	it	hi
 8005708:	2200      	movhi	r2, #0
 800570a:	4413      	add	r3, r2
 800570c:	1a18      	subs	r0, r3, r0
 800570e:	b003      	add	sp, #12
 8005710:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005712:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005716:	f804 2f01 	strb.w	r2, [r4, #1]!
 800571a:	e7ed      	b.n	80056f8 <__exponent+0x4c>
 800571c:	2330      	movs	r3, #48	; 0x30
 800571e:	3130      	adds	r1, #48	; 0x30
 8005720:	7083      	strb	r3, [r0, #2]
 8005722:	70c1      	strb	r1, [r0, #3]
 8005724:	1d03      	adds	r3, r0, #4
 8005726:	e7f1      	b.n	800570c <__exponent+0x60>

08005728 <_printf_float>:
 8005728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800572c:	ed2d 8b02 	vpush	{d8}
 8005730:	b08d      	sub	sp, #52	; 0x34
 8005732:	460c      	mov	r4, r1
 8005734:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005738:	4616      	mov	r6, r2
 800573a:	461f      	mov	r7, r3
 800573c:	4605      	mov	r5, r0
 800573e:	f001 fa57 	bl	8006bf0 <_localeconv_r>
 8005742:	f8d0 a000 	ldr.w	sl, [r0]
 8005746:	4650      	mov	r0, sl
 8005748:	f7fa fd62 	bl	8000210 <strlen>
 800574c:	2300      	movs	r3, #0
 800574e:	930a      	str	r3, [sp, #40]	; 0x28
 8005750:	6823      	ldr	r3, [r4, #0]
 8005752:	9305      	str	r3, [sp, #20]
 8005754:	f8d8 3000 	ldr.w	r3, [r8]
 8005758:	f894 b018 	ldrb.w	fp, [r4, #24]
 800575c:	3307      	adds	r3, #7
 800575e:	f023 0307 	bic.w	r3, r3, #7
 8005762:	f103 0208 	add.w	r2, r3, #8
 8005766:	f8c8 2000 	str.w	r2, [r8]
 800576a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800576e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005772:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005776:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800577a:	9307      	str	r3, [sp, #28]
 800577c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005780:	ee08 0a10 	vmov	s16, r0
 8005784:	4b9f      	ldr	r3, [pc, #636]	; (8005a04 <_printf_float+0x2dc>)
 8005786:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800578a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800578e:	f7fb f9ed 	bl	8000b6c <__aeabi_dcmpun>
 8005792:	bb88      	cbnz	r0, 80057f8 <_printf_float+0xd0>
 8005794:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005798:	4b9a      	ldr	r3, [pc, #616]	; (8005a04 <_printf_float+0x2dc>)
 800579a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800579e:	f7fb f9c7 	bl	8000b30 <__aeabi_dcmple>
 80057a2:	bb48      	cbnz	r0, 80057f8 <_printf_float+0xd0>
 80057a4:	2200      	movs	r2, #0
 80057a6:	2300      	movs	r3, #0
 80057a8:	4640      	mov	r0, r8
 80057aa:	4649      	mov	r1, r9
 80057ac:	f7fb f9b6 	bl	8000b1c <__aeabi_dcmplt>
 80057b0:	b110      	cbz	r0, 80057b8 <_printf_float+0x90>
 80057b2:	232d      	movs	r3, #45	; 0x2d
 80057b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057b8:	4b93      	ldr	r3, [pc, #588]	; (8005a08 <_printf_float+0x2e0>)
 80057ba:	4894      	ldr	r0, [pc, #592]	; (8005a0c <_printf_float+0x2e4>)
 80057bc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80057c0:	bf94      	ite	ls
 80057c2:	4698      	movls	r8, r3
 80057c4:	4680      	movhi	r8, r0
 80057c6:	2303      	movs	r3, #3
 80057c8:	6123      	str	r3, [r4, #16]
 80057ca:	9b05      	ldr	r3, [sp, #20]
 80057cc:	f023 0204 	bic.w	r2, r3, #4
 80057d0:	6022      	str	r2, [r4, #0]
 80057d2:	f04f 0900 	mov.w	r9, #0
 80057d6:	9700      	str	r7, [sp, #0]
 80057d8:	4633      	mov	r3, r6
 80057da:	aa0b      	add	r2, sp, #44	; 0x2c
 80057dc:	4621      	mov	r1, r4
 80057de:	4628      	mov	r0, r5
 80057e0:	f000 f9d8 	bl	8005b94 <_printf_common>
 80057e4:	3001      	adds	r0, #1
 80057e6:	f040 8090 	bne.w	800590a <_printf_float+0x1e2>
 80057ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057ee:	b00d      	add	sp, #52	; 0x34
 80057f0:	ecbd 8b02 	vpop	{d8}
 80057f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057f8:	4642      	mov	r2, r8
 80057fa:	464b      	mov	r3, r9
 80057fc:	4640      	mov	r0, r8
 80057fe:	4649      	mov	r1, r9
 8005800:	f7fb f9b4 	bl	8000b6c <__aeabi_dcmpun>
 8005804:	b140      	cbz	r0, 8005818 <_printf_float+0xf0>
 8005806:	464b      	mov	r3, r9
 8005808:	2b00      	cmp	r3, #0
 800580a:	bfbc      	itt	lt
 800580c:	232d      	movlt	r3, #45	; 0x2d
 800580e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005812:	487f      	ldr	r0, [pc, #508]	; (8005a10 <_printf_float+0x2e8>)
 8005814:	4b7f      	ldr	r3, [pc, #508]	; (8005a14 <_printf_float+0x2ec>)
 8005816:	e7d1      	b.n	80057bc <_printf_float+0x94>
 8005818:	6863      	ldr	r3, [r4, #4]
 800581a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800581e:	9206      	str	r2, [sp, #24]
 8005820:	1c5a      	adds	r2, r3, #1
 8005822:	d13f      	bne.n	80058a4 <_printf_float+0x17c>
 8005824:	2306      	movs	r3, #6
 8005826:	6063      	str	r3, [r4, #4]
 8005828:	9b05      	ldr	r3, [sp, #20]
 800582a:	6861      	ldr	r1, [r4, #4]
 800582c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005830:	2300      	movs	r3, #0
 8005832:	9303      	str	r3, [sp, #12]
 8005834:	ab0a      	add	r3, sp, #40	; 0x28
 8005836:	e9cd b301 	strd	fp, r3, [sp, #4]
 800583a:	ab09      	add	r3, sp, #36	; 0x24
 800583c:	ec49 8b10 	vmov	d0, r8, r9
 8005840:	9300      	str	r3, [sp, #0]
 8005842:	6022      	str	r2, [r4, #0]
 8005844:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005848:	4628      	mov	r0, r5
 800584a:	f7ff fecd 	bl	80055e8 <__cvt>
 800584e:	9b06      	ldr	r3, [sp, #24]
 8005850:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005852:	2b47      	cmp	r3, #71	; 0x47
 8005854:	4680      	mov	r8, r0
 8005856:	d108      	bne.n	800586a <_printf_float+0x142>
 8005858:	1cc8      	adds	r0, r1, #3
 800585a:	db02      	blt.n	8005862 <_printf_float+0x13a>
 800585c:	6863      	ldr	r3, [r4, #4]
 800585e:	4299      	cmp	r1, r3
 8005860:	dd41      	ble.n	80058e6 <_printf_float+0x1be>
 8005862:	f1ab 0b02 	sub.w	fp, fp, #2
 8005866:	fa5f fb8b 	uxtb.w	fp, fp
 800586a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800586e:	d820      	bhi.n	80058b2 <_printf_float+0x18a>
 8005870:	3901      	subs	r1, #1
 8005872:	465a      	mov	r2, fp
 8005874:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005878:	9109      	str	r1, [sp, #36]	; 0x24
 800587a:	f7ff ff17 	bl	80056ac <__exponent>
 800587e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005880:	1813      	adds	r3, r2, r0
 8005882:	2a01      	cmp	r2, #1
 8005884:	4681      	mov	r9, r0
 8005886:	6123      	str	r3, [r4, #16]
 8005888:	dc02      	bgt.n	8005890 <_printf_float+0x168>
 800588a:	6822      	ldr	r2, [r4, #0]
 800588c:	07d2      	lsls	r2, r2, #31
 800588e:	d501      	bpl.n	8005894 <_printf_float+0x16c>
 8005890:	3301      	adds	r3, #1
 8005892:	6123      	str	r3, [r4, #16]
 8005894:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005898:	2b00      	cmp	r3, #0
 800589a:	d09c      	beq.n	80057d6 <_printf_float+0xae>
 800589c:	232d      	movs	r3, #45	; 0x2d
 800589e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058a2:	e798      	b.n	80057d6 <_printf_float+0xae>
 80058a4:	9a06      	ldr	r2, [sp, #24]
 80058a6:	2a47      	cmp	r2, #71	; 0x47
 80058a8:	d1be      	bne.n	8005828 <_printf_float+0x100>
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d1bc      	bne.n	8005828 <_printf_float+0x100>
 80058ae:	2301      	movs	r3, #1
 80058b0:	e7b9      	b.n	8005826 <_printf_float+0xfe>
 80058b2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80058b6:	d118      	bne.n	80058ea <_printf_float+0x1c2>
 80058b8:	2900      	cmp	r1, #0
 80058ba:	6863      	ldr	r3, [r4, #4]
 80058bc:	dd0b      	ble.n	80058d6 <_printf_float+0x1ae>
 80058be:	6121      	str	r1, [r4, #16]
 80058c0:	b913      	cbnz	r3, 80058c8 <_printf_float+0x1a0>
 80058c2:	6822      	ldr	r2, [r4, #0]
 80058c4:	07d0      	lsls	r0, r2, #31
 80058c6:	d502      	bpl.n	80058ce <_printf_float+0x1a6>
 80058c8:	3301      	adds	r3, #1
 80058ca:	440b      	add	r3, r1
 80058cc:	6123      	str	r3, [r4, #16]
 80058ce:	65a1      	str	r1, [r4, #88]	; 0x58
 80058d0:	f04f 0900 	mov.w	r9, #0
 80058d4:	e7de      	b.n	8005894 <_printf_float+0x16c>
 80058d6:	b913      	cbnz	r3, 80058de <_printf_float+0x1b6>
 80058d8:	6822      	ldr	r2, [r4, #0]
 80058da:	07d2      	lsls	r2, r2, #31
 80058dc:	d501      	bpl.n	80058e2 <_printf_float+0x1ba>
 80058de:	3302      	adds	r3, #2
 80058e0:	e7f4      	b.n	80058cc <_printf_float+0x1a4>
 80058e2:	2301      	movs	r3, #1
 80058e4:	e7f2      	b.n	80058cc <_printf_float+0x1a4>
 80058e6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80058ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058ec:	4299      	cmp	r1, r3
 80058ee:	db05      	blt.n	80058fc <_printf_float+0x1d4>
 80058f0:	6823      	ldr	r3, [r4, #0]
 80058f2:	6121      	str	r1, [r4, #16]
 80058f4:	07d8      	lsls	r0, r3, #31
 80058f6:	d5ea      	bpl.n	80058ce <_printf_float+0x1a6>
 80058f8:	1c4b      	adds	r3, r1, #1
 80058fa:	e7e7      	b.n	80058cc <_printf_float+0x1a4>
 80058fc:	2900      	cmp	r1, #0
 80058fe:	bfd4      	ite	le
 8005900:	f1c1 0202 	rsble	r2, r1, #2
 8005904:	2201      	movgt	r2, #1
 8005906:	4413      	add	r3, r2
 8005908:	e7e0      	b.n	80058cc <_printf_float+0x1a4>
 800590a:	6823      	ldr	r3, [r4, #0]
 800590c:	055a      	lsls	r2, r3, #21
 800590e:	d407      	bmi.n	8005920 <_printf_float+0x1f8>
 8005910:	6923      	ldr	r3, [r4, #16]
 8005912:	4642      	mov	r2, r8
 8005914:	4631      	mov	r1, r6
 8005916:	4628      	mov	r0, r5
 8005918:	47b8      	blx	r7
 800591a:	3001      	adds	r0, #1
 800591c:	d12c      	bne.n	8005978 <_printf_float+0x250>
 800591e:	e764      	b.n	80057ea <_printf_float+0xc2>
 8005920:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005924:	f240 80e0 	bls.w	8005ae8 <_printf_float+0x3c0>
 8005928:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800592c:	2200      	movs	r2, #0
 800592e:	2300      	movs	r3, #0
 8005930:	f7fb f8ea 	bl	8000b08 <__aeabi_dcmpeq>
 8005934:	2800      	cmp	r0, #0
 8005936:	d034      	beq.n	80059a2 <_printf_float+0x27a>
 8005938:	4a37      	ldr	r2, [pc, #220]	; (8005a18 <_printf_float+0x2f0>)
 800593a:	2301      	movs	r3, #1
 800593c:	4631      	mov	r1, r6
 800593e:	4628      	mov	r0, r5
 8005940:	47b8      	blx	r7
 8005942:	3001      	adds	r0, #1
 8005944:	f43f af51 	beq.w	80057ea <_printf_float+0xc2>
 8005948:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800594c:	429a      	cmp	r2, r3
 800594e:	db02      	blt.n	8005956 <_printf_float+0x22e>
 8005950:	6823      	ldr	r3, [r4, #0]
 8005952:	07d8      	lsls	r0, r3, #31
 8005954:	d510      	bpl.n	8005978 <_printf_float+0x250>
 8005956:	ee18 3a10 	vmov	r3, s16
 800595a:	4652      	mov	r2, sl
 800595c:	4631      	mov	r1, r6
 800595e:	4628      	mov	r0, r5
 8005960:	47b8      	blx	r7
 8005962:	3001      	adds	r0, #1
 8005964:	f43f af41 	beq.w	80057ea <_printf_float+0xc2>
 8005968:	f04f 0800 	mov.w	r8, #0
 800596c:	f104 091a 	add.w	r9, r4, #26
 8005970:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005972:	3b01      	subs	r3, #1
 8005974:	4543      	cmp	r3, r8
 8005976:	dc09      	bgt.n	800598c <_printf_float+0x264>
 8005978:	6823      	ldr	r3, [r4, #0]
 800597a:	079b      	lsls	r3, r3, #30
 800597c:	f100 8105 	bmi.w	8005b8a <_printf_float+0x462>
 8005980:	68e0      	ldr	r0, [r4, #12]
 8005982:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005984:	4298      	cmp	r0, r3
 8005986:	bfb8      	it	lt
 8005988:	4618      	movlt	r0, r3
 800598a:	e730      	b.n	80057ee <_printf_float+0xc6>
 800598c:	2301      	movs	r3, #1
 800598e:	464a      	mov	r2, r9
 8005990:	4631      	mov	r1, r6
 8005992:	4628      	mov	r0, r5
 8005994:	47b8      	blx	r7
 8005996:	3001      	adds	r0, #1
 8005998:	f43f af27 	beq.w	80057ea <_printf_float+0xc2>
 800599c:	f108 0801 	add.w	r8, r8, #1
 80059a0:	e7e6      	b.n	8005970 <_printf_float+0x248>
 80059a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	dc39      	bgt.n	8005a1c <_printf_float+0x2f4>
 80059a8:	4a1b      	ldr	r2, [pc, #108]	; (8005a18 <_printf_float+0x2f0>)
 80059aa:	2301      	movs	r3, #1
 80059ac:	4631      	mov	r1, r6
 80059ae:	4628      	mov	r0, r5
 80059b0:	47b8      	blx	r7
 80059b2:	3001      	adds	r0, #1
 80059b4:	f43f af19 	beq.w	80057ea <_printf_float+0xc2>
 80059b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80059bc:	4313      	orrs	r3, r2
 80059be:	d102      	bne.n	80059c6 <_printf_float+0x29e>
 80059c0:	6823      	ldr	r3, [r4, #0]
 80059c2:	07d9      	lsls	r1, r3, #31
 80059c4:	d5d8      	bpl.n	8005978 <_printf_float+0x250>
 80059c6:	ee18 3a10 	vmov	r3, s16
 80059ca:	4652      	mov	r2, sl
 80059cc:	4631      	mov	r1, r6
 80059ce:	4628      	mov	r0, r5
 80059d0:	47b8      	blx	r7
 80059d2:	3001      	adds	r0, #1
 80059d4:	f43f af09 	beq.w	80057ea <_printf_float+0xc2>
 80059d8:	f04f 0900 	mov.w	r9, #0
 80059dc:	f104 0a1a 	add.w	sl, r4, #26
 80059e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059e2:	425b      	negs	r3, r3
 80059e4:	454b      	cmp	r3, r9
 80059e6:	dc01      	bgt.n	80059ec <_printf_float+0x2c4>
 80059e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059ea:	e792      	b.n	8005912 <_printf_float+0x1ea>
 80059ec:	2301      	movs	r3, #1
 80059ee:	4652      	mov	r2, sl
 80059f0:	4631      	mov	r1, r6
 80059f2:	4628      	mov	r0, r5
 80059f4:	47b8      	blx	r7
 80059f6:	3001      	adds	r0, #1
 80059f8:	f43f aef7 	beq.w	80057ea <_printf_float+0xc2>
 80059fc:	f109 0901 	add.w	r9, r9, #1
 8005a00:	e7ee      	b.n	80059e0 <_printf_float+0x2b8>
 8005a02:	bf00      	nop
 8005a04:	7fefffff 	.word	0x7fefffff
 8005a08:	08009870 	.word	0x08009870
 8005a0c:	08009874 	.word	0x08009874
 8005a10:	0800987c 	.word	0x0800987c
 8005a14:	08009878 	.word	0x08009878
 8005a18:	08009880 	.word	0x08009880
 8005a1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a1e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005a20:	429a      	cmp	r2, r3
 8005a22:	bfa8      	it	ge
 8005a24:	461a      	movge	r2, r3
 8005a26:	2a00      	cmp	r2, #0
 8005a28:	4691      	mov	r9, r2
 8005a2a:	dc37      	bgt.n	8005a9c <_printf_float+0x374>
 8005a2c:	f04f 0b00 	mov.w	fp, #0
 8005a30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a34:	f104 021a 	add.w	r2, r4, #26
 8005a38:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005a3a:	9305      	str	r3, [sp, #20]
 8005a3c:	eba3 0309 	sub.w	r3, r3, r9
 8005a40:	455b      	cmp	r3, fp
 8005a42:	dc33      	bgt.n	8005aac <_printf_float+0x384>
 8005a44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	db3b      	blt.n	8005ac4 <_printf_float+0x39c>
 8005a4c:	6823      	ldr	r3, [r4, #0]
 8005a4e:	07da      	lsls	r2, r3, #31
 8005a50:	d438      	bmi.n	8005ac4 <_printf_float+0x39c>
 8005a52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a54:	9b05      	ldr	r3, [sp, #20]
 8005a56:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a58:	1ad3      	subs	r3, r2, r3
 8005a5a:	eba2 0901 	sub.w	r9, r2, r1
 8005a5e:	4599      	cmp	r9, r3
 8005a60:	bfa8      	it	ge
 8005a62:	4699      	movge	r9, r3
 8005a64:	f1b9 0f00 	cmp.w	r9, #0
 8005a68:	dc35      	bgt.n	8005ad6 <_printf_float+0x3ae>
 8005a6a:	f04f 0800 	mov.w	r8, #0
 8005a6e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a72:	f104 0a1a 	add.w	sl, r4, #26
 8005a76:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a7a:	1a9b      	subs	r3, r3, r2
 8005a7c:	eba3 0309 	sub.w	r3, r3, r9
 8005a80:	4543      	cmp	r3, r8
 8005a82:	f77f af79 	ble.w	8005978 <_printf_float+0x250>
 8005a86:	2301      	movs	r3, #1
 8005a88:	4652      	mov	r2, sl
 8005a8a:	4631      	mov	r1, r6
 8005a8c:	4628      	mov	r0, r5
 8005a8e:	47b8      	blx	r7
 8005a90:	3001      	adds	r0, #1
 8005a92:	f43f aeaa 	beq.w	80057ea <_printf_float+0xc2>
 8005a96:	f108 0801 	add.w	r8, r8, #1
 8005a9a:	e7ec      	b.n	8005a76 <_printf_float+0x34e>
 8005a9c:	4613      	mov	r3, r2
 8005a9e:	4631      	mov	r1, r6
 8005aa0:	4642      	mov	r2, r8
 8005aa2:	4628      	mov	r0, r5
 8005aa4:	47b8      	blx	r7
 8005aa6:	3001      	adds	r0, #1
 8005aa8:	d1c0      	bne.n	8005a2c <_printf_float+0x304>
 8005aaa:	e69e      	b.n	80057ea <_printf_float+0xc2>
 8005aac:	2301      	movs	r3, #1
 8005aae:	4631      	mov	r1, r6
 8005ab0:	4628      	mov	r0, r5
 8005ab2:	9205      	str	r2, [sp, #20]
 8005ab4:	47b8      	blx	r7
 8005ab6:	3001      	adds	r0, #1
 8005ab8:	f43f ae97 	beq.w	80057ea <_printf_float+0xc2>
 8005abc:	9a05      	ldr	r2, [sp, #20]
 8005abe:	f10b 0b01 	add.w	fp, fp, #1
 8005ac2:	e7b9      	b.n	8005a38 <_printf_float+0x310>
 8005ac4:	ee18 3a10 	vmov	r3, s16
 8005ac8:	4652      	mov	r2, sl
 8005aca:	4631      	mov	r1, r6
 8005acc:	4628      	mov	r0, r5
 8005ace:	47b8      	blx	r7
 8005ad0:	3001      	adds	r0, #1
 8005ad2:	d1be      	bne.n	8005a52 <_printf_float+0x32a>
 8005ad4:	e689      	b.n	80057ea <_printf_float+0xc2>
 8005ad6:	9a05      	ldr	r2, [sp, #20]
 8005ad8:	464b      	mov	r3, r9
 8005ada:	4442      	add	r2, r8
 8005adc:	4631      	mov	r1, r6
 8005ade:	4628      	mov	r0, r5
 8005ae0:	47b8      	blx	r7
 8005ae2:	3001      	adds	r0, #1
 8005ae4:	d1c1      	bne.n	8005a6a <_printf_float+0x342>
 8005ae6:	e680      	b.n	80057ea <_printf_float+0xc2>
 8005ae8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005aea:	2a01      	cmp	r2, #1
 8005aec:	dc01      	bgt.n	8005af2 <_printf_float+0x3ca>
 8005aee:	07db      	lsls	r3, r3, #31
 8005af0:	d538      	bpl.n	8005b64 <_printf_float+0x43c>
 8005af2:	2301      	movs	r3, #1
 8005af4:	4642      	mov	r2, r8
 8005af6:	4631      	mov	r1, r6
 8005af8:	4628      	mov	r0, r5
 8005afa:	47b8      	blx	r7
 8005afc:	3001      	adds	r0, #1
 8005afe:	f43f ae74 	beq.w	80057ea <_printf_float+0xc2>
 8005b02:	ee18 3a10 	vmov	r3, s16
 8005b06:	4652      	mov	r2, sl
 8005b08:	4631      	mov	r1, r6
 8005b0a:	4628      	mov	r0, r5
 8005b0c:	47b8      	blx	r7
 8005b0e:	3001      	adds	r0, #1
 8005b10:	f43f ae6b 	beq.w	80057ea <_printf_float+0xc2>
 8005b14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005b18:	2200      	movs	r2, #0
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	f7fa fff4 	bl	8000b08 <__aeabi_dcmpeq>
 8005b20:	b9d8      	cbnz	r0, 8005b5a <_printf_float+0x432>
 8005b22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b24:	f108 0201 	add.w	r2, r8, #1
 8005b28:	3b01      	subs	r3, #1
 8005b2a:	4631      	mov	r1, r6
 8005b2c:	4628      	mov	r0, r5
 8005b2e:	47b8      	blx	r7
 8005b30:	3001      	adds	r0, #1
 8005b32:	d10e      	bne.n	8005b52 <_printf_float+0x42a>
 8005b34:	e659      	b.n	80057ea <_printf_float+0xc2>
 8005b36:	2301      	movs	r3, #1
 8005b38:	4652      	mov	r2, sl
 8005b3a:	4631      	mov	r1, r6
 8005b3c:	4628      	mov	r0, r5
 8005b3e:	47b8      	blx	r7
 8005b40:	3001      	adds	r0, #1
 8005b42:	f43f ae52 	beq.w	80057ea <_printf_float+0xc2>
 8005b46:	f108 0801 	add.w	r8, r8, #1
 8005b4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b4c:	3b01      	subs	r3, #1
 8005b4e:	4543      	cmp	r3, r8
 8005b50:	dcf1      	bgt.n	8005b36 <_printf_float+0x40e>
 8005b52:	464b      	mov	r3, r9
 8005b54:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005b58:	e6dc      	b.n	8005914 <_printf_float+0x1ec>
 8005b5a:	f04f 0800 	mov.w	r8, #0
 8005b5e:	f104 0a1a 	add.w	sl, r4, #26
 8005b62:	e7f2      	b.n	8005b4a <_printf_float+0x422>
 8005b64:	2301      	movs	r3, #1
 8005b66:	4642      	mov	r2, r8
 8005b68:	e7df      	b.n	8005b2a <_printf_float+0x402>
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	464a      	mov	r2, r9
 8005b6e:	4631      	mov	r1, r6
 8005b70:	4628      	mov	r0, r5
 8005b72:	47b8      	blx	r7
 8005b74:	3001      	adds	r0, #1
 8005b76:	f43f ae38 	beq.w	80057ea <_printf_float+0xc2>
 8005b7a:	f108 0801 	add.w	r8, r8, #1
 8005b7e:	68e3      	ldr	r3, [r4, #12]
 8005b80:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005b82:	1a5b      	subs	r3, r3, r1
 8005b84:	4543      	cmp	r3, r8
 8005b86:	dcf0      	bgt.n	8005b6a <_printf_float+0x442>
 8005b88:	e6fa      	b.n	8005980 <_printf_float+0x258>
 8005b8a:	f04f 0800 	mov.w	r8, #0
 8005b8e:	f104 0919 	add.w	r9, r4, #25
 8005b92:	e7f4      	b.n	8005b7e <_printf_float+0x456>

08005b94 <_printf_common>:
 8005b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b98:	4616      	mov	r6, r2
 8005b9a:	4699      	mov	r9, r3
 8005b9c:	688a      	ldr	r2, [r1, #8]
 8005b9e:	690b      	ldr	r3, [r1, #16]
 8005ba0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	bfb8      	it	lt
 8005ba8:	4613      	movlt	r3, r2
 8005baa:	6033      	str	r3, [r6, #0]
 8005bac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005bb0:	4607      	mov	r7, r0
 8005bb2:	460c      	mov	r4, r1
 8005bb4:	b10a      	cbz	r2, 8005bba <_printf_common+0x26>
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	6033      	str	r3, [r6, #0]
 8005bba:	6823      	ldr	r3, [r4, #0]
 8005bbc:	0699      	lsls	r1, r3, #26
 8005bbe:	bf42      	ittt	mi
 8005bc0:	6833      	ldrmi	r3, [r6, #0]
 8005bc2:	3302      	addmi	r3, #2
 8005bc4:	6033      	strmi	r3, [r6, #0]
 8005bc6:	6825      	ldr	r5, [r4, #0]
 8005bc8:	f015 0506 	ands.w	r5, r5, #6
 8005bcc:	d106      	bne.n	8005bdc <_printf_common+0x48>
 8005bce:	f104 0a19 	add.w	sl, r4, #25
 8005bd2:	68e3      	ldr	r3, [r4, #12]
 8005bd4:	6832      	ldr	r2, [r6, #0]
 8005bd6:	1a9b      	subs	r3, r3, r2
 8005bd8:	42ab      	cmp	r3, r5
 8005bda:	dc26      	bgt.n	8005c2a <_printf_common+0x96>
 8005bdc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005be0:	1e13      	subs	r3, r2, #0
 8005be2:	6822      	ldr	r2, [r4, #0]
 8005be4:	bf18      	it	ne
 8005be6:	2301      	movne	r3, #1
 8005be8:	0692      	lsls	r2, r2, #26
 8005bea:	d42b      	bmi.n	8005c44 <_printf_common+0xb0>
 8005bec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005bf0:	4649      	mov	r1, r9
 8005bf2:	4638      	mov	r0, r7
 8005bf4:	47c0      	blx	r8
 8005bf6:	3001      	adds	r0, #1
 8005bf8:	d01e      	beq.n	8005c38 <_printf_common+0xa4>
 8005bfa:	6823      	ldr	r3, [r4, #0]
 8005bfc:	68e5      	ldr	r5, [r4, #12]
 8005bfe:	6832      	ldr	r2, [r6, #0]
 8005c00:	f003 0306 	and.w	r3, r3, #6
 8005c04:	2b04      	cmp	r3, #4
 8005c06:	bf08      	it	eq
 8005c08:	1aad      	subeq	r5, r5, r2
 8005c0a:	68a3      	ldr	r3, [r4, #8]
 8005c0c:	6922      	ldr	r2, [r4, #16]
 8005c0e:	bf0c      	ite	eq
 8005c10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c14:	2500      	movne	r5, #0
 8005c16:	4293      	cmp	r3, r2
 8005c18:	bfc4      	itt	gt
 8005c1a:	1a9b      	subgt	r3, r3, r2
 8005c1c:	18ed      	addgt	r5, r5, r3
 8005c1e:	2600      	movs	r6, #0
 8005c20:	341a      	adds	r4, #26
 8005c22:	42b5      	cmp	r5, r6
 8005c24:	d11a      	bne.n	8005c5c <_printf_common+0xc8>
 8005c26:	2000      	movs	r0, #0
 8005c28:	e008      	b.n	8005c3c <_printf_common+0xa8>
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	4652      	mov	r2, sl
 8005c2e:	4649      	mov	r1, r9
 8005c30:	4638      	mov	r0, r7
 8005c32:	47c0      	blx	r8
 8005c34:	3001      	adds	r0, #1
 8005c36:	d103      	bne.n	8005c40 <_printf_common+0xac>
 8005c38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c40:	3501      	adds	r5, #1
 8005c42:	e7c6      	b.n	8005bd2 <_printf_common+0x3e>
 8005c44:	18e1      	adds	r1, r4, r3
 8005c46:	1c5a      	adds	r2, r3, #1
 8005c48:	2030      	movs	r0, #48	; 0x30
 8005c4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c4e:	4422      	add	r2, r4
 8005c50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c58:	3302      	adds	r3, #2
 8005c5a:	e7c7      	b.n	8005bec <_printf_common+0x58>
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	4622      	mov	r2, r4
 8005c60:	4649      	mov	r1, r9
 8005c62:	4638      	mov	r0, r7
 8005c64:	47c0      	blx	r8
 8005c66:	3001      	adds	r0, #1
 8005c68:	d0e6      	beq.n	8005c38 <_printf_common+0xa4>
 8005c6a:	3601      	adds	r6, #1
 8005c6c:	e7d9      	b.n	8005c22 <_printf_common+0x8e>
	...

08005c70 <_printf_i>:
 8005c70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c74:	460c      	mov	r4, r1
 8005c76:	4691      	mov	r9, r2
 8005c78:	7e27      	ldrb	r7, [r4, #24]
 8005c7a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005c7c:	2f78      	cmp	r7, #120	; 0x78
 8005c7e:	4680      	mov	r8, r0
 8005c80:	469a      	mov	sl, r3
 8005c82:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c86:	d807      	bhi.n	8005c98 <_printf_i+0x28>
 8005c88:	2f62      	cmp	r7, #98	; 0x62
 8005c8a:	d80a      	bhi.n	8005ca2 <_printf_i+0x32>
 8005c8c:	2f00      	cmp	r7, #0
 8005c8e:	f000 80d8 	beq.w	8005e42 <_printf_i+0x1d2>
 8005c92:	2f58      	cmp	r7, #88	; 0x58
 8005c94:	f000 80a3 	beq.w	8005dde <_printf_i+0x16e>
 8005c98:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005c9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ca0:	e03a      	b.n	8005d18 <_printf_i+0xa8>
 8005ca2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ca6:	2b15      	cmp	r3, #21
 8005ca8:	d8f6      	bhi.n	8005c98 <_printf_i+0x28>
 8005caa:	a001      	add	r0, pc, #4	; (adr r0, 8005cb0 <_printf_i+0x40>)
 8005cac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005cb0:	08005d09 	.word	0x08005d09
 8005cb4:	08005d1d 	.word	0x08005d1d
 8005cb8:	08005c99 	.word	0x08005c99
 8005cbc:	08005c99 	.word	0x08005c99
 8005cc0:	08005c99 	.word	0x08005c99
 8005cc4:	08005c99 	.word	0x08005c99
 8005cc8:	08005d1d 	.word	0x08005d1d
 8005ccc:	08005c99 	.word	0x08005c99
 8005cd0:	08005c99 	.word	0x08005c99
 8005cd4:	08005c99 	.word	0x08005c99
 8005cd8:	08005c99 	.word	0x08005c99
 8005cdc:	08005e29 	.word	0x08005e29
 8005ce0:	08005d4d 	.word	0x08005d4d
 8005ce4:	08005e0b 	.word	0x08005e0b
 8005ce8:	08005c99 	.word	0x08005c99
 8005cec:	08005c99 	.word	0x08005c99
 8005cf0:	08005e4b 	.word	0x08005e4b
 8005cf4:	08005c99 	.word	0x08005c99
 8005cf8:	08005d4d 	.word	0x08005d4d
 8005cfc:	08005c99 	.word	0x08005c99
 8005d00:	08005c99 	.word	0x08005c99
 8005d04:	08005e13 	.word	0x08005e13
 8005d08:	680b      	ldr	r3, [r1, #0]
 8005d0a:	1d1a      	adds	r2, r3, #4
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	600a      	str	r2, [r1, #0]
 8005d10:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005d14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e0a3      	b.n	8005e64 <_printf_i+0x1f4>
 8005d1c:	6825      	ldr	r5, [r4, #0]
 8005d1e:	6808      	ldr	r0, [r1, #0]
 8005d20:	062e      	lsls	r6, r5, #24
 8005d22:	f100 0304 	add.w	r3, r0, #4
 8005d26:	d50a      	bpl.n	8005d3e <_printf_i+0xce>
 8005d28:	6805      	ldr	r5, [r0, #0]
 8005d2a:	600b      	str	r3, [r1, #0]
 8005d2c:	2d00      	cmp	r5, #0
 8005d2e:	da03      	bge.n	8005d38 <_printf_i+0xc8>
 8005d30:	232d      	movs	r3, #45	; 0x2d
 8005d32:	426d      	negs	r5, r5
 8005d34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d38:	485e      	ldr	r0, [pc, #376]	; (8005eb4 <_printf_i+0x244>)
 8005d3a:	230a      	movs	r3, #10
 8005d3c:	e019      	b.n	8005d72 <_printf_i+0x102>
 8005d3e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005d42:	6805      	ldr	r5, [r0, #0]
 8005d44:	600b      	str	r3, [r1, #0]
 8005d46:	bf18      	it	ne
 8005d48:	b22d      	sxthne	r5, r5
 8005d4a:	e7ef      	b.n	8005d2c <_printf_i+0xbc>
 8005d4c:	680b      	ldr	r3, [r1, #0]
 8005d4e:	6825      	ldr	r5, [r4, #0]
 8005d50:	1d18      	adds	r0, r3, #4
 8005d52:	6008      	str	r0, [r1, #0]
 8005d54:	0628      	lsls	r0, r5, #24
 8005d56:	d501      	bpl.n	8005d5c <_printf_i+0xec>
 8005d58:	681d      	ldr	r5, [r3, #0]
 8005d5a:	e002      	b.n	8005d62 <_printf_i+0xf2>
 8005d5c:	0669      	lsls	r1, r5, #25
 8005d5e:	d5fb      	bpl.n	8005d58 <_printf_i+0xe8>
 8005d60:	881d      	ldrh	r5, [r3, #0]
 8005d62:	4854      	ldr	r0, [pc, #336]	; (8005eb4 <_printf_i+0x244>)
 8005d64:	2f6f      	cmp	r7, #111	; 0x6f
 8005d66:	bf0c      	ite	eq
 8005d68:	2308      	moveq	r3, #8
 8005d6a:	230a      	movne	r3, #10
 8005d6c:	2100      	movs	r1, #0
 8005d6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d72:	6866      	ldr	r6, [r4, #4]
 8005d74:	60a6      	str	r6, [r4, #8]
 8005d76:	2e00      	cmp	r6, #0
 8005d78:	bfa2      	ittt	ge
 8005d7a:	6821      	ldrge	r1, [r4, #0]
 8005d7c:	f021 0104 	bicge.w	r1, r1, #4
 8005d80:	6021      	strge	r1, [r4, #0]
 8005d82:	b90d      	cbnz	r5, 8005d88 <_printf_i+0x118>
 8005d84:	2e00      	cmp	r6, #0
 8005d86:	d04d      	beq.n	8005e24 <_printf_i+0x1b4>
 8005d88:	4616      	mov	r6, r2
 8005d8a:	fbb5 f1f3 	udiv	r1, r5, r3
 8005d8e:	fb03 5711 	mls	r7, r3, r1, r5
 8005d92:	5dc7      	ldrb	r7, [r0, r7]
 8005d94:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005d98:	462f      	mov	r7, r5
 8005d9a:	42bb      	cmp	r3, r7
 8005d9c:	460d      	mov	r5, r1
 8005d9e:	d9f4      	bls.n	8005d8a <_printf_i+0x11a>
 8005da0:	2b08      	cmp	r3, #8
 8005da2:	d10b      	bne.n	8005dbc <_printf_i+0x14c>
 8005da4:	6823      	ldr	r3, [r4, #0]
 8005da6:	07df      	lsls	r7, r3, #31
 8005da8:	d508      	bpl.n	8005dbc <_printf_i+0x14c>
 8005daa:	6923      	ldr	r3, [r4, #16]
 8005dac:	6861      	ldr	r1, [r4, #4]
 8005dae:	4299      	cmp	r1, r3
 8005db0:	bfde      	ittt	le
 8005db2:	2330      	movle	r3, #48	; 0x30
 8005db4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005db8:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8005dbc:	1b92      	subs	r2, r2, r6
 8005dbe:	6122      	str	r2, [r4, #16]
 8005dc0:	f8cd a000 	str.w	sl, [sp]
 8005dc4:	464b      	mov	r3, r9
 8005dc6:	aa03      	add	r2, sp, #12
 8005dc8:	4621      	mov	r1, r4
 8005dca:	4640      	mov	r0, r8
 8005dcc:	f7ff fee2 	bl	8005b94 <_printf_common>
 8005dd0:	3001      	adds	r0, #1
 8005dd2:	d14c      	bne.n	8005e6e <_printf_i+0x1fe>
 8005dd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005dd8:	b004      	add	sp, #16
 8005dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dde:	4835      	ldr	r0, [pc, #212]	; (8005eb4 <_printf_i+0x244>)
 8005de0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005de4:	6823      	ldr	r3, [r4, #0]
 8005de6:	680e      	ldr	r6, [r1, #0]
 8005de8:	061f      	lsls	r7, r3, #24
 8005dea:	f856 5b04 	ldr.w	r5, [r6], #4
 8005dee:	600e      	str	r6, [r1, #0]
 8005df0:	d514      	bpl.n	8005e1c <_printf_i+0x1ac>
 8005df2:	07d9      	lsls	r1, r3, #31
 8005df4:	bf44      	itt	mi
 8005df6:	f043 0320 	orrmi.w	r3, r3, #32
 8005dfa:	6023      	strmi	r3, [r4, #0]
 8005dfc:	b91d      	cbnz	r5, 8005e06 <_printf_i+0x196>
 8005dfe:	6823      	ldr	r3, [r4, #0]
 8005e00:	f023 0320 	bic.w	r3, r3, #32
 8005e04:	6023      	str	r3, [r4, #0]
 8005e06:	2310      	movs	r3, #16
 8005e08:	e7b0      	b.n	8005d6c <_printf_i+0xfc>
 8005e0a:	6823      	ldr	r3, [r4, #0]
 8005e0c:	f043 0320 	orr.w	r3, r3, #32
 8005e10:	6023      	str	r3, [r4, #0]
 8005e12:	2378      	movs	r3, #120	; 0x78
 8005e14:	4828      	ldr	r0, [pc, #160]	; (8005eb8 <_printf_i+0x248>)
 8005e16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e1a:	e7e3      	b.n	8005de4 <_printf_i+0x174>
 8005e1c:	065e      	lsls	r6, r3, #25
 8005e1e:	bf48      	it	mi
 8005e20:	b2ad      	uxthmi	r5, r5
 8005e22:	e7e6      	b.n	8005df2 <_printf_i+0x182>
 8005e24:	4616      	mov	r6, r2
 8005e26:	e7bb      	b.n	8005da0 <_printf_i+0x130>
 8005e28:	680b      	ldr	r3, [r1, #0]
 8005e2a:	6826      	ldr	r6, [r4, #0]
 8005e2c:	6960      	ldr	r0, [r4, #20]
 8005e2e:	1d1d      	adds	r5, r3, #4
 8005e30:	600d      	str	r5, [r1, #0]
 8005e32:	0635      	lsls	r5, r6, #24
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	d501      	bpl.n	8005e3c <_printf_i+0x1cc>
 8005e38:	6018      	str	r0, [r3, #0]
 8005e3a:	e002      	b.n	8005e42 <_printf_i+0x1d2>
 8005e3c:	0671      	lsls	r1, r6, #25
 8005e3e:	d5fb      	bpl.n	8005e38 <_printf_i+0x1c8>
 8005e40:	8018      	strh	r0, [r3, #0]
 8005e42:	2300      	movs	r3, #0
 8005e44:	6123      	str	r3, [r4, #16]
 8005e46:	4616      	mov	r6, r2
 8005e48:	e7ba      	b.n	8005dc0 <_printf_i+0x150>
 8005e4a:	680b      	ldr	r3, [r1, #0]
 8005e4c:	1d1a      	adds	r2, r3, #4
 8005e4e:	600a      	str	r2, [r1, #0]
 8005e50:	681e      	ldr	r6, [r3, #0]
 8005e52:	6862      	ldr	r2, [r4, #4]
 8005e54:	2100      	movs	r1, #0
 8005e56:	4630      	mov	r0, r6
 8005e58:	f7fa f9e2 	bl	8000220 <memchr>
 8005e5c:	b108      	cbz	r0, 8005e62 <_printf_i+0x1f2>
 8005e5e:	1b80      	subs	r0, r0, r6
 8005e60:	6060      	str	r0, [r4, #4]
 8005e62:	6863      	ldr	r3, [r4, #4]
 8005e64:	6123      	str	r3, [r4, #16]
 8005e66:	2300      	movs	r3, #0
 8005e68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e6c:	e7a8      	b.n	8005dc0 <_printf_i+0x150>
 8005e6e:	6923      	ldr	r3, [r4, #16]
 8005e70:	4632      	mov	r2, r6
 8005e72:	4649      	mov	r1, r9
 8005e74:	4640      	mov	r0, r8
 8005e76:	47d0      	blx	sl
 8005e78:	3001      	adds	r0, #1
 8005e7a:	d0ab      	beq.n	8005dd4 <_printf_i+0x164>
 8005e7c:	6823      	ldr	r3, [r4, #0]
 8005e7e:	079b      	lsls	r3, r3, #30
 8005e80:	d413      	bmi.n	8005eaa <_printf_i+0x23a>
 8005e82:	68e0      	ldr	r0, [r4, #12]
 8005e84:	9b03      	ldr	r3, [sp, #12]
 8005e86:	4298      	cmp	r0, r3
 8005e88:	bfb8      	it	lt
 8005e8a:	4618      	movlt	r0, r3
 8005e8c:	e7a4      	b.n	8005dd8 <_printf_i+0x168>
 8005e8e:	2301      	movs	r3, #1
 8005e90:	4632      	mov	r2, r6
 8005e92:	4649      	mov	r1, r9
 8005e94:	4640      	mov	r0, r8
 8005e96:	47d0      	blx	sl
 8005e98:	3001      	adds	r0, #1
 8005e9a:	d09b      	beq.n	8005dd4 <_printf_i+0x164>
 8005e9c:	3501      	adds	r5, #1
 8005e9e:	68e3      	ldr	r3, [r4, #12]
 8005ea0:	9903      	ldr	r1, [sp, #12]
 8005ea2:	1a5b      	subs	r3, r3, r1
 8005ea4:	42ab      	cmp	r3, r5
 8005ea6:	dcf2      	bgt.n	8005e8e <_printf_i+0x21e>
 8005ea8:	e7eb      	b.n	8005e82 <_printf_i+0x212>
 8005eaa:	2500      	movs	r5, #0
 8005eac:	f104 0619 	add.w	r6, r4, #25
 8005eb0:	e7f5      	b.n	8005e9e <_printf_i+0x22e>
 8005eb2:	bf00      	nop
 8005eb4:	08009882 	.word	0x08009882
 8005eb8:	08009893 	.word	0x08009893

08005ebc <siprintf>:
 8005ebc:	b40e      	push	{r1, r2, r3}
 8005ebe:	b500      	push	{lr}
 8005ec0:	b09c      	sub	sp, #112	; 0x70
 8005ec2:	ab1d      	add	r3, sp, #116	; 0x74
 8005ec4:	9002      	str	r0, [sp, #8]
 8005ec6:	9006      	str	r0, [sp, #24]
 8005ec8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005ecc:	4809      	ldr	r0, [pc, #36]	; (8005ef4 <siprintf+0x38>)
 8005ece:	9107      	str	r1, [sp, #28]
 8005ed0:	9104      	str	r1, [sp, #16]
 8005ed2:	4909      	ldr	r1, [pc, #36]	; (8005ef8 <siprintf+0x3c>)
 8005ed4:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ed8:	9105      	str	r1, [sp, #20]
 8005eda:	6800      	ldr	r0, [r0, #0]
 8005edc:	9301      	str	r3, [sp, #4]
 8005ede:	a902      	add	r1, sp, #8
 8005ee0:	f001 fb34 	bl	800754c <_svfiprintf_r>
 8005ee4:	9b02      	ldr	r3, [sp, #8]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	701a      	strb	r2, [r3, #0]
 8005eea:	b01c      	add	sp, #112	; 0x70
 8005eec:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ef0:	b003      	add	sp, #12
 8005ef2:	4770      	bx	lr
 8005ef4:	20000014 	.word	0x20000014
 8005ef8:	ffff0208 	.word	0xffff0208

08005efc <quorem>:
 8005efc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f00:	6903      	ldr	r3, [r0, #16]
 8005f02:	690c      	ldr	r4, [r1, #16]
 8005f04:	42a3      	cmp	r3, r4
 8005f06:	4607      	mov	r7, r0
 8005f08:	f2c0 8081 	blt.w	800600e <quorem+0x112>
 8005f0c:	3c01      	subs	r4, #1
 8005f0e:	f101 0814 	add.w	r8, r1, #20
 8005f12:	f100 0514 	add.w	r5, r0, #20
 8005f16:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005f1a:	9301      	str	r3, [sp, #4]
 8005f1c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005f20:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005f24:	3301      	adds	r3, #1
 8005f26:	429a      	cmp	r2, r3
 8005f28:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005f2c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005f30:	fbb2 f6f3 	udiv	r6, r2, r3
 8005f34:	d331      	bcc.n	8005f9a <quorem+0x9e>
 8005f36:	f04f 0e00 	mov.w	lr, #0
 8005f3a:	4640      	mov	r0, r8
 8005f3c:	46ac      	mov	ip, r5
 8005f3e:	46f2      	mov	sl, lr
 8005f40:	f850 2b04 	ldr.w	r2, [r0], #4
 8005f44:	b293      	uxth	r3, r2
 8005f46:	fb06 e303 	mla	r3, r6, r3, lr
 8005f4a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	ebaa 0303 	sub.w	r3, sl, r3
 8005f54:	0c12      	lsrs	r2, r2, #16
 8005f56:	f8dc a000 	ldr.w	sl, [ip]
 8005f5a:	fb06 e202 	mla	r2, r6, r2, lr
 8005f5e:	fa13 f38a 	uxtah	r3, r3, sl
 8005f62:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005f66:	fa1f fa82 	uxth.w	sl, r2
 8005f6a:	f8dc 2000 	ldr.w	r2, [ip]
 8005f6e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005f72:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005f76:	b29b      	uxth	r3, r3
 8005f78:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f7c:	4581      	cmp	r9, r0
 8005f7e:	f84c 3b04 	str.w	r3, [ip], #4
 8005f82:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005f86:	d2db      	bcs.n	8005f40 <quorem+0x44>
 8005f88:	f855 300b 	ldr.w	r3, [r5, fp]
 8005f8c:	b92b      	cbnz	r3, 8005f9a <quorem+0x9e>
 8005f8e:	9b01      	ldr	r3, [sp, #4]
 8005f90:	3b04      	subs	r3, #4
 8005f92:	429d      	cmp	r5, r3
 8005f94:	461a      	mov	r2, r3
 8005f96:	d32e      	bcc.n	8005ff6 <quorem+0xfa>
 8005f98:	613c      	str	r4, [r7, #16]
 8005f9a:	4638      	mov	r0, r7
 8005f9c:	f001 f8c0 	bl	8007120 <__mcmp>
 8005fa0:	2800      	cmp	r0, #0
 8005fa2:	db24      	blt.n	8005fee <quorem+0xf2>
 8005fa4:	3601      	adds	r6, #1
 8005fa6:	4628      	mov	r0, r5
 8005fa8:	f04f 0c00 	mov.w	ip, #0
 8005fac:	f858 2b04 	ldr.w	r2, [r8], #4
 8005fb0:	f8d0 e000 	ldr.w	lr, [r0]
 8005fb4:	b293      	uxth	r3, r2
 8005fb6:	ebac 0303 	sub.w	r3, ip, r3
 8005fba:	0c12      	lsrs	r2, r2, #16
 8005fbc:	fa13 f38e 	uxtah	r3, r3, lr
 8005fc0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005fc4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005fce:	45c1      	cmp	r9, r8
 8005fd0:	f840 3b04 	str.w	r3, [r0], #4
 8005fd4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005fd8:	d2e8      	bcs.n	8005fac <quorem+0xb0>
 8005fda:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005fde:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005fe2:	b922      	cbnz	r2, 8005fee <quorem+0xf2>
 8005fe4:	3b04      	subs	r3, #4
 8005fe6:	429d      	cmp	r5, r3
 8005fe8:	461a      	mov	r2, r3
 8005fea:	d30a      	bcc.n	8006002 <quorem+0x106>
 8005fec:	613c      	str	r4, [r7, #16]
 8005fee:	4630      	mov	r0, r6
 8005ff0:	b003      	add	sp, #12
 8005ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ff6:	6812      	ldr	r2, [r2, #0]
 8005ff8:	3b04      	subs	r3, #4
 8005ffa:	2a00      	cmp	r2, #0
 8005ffc:	d1cc      	bne.n	8005f98 <quorem+0x9c>
 8005ffe:	3c01      	subs	r4, #1
 8006000:	e7c7      	b.n	8005f92 <quorem+0x96>
 8006002:	6812      	ldr	r2, [r2, #0]
 8006004:	3b04      	subs	r3, #4
 8006006:	2a00      	cmp	r2, #0
 8006008:	d1f0      	bne.n	8005fec <quorem+0xf0>
 800600a:	3c01      	subs	r4, #1
 800600c:	e7eb      	b.n	8005fe6 <quorem+0xea>
 800600e:	2000      	movs	r0, #0
 8006010:	e7ee      	b.n	8005ff0 <quorem+0xf4>
 8006012:	0000      	movs	r0, r0
 8006014:	0000      	movs	r0, r0
	...

08006018 <_dtoa_r>:
 8006018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800601c:	ed2d 8b02 	vpush	{d8}
 8006020:	ec57 6b10 	vmov	r6, r7, d0
 8006024:	b095      	sub	sp, #84	; 0x54
 8006026:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006028:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800602c:	9105      	str	r1, [sp, #20]
 800602e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006032:	4604      	mov	r4, r0
 8006034:	9209      	str	r2, [sp, #36]	; 0x24
 8006036:	930f      	str	r3, [sp, #60]	; 0x3c
 8006038:	b975      	cbnz	r5, 8006058 <_dtoa_r+0x40>
 800603a:	2010      	movs	r0, #16
 800603c:	f000 fddc 	bl	8006bf8 <malloc>
 8006040:	4602      	mov	r2, r0
 8006042:	6260      	str	r0, [r4, #36]	; 0x24
 8006044:	b920      	cbnz	r0, 8006050 <_dtoa_r+0x38>
 8006046:	4bb2      	ldr	r3, [pc, #712]	; (8006310 <_dtoa_r+0x2f8>)
 8006048:	21ea      	movs	r1, #234	; 0xea
 800604a:	48b2      	ldr	r0, [pc, #712]	; (8006314 <_dtoa_r+0x2fc>)
 800604c:	f001 fb8e 	bl	800776c <__assert_func>
 8006050:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006054:	6005      	str	r5, [r0, #0]
 8006056:	60c5      	str	r5, [r0, #12]
 8006058:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800605a:	6819      	ldr	r1, [r3, #0]
 800605c:	b151      	cbz	r1, 8006074 <_dtoa_r+0x5c>
 800605e:	685a      	ldr	r2, [r3, #4]
 8006060:	604a      	str	r2, [r1, #4]
 8006062:	2301      	movs	r3, #1
 8006064:	4093      	lsls	r3, r2
 8006066:	608b      	str	r3, [r1, #8]
 8006068:	4620      	mov	r0, r4
 800606a:	f000 fe1b 	bl	8006ca4 <_Bfree>
 800606e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006070:	2200      	movs	r2, #0
 8006072:	601a      	str	r2, [r3, #0]
 8006074:	1e3b      	subs	r3, r7, #0
 8006076:	bfb9      	ittee	lt
 8006078:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800607c:	9303      	strlt	r3, [sp, #12]
 800607e:	2300      	movge	r3, #0
 8006080:	f8c8 3000 	strge.w	r3, [r8]
 8006084:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006088:	4ba3      	ldr	r3, [pc, #652]	; (8006318 <_dtoa_r+0x300>)
 800608a:	bfbc      	itt	lt
 800608c:	2201      	movlt	r2, #1
 800608e:	f8c8 2000 	strlt.w	r2, [r8]
 8006092:	ea33 0309 	bics.w	r3, r3, r9
 8006096:	d11b      	bne.n	80060d0 <_dtoa_r+0xb8>
 8006098:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800609a:	f242 730f 	movw	r3, #9999	; 0x270f
 800609e:	6013      	str	r3, [r2, #0]
 80060a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80060a4:	4333      	orrs	r3, r6
 80060a6:	f000 857a 	beq.w	8006b9e <_dtoa_r+0xb86>
 80060aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80060ac:	b963      	cbnz	r3, 80060c8 <_dtoa_r+0xb0>
 80060ae:	4b9b      	ldr	r3, [pc, #620]	; (800631c <_dtoa_r+0x304>)
 80060b0:	e024      	b.n	80060fc <_dtoa_r+0xe4>
 80060b2:	4b9b      	ldr	r3, [pc, #620]	; (8006320 <_dtoa_r+0x308>)
 80060b4:	9300      	str	r3, [sp, #0]
 80060b6:	3308      	adds	r3, #8
 80060b8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80060ba:	6013      	str	r3, [r2, #0]
 80060bc:	9800      	ldr	r0, [sp, #0]
 80060be:	b015      	add	sp, #84	; 0x54
 80060c0:	ecbd 8b02 	vpop	{d8}
 80060c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060c8:	4b94      	ldr	r3, [pc, #592]	; (800631c <_dtoa_r+0x304>)
 80060ca:	9300      	str	r3, [sp, #0]
 80060cc:	3303      	adds	r3, #3
 80060ce:	e7f3      	b.n	80060b8 <_dtoa_r+0xa0>
 80060d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80060d4:	2200      	movs	r2, #0
 80060d6:	ec51 0b17 	vmov	r0, r1, d7
 80060da:	2300      	movs	r3, #0
 80060dc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80060e0:	f7fa fd12 	bl	8000b08 <__aeabi_dcmpeq>
 80060e4:	4680      	mov	r8, r0
 80060e6:	b158      	cbz	r0, 8006100 <_dtoa_r+0xe8>
 80060e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80060ea:	2301      	movs	r3, #1
 80060ec:	6013      	str	r3, [r2, #0]
 80060ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	f000 8551 	beq.w	8006b98 <_dtoa_r+0xb80>
 80060f6:	488b      	ldr	r0, [pc, #556]	; (8006324 <_dtoa_r+0x30c>)
 80060f8:	6018      	str	r0, [r3, #0]
 80060fa:	1e43      	subs	r3, r0, #1
 80060fc:	9300      	str	r3, [sp, #0]
 80060fe:	e7dd      	b.n	80060bc <_dtoa_r+0xa4>
 8006100:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006104:	aa12      	add	r2, sp, #72	; 0x48
 8006106:	a913      	add	r1, sp, #76	; 0x4c
 8006108:	4620      	mov	r0, r4
 800610a:	f001 f8ad 	bl	8007268 <__d2b>
 800610e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006112:	4683      	mov	fp, r0
 8006114:	2d00      	cmp	r5, #0
 8006116:	d07c      	beq.n	8006212 <_dtoa_r+0x1fa>
 8006118:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800611a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800611e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006122:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8006126:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800612a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800612e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006132:	4b7d      	ldr	r3, [pc, #500]	; (8006328 <_dtoa_r+0x310>)
 8006134:	2200      	movs	r2, #0
 8006136:	4630      	mov	r0, r6
 8006138:	4639      	mov	r1, r7
 800613a:	f7fa f8c5 	bl	80002c8 <__aeabi_dsub>
 800613e:	a36e      	add	r3, pc, #440	; (adr r3, 80062f8 <_dtoa_r+0x2e0>)
 8006140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006144:	f7fa fa78 	bl	8000638 <__aeabi_dmul>
 8006148:	a36d      	add	r3, pc, #436	; (adr r3, 8006300 <_dtoa_r+0x2e8>)
 800614a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800614e:	f7fa f8bd 	bl	80002cc <__adddf3>
 8006152:	4606      	mov	r6, r0
 8006154:	4628      	mov	r0, r5
 8006156:	460f      	mov	r7, r1
 8006158:	f7fa fa04 	bl	8000564 <__aeabi_i2d>
 800615c:	a36a      	add	r3, pc, #424	; (adr r3, 8006308 <_dtoa_r+0x2f0>)
 800615e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006162:	f7fa fa69 	bl	8000638 <__aeabi_dmul>
 8006166:	4602      	mov	r2, r0
 8006168:	460b      	mov	r3, r1
 800616a:	4630      	mov	r0, r6
 800616c:	4639      	mov	r1, r7
 800616e:	f7fa f8ad 	bl	80002cc <__adddf3>
 8006172:	4606      	mov	r6, r0
 8006174:	460f      	mov	r7, r1
 8006176:	f7fa fd0f 	bl	8000b98 <__aeabi_d2iz>
 800617a:	2200      	movs	r2, #0
 800617c:	4682      	mov	sl, r0
 800617e:	2300      	movs	r3, #0
 8006180:	4630      	mov	r0, r6
 8006182:	4639      	mov	r1, r7
 8006184:	f7fa fcca 	bl	8000b1c <__aeabi_dcmplt>
 8006188:	b148      	cbz	r0, 800619e <_dtoa_r+0x186>
 800618a:	4650      	mov	r0, sl
 800618c:	f7fa f9ea 	bl	8000564 <__aeabi_i2d>
 8006190:	4632      	mov	r2, r6
 8006192:	463b      	mov	r3, r7
 8006194:	f7fa fcb8 	bl	8000b08 <__aeabi_dcmpeq>
 8006198:	b908      	cbnz	r0, 800619e <_dtoa_r+0x186>
 800619a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800619e:	f1ba 0f16 	cmp.w	sl, #22
 80061a2:	d854      	bhi.n	800624e <_dtoa_r+0x236>
 80061a4:	4b61      	ldr	r3, [pc, #388]	; (800632c <_dtoa_r+0x314>)
 80061a6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80061aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80061b2:	f7fa fcb3 	bl	8000b1c <__aeabi_dcmplt>
 80061b6:	2800      	cmp	r0, #0
 80061b8:	d04b      	beq.n	8006252 <_dtoa_r+0x23a>
 80061ba:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80061be:	2300      	movs	r3, #0
 80061c0:	930e      	str	r3, [sp, #56]	; 0x38
 80061c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80061c4:	1b5d      	subs	r5, r3, r5
 80061c6:	1e6b      	subs	r3, r5, #1
 80061c8:	9304      	str	r3, [sp, #16]
 80061ca:	bf43      	ittte	mi
 80061cc:	2300      	movmi	r3, #0
 80061ce:	f1c5 0801 	rsbmi	r8, r5, #1
 80061d2:	9304      	strmi	r3, [sp, #16]
 80061d4:	f04f 0800 	movpl.w	r8, #0
 80061d8:	f1ba 0f00 	cmp.w	sl, #0
 80061dc:	db3b      	blt.n	8006256 <_dtoa_r+0x23e>
 80061de:	9b04      	ldr	r3, [sp, #16]
 80061e0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80061e4:	4453      	add	r3, sl
 80061e6:	9304      	str	r3, [sp, #16]
 80061e8:	2300      	movs	r3, #0
 80061ea:	9306      	str	r3, [sp, #24]
 80061ec:	9b05      	ldr	r3, [sp, #20]
 80061ee:	2b09      	cmp	r3, #9
 80061f0:	d869      	bhi.n	80062c6 <_dtoa_r+0x2ae>
 80061f2:	2b05      	cmp	r3, #5
 80061f4:	bfc4      	itt	gt
 80061f6:	3b04      	subgt	r3, #4
 80061f8:	9305      	strgt	r3, [sp, #20]
 80061fa:	9b05      	ldr	r3, [sp, #20]
 80061fc:	f1a3 0302 	sub.w	r3, r3, #2
 8006200:	bfcc      	ite	gt
 8006202:	2500      	movgt	r5, #0
 8006204:	2501      	movle	r5, #1
 8006206:	2b03      	cmp	r3, #3
 8006208:	d869      	bhi.n	80062de <_dtoa_r+0x2c6>
 800620a:	e8df f003 	tbb	[pc, r3]
 800620e:	4e2c      	.short	0x4e2c
 8006210:	5a4c      	.short	0x5a4c
 8006212:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006216:	441d      	add	r5, r3
 8006218:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800621c:	2b20      	cmp	r3, #32
 800621e:	bfc1      	itttt	gt
 8006220:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006224:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006228:	fa09 f303 	lslgt.w	r3, r9, r3
 800622c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006230:	bfda      	itte	le
 8006232:	f1c3 0320 	rsble	r3, r3, #32
 8006236:	fa06 f003 	lslle.w	r0, r6, r3
 800623a:	4318      	orrgt	r0, r3
 800623c:	f7fa f982 	bl	8000544 <__aeabi_ui2d>
 8006240:	2301      	movs	r3, #1
 8006242:	4606      	mov	r6, r0
 8006244:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006248:	3d01      	subs	r5, #1
 800624a:	9310      	str	r3, [sp, #64]	; 0x40
 800624c:	e771      	b.n	8006132 <_dtoa_r+0x11a>
 800624e:	2301      	movs	r3, #1
 8006250:	e7b6      	b.n	80061c0 <_dtoa_r+0x1a8>
 8006252:	900e      	str	r0, [sp, #56]	; 0x38
 8006254:	e7b5      	b.n	80061c2 <_dtoa_r+0x1aa>
 8006256:	f1ca 0300 	rsb	r3, sl, #0
 800625a:	9306      	str	r3, [sp, #24]
 800625c:	2300      	movs	r3, #0
 800625e:	eba8 080a 	sub.w	r8, r8, sl
 8006262:	930d      	str	r3, [sp, #52]	; 0x34
 8006264:	e7c2      	b.n	80061ec <_dtoa_r+0x1d4>
 8006266:	2300      	movs	r3, #0
 8006268:	9308      	str	r3, [sp, #32]
 800626a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800626c:	2b00      	cmp	r3, #0
 800626e:	dc39      	bgt.n	80062e4 <_dtoa_r+0x2cc>
 8006270:	f04f 0901 	mov.w	r9, #1
 8006274:	f8cd 9004 	str.w	r9, [sp, #4]
 8006278:	464b      	mov	r3, r9
 800627a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800627e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006280:	2200      	movs	r2, #0
 8006282:	6042      	str	r2, [r0, #4]
 8006284:	2204      	movs	r2, #4
 8006286:	f102 0614 	add.w	r6, r2, #20
 800628a:	429e      	cmp	r6, r3
 800628c:	6841      	ldr	r1, [r0, #4]
 800628e:	d92f      	bls.n	80062f0 <_dtoa_r+0x2d8>
 8006290:	4620      	mov	r0, r4
 8006292:	f000 fcc7 	bl	8006c24 <_Balloc>
 8006296:	9000      	str	r0, [sp, #0]
 8006298:	2800      	cmp	r0, #0
 800629a:	d14b      	bne.n	8006334 <_dtoa_r+0x31c>
 800629c:	4b24      	ldr	r3, [pc, #144]	; (8006330 <_dtoa_r+0x318>)
 800629e:	4602      	mov	r2, r0
 80062a0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80062a4:	e6d1      	b.n	800604a <_dtoa_r+0x32>
 80062a6:	2301      	movs	r3, #1
 80062a8:	e7de      	b.n	8006268 <_dtoa_r+0x250>
 80062aa:	2300      	movs	r3, #0
 80062ac:	9308      	str	r3, [sp, #32]
 80062ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062b0:	eb0a 0903 	add.w	r9, sl, r3
 80062b4:	f109 0301 	add.w	r3, r9, #1
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	9301      	str	r3, [sp, #4]
 80062bc:	bfb8      	it	lt
 80062be:	2301      	movlt	r3, #1
 80062c0:	e7dd      	b.n	800627e <_dtoa_r+0x266>
 80062c2:	2301      	movs	r3, #1
 80062c4:	e7f2      	b.n	80062ac <_dtoa_r+0x294>
 80062c6:	2501      	movs	r5, #1
 80062c8:	2300      	movs	r3, #0
 80062ca:	9305      	str	r3, [sp, #20]
 80062cc:	9508      	str	r5, [sp, #32]
 80062ce:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80062d2:	2200      	movs	r2, #0
 80062d4:	f8cd 9004 	str.w	r9, [sp, #4]
 80062d8:	2312      	movs	r3, #18
 80062da:	9209      	str	r2, [sp, #36]	; 0x24
 80062dc:	e7cf      	b.n	800627e <_dtoa_r+0x266>
 80062de:	2301      	movs	r3, #1
 80062e0:	9308      	str	r3, [sp, #32]
 80062e2:	e7f4      	b.n	80062ce <_dtoa_r+0x2b6>
 80062e4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80062e8:	f8cd 9004 	str.w	r9, [sp, #4]
 80062ec:	464b      	mov	r3, r9
 80062ee:	e7c6      	b.n	800627e <_dtoa_r+0x266>
 80062f0:	3101      	adds	r1, #1
 80062f2:	6041      	str	r1, [r0, #4]
 80062f4:	0052      	lsls	r2, r2, #1
 80062f6:	e7c6      	b.n	8006286 <_dtoa_r+0x26e>
 80062f8:	636f4361 	.word	0x636f4361
 80062fc:	3fd287a7 	.word	0x3fd287a7
 8006300:	8b60c8b3 	.word	0x8b60c8b3
 8006304:	3fc68a28 	.word	0x3fc68a28
 8006308:	509f79fb 	.word	0x509f79fb
 800630c:	3fd34413 	.word	0x3fd34413
 8006310:	080098b1 	.word	0x080098b1
 8006314:	080098c8 	.word	0x080098c8
 8006318:	7ff00000 	.word	0x7ff00000
 800631c:	080098ad 	.word	0x080098ad
 8006320:	080098a4 	.word	0x080098a4
 8006324:	08009881 	.word	0x08009881
 8006328:	3ff80000 	.word	0x3ff80000
 800632c:	080099c0 	.word	0x080099c0
 8006330:	08009927 	.word	0x08009927
 8006334:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006336:	9a00      	ldr	r2, [sp, #0]
 8006338:	601a      	str	r2, [r3, #0]
 800633a:	9b01      	ldr	r3, [sp, #4]
 800633c:	2b0e      	cmp	r3, #14
 800633e:	f200 80ad 	bhi.w	800649c <_dtoa_r+0x484>
 8006342:	2d00      	cmp	r5, #0
 8006344:	f000 80aa 	beq.w	800649c <_dtoa_r+0x484>
 8006348:	f1ba 0f00 	cmp.w	sl, #0
 800634c:	dd36      	ble.n	80063bc <_dtoa_r+0x3a4>
 800634e:	4ac3      	ldr	r2, [pc, #780]	; (800665c <_dtoa_r+0x644>)
 8006350:	f00a 030f 	and.w	r3, sl, #15
 8006354:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006358:	ed93 7b00 	vldr	d7, [r3]
 800635c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006360:	ea4f 172a 	mov.w	r7, sl, asr #4
 8006364:	eeb0 8a47 	vmov.f32	s16, s14
 8006368:	eef0 8a67 	vmov.f32	s17, s15
 800636c:	d016      	beq.n	800639c <_dtoa_r+0x384>
 800636e:	4bbc      	ldr	r3, [pc, #752]	; (8006660 <_dtoa_r+0x648>)
 8006370:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006374:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006378:	f7fa fa88 	bl	800088c <__aeabi_ddiv>
 800637c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006380:	f007 070f 	and.w	r7, r7, #15
 8006384:	2503      	movs	r5, #3
 8006386:	4eb6      	ldr	r6, [pc, #728]	; (8006660 <_dtoa_r+0x648>)
 8006388:	b957      	cbnz	r7, 80063a0 <_dtoa_r+0x388>
 800638a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800638e:	ec53 2b18 	vmov	r2, r3, d8
 8006392:	f7fa fa7b 	bl	800088c <__aeabi_ddiv>
 8006396:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800639a:	e029      	b.n	80063f0 <_dtoa_r+0x3d8>
 800639c:	2502      	movs	r5, #2
 800639e:	e7f2      	b.n	8006386 <_dtoa_r+0x36e>
 80063a0:	07f9      	lsls	r1, r7, #31
 80063a2:	d508      	bpl.n	80063b6 <_dtoa_r+0x39e>
 80063a4:	ec51 0b18 	vmov	r0, r1, d8
 80063a8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80063ac:	f7fa f944 	bl	8000638 <__aeabi_dmul>
 80063b0:	ec41 0b18 	vmov	d8, r0, r1
 80063b4:	3501      	adds	r5, #1
 80063b6:	107f      	asrs	r7, r7, #1
 80063b8:	3608      	adds	r6, #8
 80063ba:	e7e5      	b.n	8006388 <_dtoa_r+0x370>
 80063bc:	f000 80a6 	beq.w	800650c <_dtoa_r+0x4f4>
 80063c0:	f1ca 0600 	rsb	r6, sl, #0
 80063c4:	4ba5      	ldr	r3, [pc, #660]	; (800665c <_dtoa_r+0x644>)
 80063c6:	4fa6      	ldr	r7, [pc, #664]	; (8006660 <_dtoa_r+0x648>)
 80063c8:	f006 020f 	and.w	r2, r6, #15
 80063cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80063d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80063d8:	f7fa f92e 	bl	8000638 <__aeabi_dmul>
 80063dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063e0:	1136      	asrs	r6, r6, #4
 80063e2:	2300      	movs	r3, #0
 80063e4:	2502      	movs	r5, #2
 80063e6:	2e00      	cmp	r6, #0
 80063e8:	f040 8085 	bne.w	80064f6 <_dtoa_r+0x4de>
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d1d2      	bne.n	8006396 <_dtoa_r+0x37e>
 80063f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	f000 808c 	beq.w	8006510 <_dtoa_r+0x4f8>
 80063f8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80063fc:	4b99      	ldr	r3, [pc, #612]	; (8006664 <_dtoa_r+0x64c>)
 80063fe:	2200      	movs	r2, #0
 8006400:	4630      	mov	r0, r6
 8006402:	4639      	mov	r1, r7
 8006404:	f7fa fb8a 	bl	8000b1c <__aeabi_dcmplt>
 8006408:	2800      	cmp	r0, #0
 800640a:	f000 8081 	beq.w	8006510 <_dtoa_r+0x4f8>
 800640e:	9b01      	ldr	r3, [sp, #4]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d07d      	beq.n	8006510 <_dtoa_r+0x4f8>
 8006414:	f1b9 0f00 	cmp.w	r9, #0
 8006418:	dd3c      	ble.n	8006494 <_dtoa_r+0x47c>
 800641a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800641e:	9307      	str	r3, [sp, #28]
 8006420:	2200      	movs	r2, #0
 8006422:	4b91      	ldr	r3, [pc, #580]	; (8006668 <_dtoa_r+0x650>)
 8006424:	4630      	mov	r0, r6
 8006426:	4639      	mov	r1, r7
 8006428:	f7fa f906 	bl	8000638 <__aeabi_dmul>
 800642c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006430:	3501      	adds	r5, #1
 8006432:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8006436:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800643a:	4628      	mov	r0, r5
 800643c:	f7fa f892 	bl	8000564 <__aeabi_i2d>
 8006440:	4632      	mov	r2, r6
 8006442:	463b      	mov	r3, r7
 8006444:	f7fa f8f8 	bl	8000638 <__aeabi_dmul>
 8006448:	4b88      	ldr	r3, [pc, #544]	; (800666c <_dtoa_r+0x654>)
 800644a:	2200      	movs	r2, #0
 800644c:	f7f9 ff3e 	bl	80002cc <__adddf3>
 8006450:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006454:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006458:	9303      	str	r3, [sp, #12]
 800645a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800645c:	2b00      	cmp	r3, #0
 800645e:	d15c      	bne.n	800651a <_dtoa_r+0x502>
 8006460:	4b83      	ldr	r3, [pc, #524]	; (8006670 <_dtoa_r+0x658>)
 8006462:	2200      	movs	r2, #0
 8006464:	4630      	mov	r0, r6
 8006466:	4639      	mov	r1, r7
 8006468:	f7f9 ff2e 	bl	80002c8 <__aeabi_dsub>
 800646c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006470:	4606      	mov	r6, r0
 8006472:	460f      	mov	r7, r1
 8006474:	f7fa fb70 	bl	8000b58 <__aeabi_dcmpgt>
 8006478:	2800      	cmp	r0, #0
 800647a:	f040 8296 	bne.w	80069aa <_dtoa_r+0x992>
 800647e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006482:	4630      	mov	r0, r6
 8006484:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006488:	4639      	mov	r1, r7
 800648a:	f7fa fb47 	bl	8000b1c <__aeabi_dcmplt>
 800648e:	2800      	cmp	r0, #0
 8006490:	f040 8288 	bne.w	80069a4 <_dtoa_r+0x98c>
 8006494:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006498:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800649c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800649e:	2b00      	cmp	r3, #0
 80064a0:	f2c0 8158 	blt.w	8006754 <_dtoa_r+0x73c>
 80064a4:	f1ba 0f0e 	cmp.w	sl, #14
 80064a8:	f300 8154 	bgt.w	8006754 <_dtoa_r+0x73c>
 80064ac:	4b6b      	ldr	r3, [pc, #428]	; (800665c <_dtoa_r+0x644>)
 80064ae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80064b2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80064b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	f280 80e3 	bge.w	8006684 <_dtoa_r+0x66c>
 80064be:	9b01      	ldr	r3, [sp, #4]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	f300 80df 	bgt.w	8006684 <_dtoa_r+0x66c>
 80064c6:	f040 826d 	bne.w	80069a4 <_dtoa_r+0x98c>
 80064ca:	4b69      	ldr	r3, [pc, #420]	; (8006670 <_dtoa_r+0x658>)
 80064cc:	2200      	movs	r2, #0
 80064ce:	4640      	mov	r0, r8
 80064d0:	4649      	mov	r1, r9
 80064d2:	f7fa f8b1 	bl	8000638 <__aeabi_dmul>
 80064d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80064da:	f7fa fb33 	bl	8000b44 <__aeabi_dcmpge>
 80064de:	9e01      	ldr	r6, [sp, #4]
 80064e0:	4637      	mov	r7, r6
 80064e2:	2800      	cmp	r0, #0
 80064e4:	f040 8243 	bne.w	800696e <_dtoa_r+0x956>
 80064e8:	9d00      	ldr	r5, [sp, #0]
 80064ea:	2331      	movs	r3, #49	; 0x31
 80064ec:	f805 3b01 	strb.w	r3, [r5], #1
 80064f0:	f10a 0a01 	add.w	sl, sl, #1
 80064f4:	e23f      	b.n	8006976 <_dtoa_r+0x95e>
 80064f6:	07f2      	lsls	r2, r6, #31
 80064f8:	d505      	bpl.n	8006506 <_dtoa_r+0x4ee>
 80064fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064fe:	f7fa f89b 	bl	8000638 <__aeabi_dmul>
 8006502:	3501      	adds	r5, #1
 8006504:	2301      	movs	r3, #1
 8006506:	1076      	asrs	r6, r6, #1
 8006508:	3708      	adds	r7, #8
 800650a:	e76c      	b.n	80063e6 <_dtoa_r+0x3ce>
 800650c:	2502      	movs	r5, #2
 800650e:	e76f      	b.n	80063f0 <_dtoa_r+0x3d8>
 8006510:	9b01      	ldr	r3, [sp, #4]
 8006512:	f8cd a01c 	str.w	sl, [sp, #28]
 8006516:	930c      	str	r3, [sp, #48]	; 0x30
 8006518:	e78d      	b.n	8006436 <_dtoa_r+0x41e>
 800651a:	9900      	ldr	r1, [sp, #0]
 800651c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800651e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006520:	4b4e      	ldr	r3, [pc, #312]	; (800665c <_dtoa_r+0x644>)
 8006522:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006526:	4401      	add	r1, r0
 8006528:	9102      	str	r1, [sp, #8]
 800652a:	9908      	ldr	r1, [sp, #32]
 800652c:	eeb0 8a47 	vmov.f32	s16, s14
 8006530:	eef0 8a67 	vmov.f32	s17, s15
 8006534:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006538:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800653c:	2900      	cmp	r1, #0
 800653e:	d045      	beq.n	80065cc <_dtoa_r+0x5b4>
 8006540:	494c      	ldr	r1, [pc, #304]	; (8006674 <_dtoa_r+0x65c>)
 8006542:	2000      	movs	r0, #0
 8006544:	f7fa f9a2 	bl	800088c <__aeabi_ddiv>
 8006548:	ec53 2b18 	vmov	r2, r3, d8
 800654c:	f7f9 febc 	bl	80002c8 <__aeabi_dsub>
 8006550:	9d00      	ldr	r5, [sp, #0]
 8006552:	ec41 0b18 	vmov	d8, r0, r1
 8006556:	4639      	mov	r1, r7
 8006558:	4630      	mov	r0, r6
 800655a:	f7fa fb1d 	bl	8000b98 <__aeabi_d2iz>
 800655e:	900c      	str	r0, [sp, #48]	; 0x30
 8006560:	f7fa f800 	bl	8000564 <__aeabi_i2d>
 8006564:	4602      	mov	r2, r0
 8006566:	460b      	mov	r3, r1
 8006568:	4630      	mov	r0, r6
 800656a:	4639      	mov	r1, r7
 800656c:	f7f9 feac 	bl	80002c8 <__aeabi_dsub>
 8006570:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006572:	3330      	adds	r3, #48	; 0x30
 8006574:	f805 3b01 	strb.w	r3, [r5], #1
 8006578:	ec53 2b18 	vmov	r2, r3, d8
 800657c:	4606      	mov	r6, r0
 800657e:	460f      	mov	r7, r1
 8006580:	f7fa facc 	bl	8000b1c <__aeabi_dcmplt>
 8006584:	2800      	cmp	r0, #0
 8006586:	d165      	bne.n	8006654 <_dtoa_r+0x63c>
 8006588:	4632      	mov	r2, r6
 800658a:	463b      	mov	r3, r7
 800658c:	4935      	ldr	r1, [pc, #212]	; (8006664 <_dtoa_r+0x64c>)
 800658e:	2000      	movs	r0, #0
 8006590:	f7f9 fe9a 	bl	80002c8 <__aeabi_dsub>
 8006594:	ec53 2b18 	vmov	r2, r3, d8
 8006598:	f7fa fac0 	bl	8000b1c <__aeabi_dcmplt>
 800659c:	2800      	cmp	r0, #0
 800659e:	f040 80b9 	bne.w	8006714 <_dtoa_r+0x6fc>
 80065a2:	9b02      	ldr	r3, [sp, #8]
 80065a4:	429d      	cmp	r5, r3
 80065a6:	f43f af75 	beq.w	8006494 <_dtoa_r+0x47c>
 80065aa:	4b2f      	ldr	r3, [pc, #188]	; (8006668 <_dtoa_r+0x650>)
 80065ac:	ec51 0b18 	vmov	r0, r1, d8
 80065b0:	2200      	movs	r2, #0
 80065b2:	f7fa f841 	bl	8000638 <__aeabi_dmul>
 80065b6:	4b2c      	ldr	r3, [pc, #176]	; (8006668 <_dtoa_r+0x650>)
 80065b8:	ec41 0b18 	vmov	d8, r0, r1
 80065bc:	2200      	movs	r2, #0
 80065be:	4630      	mov	r0, r6
 80065c0:	4639      	mov	r1, r7
 80065c2:	f7fa f839 	bl	8000638 <__aeabi_dmul>
 80065c6:	4606      	mov	r6, r0
 80065c8:	460f      	mov	r7, r1
 80065ca:	e7c4      	b.n	8006556 <_dtoa_r+0x53e>
 80065cc:	ec51 0b17 	vmov	r0, r1, d7
 80065d0:	f7fa f832 	bl	8000638 <__aeabi_dmul>
 80065d4:	9b02      	ldr	r3, [sp, #8]
 80065d6:	9d00      	ldr	r5, [sp, #0]
 80065d8:	930c      	str	r3, [sp, #48]	; 0x30
 80065da:	ec41 0b18 	vmov	d8, r0, r1
 80065de:	4639      	mov	r1, r7
 80065e0:	4630      	mov	r0, r6
 80065e2:	f7fa fad9 	bl	8000b98 <__aeabi_d2iz>
 80065e6:	9011      	str	r0, [sp, #68]	; 0x44
 80065e8:	f7f9 ffbc 	bl	8000564 <__aeabi_i2d>
 80065ec:	4602      	mov	r2, r0
 80065ee:	460b      	mov	r3, r1
 80065f0:	4630      	mov	r0, r6
 80065f2:	4639      	mov	r1, r7
 80065f4:	f7f9 fe68 	bl	80002c8 <__aeabi_dsub>
 80065f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80065fa:	3330      	adds	r3, #48	; 0x30
 80065fc:	f805 3b01 	strb.w	r3, [r5], #1
 8006600:	9b02      	ldr	r3, [sp, #8]
 8006602:	429d      	cmp	r5, r3
 8006604:	4606      	mov	r6, r0
 8006606:	460f      	mov	r7, r1
 8006608:	f04f 0200 	mov.w	r2, #0
 800660c:	d134      	bne.n	8006678 <_dtoa_r+0x660>
 800660e:	4b19      	ldr	r3, [pc, #100]	; (8006674 <_dtoa_r+0x65c>)
 8006610:	ec51 0b18 	vmov	r0, r1, d8
 8006614:	f7f9 fe5a 	bl	80002cc <__adddf3>
 8006618:	4602      	mov	r2, r0
 800661a:	460b      	mov	r3, r1
 800661c:	4630      	mov	r0, r6
 800661e:	4639      	mov	r1, r7
 8006620:	f7fa fa9a 	bl	8000b58 <__aeabi_dcmpgt>
 8006624:	2800      	cmp	r0, #0
 8006626:	d175      	bne.n	8006714 <_dtoa_r+0x6fc>
 8006628:	ec53 2b18 	vmov	r2, r3, d8
 800662c:	4911      	ldr	r1, [pc, #68]	; (8006674 <_dtoa_r+0x65c>)
 800662e:	2000      	movs	r0, #0
 8006630:	f7f9 fe4a 	bl	80002c8 <__aeabi_dsub>
 8006634:	4602      	mov	r2, r0
 8006636:	460b      	mov	r3, r1
 8006638:	4630      	mov	r0, r6
 800663a:	4639      	mov	r1, r7
 800663c:	f7fa fa6e 	bl	8000b1c <__aeabi_dcmplt>
 8006640:	2800      	cmp	r0, #0
 8006642:	f43f af27 	beq.w	8006494 <_dtoa_r+0x47c>
 8006646:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006648:	1e6b      	subs	r3, r5, #1
 800664a:	930c      	str	r3, [sp, #48]	; 0x30
 800664c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006650:	2b30      	cmp	r3, #48	; 0x30
 8006652:	d0f8      	beq.n	8006646 <_dtoa_r+0x62e>
 8006654:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006658:	e04a      	b.n	80066f0 <_dtoa_r+0x6d8>
 800665a:	bf00      	nop
 800665c:	080099c0 	.word	0x080099c0
 8006660:	08009998 	.word	0x08009998
 8006664:	3ff00000 	.word	0x3ff00000
 8006668:	40240000 	.word	0x40240000
 800666c:	401c0000 	.word	0x401c0000
 8006670:	40140000 	.word	0x40140000
 8006674:	3fe00000 	.word	0x3fe00000
 8006678:	4baf      	ldr	r3, [pc, #700]	; (8006938 <_dtoa_r+0x920>)
 800667a:	f7f9 ffdd 	bl	8000638 <__aeabi_dmul>
 800667e:	4606      	mov	r6, r0
 8006680:	460f      	mov	r7, r1
 8006682:	e7ac      	b.n	80065de <_dtoa_r+0x5c6>
 8006684:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006688:	9d00      	ldr	r5, [sp, #0]
 800668a:	4642      	mov	r2, r8
 800668c:	464b      	mov	r3, r9
 800668e:	4630      	mov	r0, r6
 8006690:	4639      	mov	r1, r7
 8006692:	f7fa f8fb 	bl	800088c <__aeabi_ddiv>
 8006696:	f7fa fa7f 	bl	8000b98 <__aeabi_d2iz>
 800669a:	9002      	str	r0, [sp, #8]
 800669c:	f7f9 ff62 	bl	8000564 <__aeabi_i2d>
 80066a0:	4642      	mov	r2, r8
 80066a2:	464b      	mov	r3, r9
 80066a4:	f7f9 ffc8 	bl	8000638 <__aeabi_dmul>
 80066a8:	4602      	mov	r2, r0
 80066aa:	460b      	mov	r3, r1
 80066ac:	4630      	mov	r0, r6
 80066ae:	4639      	mov	r1, r7
 80066b0:	f7f9 fe0a 	bl	80002c8 <__aeabi_dsub>
 80066b4:	9e02      	ldr	r6, [sp, #8]
 80066b6:	9f01      	ldr	r7, [sp, #4]
 80066b8:	3630      	adds	r6, #48	; 0x30
 80066ba:	f805 6b01 	strb.w	r6, [r5], #1
 80066be:	9e00      	ldr	r6, [sp, #0]
 80066c0:	1bae      	subs	r6, r5, r6
 80066c2:	42b7      	cmp	r7, r6
 80066c4:	4602      	mov	r2, r0
 80066c6:	460b      	mov	r3, r1
 80066c8:	d137      	bne.n	800673a <_dtoa_r+0x722>
 80066ca:	f7f9 fdff 	bl	80002cc <__adddf3>
 80066ce:	4642      	mov	r2, r8
 80066d0:	464b      	mov	r3, r9
 80066d2:	4606      	mov	r6, r0
 80066d4:	460f      	mov	r7, r1
 80066d6:	f7fa fa3f 	bl	8000b58 <__aeabi_dcmpgt>
 80066da:	b9c8      	cbnz	r0, 8006710 <_dtoa_r+0x6f8>
 80066dc:	4642      	mov	r2, r8
 80066de:	464b      	mov	r3, r9
 80066e0:	4630      	mov	r0, r6
 80066e2:	4639      	mov	r1, r7
 80066e4:	f7fa fa10 	bl	8000b08 <__aeabi_dcmpeq>
 80066e8:	b110      	cbz	r0, 80066f0 <_dtoa_r+0x6d8>
 80066ea:	9b02      	ldr	r3, [sp, #8]
 80066ec:	07d9      	lsls	r1, r3, #31
 80066ee:	d40f      	bmi.n	8006710 <_dtoa_r+0x6f8>
 80066f0:	4620      	mov	r0, r4
 80066f2:	4659      	mov	r1, fp
 80066f4:	f000 fad6 	bl	8006ca4 <_Bfree>
 80066f8:	2300      	movs	r3, #0
 80066fa:	702b      	strb	r3, [r5, #0]
 80066fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80066fe:	f10a 0001 	add.w	r0, sl, #1
 8006702:	6018      	str	r0, [r3, #0]
 8006704:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006706:	2b00      	cmp	r3, #0
 8006708:	f43f acd8 	beq.w	80060bc <_dtoa_r+0xa4>
 800670c:	601d      	str	r5, [r3, #0]
 800670e:	e4d5      	b.n	80060bc <_dtoa_r+0xa4>
 8006710:	f8cd a01c 	str.w	sl, [sp, #28]
 8006714:	462b      	mov	r3, r5
 8006716:	461d      	mov	r5, r3
 8006718:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800671c:	2a39      	cmp	r2, #57	; 0x39
 800671e:	d108      	bne.n	8006732 <_dtoa_r+0x71a>
 8006720:	9a00      	ldr	r2, [sp, #0]
 8006722:	429a      	cmp	r2, r3
 8006724:	d1f7      	bne.n	8006716 <_dtoa_r+0x6fe>
 8006726:	9a07      	ldr	r2, [sp, #28]
 8006728:	9900      	ldr	r1, [sp, #0]
 800672a:	3201      	adds	r2, #1
 800672c:	9207      	str	r2, [sp, #28]
 800672e:	2230      	movs	r2, #48	; 0x30
 8006730:	700a      	strb	r2, [r1, #0]
 8006732:	781a      	ldrb	r2, [r3, #0]
 8006734:	3201      	adds	r2, #1
 8006736:	701a      	strb	r2, [r3, #0]
 8006738:	e78c      	b.n	8006654 <_dtoa_r+0x63c>
 800673a:	4b7f      	ldr	r3, [pc, #508]	; (8006938 <_dtoa_r+0x920>)
 800673c:	2200      	movs	r2, #0
 800673e:	f7f9 ff7b 	bl	8000638 <__aeabi_dmul>
 8006742:	2200      	movs	r2, #0
 8006744:	2300      	movs	r3, #0
 8006746:	4606      	mov	r6, r0
 8006748:	460f      	mov	r7, r1
 800674a:	f7fa f9dd 	bl	8000b08 <__aeabi_dcmpeq>
 800674e:	2800      	cmp	r0, #0
 8006750:	d09b      	beq.n	800668a <_dtoa_r+0x672>
 8006752:	e7cd      	b.n	80066f0 <_dtoa_r+0x6d8>
 8006754:	9a08      	ldr	r2, [sp, #32]
 8006756:	2a00      	cmp	r2, #0
 8006758:	f000 80c4 	beq.w	80068e4 <_dtoa_r+0x8cc>
 800675c:	9a05      	ldr	r2, [sp, #20]
 800675e:	2a01      	cmp	r2, #1
 8006760:	f300 80a8 	bgt.w	80068b4 <_dtoa_r+0x89c>
 8006764:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006766:	2a00      	cmp	r2, #0
 8006768:	f000 80a0 	beq.w	80068ac <_dtoa_r+0x894>
 800676c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006770:	9e06      	ldr	r6, [sp, #24]
 8006772:	4645      	mov	r5, r8
 8006774:	9a04      	ldr	r2, [sp, #16]
 8006776:	2101      	movs	r1, #1
 8006778:	441a      	add	r2, r3
 800677a:	4620      	mov	r0, r4
 800677c:	4498      	add	r8, r3
 800677e:	9204      	str	r2, [sp, #16]
 8006780:	f000 fb4c 	bl	8006e1c <__i2b>
 8006784:	4607      	mov	r7, r0
 8006786:	2d00      	cmp	r5, #0
 8006788:	dd0b      	ble.n	80067a2 <_dtoa_r+0x78a>
 800678a:	9b04      	ldr	r3, [sp, #16]
 800678c:	2b00      	cmp	r3, #0
 800678e:	dd08      	ble.n	80067a2 <_dtoa_r+0x78a>
 8006790:	42ab      	cmp	r3, r5
 8006792:	9a04      	ldr	r2, [sp, #16]
 8006794:	bfa8      	it	ge
 8006796:	462b      	movge	r3, r5
 8006798:	eba8 0803 	sub.w	r8, r8, r3
 800679c:	1aed      	subs	r5, r5, r3
 800679e:	1ad3      	subs	r3, r2, r3
 80067a0:	9304      	str	r3, [sp, #16]
 80067a2:	9b06      	ldr	r3, [sp, #24]
 80067a4:	b1fb      	cbz	r3, 80067e6 <_dtoa_r+0x7ce>
 80067a6:	9b08      	ldr	r3, [sp, #32]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	f000 809f 	beq.w	80068ec <_dtoa_r+0x8d4>
 80067ae:	2e00      	cmp	r6, #0
 80067b0:	dd11      	ble.n	80067d6 <_dtoa_r+0x7be>
 80067b2:	4639      	mov	r1, r7
 80067b4:	4632      	mov	r2, r6
 80067b6:	4620      	mov	r0, r4
 80067b8:	f000 fbec 	bl	8006f94 <__pow5mult>
 80067bc:	465a      	mov	r2, fp
 80067be:	4601      	mov	r1, r0
 80067c0:	4607      	mov	r7, r0
 80067c2:	4620      	mov	r0, r4
 80067c4:	f000 fb40 	bl	8006e48 <__multiply>
 80067c8:	4659      	mov	r1, fp
 80067ca:	9007      	str	r0, [sp, #28]
 80067cc:	4620      	mov	r0, r4
 80067ce:	f000 fa69 	bl	8006ca4 <_Bfree>
 80067d2:	9b07      	ldr	r3, [sp, #28]
 80067d4:	469b      	mov	fp, r3
 80067d6:	9b06      	ldr	r3, [sp, #24]
 80067d8:	1b9a      	subs	r2, r3, r6
 80067da:	d004      	beq.n	80067e6 <_dtoa_r+0x7ce>
 80067dc:	4659      	mov	r1, fp
 80067de:	4620      	mov	r0, r4
 80067e0:	f000 fbd8 	bl	8006f94 <__pow5mult>
 80067e4:	4683      	mov	fp, r0
 80067e6:	2101      	movs	r1, #1
 80067e8:	4620      	mov	r0, r4
 80067ea:	f000 fb17 	bl	8006e1c <__i2b>
 80067ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	4606      	mov	r6, r0
 80067f4:	dd7c      	ble.n	80068f0 <_dtoa_r+0x8d8>
 80067f6:	461a      	mov	r2, r3
 80067f8:	4601      	mov	r1, r0
 80067fa:	4620      	mov	r0, r4
 80067fc:	f000 fbca 	bl	8006f94 <__pow5mult>
 8006800:	9b05      	ldr	r3, [sp, #20]
 8006802:	2b01      	cmp	r3, #1
 8006804:	4606      	mov	r6, r0
 8006806:	dd76      	ble.n	80068f6 <_dtoa_r+0x8de>
 8006808:	2300      	movs	r3, #0
 800680a:	9306      	str	r3, [sp, #24]
 800680c:	6933      	ldr	r3, [r6, #16]
 800680e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006812:	6918      	ldr	r0, [r3, #16]
 8006814:	f000 fab2 	bl	8006d7c <__hi0bits>
 8006818:	f1c0 0020 	rsb	r0, r0, #32
 800681c:	9b04      	ldr	r3, [sp, #16]
 800681e:	4418      	add	r0, r3
 8006820:	f010 001f 	ands.w	r0, r0, #31
 8006824:	f000 8086 	beq.w	8006934 <_dtoa_r+0x91c>
 8006828:	f1c0 0320 	rsb	r3, r0, #32
 800682c:	2b04      	cmp	r3, #4
 800682e:	dd7f      	ble.n	8006930 <_dtoa_r+0x918>
 8006830:	f1c0 001c 	rsb	r0, r0, #28
 8006834:	9b04      	ldr	r3, [sp, #16]
 8006836:	4403      	add	r3, r0
 8006838:	4480      	add	r8, r0
 800683a:	4405      	add	r5, r0
 800683c:	9304      	str	r3, [sp, #16]
 800683e:	f1b8 0f00 	cmp.w	r8, #0
 8006842:	dd05      	ble.n	8006850 <_dtoa_r+0x838>
 8006844:	4659      	mov	r1, fp
 8006846:	4642      	mov	r2, r8
 8006848:	4620      	mov	r0, r4
 800684a:	f000 fbfd 	bl	8007048 <__lshift>
 800684e:	4683      	mov	fp, r0
 8006850:	9b04      	ldr	r3, [sp, #16]
 8006852:	2b00      	cmp	r3, #0
 8006854:	dd05      	ble.n	8006862 <_dtoa_r+0x84a>
 8006856:	4631      	mov	r1, r6
 8006858:	461a      	mov	r2, r3
 800685a:	4620      	mov	r0, r4
 800685c:	f000 fbf4 	bl	8007048 <__lshift>
 8006860:	4606      	mov	r6, r0
 8006862:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006864:	2b00      	cmp	r3, #0
 8006866:	d069      	beq.n	800693c <_dtoa_r+0x924>
 8006868:	4631      	mov	r1, r6
 800686a:	4658      	mov	r0, fp
 800686c:	f000 fc58 	bl	8007120 <__mcmp>
 8006870:	2800      	cmp	r0, #0
 8006872:	da63      	bge.n	800693c <_dtoa_r+0x924>
 8006874:	2300      	movs	r3, #0
 8006876:	4659      	mov	r1, fp
 8006878:	220a      	movs	r2, #10
 800687a:	4620      	mov	r0, r4
 800687c:	f000 fa34 	bl	8006ce8 <__multadd>
 8006880:	9b08      	ldr	r3, [sp, #32]
 8006882:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006886:	4683      	mov	fp, r0
 8006888:	2b00      	cmp	r3, #0
 800688a:	f000 818f 	beq.w	8006bac <_dtoa_r+0xb94>
 800688e:	4639      	mov	r1, r7
 8006890:	2300      	movs	r3, #0
 8006892:	220a      	movs	r2, #10
 8006894:	4620      	mov	r0, r4
 8006896:	f000 fa27 	bl	8006ce8 <__multadd>
 800689a:	f1b9 0f00 	cmp.w	r9, #0
 800689e:	4607      	mov	r7, r0
 80068a0:	f300 808e 	bgt.w	80069c0 <_dtoa_r+0x9a8>
 80068a4:	9b05      	ldr	r3, [sp, #20]
 80068a6:	2b02      	cmp	r3, #2
 80068a8:	dc50      	bgt.n	800694c <_dtoa_r+0x934>
 80068aa:	e089      	b.n	80069c0 <_dtoa_r+0x9a8>
 80068ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80068ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80068b2:	e75d      	b.n	8006770 <_dtoa_r+0x758>
 80068b4:	9b01      	ldr	r3, [sp, #4]
 80068b6:	1e5e      	subs	r6, r3, #1
 80068b8:	9b06      	ldr	r3, [sp, #24]
 80068ba:	42b3      	cmp	r3, r6
 80068bc:	bfbf      	itttt	lt
 80068be:	9b06      	ldrlt	r3, [sp, #24]
 80068c0:	9606      	strlt	r6, [sp, #24]
 80068c2:	1af2      	sublt	r2, r6, r3
 80068c4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80068c6:	bfb6      	itet	lt
 80068c8:	189b      	addlt	r3, r3, r2
 80068ca:	1b9e      	subge	r6, r3, r6
 80068cc:	930d      	strlt	r3, [sp, #52]	; 0x34
 80068ce:	9b01      	ldr	r3, [sp, #4]
 80068d0:	bfb8      	it	lt
 80068d2:	2600      	movlt	r6, #0
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	bfb5      	itete	lt
 80068d8:	eba8 0503 	sublt.w	r5, r8, r3
 80068dc:	9b01      	ldrge	r3, [sp, #4]
 80068de:	2300      	movlt	r3, #0
 80068e0:	4645      	movge	r5, r8
 80068e2:	e747      	b.n	8006774 <_dtoa_r+0x75c>
 80068e4:	9e06      	ldr	r6, [sp, #24]
 80068e6:	9f08      	ldr	r7, [sp, #32]
 80068e8:	4645      	mov	r5, r8
 80068ea:	e74c      	b.n	8006786 <_dtoa_r+0x76e>
 80068ec:	9a06      	ldr	r2, [sp, #24]
 80068ee:	e775      	b.n	80067dc <_dtoa_r+0x7c4>
 80068f0:	9b05      	ldr	r3, [sp, #20]
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	dc18      	bgt.n	8006928 <_dtoa_r+0x910>
 80068f6:	9b02      	ldr	r3, [sp, #8]
 80068f8:	b9b3      	cbnz	r3, 8006928 <_dtoa_r+0x910>
 80068fa:	9b03      	ldr	r3, [sp, #12]
 80068fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006900:	b9a3      	cbnz	r3, 800692c <_dtoa_r+0x914>
 8006902:	9b03      	ldr	r3, [sp, #12]
 8006904:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006908:	0d1b      	lsrs	r3, r3, #20
 800690a:	051b      	lsls	r3, r3, #20
 800690c:	b12b      	cbz	r3, 800691a <_dtoa_r+0x902>
 800690e:	9b04      	ldr	r3, [sp, #16]
 8006910:	3301      	adds	r3, #1
 8006912:	9304      	str	r3, [sp, #16]
 8006914:	f108 0801 	add.w	r8, r8, #1
 8006918:	2301      	movs	r3, #1
 800691a:	9306      	str	r3, [sp, #24]
 800691c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800691e:	2b00      	cmp	r3, #0
 8006920:	f47f af74 	bne.w	800680c <_dtoa_r+0x7f4>
 8006924:	2001      	movs	r0, #1
 8006926:	e779      	b.n	800681c <_dtoa_r+0x804>
 8006928:	2300      	movs	r3, #0
 800692a:	e7f6      	b.n	800691a <_dtoa_r+0x902>
 800692c:	9b02      	ldr	r3, [sp, #8]
 800692e:	e7f4      	b.n	800691a <_dtoa_r+0x902>
 8006930:	d085      	beq.n	800683e <_dtoa_r+0x826>
 8006932:	4618      	mov	r0, r3
 8006934:	301c      	adds	r0, #28
 8006936:	e77d      	b.n	8006834 <_dtoa_r+0x81c>
 8006938:	40240000 	.word	0x40240000
 800693c:	9b01      	ldr	r3, [sp, #4]
 800693e:	2b00      	cmp	r3, #0
 8006940:	dc38      	bgt.n	80069b4 <_dtoa_r+0x99c>
 8006942:	9b05      	ldr	r3, [sp, #20]
 8006944:	2b02      	cmp	r3, #2
 8006946:	dd35      	ble.n	80069b4 <_dtoa_r+0x99c>
 8006948:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800694c:	f1b9 0f00 	cmp.w	r9, #0
 8006950:	d10d      	bne.n	800696e <_dtoa_r+0x956>
 8006952:	4631      	mov	r1, r6
 8006954:	464b      	mov	r3, r9
 8006956:	2205      	movs	r2, #5
 8006958:	4620      	mov	r0, r4
 800695a:	f000 f9c5 	bl	8006ce8 <__multadd>
 800695e:	4601      	mov	r1, r0
 8006960:	4606      	mov	r6, r0
 8006962:	4658      	mov	r0, fp
 8006964:	f000 fbdc 	bl	8007120 <__mcmp>
 8006968:	2800      	cmp	r0, #0
 800696a:	f73f adbd 	bgt.w	80064e8 <_dtoa_r+0x4d0>
 800696e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006970:	9d00      	ldr	r5, [sp, #0]
 8006972:	ea6f 0a03 	mvn.w	sl, r3
 8006976:	f04f 0800 	mov.w	r8, #0
 800697a:	4631      	mov	r1, r6
 800697c:	4620      	mov	r0, r4
 800697e:	f000 f991 	bl	8006ca4 <_Bfree>
 8006982:	2f00      	cmp	r7, #0
 8006984:	f43f aeb4 	beq.w	80066f0 <_dtoa_r+0x6d8>
 8006988:	f1b8 0f00 	cmp.w	r8, #0
 800698c:	d005      	beq.n	800699a <_dtoa_r+0x982>
 800698e:	45b8      	cmp	r8, r7
 8006990:	d003      	beq.n	800699a <_dtoa_r+0x982>
 8006992:	4641      	mov	r1, r8
 8006994:	4620      	mov	r0, r4
 8006996:	f000 f985 	bl	8006ca4 <_Bfree>
 800699a:	4639      	mov	r1, r7
 800699c:	4620      	mov	r0, r4
 800699e:	f000 f981 	bl	8006ca4 <_Bfree>
 80069a2:	e6a5      	b.n	80066f0 <_dtoa_r+0x6d8>
 80069a4:	2600      	movs	r6, #0
 80069a6:	4637      	mov	r7, r6
 80069a8:	e7e1      	b.n	800696e <_dtoa_r+0x956>
 80069aa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80069ac:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80069b0:	4637      	mov	r7, r6
 80069b2:	e599      	b.n	80064e8 <_dtoa_r+0x4d0>
 80069b4:	9b08      	ldr	r3, [sp, #32]
 80069b6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	f000 80fd 	beq.w	8006bba <_dtoa_r+0xba2>
 80069c0:	2d00      	cmp	r5, #0
 80069c2:	dd05      	ble.n	80069d0 <_dtoa_r+0x9b8>
 80069c4:	4639      	mov	r1, r7
 80069c6:	462a      	mov	r2, r5
 80069c8:	4620      	mov	r0, r4
 80069ca:	f000 fb3d 	bl	8007048 <__lshift>
 80069ce:	4607      	mov	r7, r0
 80069d0:	9b06      	ldr	r3, [sp, #24]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d05c      	beq.n	8006a90 <_dtoa_r+0xa78>
 80069d6:	6879      	ldr	r1, [r7, #4]
 80069d8:	4620      	mov	r0, r4
 80069da:	f000 f923 	bl	8006c24 <_Balloc>
 80069de:	4605      	mov	r5, r0
 80069e0:	b928      	cbnz	r0, 80069ee <_dtoa_r+0x9d6>
 80069e2:	4b80      	ldr	r3, [pc, #512]	; (8006be4 <_dtoa_r+0xbcc>)
 80069e4:	4602      	mov	r2, r0
 80069e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80069ea:	f7ff bb2e 	b.w	800604a <_dtoa_r+0x32>
 80069ee:	693a      	ldr	r2, [r7, #16]
 80069f0:	3202      	adds	r2, #2
 80069f2:	0092      	lsls	r2, r2, #2
 80069f4:	f107 010c 	add.w	r1, r7, #12
 80069f8:	300c      	adds	r0, #12
 80069fa:	f000 f905 	bl	8006c08 <memcpy>
 80069fe:	2201      	movs	r2, #1
 8006a00:	4629      	mov	r1, r5
 8006a02:	4620      	mov	r0, r4
 8006a04:	f000 fb20 	bl	8007048 <__lshift>
 8006a08:	9b00      	ldr	r3, [sp, #0]
 8006a0a:	3301      	adds	r3, #1
 8006a0c:	9301      	str	r3, [sp, #4]
 8006a0e:	9b00      	ldr	r3, [sp, #0]
 8006a10:	444b      	add	r3, r9
 8006a12:	9307      	str	r3, [sp, #28]
 8006a14:	9b02      	ldr	r3, [sp, #8]
 8006a16:	f003 0301 	and.w	r3, r3, #1
 8006a1a:	46b8      	mov	r8, r7
 8006a1c:	9306      	str	r3, [sp, #24]
 8006a1e:	4607      	mov	r7, r0
 8006a20:	9b01      	ldr	r3, [sp, #4]
 8006a22:	4631      	mov	r1, r6
 8006a24:	3b01      	subs	r3, #1
 8006a26:	4658      	mov	r0, fp
 8006a28:	9302      	str	r3, [sp, #8]
 8006a2a:	f7ff fa67 	bl	8005efc <quorem>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	3330      	adds	r3, #48	; 0x30
 8006a32:	9004      	str	r0, [sp, #16]
 8006a34:	4641      	mov	r1, r8
 8006a36:	4658      	mov	r0, fp
 8006a38:	9308      	str	r3, [sp, #32]
 8006a3a:	f000 fb71 	bl	8007120 <__mcmp>
 8006a3e:	463a      	mov	r2, r7
 8006a40:	4681      	mov	r9, r0
 8006a42:	4631      	mov	r1, r6
 8006a44:	4620      	mov	r0, r4
 8006a46:	f000 fb87 	bl	8007158 <__mdiff>
 8006a4a:	68c2      	ldr	r2, [r0, #12]
 8006a4c:	9b08      	ldr	r3, [sp, #32]
 8006a4e:	4605      	mov	r5, r0
 8006a50:	bb02      	cbnz	r2, 8006a94 <_dtoa_r+0xa7c>
 8006a52:	4601      	mov	r1, r0
 8006a54:	4658      	mov	r0, fp
 8006a56:	f000 fb63 	bl	8007120 <__mcmp>
 8006a5a:	9b08      	ldr	r3, [sp, #32]
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	4629      	mov	r1, r5
 8006a60:	4620      	mov	r0, r4
 8006a62:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8006a66:	f000 f91d 	bl	8006ca4 <_Bfree>
 8006a6a:	9b05      	ldr	r3, [sp, #20]
 8006a6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a6e:	9d01      	ldr	r5, [sp, #4]
 8006a70:	ea43 0102 	orr.w	r1, r3, r2
 8006a74:	9b06      	ldr	r3, [sp, #24]
 8006a76:	430b      	orrs	r3, r1
 8006a78:	9b08      	ldr	r3, [sp, #32]
 8006a7a:	d10d      	bne.n	8006a98 <_dtoa_r+0xa80>
 8006a7c:	2b39      	cmp	r3, #57	; 0x39
 8006a7e:	d029      	beq.n	8006ad4 <_dtoa_r+0xabc>
 8006a80:	f1b9 0f00 	cmp.w	r9, #0
 8006a84:	dd01      	ble.n	8006a8a <_dtoa_r+0xa72>
 8006a86:	9b04      	ldr	r3, [sp, #16]
 8006a88:	3331      	adds	r3, #49	; 0x31
 8006a8a:	9a02      	ldr	r2, [sp, #8]
 8006a8c:	7013      	strb	r3, [r2, #0]
 8006a8e:	e774      	b.n	800697a <_dtoa_r+0x962>
 8006a90:	4638      	mov	r0, r7
 8006a92:	e7b9      	b.n	8006a08 <_dtoa_r+0x9f0>
 8006a94:	2201      	movs	r2, #1
 8006a96:	e7e2      	b.n	8006a5e <_dtoa_r+0xa46>
 8006a98:	f1b9 0f00 	cmp.w	r9, #0
 8006a9c:	db06      	blt.n	8006aac <_dtoa_r+0xa94>
 8006a9e:	9905      	ldr	r1, [sp, #20]
 8006aa0:	ea41 0909 	orr.w	r9, r1, r9
 8006aa4:	9906      	ldr	r1, [sp, #24]
 8006aa6:	ea59 0101 	orrs.w	r1, r9, r1
 8006aaa:	d120      	bne.n	8006aee <_dtoa_r+0xad6>
 8006aac:	2a00      	cmp	r2, #0
 8006aae:	ddec      	ble.n	8006a8a <_dtoa_r+0xa72>
 8006ab0:	4659      	mov	r1, fp
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	4620      	mov	r0, r4
 8006ab6:	9301      	str	r3, [sp, #4]
 8006ab8:	f000 fac6 	bl	8007048 <__lshift>
 8006abc:	4631      	mov	r1, r6
 8006abe:	4683      	mov	fp, r0
 8006ac0:	f000 fb2e 	bl	8007120 <__mcmp>
 8006ac4:	2800      	cmp	r0, #0
 8006ac6:	9b01      	ldr	r3, [sp, #4]
 8006ac8:	dc02      	bgt.n	8006ad0 <_dtoa_r+0xab8>
 8006aca:	d1de      	bne.n	8006a8a <_dtoa_r+0xa72>
 8006acc:	07da      	lsls	r2, r3, #31
 8006ace:	d5dc      	bpl.n	8006a8a <_dtoa_r+0xa72>
 8006ad0:	2b39      	cmp	r3, #57	; 0x39
 8006ad2:	d1d8      	bne.n	8006a86 <_dtoa_r+0xa6e>
 8006ad4:	9a02      	ldr	r2, [sp, #8]
 8006ad6:	2339      	movs	r3, #57	; 0x39
 8006ad8:	7013      	strb	r3, [r2, #0]
 8006ada:	462b      	mov	r3, r5
 8006adc:	461d      	mov	r5, r3
 8006ade:	3b01      	subs	r3, #1
 8006ae0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006ae4:	2a39      	cmp	r2, #57	; 0x39
 8006ae6:	d050      	beq.n	8006b8a <_dtoa_r+0xb72>
 8006ae8:	3201      	adds	r2, #1
 8006aea:	701a      	strb	r2, [r3, #0]
 8006aec:	e745      	b.n	800697a <_dtoa_r+0x962>
 8006aee:	2a00      	cmp	r2, #0
 8006af0:	dd03      	ble.n	8006afa <_dtoa_r+0xae2>
 8006af2:	2b39      	cmp	r3, #57	; 0x39
 8006af4:	d0ee      	beq.n	8006ad4 <_dtoa_r+0xabc>
 8006af6:	3301      	adds	r3, #1
 8006af8:	e7c7      	b.n	8006a8a <_dtoa_r+0xa72>
 8006afa:	9a01      	ldr	r2, [sp, #4]
 8006afc:	9907      	ldr	r1, [sp, #28]
 8006afe:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006b02:	428a      	cmp	r2, r1
 8006b04:	d02a      	beq.n	8006b5c <_dtoa_r+0xb44>
 8006b06:	4659      	mov	r1, fp
 8006b08:	2300      	movs	r3, #0
 8006b0a:	220a      	movs	r2, #10
 8006b0c:	4620      	mov	r0, r4
 8006b0e:	f000 f8eb 	bl	8006ce8 <__multadd>
 8006b12:	45b8      	cmp	r8, r7
 8006b14:	4683      	mov	fp, r0
 8006b16:	f04f 0300 	mov.w	r3, #0
 8006b1a:	f04f 020a 	mov.w	r2, #10
 8006b1e:	4641      	mov	r1, r8
 8006b20:	4620      	mov	r0, r4
 8006b22:	d107      	bne.n	8006b34 <_dtoa_r+0xb1c>
 8006b24:	f000 f8e0 	bl	8006ce8 <__multadd>
 8006b28:	4680      	mov	r8, r0
 8006b2a:	4607      	mov	r7, r0
 8006b2c:	9b01      	ldr	r3, [sp, #4]
 8006b2e:	3301      	adds	r3, #1
 8006b30:	9301      	str	r3, [sp, #4]
 8006b32:	e775      	b.n	8006a20 <_dtoa_r+0xa08>
 8006b34:	f000 f8d8 	bl	8006ce8 <__multadd>
 8006b38:	4639      	mov	r1, r7
 8006b3a:	4680      	mov	r8, r0
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	220a      	movs	r2, #10
 8006b40:	4620      	mov	r0, r4
 8006b42:	f000 f8d1 	bl	8006ce8 <__multadd>
 8006b46:	4607      	mov	r7, r0
 8006b48:	e7f0      	b.n	8006b2c <_dtoa_r+0xb14>
 8006b4a:	f1b9 0f00 	cmp.w	r9, #0
 8006b4e:	9a00      	ldr	r2, [sp, #0]
 8006b50:	bfcc      	ite	gt
 8006b52:	464d      	movgt	r5, r9
 8006b54:	2501      	movle	r5, #1
 8006b56:	4415      	add	r5, r2
 8006b58:	f04f 0800 	mov.w	r8, #0
 8006b5c:	4659      	mov	r1, fp
 8006b5e:	2201      	movs	r2, #1
 8006b60:	4620      	mov	r0, r4
 8006b62:	9301      	str	r3, [sp, #4]
 8006b64:	f000 fa70 	bl	8007048 <__lshift>
 8006b68:	4631      	mov	r1, r6
 8006b6a:	4683      	mov	fp, r0
 8006b6c:	f000 fad8 	bl	8007120 <__mcmp>
 8006b70:	2800      	cmp	r0, #0
 8006b72:	dcb2      	bgt.n	8006ada <_dtoa_r+0xac2>
 8006b74:	d102      	bne.n	8006b7c <_dtoa_r+0xb64>
 8006b76:	9b01      	ldr	r3, [sp, #4]
 8006b78:	07db      	lsls	r3, r3, #31
 8006b7a:	d4ae      	bmi.n	8006ada <_dtoa_r+0xac2>
 8006b7c:	462b      	mov	r3, r5
 8006b7e:	461d      	mov	r5, r3
 8006b80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b84:	2a30      	cmp	r2, #48	; 0x30
 8006b86:	d0fa      	beq.n	8006b7e <_dtoa_r+0xb66>
 8006b88:	e6f7      	b.n	800697a <_dtoa_r+0x962>
 8006b8a:	9a00      	ldr	r2, [sp, #0]
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	d1a5      	bne.n	8006adc <_dtoa_r+0xac4>
 8006b90:	f10a 0a01 	add.w	sl, sl, #1
 8006b94:	2331      	movs	r3, #49	; 0x31
 8006b96:	e779      	b.n	8006a8c <_dtoa_r+0xa74>
 8006b98:	4b13      	ldr	r3, [pc, #76]	; (8006be8 <_dtoa_r+0xbd0>)
 8006b9a:	f7ff baaf 	b.w	80060fc <_dtoa_r+0xe4>
 8006b9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	f47f aa86 	bne.w	80060b2 <_dtoa_r+0x9a>
 8006ba6:	4b11      	ldr	r3, [pc, #68]	; (8006bec <_dtoa_r+0xbd4>)
 8006ba8:	f7ff baa8 	b.w	80060fc <_dtoa_r+0xe4>
 8006bac:	f1b9 0f00 	cmp.w	r9, #0
 8006bb0:	dc03      	bgt.n	8006bba <_dtoa_r+0xba2>
 8006bb2:	9b05      	ldr	r3, [sp, #20]
 8006bb4:	2b02      	cmp	r3, #2
 8006bb6:	f73f aec9 	bgt.w	800694c <_dtoa_r+0x934>
 8006bba:	9d00      	ldr	r5, [sp, #0]
 8006bbc:	4631      	mov	r1, r6
 8006bbe:	4658      	mov	r0, fp
 8006bc0:	f7ff f99c 	bl	8005efc <quorem>
 8006bc4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006bc8:	f805 3b01 	strb.w	r3, [r5], #1
 8006bcc:	9a00      	ldr	r2, [sp, #0]
 8006bce:	1aaa      	subs	r2, r5, r2
 8006bd0:	4591      	cmp	r9, r2
 8006bd2:	ddba      	ble.n	8006b4a <_dtoa_r+0xb32>
 8006bd4:	4659      	mov	r1, fp
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	220a      	movs	r2, #10
 8006bda:	4620      	mov	r0, r4
 8006bdc:	f000 f884 	bl	8006ce8 <__multadd>
 8006be0:	4683      	mov	fp, r0
 8006be2:	e7eb      	b.n	8006bbc <_dtoa_r+0xba4>
 8006be4:	08009927 	.word	0x08009927
 8006be8:	08009880 	.word	0x08009880
 8006bec:	080098a4 	.word	0x080098a4

08006bf0 <_localeconv_r>:
 8006bf0:	4800      	ldr	r0, [pc, #0]	; (8006bf4 <_localeconv_r+0x4>)
 8006bf2:	4770      	bx	lr
 8006bf4:	20000168 	.word	0x20000168

08006bf8 <malloc>:
 8006bf8:	4b02      	ldr	r3, [pc, #8]	; (8006c04 <malloc+0xc>)
 8006bfa:	4601      	mov	r1, r0
 8006bfc:	6818      	ldr	r0, [r3, #0]
 8006bfe:	f000 bbef 	b.w	80073e0 <_malloc_r>
 8006c02:	bf00      	nop
 8006c04:	20000014 	.word	0x20000014

08006c08 <memcpy>:
 8006c08:	440a      	add	r2, r1
 8006c0a:	4291      	cmp	r1, r2
 8006c0c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006c10:	d100      	bne.n	8006c14 <memcpy+0xc>
 8006c12:	4770      	bx	lr
 8006c14:	b510      	push	{r4, lr}
 8006c16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c1e:	4291      	cmp	r1, r2
 8006c20:	d1f9      	bne.n	8006c16 <memcpy+0xe>
 8006c22:	bd10      	pop	{r4, pc}

08006c24 <_Balloc>:
 8006c24:	b570      	push	{r4, r5, r6, lr}
 8006c26:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006c28:	4604      	mov	r4, r0
 8006c2a:	460d      	mov	r5, r1
 8006c2c:	b976      	cbnz	r6, 8006c4c <_Balloc+0x28>
 8006c2e:	2010      	movs	r0, #16
 8006c30:	f7ff ffe2 	bl	8006bf8 <malloc>
 8006c34:	4602      	mov	r2, r0
 8006c36:	6260      	str	r0, [r4, #36]	; 0x24
 8006c38:	b920      	cbnz	r0, 8006c44 <_Balloc+0x20>
 8006c3a:	4b18      	ldr	r3, [pc, #96]	; (8006c9c <_Balloc+0x78>)
 8006c3c:	4818      	ldr	r0, [pc, #96]	; (8006ca0 <_Balloc+0x7c>)
 8006c3e:	2166      	movs	r1, #102	; 0x66
 8006c40:	f000 fd94 	bl	800776c <__assert_func>
 8006c44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c48:	6006      	str	r6, [r0, #0]
 8006c4a:	60c6      	str	r6, [r0, #12]
 8006c4c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006c4e:	68f3      	ldr	r3, [r6, #12]
 8006c50:	b183      	cbz	r3, 8006c74 <_Balloc+0x50>
 8006c52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c54:	68db      	ldr	r3, [r3, #12]
 8006c56:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006c5a:	b9b8      	cbnz	r0, 8006c8c <_Balloc+0x68>
 8006c5c:	2101      	movs	r1, #1
 8006c5e:	fa01 f605 	lsl.w	r6, r1, r5
 8006c62:	1d72      	adds	r2, r6, #5
 8006c64:	0092      	lsls	r2, r2, #2
 8006c66:	4620      	mov	r0, r4
 8006c68:	f000 fb5a 	bl	8007320 <_calloc_r>
 8006c6c:	b160      	cbz	r0, 8006c88 <_Balloc+0x64>
 8006c6e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006c72:	e00e      	b.n	8006c92 <_Balloc+0x6e>
 8006c74:	2221      	movs	r2, #33	; 0x21
 8006c76:	2104      	movs	r1, #4
 8006c78:	4620      	mov	r0, r4
 8006c7a:	f000 fb51 	bl	8007320 <_calloc_r>
 8006c7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c80:	60f0      	str	r0, [r6, #12]
 8006c82:	68db      	ldr	r3, [r3, #12]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d1e4      	bne.n	8006c52 <_Balloc+0x2e>
 8006c88:	2000      	movs	r0, #0
 8006c8a:	bd70      	pop	{r4, r5, r6, pc}
 8006c8c:	6802      	ldr	r2, [r0, #0]
 8006c8e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006c92:	2300      	movs	r3, #0
 8006c94:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006c98:	e7f7      	b.n	8006c8a <_Balloc+0x66>
 8006c9a:	bf00      	nop
 8006c9c:	080098b1 	.word	0x080098b1
 8006ca0:	08009938 	.word	0x08009938

08006ca4 <_Bfree>:
 8006ca4:	b570      	push	{r4, r5, r6, lr}
 8006ca6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006ca8:	4605      	mov	r5, r0
 8006caa:	460c      	mov	r4, r1
 8006cac:	b976      	cbnz	r6, 8006ccc <_Bfree+0x28>
 8006cae:	2010      	movs	r0, #16
 8006cb0:	f7ff ffa2 	bl	8006bf8 <malloc>
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	6268      	str	r0, [r5, #36]	; 0x24
 8006cb8:	b920      	cbnz	r0, 8006cc4 <_Bfree+0x20>
 8006cba:	4b09      	ldr	r3, [pc, #36]	; (8006ce0 <_Bfree+0x3c>)
 8006cbc:	4809      	ldr	r0, [pc, #36]	; (8006ce4 <_Bfree+0x40>)
 8006cbe:	218a      	movs	r1, #138	; 0x8a
 8006cc0:	f000 fd54 	bl	800776c <__assert_func>
 8006cc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006cc8:	6006      	str	r6, [r0, #0]
 8006cca:	60c6      	str	r6, [r0, #12]
 8006ccc:	b13c      	cbz	r4, 8006cde <_Bfree+0x3a>
 8006cce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006cd0:	6862      	ldr	r2, [r4, #4]
 8006cd2:	68db      	ldr	r3, [r3, #12]
 8006cd4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006cd8:	6021      	str	r1, [r4, #0]
 8006cda:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006cde:	bd70      	pop	{r4, r5, r6, pc}
 8006ce0:	080098b1 	.word	0x080098b1
 8006ce4:	08009938 	.word	0x08009938

08006ce8 <__multadd>:
 8006ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cec:	690e      	ldr	r6, [r1, #16]
 8006cee:	4607      	mov	r7, r0
 8006cf0:	4698      	mov	r8, r3
 8006cf2:	460c      	mov	r4, r1
 8006cf4:	f101 0014 	add.w	r0, r1, #20
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	6805      	ldr	r5, [r0, #0]
 8006cfc:	b2a9      	uxth	r1, r5
 8006cfe:	fb02 8101 	mla	r1, r2, r1, r8
 8006d02:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006d06:	0c2d      	lsrs	r5, r5, #16
 8006d08:	fb02 c505 	mla	r5, r2, r5, ip
 8006d0c:	b289      	uxth	r1, r1
 8006d0e:	3301      	adds	r3, #1
 8006d10:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006d14:	429e      	cmp	r6, r3
 8006d16:	f840 1b04 	str.w	r1, [r0], #4
 8006d1a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006d1e:	dcec      	bgt.n	8006cfa <__multadd+0x12>
 8006d20:	f1b8 0f00 	cmp.w	r8, #0
 8006d24:	d022      	beq.n	8006d6c <__multadd+0x84>
 8006d26:	68a3      	ldr	r3, [r4, #8]
 8006d28:	42b3      	cmp	r3, r6
 8006d2a:	dc19      	bgt.n	8006d60 <__multadd+0x78>
 8006d2c:	6861      	ldr	r1, [r4, #4]
 8006d2e:	4638      	mov	r0, r7
 8006d30:	3101      	adds	r1, #1
 8006d32:	f7ff ff77 	bl	8006c24 <_Balloc>
 8006d36:	4605      	mov	r5, r0
 8006d38:	b928      	cbnz	r0, 8006d46 <__multadd+0x5e>
 8006d3a:	4602      	mov	r2, r0
 8006d3c:	4b0d      	ldr	r3, [pc, #52]	; (8006d74 <__multadd+0x8c>)
 8006d3e:	480e      	ldr	r0, [pc, #56]	; (8006d78 <__multadd+0x90>)
 8006d40:	21b5      	movs	r1, #181	; 0xb5
 8006d42:	f000 fd13 	bl	800776c <__assert_func>
 8006d46:	6922      	ldr	r2, [r4, #16]
 8006d48:	3202      	adds	r2, #2
 8006d4a:	f104 010c 	add.w	r1, r4, #12
 8006d4e:	0092      	lsls	r2, r2, #2
 8006d50:	300c      	adds	r0, #12
 8006d52:	f7ff ff59 	bl	8006c08 <memcpy>
 8006d56:	4621      	mov	r1, r4
 8006d58:	4638      	mov	r0, r7
 8006d5a:	f7ff ffa3 	bl	8006ca4 <_Bfree>
 8006d5e:	462c      	mov	r4, r5
 8006d60:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006d64:	3601      	adds	r6, #1
 8006d66:	f8c3 8014 	str.w	r8, [r3, #20]
 8006d6a:	6126      	str	r6, [r4, #16]
 8006d6c:	4620      	mov	r0, r4
 8006d6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d72:	bf00      	nop
 8006d74:	08009927 	.word	0x08009927
 8006d78:	08009938 	.word	0x08009938

08006d7c <__hi0bits>:
 8006d7c:	0c03      	lsrs	r3, r0, #16
 8006d7e:	041b      	lsls	r3, r3, #16
 8006d80:	b9d3      	cbnz	r3, 8006db8 <__hi0bits+0x3c>
 8006d82:	0400      	lsls	r0, r0, #16
 8006d84:	2310      	movs	r3, #16
 8006d86:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006d8a:	bf04      	itt	eq
 8006d8c:	0200      	lsleq	r0, r0, #8
 8006d8e:	3308      	addeq	r3, #8
 8006d90:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006d94:	bf04      	itt	eq
 8006d96:	0100      	lsleq	r0, r0, #4
 8006d98:	3304      	addeq	r3, #4
 8006d9a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006d9e:	bf04      	itt	eq
 8006da0:	0080      	lsleq	r0, r0, #2
 8006da2:	3302      	addeq	r3, #2
 8006da4:	2800      	cmp	r0, #0
 8006da6:	db05      	blt.n	8006db4 <__hi0bits+0x38>
 8006da8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006dac:	f103 0301 	add.w	r3, r3, #1
 8006db0:	bf08      	it	eq
 8006db2:	2320      	moveq	r3, #32
 8006db4:	4618      	mov	r0, r3
 8006db6:	4770      	bx	lr
 8006db8:	2300      	movs	r3, #0
 8006dba:	e7e4      	b.n	8006d86 <__hi0bits+0xa>

08006dbc <__lo0bits>:
 8006dbc:	6803      	ldr	r3, [r0, #0]
 8006dbe:	f013 0207 	ands.w	r2, r3, #7
 8006dc2:	4601      	mov	r1, r0
 8006dc4:	d00b      	beq.n	8006dde <__lo0bits+0x22>
 8006dc6:	07da      	lsls	r2, r3, #31
 8006dc8:	d424      	bmi.n	8006e14 <__lo0bits+0x58>
 8006dca:	0798      	lsls	r0, r3, #30
 8006dcc:	bf49      	itett	mi
 8006dce:	085b      	lsrmi	r3, r3, #1
 8006dd0:	089b      	lsrpl	r3, r3, #2
 8006dd2:	2001      	movmi	r0, #1
 8006dd4:	600b      	strmi	r3, [r1, #0]
 8006dd6:	bf5c      	itt	pl
 8006dd8:	600b      	strpl	r3, [r1, #0]
 8006dda:	2002      	movpl	r0, #2
 8006ddc:	4770      	bx	lr
 8006dde:	b298      	uxth	r0, r3
 8006de0:	b9b0      	cbnz	r0, 8006e10 <__lo0bits+0x54>
 8006de2:	0c1b      	lsrs	r3, r3, #16
 8006de4:	2010      	movs	r0, #16
 8006de6:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006dea:	bf04      	itt	eq
 8006dec:	0a1b      	lsreq	r3, r3, #8
 8006dee:	3008      	addeq	r0, #8
 8006df0:	071a      	lsls	r2, r3, #28
 8006df2:	bf04      	itt	eq
 8006df4:	091b      	lsreq	r3, r3, #4
 8006df6:	3004      	addeq	r0, #4
 8006df8:	079a      	lsls	r2, r3, #30
 8006dfa:	bf04      	itt	eq
 8006dfc:	089b      	lsreq	r3, r3, #2
 8006dfe:	3002      	addeq	r0, #2
 8006e00:	07da      	lsls	r2, r3, #31
 8006e02:	d403      	bmi.n	8006e0c <__lo0bits+0x50>
 8006e04:	085b      	lsrs	r3, r3, #1
 8006e06:	f100 0001 	add.w	r0, r0, #1
 8006e0a:	d005      	beq.n	8006e18 <__lo0bits+0x5c>
 8006e0c:	600b      	str	r3, [r1, #0]
 8006e0e:	4770      	bx	lr
 8006e10:	4610      	mov	r0, r2
 8006e12:	e7e8      	b.n	8006de6 <__lo0bits+0x2a>
 8006e14:	2000      	movs	r0, #0
 8006e16:	4770      	bx	lr
 8006e18:	2020      	movs	r0, #32
 8006e1a:	4770      	bx	lr

08006e1c <__i2b>:
 8006e1c:	b510      	push	{r4, lr}
 8006e1e:	460c      	mov	r4, r1
 8006e20:	2101      	movs	r1, #1
 8006e22:	f7ff feff 	bl	8006c24 <_Balloc>
 8006e26:	4602      	mov	r2, r0
 8006e28:	b928      	cbnz	r0, 8006e36 <__i2b+0x1a>
 8006e2a:	4b05      	ldr	r3, [pc, #20]	; (8006e40 <__i2b+0x24>)
 8006e2c:	4805      	ldr	r0, [pc, #20]	; (8006e44 <__i2b+0x28>)
 8006e2e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006e32:	f000 fc9b 	bl	800776c <__assert_func>
 8006e36:	2301      	movs	r3, #1
 8006e38:	6144      	str	r4, [r0, #20]
 8006e3a:	6103      	str	r3, [r0, #16]
 8006e3c:	bd10      	pop	{r4, pc}
 8006e3e:	bf00      	nop
 8006e40:	08009927 	.word	0x08009927
 8006e44:	08009938 	.word	0x08009938

08006e48 <__multiply>:
 8006e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e4c:	4614      	mov	r4, r2
 8006e4e:	690a      	ldr	r2, [r1, #16]
 8006e50:	6923      	ldr	r3, [r4, #16]
 8006e52:	429a      	cmp	r2, r3
 8006e54:	bfb8      	it	lt
 8006e56:	460b      	movlt	r3, r1
 8006e58:	460d      	mov	r5, r1
 8006e5a:	bfbc      	itt	lt
 8006e5c:	4625      	movlt	r5, r4
 8006e5e:	461c      	movlt	r4, r3
 8006e60:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006e64:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006e68:	68ab      	ldr	r3, [r5, #8]
 8006e6a:	6869      	ldr	r1, [r5, #4]
 8006e6c:	eb0a 0709 	add.w	r7, sl, r9
 8006e70:	42bb      	cmp	r3, r7
 8006e72:	b085      	sub	sp, #20
 8006e74:	bfb8      	it	lt
 8006e76:	3101      	addlt	r1, #1
 8006e78:	f7ff fed4 	bl	8006c24 <_Balloc>
 8006e7c:	b930      	cbnz	r0, 8006e8c <__multiply+0x44>
 8006e7e:	4602      	mov	r2, r0
 8006e80:	4b42      	ldr	r3, [pc, #264]	; (8006f8c <__multiply+0x144>)
 8006e82:	4843      	ldr	r0, [pc, #268]	; (8006f90 <__multiply+0x148>)
 8006e84:	f240 115d 	movw	r1, #349	; 0x15d
 8006e88:	f000 fc70 	bl	800776c <__assert_func>
 8006e8c:	f100 0614 	add.w	r6, r0, #20
 8006e90:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006e94:	4633      	mov	r3, r6
 8006e96:	2200      	movs	r2, #0
 8006e98:	4543      	cmp	r3, r8
 8006e9a:	d31e      	bcc.n	8006eda <__multiply+0x92>
 8006e9c:	f105 0c14 	add.w	ip, r5, #20
 8006ea0:	f104 0314 	add.w	r3, r4, #20
 8006ea4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006ea8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8006eac:	9202      	str	r2, [sp, #8]
 8006eae:	ebac 0205 	sub.w	r2, ip, r5
 8006eb2:	3a15      	subs	r2, #21
 8006eb4:	f022 0203 	bic.w	r2, r2, #3
 8006eb8:	3204      	adds	r2, #4
 8006eba:	f105 0115 	add.w	r1, r5, #21
 8006ebe:	458c      	cmp	ip, r1
 8006ec0:	bf38      	it	cc
 8006ec2:	2204      	movcc	r2, #4
 8006ec4:	9201      	str	r2, [sp, #4]
 8006ec6:	9a02      	ldr	r2, [sp, #8]
 8006ec8:	9303      	str	r3, [sp, #12]
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	d808      	bhi.n	8006ee0 <__multiply+0x98>
 8006ece:	2f00      	cmp	r7, #0
 8006ed0:	dc55      	bgt.n	8006f7e <__multiply+0x136>
 8006ed2:	6107      	str	r7, [r0, #16]
 8006ed4:	b005      	add	sp, #20
 8006ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eda:	f843 2b04 	str.w	r2, [r3], #4
 8006ede:	e7db      	b.n	8006e98 <__multiply+0x50>
 8006ee0:	f8b3 a000 	ldrh.w	sl, [r3]
 8006ee4:	f1ba 0f00 	cmp.w	sl, #0
 8006ee8:	d020      	beq.n	8006f2c <__multiply+0xe4>
 8006eea:	f105 0e14 	add.w	lr, r5, #20
 8006eee:	46b1      	mov	r9, r6
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006ef6:	f8d9 b000 	ldr.w	fp, [r9]
 8006efa:	b2a1      	uxth	r1, r4
 8006efc:	fa1f fb8b 	uxth.w	fp, fp
 8006f00:	fb0a b101 	mla	r1, sl, r1, fp
 8006f04:	4411      	add	r1, r2
 8006f06:	f8d9 2000 	ldr.w	r2, [r9]
 8006f0a:	0c24      	lsrs	r4, r4, #16
 8006f0c:	0c12      	lsrs	r2, r2, #16
 8006f0e:	fb0a 2404 	mla	r4, sl, r4, r2
 8006f12:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006f16:	b289      	uxth	r1, r1
 8006f18:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006f1c:	45f4      	cmp	ip, lr
 8006f1e:	f849 1b04 	str.w	r1, [r9], #4
 8006f22:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8006f26:	d8e4      	bhi.n	8006ef2 <__multiply+0xaa>
 8006f28:	9901      	ldr	r1, [sp, #4]
 8006f2a:	5072      	str	r2, [r6, r1]
 8006f2c:	9a03      	ldr	r2, [sp, #12]
 8006f2e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006f32:	3304      	adds	r3, #4
 8006f34:	f1b9 0f00 	cmp.w	r9, #0
 8006f38:	d01f      	beq.n	8006f7a <__multiply+0x132>
 8006f3a:	6834      	ldr	r4, [r6, #0]
 8006f3c:	f105 0114 	add.w	r1, r5, #20
 8006f40:	46b6      	mov	lr, r6
 8006f42:	f04f 0a00 	mov.w	sl, #0
 8006f46:	880a      	ldrh	r2, [r1, #0]
 8006f48:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006f4c:	fb09 b202 	mla	r2, r9, r2, fp
 8006f50:	4492      	add	sl, r2
 8006f52:	b2a4      	uxth	r4, r4
 8006f54:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006f58:	f84e 4b04 	str.w	r4, [lr], #4
 8006f5c:	f851 4b04 	ldr.w	r4, [r1], #4
 8006f60:	f8be 2000 	ldrh.w	r2, [lr]
 8006f64:	0c24      	lsrs	r4, r4, #16
 8006f66:	fb09 2404 	mla	r4, r9, r4, r2
 8006f6a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8006f6e:	458c      	cmp	ip, r1
 8006f70:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006f74:	d8e7      	bhi.n	8006f46 <__multiply+0xfe>
 8006f76:	9a01      	ldr	r2, [sp, #4]
 8006f78:	50b4      	str	r4, [r6, r2]
 8006f7a:	3604      	adds	r6, #4
 8006f7c:	e7a3      	b.n	8006ec6 <__multiply+0x7e>
 8006f7e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d1a5      	bne.n	8006ed2 <__multiply+0x8a>
 8006f86:	3f01      	subs	r7, #1
 8006f88:	e7a1      	b.n	8006ece <__multiply+0x86>
 8006f8a:	bf00      	nop
 8006f8c:	08009927 	.word	0x08009927
 8006f90:	08009938 	.word	0x08009938

08006f94 <__pow5mult>:
 8006f94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f98:	4615      	mov	r5, r2
 8006f9a:	f012 0203 	ands.w	r2, r2, #3
 8006f9e:	4606      	mov	r6, r0
 8006fa0:	460f      	mov	r7, r1
 8006fa2:	d007      	beq.n	8006fb4 <__pow5mult+0x20>
 8006fa4:	4c25      	ldr	r4, [pc, #148]	; (800703c <__pow5mult+0xa8>)
 8006fa6:	3a01      	subs	r2, #1
 8006fa8:	2300      	movs	r3, #0
 8006faa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006fae:	f7ff fe9b 	bl	8006ce8 <__multadd>
 8006fb2:	4607      	mov	r7, r0
 8006fb4:	10ad      	asrs	r5, r5, #2
 8006fb6:	d03d      	beq.n	8007034 <__pow5mult+0xa0>
 8006fb8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006fba:	b97c      	cbnz	r4, 8006fdc <__pow5mult+0x48>
 8006fbc:	2010      	movs	r0, #16
 8006fbe:	f7ff fe1b 	bl	8006bf8 <malloc>
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	6270      	str	r0, [r6, #36]	; 0x24
 8006fc6:	b928      	cbnz	r0, 8006fd4 <__pow5mult+0x40>
 8006fc8:	4b1d      	ldr	r3, [pc, #116]	; (8007040 <__pow5mult+0xac>)
 8006fca:	481e      	ldr	r0, [pc, #120]	; (8007044 <__pow5mult+0xb0>)
 8006fcc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006fd0:	f000 fbcc 	bl	800776c <__assert_func>
 8006fd4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006fd8:	6004      	str	r4, [r0, #0]
 8006fda:	60c4      	str	r4, [r0, #12]
 8006fdc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006fe0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006fe4:	b94c      	cbnz	r4, 8006ffa <__pow5mult+0x66>
 8006fe6:	f240 2171 	movw	r1, #625	; 0x271
 8006fea:	4630      	mov	r0, r6
 8006fec:	f7ff ff16 	bl	8006e1c <__i2b>
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	f8c8 0008 	str.w	r0, [r8, #8]
 8006ff6:	4604      	mov	r4, r0
 8006ff8:	6003      	str	r3, [r0, #0]
 8006ffa:	f04f 0900 	mov.w	r9, #0
 8006ffe:	07eb      	lsls	r3, r5, #31
 8007000:	d50a      	bpl.n	8007018 <__pow5mult+0x84>
 8007002:	4639      	mov	r1, r7
 8007004:	4622      	mov	r2, r4
 8007006:	4630      	mov	r0, r6
 8007008:	f7ff ff1e 	bl	8006e48 <__multiply>
 800700c:	4639      	mov	r1, r7
 800700e:	4680      	mov	r8, r0
 8007010:	4630      	mov	r0, r6
 8007012:	f7ff fe47 	bl	8006ca4 <_Bfree>
 8007016:	4647      	mov	r7, r8
 8007018:	106d      	asrs	r5, r5, #1
 800701a:	d00b      	beq.n	8007034 <__pow5mult+0xa0>
 800701c:	6820      	ldr	r0, [r4, #0]
 800701e:	b938      	cbnz	r0, 8007030 <__pow5mult+0x9c>
 8007020:	4622      	mov	r2, r4
 8007022:	4621      	mov	r1, r4
 8007024:	4630      	mov	r0, r6
 8007026:	f7ff ff0f 	bl	8006e48 <__multiply>
 800702a:	6020      	str	r0, [r4, #0]
 800702c:	f8c0 9000 	str.w	r9, [r0]
 8007030:	4604      	mov	r4, r0
 8007032:	e7e4      	b.n	8006ffe <__pow5mult+0x6a>
 8007034:	4638      	mov	r0, r7
 8007036:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800703a:	bf00      	nop
 800703c:	08009a88 	.word	0x08009a88
 8007040:	080098b1 	.word	0x080098b1
 8007044:	08009938 	.word	0x08009938

08007048 <__lshift>:
 8007048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800704c:	460c      	mov	r4, r1
 800704e:	6849      	ldr	r1, [r1, #4]
 8007050:	6923      	ldr	r3, [r4, #16]
 8007052:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007056:	68a3      	ldr	r3, [r4, #8]
 8007058:	4607      	mov	r7, r0
 800705a:	4691      	mov	r9, r2
 800705c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007060:	f108 0601 	add.w	r6, r8, #1
 8007064:	42b3      	cmp	r3, r6
 8007066:	db0b      	blt.n	8007080 <__lshift+0x38>
 8007068:	4638      	mov	r0, r7
 800706a:	f7ff fddb 	bl	8006c24 <_Balloc>
 800706e:	4605      	mov	r5, r0
 8007070:	b948      	cbnz	r0, 8007086 <__lshift+0x3e>
 8007072:	4602      	mov	r2, r0
 8007074:	4b28      	ldr	r3, [pc, #160]	; (8007118 <__lshift+0xd0>)
 8007076:	4829      	ldr	r0, [pc, #164]	; (800711c <__lshift+0xd4>)
 8007078:	f240 11d9 	movw	r1, #473	; 0x1d9
 800707c:	f000 fb76 	bl	800776c <__assert_func>
 8007080:	3101      	adds	r1, #1
 8007082:	005b      	lsls	r3, r3, #1
 8007084:	e7ee      	b.n	8007064 <__lshift+0x1c>
 8007086:	2300      	movs	r3, #0
 8007088:	f100 0114 	add.w	r1, r0, #20
 800708c:	f100 0210 	add.w	r2, r0, #16
 8007090:	4618      	mov	r0, r3
 8007092:	4553      	cmp	r3, sl
 8007094:	db33      	blt.n	80070fe <__lshift+0xb6>
 8007096:	6920      	ldr	r0, [r4, #16]
 8007098:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800709c:	f104 0314 	add.w	r3, r4, #20
 80070a0:	f019 091f 	ands.w	r9, r9, #31
 80070a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80070a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80070ac:	d02b      	beq.n	8007106 <__lshift+0xbe>
 80070ae:	f1c9 0e20 	rsb	lr, r9, #32
 80070b2:	468a      	mov	sl, r1
 80070b4:	2200      	movs	r2, #0
 80070b6:	6818      	ldr	r0, [r3, #0]
 80070b8:	fa00 f009 	lsl.w	r0, r0, r9
 80070bc:	4302      	orrs	r2, r0
 80070be:	f84a 2b04 	str.w	r2, [sl], #4
 80070c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80070c6:	459c      	cmp	ip, r3
 80070c8:	fa22 f20e 	lsr.w	r2, r2, lr
 80070cc:	d8f3      	bhi.n	80070b6 <__lshift+0x6e>
 80070ce:	ebac 0304 	sub.w	r3, ip, r4
 80070d2:	3b15      	subs	r3, #21
 80070d4:	f023 0303 	bic.w	r3, r3, #3
 80070d8:	3304      	adds	r3, #4
 80070da:	f104 0015 	add.w	r0, r4, #21
 80070de:	4584      	cmp	ip, r0
 80070e0:	bf38      	it	cc
 80070e2:	2304      	movcc	r3, #4
 80070e4:	50ca      	str	r2, [r1, r3]
 80070e6:	b10a      	cbz	r2, 80070ec <__lshift+0xa4>
 80070e8:	f108 0602 	add.w	r6, r8, #2
 80070ec:	3e01      	subs	r6, #1
 80070ee:	4638      	mov	r0, r7
 80070f0:	612e      	str	r6, [r5, #16]
 80070f2:	4621      	mov	r1, r4
 80070f4:	f7ff fdd6 	bl	8006ca4 <_Bfree>
 80070f8:	4628      	mov	r0, r5
 80070fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070fe:	f842 0f04 	str.w	r0, [r2, #4]!
 8007102:	3301      	adds	r3, #1
 8007104:	e7c5      	b.n	8007092 <__lshift+0x4a>
 8007106:	3904      	subs	r1, #4
 8007108:	f853 2b04 	ldr.w	r2, [r3], #4
 800710c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007110:	459c      	cmp	ip, r3
 8007112:	d8f9      	bhi.n	8007108 <__lshift+0xc0>
 8007114:	e7ea      	b.n	80070ec <__lshift+0xa4>
 8007116:	bf00      	nop
 8007118:	08009927 	.word	0x08009927
 800711c:	08009938 	.word	0x08009938

08007120 <__mcmp>:
 8007120:	b530      	push	{r4, r5, lr}
 8007122:	6902      	ldr	r2, [r0, #16]
 8007124:	690c      	ldr	r4, [r1, #16]
 8007126:	1b12      	subs	r2, r2, r4
 8007128:	d10e      	bne.n	8007148 <__mcmp+0x28>
 800712a:	f100 0314 	add.w	r3, r0, #20
 800712e:	3114      	adds	r1, #20
 8007130:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007134:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007138:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800713c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007140:	42a5      	cmp	r5, r4
 8007142:	d003      	beq.n	800714c <__mcmp+0x2c>
 8007144:	d305      	bcc.n	8007152 <__mcmp+0x32>
 8007146:	2201      	movs	r2, #1
 8007148:	4610      	mov	r0, r2
 800714a:	bd30      	pop	{r4, r5, pc}
 800714c:	4283      	cmp	r3, r0
 800714e:	d3f3      	bcc.n	8007138 <__mcmp+0x18>
 8007150:	e7fa      	b.n	8007148 <__mcmp+0x28>
 8007152:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007156:	e7f7      	b.n	8007148 <__mcmp+0x28>

08007158 <__mdiff>:
 8007158:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800715c:	460c      	mov	r4, r1
 800715e:	4606      	mov	r6, r0
 8007160:	4611      	mov	r1, r2
 8007162:	4620      	mov	r0, r4
 8007164:	4617      	mov	r7, r2
 8007166:	f7ff ffdb 	bl	8007120 <__mcmp>
 800716a:	1e05      	subs	r5, r0, #0
 800716c:	d110      	bne.n	8007190 <__mdiff+0x38>
 800716e:	4629      	mov	r1, r5
 8007170:	4630      	mov	r0, r6
 8007172:	f7ff fd57 	bl	8006c24 <_Balloc>
 8007176:	b930      	cbnz	r0, 8007186 <__mdiff+0x2e>
 8007178:	4b39      	ldr	r3, [pc, #228]	; (8007260 <__mdiff+0x108>)
 800717a:	4602      	mov	r2, r0
 800717c:	f240 2132 	movw	r1, #562	; 0x232
 8007180:	4838      	ldr	r0, [pc, #224]	; (8007264 <__mdiff+0x10c>)
 8007182:	f000 faf3 	bl	800776c <__assert_func>
 8007186:	2301      	movs	r3, #1
 8007188:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800718c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007190:	bfa4      	itt	ge
 8007192:	463b      	movge	r3, r7
 8007194:	4627      	movge	r7, r4
 8007196:	4630      	mov	r0, r6
 8007198:	6879      	ldr	r1, [r7, #4]
 800719a:	bfa6      	itte	ge
 800719c:	461c      	movge	r4, r3
 800719e:	2500      	movge	r5, #0
 80071a0:	2501      	movlt	r5, #1
 80071a2:	f7ff fd3f 	bl	8006c24 <_Balloc>
 80071a6:	b920      	cbnz	r0, 80071b2 <__mdiff+0x5a>
 80071a8:	4b2d      	ldr	r3, [pc, #180]	; (8007260 <__mdiff+0x108>)
 80071aa:	4602      	mov	r2, r0
 80071ac:	f44f 7110 	mov.w	r1, #576	; 0x240
 80071b0:	e7e6      	b.n	8007180 <__mdiff+0x28>
 80071b2:	693e      	ldr	r6, [r7, #16]
 80071b4:	60c5      	str	r5, [r0, #12]
 80071b6:	6925      	ldr	r5, [r4, #16]
 80071b8:	f107 0114 	add.w	r1, r7, #20
 80071bc:	f104 0914 	add.w	r9, r4, #20
 80071c0:	f100 0e14 	add.w	lr, r0, #20
 80071c4:	f107 0210 	add.w	r2, r7, #16
 80071c8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80071cc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80071d0:	46f2      	mov	sl, lr
 80071d2:	2700      	movs	r7, #0
 80071d4:	f859 3b04 	ldr.w	r3, [r9], #4
 80071d8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80071dc:	fa1f f883 	uxth.w	r8, r3
 80071e0:	fa17 f78b 	uxtah	r7, r7, fp
 80071e4:	0c1b      	lsrs	r3, r3, #16
 80071e6:	eba7 0808 	sub.w	r8, r7, r8
 80071ea:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80071ee:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80071f2:	fa1f f888 	uxth.w	r8, r8
 80071f6:	141f      	asrs	r7, r3, #16
 80071f8:	454d      	cmp	r5, r9
 80071fa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80071fe:	f84a 3b04 	str.w	r3, [sl], #4
 8007202:	d8e7      	bhi.n	80071d4 <__mdiff+0x7c>
 8007204:	1b2b      	subs	r3, r5, r4
 8007206:	3b15      	subs	r3, #21
 8007208:	f023 0303 	bic.w	r3, r3, #3
 800720c:	3304      	adds	r3, #4
 800720e:	3415      	adds	r4, #21
 8007210:	42a5      	cmp	r5, r4
 8007212:	bf38      	it	cc
 8007214:	2304      	movcc	r3, #4
 8007216:	4419      	add	r1, r3
 8007218:	4473      	add	r3, lr
 800721a:	469e      	mov	lr, r3
 800721c:	460d      	mov	r5, r1
 800721e:	4565      	cmp	r5, ip
 8007220:	d30e      	bcc.n	8007240 <__mdiff+0xe8>
 8007222:	f10c 0203 	add.w	r2, ip, #3
 8007226:	1a52      	subs	r2, r2, r1
 8007228:	f022 0203 	bic.w	r2, r2, #3
 800722c:	3903      	subs	r1, #3
 800722e:	458c      	cmp	ip, r1
 8007230:	bf38      	it	cc
 8007232:	2200      	movcc	r2, #0
 8007234:	441a      	add	r2, r3
 8007236:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800723a:	b17b      	cbz	r3, 800725c <__mdiff+0x104>
 800723c:	6106      	str	r6, [r0, #16]
 800723e:	e7a5      	b.n	800718c <__mdiff+0x34>
 8007240:	f855 8b04 	ldr.w	r8, [r5], #4
 8007244:	fa17 f488 	uxtah	r4, r7, r8
 8007248:	1422      	asrs	r2, r4, #16
 800724a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800724e:	b2a4      	uxth	r4, r4
 8007250:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007254:	f84e 4b04 	str.w	r4, [lr], #4
 8007258:	1417      	asrs	r7, r2, #16
 800725a:	e7e0      	b.n	800721e <__mdiff+0xc6>
 800725c:	3e01      	subs	r6, #1
 800725e:	e7ea      	b.n	8007236 <__mdiff+0xde>
 8007260:	08009927 	.word	0x08009927
 8007264:	08009938 	.word	0x08009938

08007268 <__d2b>:
 8007268:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800726c:	4689      	mov	r9, r1
 800726e:	2101      	movs	r1, #1
 8007270:	ec57 6b10 	vmov	r6, r7, d0
 8007274:	4690      	mov	r8, r2
 8007276:	f7ff fcd5 	bl	8006c24 <_Balloc>
 800727a:	4604      	mov	r4, r0
 800727c:	b930      	cbnz	r0, 800728c <__d2b+0x24>
 800727e:	4602      	mov	r2, r0
 8007280:	4b25      	ldr	r3, [pc, #148]	; (8007318 <__d2b+0xb0>)
 8007282:	4826      	ldr	r0, [pc, #152]	; (800731c <__d2b+0xb4>)
 8007284:	f240 310a 	movw	r1, #778	; 0x30a
 8007288:	f000 fa70 	bl	800776c <__assert_func>
 800728c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007290:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007294:	bb35      	cbnz	r5, 80072e4 <__d2b+0x7c>
 8007296:	2e00      	cmp	r6, #0
 8007298:	9301      	str	r3, [sp, #4]
 800729a:	d028      	beq.n	80072ee <__d2b+0x86>
 800729c:	4668      	mov	r0, sp
 800729e:	9600      	str	r6, [sp, #0]
 80072a0:	f7ff fd8c 	bl	8006dbc <__lo0bits>
 80072a4:	9900      	ldr	r1, [sp, #0]
 80072a6:	b300      	cbz	r0, 80072ea <__d2b+0x82>
 80072a8:	9a01      	ldr	r2, [sp, #4]
 80072aa:	f1c0 0320 	rsb	r3, r0, #32
 80072ae:	fa02 f303 	lsl.w	r3, r2, r3
 80072b2:	430b      	orrs	r3, r1
 80072b4:	40c2      	lsrs	r2, r0
 80072b6:	6163      	str	r3, [r4, #20]
 80072b8:	9201      	str	r2, [sp, #4]
 80072ba:	9b01      	ldr	r3, [sp, #4]
 80072bc:	61a3      	str	r3, [r4, #24]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	bf14      	ite	ne
 80072c2:	2202      	movne	r2, #2
 80072c4:	2201      	moveq	r2, #1
 80072c6:	6122      	str	r2, [r4, #16]
 80072c8:	b1d5      	cbz	r5, 8007300 <__d2b+0x98>
 80072ca:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80072ce:	4405      	add	r5, r0
 80072d0:	f8c9 5000 	str.w	r5, [r9]
 80072d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80072d8:	f8c8 0000 	str.w	r0, [r8]
 80072dc:	4620      	mov	r0, r4
 80072de:	b003      	add	sp, #12
 80072e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80072e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80072e8:	e7d5      	b.n	8007296 <__d2b+0x2e>
 80072ea:	6161      	str	r1, [r4, #20]
 80072ec:	e7e5      	b.n	80072ba <__d2b+0x52>
 80072ee:	a801      	add	r0, sp, #4
 80072f0:	f7ff fd64 	bl	8006dbc <__lo0bits>
 80072f4:	9b01      	ldr	r3, [sp, #4]
 80072f6:	6163      	str	r3, [r4, #20]
 80072f8:	2201      	movs	r2, #1
 80072fa:	6122      	str	r2, [r4, #16]
 80072fc:	3020      	adds	r0, #32
 80072fe:	e7e3      	b.n	80072c8 <__d2b+0x60>
 8007300:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007304:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007308:	f8c9 0000 	str.w	r0, [r9]
 800730c:	6918      	ldr	r0, [r3, #16]
 800730e:	f7ff fd35 	bl	8006d7c <__hi0bits>
 8007312:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007316:	e7df      	b.n	80072d8 <__d2b+0x70>
 8007318:	08009927 	.word	0x08009927
 800731c:	08009938 	.word	0x08009938

08007320 <_calloc_r>:
 8007320:	b513      	push	{r0, r1, r4, lr}
 8007322:	434a      	muls	r2, r1
 8007324:	4611      	mov	r1, r2
 8007326:	9201      	str	r2, [sp, #4]
 8007328:	f000 f85a 	bl	80073e0 <_malloc_r>
 800732c:	4604      	mov	r4, r0
 800732e:	b118      	cbz	r0, 8007338 <_calloc_r+0x18>
 8007330:	9a01      	ldr	r2, [sp, #4]
 8007332:	2100      	movs	r1, #0
 8007334:	f7fe f950 	bl	80055d8 <memset>
 8007338:	4620      	mov	r0, r4
 800733a:	b002      	add	sp, #8
 800733c:	bd10      	pop	{r4, pc}
	...

08007340 <_free_r>:
 8007340:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007342:	2900      	cmp	r1, #0
 8007344:	d048      	beq.n	80073d8 <_free_r+0x98>
 8007346:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800734a:	9001      	str	r0, [sp, #4]
 800734c:	2b00      	cmp	r3, #0
 800734e:	f1a1 0404 	sub.w	r4, r1, #4
 8007352:	bfb8      	it	lt
 8007354:	18e4      	addlt	r4, r4, r3
 8007356:	f000 fa65 	bl	8007824 <__malloc_lock>
 800735a:	4a20      	ldr	r2, [pc, #128]	; (80073dc <_free_r+0x9c>)
 800735c:	9801      	ldr	r0, [sp, #4]
 800735e:	6813      	ldr	r3, [r2, #0]
 8007360:	4615      	mov	r5, r2
 8007362:	b933      	cbnz	r3, 8007372 <_free_r+0x32>
 8007364:	6063      	str	r3, [r4, #4]
 8007366:	6014      	str	r4, [r2, #0]
 8007368:	b003      	add	sp, #12
 800736a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800736e:	f000 ba5f 	b.w	8007830 <__malloc_unlock>
 8007372:	42a3      	cmp	r3, r4
 8007374:	d90b      	bls.n	800738e <_free_r+0x4e>
 8007376:	6821      	ldr	r1, [r4, #0]
 8007378:	1862      	adds	r2, r4, r1
 800737a:	4293      	cmp	r3, r2
 800737c:	bf04      	itt	eq
 800737e:	681a      	ldreq	r2, [r3, #0]
 8007380:	685b      	ldreq	r3, [r3, #4]
 8007382:	6063      	str	r3, [r4, #4]
 8007384:	bf04      	itt	eq
 8007386:	1852      	addeq	r2, r2, r1
 8007388:	6022      	streq	r2, [r4, #0]
 800738a:	602c      	str	r4, [r5, #0]
 800738c:	e7ec      	b.n	8007368 <_free_r+0x28>
 800738e:	461a      	mov	r2, r3
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	b10b      	cbz	r3, 8007398 <_free_r+0x58>
 8007394:	42a3      	cmp	r3, r4
 8007396:	d9fa      	bls.n	800738e <_free_r+0x4e>
 8007398:	6811      	ldr	r1, [r2, #0]
 800739a:	1855      	adds	r5, r2, r1
 800739c:	42a5      	cmp	r5, r4
 800739e:	d10b      	bne.n	80073b8 <_free_r+0x78>
 80073a0:	6824      	ldr	r4, [r4, #0]
 80073a2:	4421      	add	r1, r4
 80073a4:	1854      	adds	r4, r2, r1
 80073a6:	42a3      	cmp	r3, r4
 80073a8:	6011      	str	r1, [r2, #0]
 80073aa:	d1dd      	bne.n	8007368 <_free_r+0x28>
 80073ac:	681c      	ldr	r4, [r3, #0]
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	6053      	str	r3, [r2, #4]
 80073b2:	4421      	add	r1, r4
 80073b4:	6011      	str	r1, [r2, #0]
 80073b6:	e7d7      	b.n	8007368 <_free_r+0x28>
 80073b8:	d902      	bls.n	80073c0 <_free_r+0x80>
 80073ba:	230c      	movs	r3, #12
 80073bc:	6003      	str	r3, [r0, #0]
 80073be:	e7d3      	b.n	8007368 <_free_r+0x28>
 80073c0:	6825      	ldr	r5, [r4, #0]
 80073c2:	1961      	adds	r1, r4, r5
 80073c4:	428b      	cmp	r3, r1
 80073c6:	bf04      	itt	eq
 80073c8:	6819      	ldreq	r1, [r3, #0]
 80073ca:	685b      	ldreq	r3, [r3, #4]
 80073cc:	6063      	str	r3, [r4, #4]
 80073ce:	bf04      	itt	eq
 80073d0:	1949      	addeq	r1, r1, r5
 80073d2:	6021      	streq	r1, [r4, #0]
 80073d4:	6054      	str	r4, [r2, #4]
 80073d6:	e7c7      	b.n	8007368 <_free_r+0x28>
 80073d8:	b003      	add	sp, #12
 80073da:	bd30      	pop	{r4, r5, pc}
 80073dc:	20000228 	.word	0x20000228

080073e0 <_malloc_r>:
 80073e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073e2:	1ccd      	adds	r5, r1, #3
 80073e4:	f025 0503 	bic.w	r5, r5, #3
 80073e8:	3508      	adds	r5, #8
 80073ea:	2d0c      	cmp	r5, #12
 80073ec:	bf38      	it	cc
 80073ee:	250c      	movcc	r5, #12
 80073f0:	2d00      	cmp	r5, #0
 80073f2:	4606      	mov	r6, r0
 80073f4:	db01      	blt.n	80073fa <_malloc_r+0x1a>
 80073f6:	42a9      	cmp	r1, r5
 80073f8:	d903      	bls.n	8007402 <_malloc_r+0x22>
 80073fa:	230c      	movs	r3, #12
 80073fc:	6033      	str	r3, [r6, #0]
 80073fe:	2000      	movs	r0, #0
 8007400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007402:	f000 fa0f 	bl	8007824 <__malloc_lock>
 8007406:	4921      	ldr	r1, [pc, #132]	; (800748c <_malloc_r+0xac>)
 8007408:	680a      	ldr	r2, [r1, #0]
 800740a:	4614      	mov	r4, r2
 800740c:	b99c      	cbnz	r4, 8007436 <_malloc_r+0x56>
 800740e:	4f20      	ldr	r7, [pc, #128]	; (8007490 <_malloc_r+0xb0>)
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	b923      	cbnz	r3, 800741e <_malloc_r+0x3e>
 8007414:	4621      	mov	r1, r4
 8007416:	4630      	mov	r0, r6
 8007418:	f000 f998 	bl	800774c <_sbrk_r>
 800741c:	6038      	str	r0, [r7, #0]
 800741e:	4629      	mov	r1, r5
 8007420:	4630      	mov	r0, r6
 8007422:	f000 f993 	bl	800774c <_sbrk_r>
 8007426:	1c43      	adds	r3, r0, #1
 8007428:	d123      	bne.n	8007472 <_malloc_r+0x92>
 800742a:	230c      	movs	r3, #12
 800742c:	6033      	str	r3, [r6, #0]
 800742e:	4630      	mov	r0, r6
 8007430:	f000 f9fe 	bl	8007830 <__malloc_unlock>
 8007434:	e7e3      	b.n	80073fe <_malloc_r+0x1e>
 8007436:	6823      	ldr	r3, [r4, #0]
 8007438:	1b5b      	subs	r3, r3, r5
 800743a:	d417      	bmi.n	800746c <_malloc_r+0x8c>
 800743c:	2b0b      	cmp	r3, #11
 800743e:	d903      	bls.n	8007448 <_malloc_r+0x68>
 8007440:	6023      	str	r3, [r4, #0]
 8007442:	441c      	add	r4, r3
 8007444:	6025      	str	r5, [r4, #0]
 8007446:	e004      	b.n	8007452 <_malloc_r+0x72>
 8007448:	6863      	ldr	r3, [r4, #4]
 800744a:	42a2      	cmp	r2, r4
 800744c:	bf0c      	ite	eq
 800744e:	600b      	streq	r3, [r1, #0]
 8007450:	6053      	strne	r3, [r2, #4]
 8007452:	4630      	mov	r0, r6
 8007454:	f000 f9ec 	bl	8007830 <__malloc_unlock>
 8007458:	f104 000b 	add.w	r0, r4, #11
 800745c:	1d23      	adds	r3, r4, #4
 800745e:	f020 0007 	bic.w	r0, r0, #7
 8007462:	1ac2      	subs	r2, r0, r3
 8007464:	d0cc      	beq.n	8007400 <_malloc_r+0x20>
 8007466:	1a1b      	subs	r3, r3, r0
 8007468:	50a3      	str	r3, [r4, r2]
 800746a:	e7c9      	b.n	8007400 <_malloc_r+0x20>
 800746c:	4622      	mov	r2, r4
 800746e:	6864      	ldr	r4, [r4, #4]
 8007470:	e7cc      	b.n	800740c <_malloc_r+0x2c>
 8007472:	1cc4      	adds	r4, r0, #3
 8007474:	f024 0403 	bic.w	r4, r4, #3
 8007478:	42a0      	cmp	r0, r4
 800747a:	d0e3      	beq.n	8007444 <_malloc_r+0x64>
 800747c:	1a21      	subs	r1, r4, r0
 800747e:	4630      	mov	r0, r6
 8007480:	f000 f964 	bl	800774c <_sbrk_r>
 8007484:	3001      	adds	r0, #1
 8007486:	d1dd      	bne.n	8007444 <_malloc_r+0x64>
 8007488:	e7cf      	b.n	800742a <_malloc_r+0x4a>
 800748a:	bf00      	nop
 800748c:	20000228 	.word	0x20000228
 8007490:	2000022c 	.word	0x2000022c

08007494 <__ssputs_r>:
 8007494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007498:	688e      	ldr	r6, [r1, #8]
 800749a:	429e      	cmp	r6, r3
 800749c:	4682      	mov	sl, r0
 800749e:	460c      	mov	r4, r1
 80074a0:	4690      	mov	r8, r2
 80074a2:	461f      	mov	r7, r3
 80074a4:	d838      	bhi.n	8007518 <__ssputs_r+0x84>
 80074a6:	898a      	ldrh	r2, [r1, #12]
 80074a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80074ac:	d032      	beq.n	8007514 <__ssputs_r+0x80>
 80074ae:	6825      	ldr	r5, [r4, #0]
 80074b0:	6909      	ldr	r1, [r1, #16]
 80074b2:	eba5 0901 	sub.w	r9, r5, r1
 80074b6:	6965      	ldr	r5, [r4, #20]
 80074b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80074bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80074c0:	3301      	adds	r3, #1
 80074c2:	444b      	add	r3, r9
 80074c4:	106d      	asrs	r5, r5, #1
 80074c6:	429d      	cmp	r5, r3
 80074c8:	bf38      	it	cc
 80074ca:	461d      	movcc	r5, r3
 80074cc:	0553      	lsls	r3, r2, #21
 80074ce:	d531      	bpl.n	8007534 <__ssputs_r+0xa0>
 80074d0:	4629      	mov	r1, r5
 80074d2:	f7ff ff85 	bl	80073e0 <_malloc_r>
 80074d6:	4606      	mov	r6, r0
 80074d8:	b950      	cbnz	r0, 80074f0 <__ssputs_r+0x5c>
 80074da:	230c      	movs	r3, #12
 80074dc:	f8ca 3000 	str.w	r3, [sl]
 80074e0:	89a3      	ldrh	r3, [r4, #12]
 80074e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074e6:	81a3      	strh	r3, [r4, #12]
 80074e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80074ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074f0:	6921      	ldr	r1, [r4, #16]
 80074f2:	464a      	mov	r2, r9
 80074f4:	f7ff fb88 	bl	8006c08 <memcpy>
 80074f8:	89a3      	ldrh	r3, [r4, #12]
 80074fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80074fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007502:	81a3      	strh	r3, [r4, #12]
 8007504:	6126      	str	r6, [r4, #16]
 8007506:	6165      	str	r5, [r4, #20]
 8007508:	444e      	add	r6, r9
 800750a:	eba5 0509 	sub.w	r5, r5, r9
 800750e:	6026      	str	r6, [r4, #0]
 8007510:	60a5      	str	r5, [r4, #8]
 8007512:	463e      	mov	r6, r7
 8007514:	42be      	cmp	r6, r7
 8007516:	d900      	bls.n	800751a <__ssputs_r+0x86>
 8007518:	463e      	mov	r6, r7
 800751a:	4632      	mov	r2, r6
 800751c:	6820      	ldr	r0, [r4, #0]
 800751e:	4641      	mov	r1, r8
 8007520:	f000 f966 	bl	80077f0 <memmove>
 8007524:	68a3      	ldr	r3, [r4, #8]
 8007526:	6822      	ldr	r2, [r4, #0]
 8007528:	1b9b      	subs	r3, r3, r6
 800752a:	4432      	add	r2, r6
 800752c:	60a3      	str	r3, [r4, #8]
 800752e:	6022      	str	r2, [r4, #0]
 8007530:	2000      	movs	r0, #0
 8007532:	e7db      	b.n	80074ec <__ssputs_r+0x58>
 8007534:	462a      	mov	r2, r5
 8007536:	f000 f981 	bl	800783c <_realloc_r>
 800753a:	4606      	mov	r6, r0
 800753c:	2800      	cmp	r0, #0
 800753e:	d1e1      	bne.n	8007504 <__ssputs_r+0x70>
 8007540:	6921      	ldr	r1, [r4, #16]
 8007542:	4650      	mov	r0, sl
 8007544:	f7ff fefc 	bl	8007340 <_free_r>
 8007548:	e7c7      	b.n	80074da <__ssputs_r+0x46>
	...

0800754c <_svfiprintf_r>:
 800754c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007550:	4698      	mov	r8, r3
 8007552:	898b      	ldrh	r3, [r1, #12]
 8007554:	061b      	lsls	r3, r3, #24
 8007556:	b09d      	sub	sp, #116	; 0x74
 8007558:	4607      	mov	r7, r0
 800755a:	460d      	mov	r5, r1
 800755c:	4614      	mov	r4, r2
 800755e:	d50e      	bpl.n	800757e <_svfiprintf_r+0x32>
 8007560:	690b      	ldr	r3, [r1, #16]
 8007562:	b963      	cbnz	r3, 800757e <_svfiprintf_r+0x32>
 8007564:	2140      	movs	r1, #64	; 0x40
 8007566:	f7ff ff3b 	bl	80073e0 <_malloc_r>
 800756a:	6028      	str	r0, [r5, #0]
 800756c:	6128      	str	r0, [r5, #16]
 800756e:	b920      	cbnz	r0, 800757a <_svfiprintf_r+0x2e>
 8007570:	230c      	movs	r3, #12
 8007572:	603b      	str	r3, [r7, #0]
 8007574:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007578:	e0d1      	b.n	800771e <_svfiprintf_r+0x1d2>
 800757a:	2340      	movs	r3, #64	; 0x40
 800757c:	616b      	str	r3, [r5, #20]
 800757e:	2300      	movs	r3, #0
 8007580:	9309      	str	r3, [sp, #36]	; 0x24
 8007582:	2320      	movs	r3, #32
 8007584:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007588:	f8cd 800c 	str.w	r8, [sp, #12]
 800758c:	2330      	movs	r3, #48	; 0x30
 800758e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007738 <_svfiprintf_r+0x1ec>
 8007592:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007596:	f04f 0901 	mov.w	r9, #1
 800759a:	4623      	mov	r3, r4
 800759c:	469a      	mov	sl, r3
 800759e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075a2:	b10a      	cbz	r2, 80075a8 <_svfiprintf_r+0x5c>
 80075a4:	2a25      	cmp	r2, #37	; 0x25
 80075a6:	d1f9      	bne.n	800759c <_svfiprintf_r+0x50>
 80075a8:	ebba 0b04 	subs.w	fp, sl, r4
 80075ac:	d00b      	beq.n	80075c6 <_svfiprintf_r+0x7a>
 80075ae:	465b      	mov	r3, fp
 80075b0:	4622      	mov	r2, r4
 80075b2:	4629      	mov	r1, r5
 80075b4:	4638      	mov	r0, r7
 80075b6:	f7ff ff6d 	bl	8007494 <__ssputs_r>
 80075ba:	3001      	adds	r0, #1
 80075bc:	f000 80aa 	beq.w	8007714 <_svfiprintf_r+0x1c8>
 80075c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075c2:	445a      	add	r2, fp
 80075c4:	9209      	str	r2, [sp, #36]	; 0x24
 80075c6:	f89a 3000 	ldrb.w	r3, [sl]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	f000 80a2 	beq.w	8007714 <_svfiprintf_r+0x1c8>
 80075d0:	2300      	movs	r3, #0
 80075d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80075d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075da:	f10a 0a01 	add.w	sl, sl, #1
 80075de:	9304      	str	r3, [sp, #16]
 80075e0:	9307      	str	r3, [sp, #28]
 80075e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80075e6:	931a      	str	r3, [sp, #104]	; 0x68
 80075e8:	4654      	mov	r4, sl
 80075ea:	2205      	movs	r2, #5
 80075ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075f0:	4851      	ldr	r0, [pc, #324]	; (8007738 <_svfiprintf_r+0x1ec>)
 80075f2:	f7f8 fe15 	bl	8000220 <memchr>
 80075f6:	9a04      	ldr	r2, [sp, #16]
 80075f8:	b9d8      	cbnz	r0, 8007632 <_svfiprintf_r+0xe6>
 80075fa:	06d0      	lsls	r0, r2, #27
 80075fc:	bf44      	itt	mi
 80075fe:	2320      	movmi	r3, #32
 8007600:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007604:	0711      	lsls	r1, r2, #28
 8007606:	bf44      	itt	mi
 8007608:	232b      	movmi	r3, #43	; 0x2b
 800760a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800760e:	f89a 3000 	ldrb.w	r3, [sl]
 8007612:	2b2a      	cmp	r3, #42	; 0x2a
 8007614:	d015      	beq.n	8007642 <_svfiprintf_r+0xf6>
 8007616:	9a07      	ldr	r2, [sp, #28]
 8007618:	4654      	mov	r4, sl
 800761a:	2000      	movs	r0, #0
 800761c:	f04f 0c0a 	mov.w	ip, #10
 8007620:	4621      	mov	r1, r4
 8007622:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007626:	3b30      	subs	r3, #48	; 0x30
 8007628:	2b09      	cmp	r3, #9
 800762a:	d94e      	bls.n	80076ca <_svfiprintf_r+0x17e>
 800762c:	b1b0      	cbz	r0, 800765c <_svfiprintf_r+0x110>
 800762e:	9207      	str	r2, [sp, #28]
 8007630:	e014      	b.n	800765c <_svfiprintf_r+0x110>
 8007632:	eba0 0308 	sub.w	r3, r0, r8
 8007636:	fa09 f303 	lsl.w	r3, r9, r3
 800763a:	4313      	orrs	r3, r2
 800763c:	9304      	str	r3, [sp, #16]
 800763e:	46a2      	mov	sl, r4
 8007640:	e7d2      	b.n	80075e8 <_svfiprintf_r+0x9c>
 8007642:	9b03      	ldr	r3, [sp, #12]
 8007644:	1d19      	adds	r1, r3, #4
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	9103      	str	r1, [sp, #12]
 800764a:	2b00      	cmp	r3, #0
 800764c:	bfbb      	ittet	lt
 800764e:	425b      	neglt	r3, r3
 8007650:	f042 0202 	orrlt.w	r2, r2, #2
 8007654:	9307      	strge	r3, [sp, #28]
 8007656:	9307      	strlt	r3, [sp, #28]
 8007658:	bfb8      	it	lt
 800765a:	9204      	strlt	r2, [sp, #16]
 800765c:	7823      	ldrb	r3, [r4, #0]
 800765e:	2b2e      	cmp	r3, #46	; 0x2e
 8007660:	d10c      	bne.n	800767c <_svfiprintf_r+0x130>
 8007662:	7863      	ldrb	r3, [r4, #1]
 8007664:	2b2a      	cmp	r3, #42	; 0x2a
 8007666:	d135      	bne.n	80076d4 <_svfiprintf_r+0x188>
 8007668:	9b03      	ldr	r3, [sp, #12]
 800766a:	1d1a      	adds	r2, r3, #4
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	9203      	str	r2, [sp, #12]
 8007670:	2b00      	cmp	r3, #0
 8007672:	bfb8      	it	lt
 8007674:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007678:	3402      	adds	r4, #2
 800767a:	9305      	str	r3, [sp, #20]
 800767c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007748 <_svfiprintf_r+0x1fc>
 8007680:	7821      	ldrb	r1, [r4, #0]
 8007682:	2203      	movs	r2, #3
 8007684:	4650      	mov	r0, sl
 8007686:	f7f8 fdcb 	bl	8000220 <memchr>
 800768a:	b140      	cbz	r0, 800769e <_svfiprintf_r+0x152>
 800768c:	2340      	movs	r3, #64	; 0x40
 800768e:	eba0 000a 	sub.w	r0, r0, sl
 8007692:	fa03 f000 	lsl.w	r0, r3, r0
 8007696:	9b04      	ldr	r3, [sp, #16]
 8007698:	4303      	orrs	r3, r0
 800769a:	3401      	adds	r4, #1
 800769c:	9304      	str	r3, [sp, #16]
 800769e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076a2:	4826      	ldr	r0, [pc, #152]	; (800773c <_svfiprintf_r+0x1f0>)
 80076a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80076a8:	2206      	movs	r2, #6
 80076aa:	f7f8 fdb9 	bl	8000220 <memchr>
 80076ae:	2800      	cmp	r0, #0
 80076b0:	d038      	beq.n	8007724 <_svfiprintf_r+0x1d8>
 80076b2:	4b23      	ldr	r3, [pc, #140]	; (8007740 <_svfiprintf_r+0x1f4>)
 80076b4:	bb1b      	cbnz	r3, 80076fe <_svfiprintf_r+0x1b2>
 80076b6:	9b03      	ldr	r3, [sp, #12]
 80076b8:	3307      	adds	r3, #7
 80076ba:	f023 0307 	bic.w	r3, r3, #7
 80076be:	3308      	adds	r3, #8
 80076c0:	9303      	str	r3, [sp, #12]
 80076c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076c4:	4433      	add	r3, r6
 80076c6:	9309      	str	r3, [sp, #36]	; 0x24
 80076c8:	e767      	b.n	800759a <_svfiprintf_r+0x4e>
 80076ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80076ce:	460c      	mov	r4, r1
 80076d0:	2001      	movs	r0, #1
 80076d2:	e7a5      	b.n	8007620 <_svfiprintf_r+0xd4>
 80076d4:	2300      	movs	r3, #0
 80076d6:	3401      	adds	r4, #1
 80076d8:	9305      	str	r3, [sp, #20]
 80076da:	4619      	mov	r1, r3
 80076dc:	f04f 0c0a 	mov.w	ip, #10
 80076e0:	4620      	mov	r0, r4
 80076e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076e6:	3a30      	subs	r2, #48	; 0x30
 80076e8:	2a09      	cmp	r2, #9
 80076ea:	d903      	bls.n	80076f4 <_svfiprintf_r+0x1a8>
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d0c5      	beq.n	800767c <_svfiprintf_r+0x130>
 80076f0:	9105      	str	r1, [sp, #20]
 80076f2:	e7c3      	b.n	800767c <_svfiprintf_r+0x130>
 80076f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80076f8:	4604      	mov	r4, r0
 80076fa:	2301      	movs	r3, #1
 80076fc:	e7f0      	b.n	80076e0 <_svfiprintf_r+0x194>
 80076fe:	ab03      	add	r3, sp, #12
 8007700:	9300      	str	r3, [sp, #0]
 8007702:	462a      	mov	r2, r5
 8007704:	4b0f      	ldr	r3, [pc, #60]	; (8007744 <_svfiprintf_r+0x1f8>)
 8007706:	a904      	add	r1, sp, #16
 8007708:	4638      	mov	r0, r7
 800770a:	f7fe f80d 	bl	8005728 <_printf_float>
 800770e:	1c42      	adds	r2, r0, #1
 8007710:	4606      	mov	r6, r0
 8007712:	d1d6      	bne.n	80076c2 <_svfiprintf_r+0x176>
 8007714:	89ab      	ldrh	r3, [r5, #12]
 8007716:	065b      	lsls	r3, r3, #25
 8007718:	f53f af2c 	bmi.w	8007574 <_svfiprintf_r+0x28>
 800771c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800771e:	b01d      	add	sp, #116	; 0x74
 8007720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007724:	ab03      	add	r3, sp, #12
 8007726:	9300      	str	r3, [sp, #0]
 8007728:	462a      	mov	r2, r5
 800772a:	4b06      	ldr	r3, [pc, #24]	; (8007744 <_svfiprintf_r+0x1f8>)
 800772c:	a904      	add	r1, sp, #16
 800772e:	4638      	mov	r0, r7
 8007730:	f7fe fa9e 	bl	8005c70 <_printf_i>
 8007734:	e7eb      	b.n	800770e <_svfiprintf_r+0x1c2>
 8007736:	bf00      	nop
 8007738:	08009a94 	.word	0x08009a94
 800773c:	08009a9e 	.word	0x08009a9e
 8007740:	08005729 	.word	0x08005729
 8007744:	08007495 	.word	0x08007495
 8007748:	08009a9a 	.word	0x08009a9a

0800774c <_sbrk_r>:
 800774c:	b538      	push	{r3, r4, r5, lr}
 800774e:	4d06      	ldr	r5, [pc, #24]	; (8007768 <_sbrk_r+0x1c>)
 8007750:	2300      	movs	r3, #0
 8007752:	4604      	mov	r4, r0
 8007754:	4608      	mov	r0, r1
 8007756:	602b      	str	r3, [r5, #0]
 8007758:	f7fb f9f2 	bl	8002b40 <_sbrk>
 800775c:	1c43      	adds	r3, r0, #1
 800775e:	d102      	bne.n	8007766 <_sbrk_r+0x1a>
 8007760:	682b      	ldr	r3, [r5, #0]
 8007762:	b103      	cbz	r3, 8007766 <_sbrk_r+0x1a>
 8007764:	6023      	str	r3, [r4, #0]
 8007766:	bd38      	pop	{r3, r4, r5, pc}
 8007768:	200002cc 	.word	0x200002cc

0800776c <__assert_func>:
 800776c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800776e:	4614      	mov	r4, r2
 8007770:	461a      	mov	r2, r3
 8007772:	4b09      	ldr	r3, [pc, #36]	; (8007798 <__assert_func+0x2c>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4605      	mov	r5, r0
 8007778:	68d8      	ldr	r0, [r3, #12]
 800777a:	b14c      	cbz	r4, 8007790 <__assert_func+0x24>
 800777c:	4b07      	ldr	r3, [pc, #28]	; (800779c <__assert_func+0x30>)
 800777e:	9100      	str	r1, [sp, #0]
 8007780:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007784:	4906      	ldr	r1, [pc, #24]	; (80077a0 <__assert_func+0x34>)
 8007786:	462b      	mov	r3, r5
 8007788:	f000 f80e 	bl	80077a8 <fiprintf>
 800778c:	f000 faa4 	bl	8007cd8 <abort>
 8007790:	4b04      	ldr	r3, [pc, #16]	; (80077a4 <__assert_func+0x38>)
 8007792:	461c      	mov	r4, r3
 8007794:	e7f3      	b.n	800777e <__assert_func+0x12>
 8007796:	bf00      	nop
 8007798:	20000014 	.word	0x20000014
 800779c:	08009aa5 	.word	0x08009aa5
 80077a0:	08009ab2 	.word	0x08009ab2
 80077a4:	08009ae0 	.word	0x08009ae0

080077a8 <fiprintf>:
 80077a8:	b40e      	push	{r1, r2, r3}
 80077aa:	b503      	push	{r0, r1, lr}
 80077ac:	4601      	mov	r1, r0
 80077ae:	ab03      	add	r3, sp, #12
 80077b0:	4805      	ldr	r0, [pc, #20]	; (80077c8 <fiprintf+0x20>)
 80077b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80077b6:	6800      	ldr	r0, [r0, #0]
 80077b8:	9301      	str	r3, [sp, #4]
 80077ba:	f000 f88f 	bl	80078dc <_vfiprintf_r>
 80077be:	b002      	add	sp, #8
 80077c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80077c4:	b003      	add	sp, #12
 80077c6:	4770      	bx	lr
 80077c8:	20000014 	.word	0x20000014

080077cc <__ascii_mbtowc>:
 80077cc:	b082      	sub	sp, #8
 80077ce:	b901      	cbnz	r1, 80077d2 <__ascii_mbtowc+0x6>
 80077d0:	a901      	add	r1, sp, #4
 80077d2:	b142      	cbz	r2, 80077e6 <__ascii_mbtowc+0x1a>
 80077d4:	b14b      	cbz	r3, 80077ea <__ascii_mbtowc+0x1e>
 80077d6:	7813      	ldrb	r3, [r2, #0]
 80077d8:	600b      	str	r3, [r1, #0]
 80077da:	7812      	ldrb	r2, [r2, #0]
 80077dc:	1e10      	subs	r0, r2, #0
 80077de:	bf18      	it	ne
 80077e0:	2001      	movne	r0, #1
 80077e2:	b002      	add	sp, #8
 80077e4:	4770      	bx	lr
 80077e6:	4610      	mov	r0, r2
 80077e8:	e7fb      	b.n	80077e2 <__ascii_mbtowc+0x16>
 80077ea:	f06f 0001 	mvn.w	r0, #1
 80077ee:	e7f8      	b.n	80077e2 <__ascii_mbtowc+0x16>

080077f0 <memmove>:
 80077f0:	4288      	cmp	r0, r1
 80077f2:	b510      	push	{r4, lr}
 80077f4:	eb01 0402 	add.w	r4, r1, r2
 80077f8:	d902      	bls.n	8007800 <memmove+0x10>
 80077fa:	4284      	cmp	r4, r0
 80077fc:	4623      	mov	r3, r4
 80077fe:	d807      	bhi.n	8007810 <memmove+0x20>
 8007800:	1e43      	subs	r3, r0, #1
 8007802:	42a1      	cmp	r1, r4
 8007804:	d008      	beq.n	8007818 <memmove+0x28>
 8007806:	f811 2b01 	ldrb.w	r2, [r1], #1
 800780a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800780e:	e7f8      	b.n	8007802 <memmove+0x12>
 8007810:	4402      	add	r2, r0
 8007812:	4601      	mov	r1, r0
 8007814:	428a      	cmp	r2, r1
 8007816:	d100      	bne.n	800781a <memmove+0x2a>
 8007818:	bd10      	pop	{r4, pc}
 800781a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800781e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007822:	e7f7      	b.n	8007814 <memmove+0x24>

08007824 <__malloc_lock>:
 8007824:	4801      	ldr	r0, [pc, #4]	; (800782c <__malloc_lock+0x8>)
 8007826:	f000 bc17 	b.w	8008058 <__retarget_lock_acquire_recursive>
 800782a:	bf00      	nop
 800782c:	200002d4 	.word	0x200002d4

08007830 <__malloc_unlock>:
 8007830:	4801      	ldr	r0, [pc, #4]	; (8007838 <__malloc_unlock+0x8>)
 8007832:	f000 bc12 	b.w	800805a <__retarget_lock_release_recursive>
 8007836:	bf00      	nop
 8007838:	200002d4 	.word	0x200002d4

0800783c <_realloc_r>:
 800783c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800783e:	4607      	mov	r7, r0
 8007840:	4614      	mov	r4, r2
 8007842:	460e      	mov	r6, r1
 8007844:	b921      	cbnz	r1, 8007850 <_realloc_r+0x14>
 8007846:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800784a:	4611      	mov	r1, r2
 800784c:	f7ff bdc8 	b.w	80073e0 <_malloc_r>
 8007850:	b922      	cbnz	r2, 800785c <_realloc_r+0x20>
 8007852:	f7ff fd75 	bl	8007340 <_free_r>
 8007856:	4625      	mov	r5, r4
 8007858:	4628      	mov	r0, r5
 800785a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800785c:	f000 fc62 	bl	8008124 <_malloc_usable_size_r>
 8007860:	42a0      	cmp	r0, r4
 8007862:	d20f      	bcs.n	8007884 <_realloc_r+0x48>
 8007864:	4621      	mov	r1, r4
 8007866:	4638      	mov	r0, r7
 8007868:	f7ff fdba 	bl	80073e0 <_malloc_r>
 800786c:	4605      	mov	r5, r0
 800786e:	2800      	cmp	r0, #0
 8007870:	d0f2      	beq.n	8007858 <_realloc_r+0x1c>
 8007872:	4631      	mov	r1, r6
 8007874:	4622      	mov	r2, r4
 8007876:	f7ff f9c7 	bl	8006c08 <memcpy>
 800787a:	4631      	mov	r1, r6
 800787c:	4638      	mov	r0, r7
 800787e:	f7ff fd5f 	bl	8007340 <_free_r>
 8007882:	e7e9      	b.n	8007858 <_realloc_r+0x1c>
 8007884:	4635      	mov	r5, r6
 8007886:	e7e7      	b.n	8007858 <_realloc_r+0x1c>

08007888 <__sfputc_r>:
 8007888:	6893      	ldr	r3, [r2, #8]
 800788a:	3b01      	subs	r3, #1
 800788c:	2b00      	cmp	r3, #0
 800788e:	b410      	push	{r4}
 8007890:	6093      	str	r3, [r2, #8]
 8007892:	da08      	bge.n	80078a6 <__sfputc_r+0x1e>
 8007894:	6994      	ldr	r4, [r2, #24]
 8007896:	42a3      	cmp	r3, r4
 8007898:	db01      	blt.n	800789e <__sfputc_r+0x16>
 800789a:	290a      	cmp	r1, #10
 800789c:	d103      	bne.n	80078a6 <__sfputc_r+0x1e>
 800789e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80078a2:	f000 b94b 	b.w	8007b3c <__swbuf_r>
 80078a6:	6813      	ldr	r3, [r2, #0]
 80078a8:	1c58      	adds	r0, r3, #1
 80078aa:	6010      	str	r0, [r2, #0]
 80078ac:	7019      	strb	r1, [r3, #0]
 80078ae:	4608      	mov	r0, r1
 80078b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80078b4:	4770      	bx	lr

080078b6 <__sfputs_r>:
 80078b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078b8:	4606      	mov	r6, r0
 80078ba:	460f      	mov	r7, r1
 80078bc:	4614      	mov	r4, r2
 80078be:	18d5      	adds	r5, r2, r3
 80078c0:	42ac      	cmp	r4, r5
 80078c2:	d101      	bne.n	80078c8 <__sfputs_r+0x12>
 80078c4:	2000      	movs	r0, #0
 80078c6:	e007      	b.n	80078d8 <__sfputs_r+0x22>
 80078c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078cc:	463a      	mov	r2, r7
 80078ce:	4630      	mov	r0, r6
 80078d0:	f7ff ffda 	bl	8007888 <__sfputc_r>
 80078d4:	1c43      	adds	r3, r0, #1
 80078d6:	d1f3      	bne.n	80078c0 <__sfputs_r+0xa>
 80078d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080078dc <_vfiprintf_r>:
 80078dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078e0:	460d      	mov	r5, r1
 80078e2:	b09d      	sub	sp, #116	; 0x74
 80078e4:	4614      	mov	r4, r2
 80078e6:	4698      	mov	r8, r3
 80078e8:	4606      	mov	r6, r0
 80078ea:	b118      	cbz	r0, 80078f4 <_vfiprintf_r+0x18>
 80078ec:	6983      	ldr	r3, [r0, #24]
 80078ee:	b90b      	cbnz	r3, 80078f4 <_vfiprintf_r+0x18>
 80078f0:	f000 fb14 	bl	8007f1c <__sinit>
 80078f4:	4b89      	ldr	r3, [pc, #548]	; (8007b1c <_vfiprintf_r+0x240>)
 80078f6:	429d      	cmp	r5, r3
 80078f8:	d11b      	bne.n	8007932 <_vfiprintf_r+0x56>
 80078fa:	6875      	ldr	r5, [r6, #4]
 80078fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80078fe:	07d9      	lsls	r1, r3, #31
 8007900:	d405      	bmi.n	800790e <_vfiprintf_r+0x32>
 8007902:	89ab      	ldrh	r3, [r5, #12]
 8007904:	059a      	lsls	r2, r3, #22
 8007906:	d402      	bmi.n	800790e <_vfiprintf_r+0x32>
 8007908:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800790a:	f000 fba5 	bl	8008058 <__retarget_lock_acquire_recursive>
 800790e:	89ab      	ldrh	r3, [r5, #12]
 8007910:	071b      	lsls	r3, r3, #28
 8007912:	d501      	bpl.n	8007918 <_vfiprintf_r+0x3c>
 8007914:	692b      	ldr	r3, [r5, #16]
 8007916:	b9eb      	cbnz	r3, 8007954 <_vfiprintf_r+0x78>
 8007918:	4629      	mov	r1, r5
 800791a:	4630      	mov	r0, r6
 800791c:	f000 f96e 	bl	8007bfc <__swsetup_r>
 8007920:	b1c0      	cbz	r0, 8007954 <_vfiprintf_r+0x78>
 8007922:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007924:	07dc      	lsls	r4, r3, #31
 8007926:	d50e      	bpl.n	8007946 <_vfiprintf_r+0x6a>
 8007928:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800792c:	b01d      	add	sp, #116	; 0x74
 800792e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007932:	4b7b      	ldr	r3, [pc, #492]	; (8007b20 <_vfiprintf_r+0x244>)
 8007934:	429d      	cmp	r5, r3
 8007936:	d101      	bne.n	800793c <_vfiprintf_r+0x60>
 8007938:	68b5      	ldr	r5, [r6, #8]
 800793a:	e7df      	b.n	80078fc <_vfiprintf_r+0x20>
 800793c:	4b79      	ldr	r3, [pc, #484]	; (8007b24 <_vfiprintf_r+0x248>)
 800793e:	429d      	cmp	r5, r3
 8007940:	bf08      	it	eq
 8007942:	68f5      	ldreq	r5, [r6, #12]
 8007944:	e7da      	b.n	80078fc <_vfiprintf_r+0x20>
 8007946:	89ab      	ldrh	r3, [r5, #12]
 8007948:	0598      	lsls	r0, r3, #22
 800794a:	d4ed      	bmi.n	8007928 <_vfiprintf_r+0x4c>
 800794c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800794e:	f000 fb84 	bl	800805a <__retarget_lock_release_recursive>
 8007952:	e7e9      	b.n	8007928 <_vfiprintf_r+0x4c>
 8007954:	2300      	movs	r3, #0
 8007956:	9309      	str	r3, [sp, #36]	; 0x24
 8007958:	2320      	movs	r3, #32
 800795a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800795e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007962:	2330      	movs	r3, #48	; 0x30
 8007964:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007b28 <_vfiprintf_r+0x24c>
 8007968:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800796c:	f04f 0901 	mov.w	r9, #1
 8007970:	4623      	mov	r3, r4
 8007972:	469a      	mov	sl, r3
 8007974:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007978:	b10a      	cbz	r2, 800797e <_vfiprintf_r+0xa2>
 800797a:	2a25      	cmp	r2, #37	; 0x25
 800797c:	d1f9      	bne.n	8007972 <_vfiprintf_r+0x96>
 800797e:	ebba 0b04 	subs.w	fp, sl, r4
 8007982:	d00b      	beq.n	800799c <_vfiprintf_r+0xc0>
 8007984:	465b      	mov	r3, fp
 8007986:	4622      	mov	r2, r4
 8007988:	4629      	mov	r1, r5
 800798a:	4630      	mov	r0, r6
 800798c:	f7ff ff93 	bl	80078b6 <__sfputs_r>
 8007990:	3001      	adds	r0, #1
 8007992:	f000 80aa 	beq.w	8007aea <_vfiprintf_r+0x20e>
 8007996:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007998:	445a      	add	r2, fp
 800799a:	9209      	str	r2, [sp, #36]	; 0x24
 800799c:	f89a 3000 	ldrb.w	r3, [sl]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	f000 80a2 	beq.w	8007aea <_vfiprintf_r+0x20e>
 80079a6:	2300      	movs	r3, #0
 80079a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80079ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079b0:	f10a 0a01 	add.w	sl, sl, #1
 80079b4:	9304      	str	r3, [sp, #16]
 80079b6:	9307      	str	r3, [sp, #28]
 80079b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80079bc:	931a      	str	r3, [sp, #104]	; 0x68
 80079be:	4654      	mov	r4, sl
 80079c0:	2205      	movs	r2, #5
 80079c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079c6:	4858      	ldr	r0, [pc, #352]	; (8007b28 <_vfiprintf_r+0x24c>)
 80079c8:	f7f8 fc2a 	bl	8000220 <memchr>
 80079cc:	9a04      	ldr	r2, [sp, #16]
 80079ce:	b9d8      	cbnz	r0, 8007a08 <_vfiprintf_r+0x12c>
 80079d0:	06d1      	lsls	r1, r2, #27
 80079d2:	bf44      	itt	mi
 80079d4:	2320      	movmi	r3, #32
 80079d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079da:	0713      	lsls	r3, r2, #28
 80079dc:	bf44      	itt	mi
 80079de:	232b      	movmi	r3, #43	; 0x2b
 80079e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079e4:	f89a 3000 	ldrb.w	r3, [sl]
 80079e8:	2b2a      	cmp	r3, #42	; 0x2a
 80079ea:	d015      	beq.n	8007a18 <_vfiprintf_r+0x13c>
 80079ec:	9a07      	ldr	r2, [sp, #28]
 80079ee:	4654      	mov	r4, sl
 80079f0:	2000      	movs	r0, #0
 80079f2:	f04f 0c0a 	mov.w	ip, #10
 80079f6:	4621      	mov	r1, r4
 80079f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80079fc:	3b30      	subs	r3, #48	; 0x30
 80079fe:	2b09      	cmp	r3, #9
 8007a00:	d94e      	bls.n	8007aa0 <_vfiprintf_r+0x1c4>
 8007a02:	b1b0      	cbz	r0, 8007a32 <_vfiprintf_r+0x156>
 8007a04:	9207      	str	r2, [sp, #28]
 8007a06:	e014      	b.n	8007a32 <_vfiprintf_r+0x156>
 8007a08:	eba0 0308 	sub.w	r3, r0, r8
 8007a0c:	fa09 f303 	lsl.w	r3, r9, r3
 8007a10:	4313      	orrs	r3, r2
 8007a12:	9304      	str	r3, [sp, #16]
 8007a14:	46a2      	mov	sl, r4
 8007a16:	e7d2      	b.n	80079be <_vfiprintf_r+0xe2>
 8007a18:	9b03      	ldr	r3, [sp, #12]
 8007a1a:	1d19      	adds	r1, r3, #4
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	9103      	str	r1, [sp, #12]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	bfbb      	ittet	lt
 8007a24:	425b      	neglt	r3, r3
 8007a26:	f042 0202 	orrlt.w	r2, r2, #2
 8007a2a:	9307      	strge	r3, [sp, #28]
 8007a2c:	9307      	strlt	r3, [sp, #28]
 8007a2e:	bfb8      	it	lt
 8007a30:	9204      	strlt	r2, [sp, #16]
 8007a32:	7823      	ldrb	r3, [r4, #0]
 8007a34:	2b2e      	cmp	r3, #46	; 0x2e
 8007a36:	d10c      	bne.n	8007a52 <_vfiprintf_r+0x176>
 8007a38:	7863      	ldrb	r3, [r4, #1]
 8007a3a:	2b2a      	cmp	r3, #42	; 0x2a
 8007a3c:	d135      	bne.n	8007aaa <_vfiprintf_r+0x1ce>
 8007a3e:	9b03      	ldr	r3, [sp, #12]
 8007a40:	1d1a      	adds	r2, r3, #4
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	9203      	str	r2, [sp, #12]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	bfb8      	it	lt
 8007a4a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007a4e:	3402      	adds	r4, #2
 8007a50:	9305      	str	r3, [sp, #20]
 8007a52:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007b38 <_vfiprintf_r+0x25c>
 8007a56:	7821      	ldrb	r1, [r4, #0]
 8007a58:	2203      	movs	r2, #3
 8007a5a:	4650      	mov	r0, sl
 8007a5c:	f7f8 fbe0 	bl	8000220 <memchr>
 8007a60:	b140      	cbz	r0, 8007a74 <_vfiprintf_r+0x198>
 8007a62:	2340      	movs	r3, #64	; 0x40
 8007a64:	eba0 000a 	sub.w	r0, r0, sl
 8007a68:	fa03 f000 	lsl.w	r0, r3, r0
 8007a6c:	9b04      	ldr	r3, [sp, #16]
 8007a6e:	4303      	orrs	r3, r0
 8007a70:	3401      	adds	r4, #1
 8007a72:	9304      	str	r3, [sp, #16]
 8007a74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a78:	482c      	ldr	r0, [pc, #176]	; (8007b2c <_vfiprintf_r+0x250>)
 8007a7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a7e:	2206      	movs	r2, #6
 8007a80:	f7f8 fbce 	bl	8000220 <memchr>
 8007a84:	2800      	cmp	r0, #0
 8007a86:	d03f      	beq.n	8007b08 <_vfiprintf_r+0x22c>
 8007a88:	4b29      	ldr	r3, [pc, #164]	; (8007b30 <_vfiprintf_r+0x254>)
 8007a8a:	bb1b      	cbnz	r3, 8007ad4 <_vfiprintf_r+0x1f8>
 8007a8c:	9b03      	ldr	r3, [sp, #12]
 8007a8e:	3307      	adds	r3, #7
 8007a90:	f023 0307 	bic.w	r3, r3, #7
 8007a94:	3308      	adds	r3, #8
 8007a96:	9303      	str	r3, [sp, #12]
 8007a98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a9a:	443b      	add	r3, r7
 8007a9c:	9309      	str	r3, [sp, #36]	; 0x24
 8007a9e:	e767      	b.n	8007970 <_vfiprintf_r+0x94>
 8007aa0:	fb0c 3202 	mla	r2, ip, r2, r3
 8007aa4:	460c      	mov	r4, r1
 8007aa6:	2001      	movs	r0, #1
 8007aa8:	e7a5      	b.n	80079f6 <_vfiprintf_r+0x11a>
 8007aaa:	2300      	movs	r3, #0
 8007aac:	3401      	adds	r4, #1
 8007aae:	9305      	str	r3, [sp, #20]
 8007ab0:	4619      	mov	r1, r3
 8007ab2:	f04f 0c0a 	mov.w	ip, #10
 8007ab6:	4620      	mov	r0, r4
 8007ab8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007abc:	3a30      	subs	r2, #48	; 0x30
 8007abe:	2a09      	cmp	r2, #9
 8007ac0:	d903      	bls.n	8007aca <_vfiprintf_r+0x1ee>
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d0c5      	beq.n	8007a52 <_vfiprintf_r+0x176>
 8007ac6:	9105      	str	r1, [sp, #20]
 8007ac8:	e7c3      	b.n	8007a52 <_vfiprintf_r+0x176>
 8007aca:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ace:	4604      	mov	r4, r0
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	e7f0      	b.n	8007ab6 <_vfiprintf_r+0x1da>
 8007ad4:	ab03      	add	r3, sp, #12
 8007ad6:	9300      	str	r3, [sp, #0]
 8007ad8:	462a      	mov	r2, r5
 8007ada:	4b16      	ldr	r3, [pc, #88]	; (8007b34 <_vfiprintf_r+0x258>)
 8007adc:	a904      	add	r1, sp, #16
 8007ade:	4630      	mov	r0, r6
 8007ae0:	f7fd fe22 	bl	8005728 <_printf_float>
 8007ae4:	4607      	mov	r7, r0
 8007ae6:	1c78      	adds	r0, r7, #1
 8007ae8:	d1d6      	bne.n	8007a98 <_vfiprintf_r+0x1bc>
 8007aea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007aec:	07d9      	lsls	r1, r3, #31
 8007aee:	d405      	bmi.n	8007afc <_vfiprintf_r+0x220>
 8007af0:	89ab      	ldrh	r3, [r5, #12]
 8007af2:	059a      	lsls	r2, r3, #22
 8007af4:	d402      	bmi.n	8007afc <_vfiprintf_r+0x220>
 8007af6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007af8:	f000 faaf 	bl	800805a <__retarget_lock_release_recursive>
 8007afc:	89ab      	ldrh	r3, [r5, #12]
 8007afe:	065b      	lsls	r3, r3, #25
 8007b00:	f53f af12 	bmi.w	8007928 <_vfiprintf_r+0x4c>
 8007b04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b06:	e711      	b.n	800792c <_vfiprintf_r+0x50>
 8007b08:	ab03      	add	r3, sp, #12
 8007b0a:	9300      	str	r3, [sp, #0]
 8007b0c:	462a      	mov	r2, r5
 8007b0e:	4b09      	ldr	r3, [pc, #36]	; (8007b34 <_vfiprintf_r+0x258>)
 8007b10:	a904      	add	r1, sp, #16
 8007b12:	4630      	mov	r0, r6
 8007b14:	f7fe f8ac 	bl	8005c70 <_printf_i>
 8007b18:	e7e4      	b.n	8007ae4 <_vfiprintf_r+0x208>
 8007b1a:	bf00      	nop
 8007b1c:	08009c0c 	.word	0x08009c0c
 8007b20:	08009c2c 	.word	0x08009c2c
 8007b24:	08009bec 	.word	0x08009bec
 8007b28:	08009a94 	.word	0x08009a94
 8007b2c:	08009a9e 	.word	0x08009a9e
 8007b30:	08005729 	.word	0x08005729
 8007b34:	080078b7 	.word	0x080078b7
 8007b38:	08009a9a 	.word	0x08009a9a

08007b3c <__swbuf_r>:
 8007b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b3e:	460e      	mov	r6, r1
 8007b40:	4614      	mov	r4, r2
 8007b42:	4605      	mov	r5, r0
 8007b44:	b118      	cbz	r0, 8007b4e <__swbuf_r+0x12>
 8007b46:	6983      	ldr	r3, [r0, #24]
 8007b48:	b90b      	cbnz	r3, 8007b4e <__swbuf_r+0x12>
 8007b4a:	f000 f9e7 	bl	8007f1c <__sinit>
 8007b4e:	4b21      	ldr	r3, [pc, #132]	; (8007bd4 <__swbuf_r+0x98>)
 8007b50:	429c      	cmp	r4, r3
 8007b52:	d12b      	bne.n	8007bac <__swbuf_r+0x70>
 8007b54:	686c      	ldr	r4, [r5, #4]
 8007b56:	69a3      	ldr	r3, [r4, #24]
 8007b58:	60a3      	str	r3, [r4, #8]
 8007b5a:	89a3      	ldrh	r3, [r4, #12]
 8007b5c:	071a      	lsls	r2, r3, #28
 8007b5e:	d52f      	bpl.n	8007bc0 <__swbuf_r+0x84>
 8007b60:	6923      	ldr	r3, [r4, #16]
 8007b62:	b36b      	cbz	r3, 8007bc0 <__swbuf_r+0x84>
 8007b64:	6923      	ldr	r3, [r4, #16]
 8007b66:	6820      	ldr	r0, [r4, #0]
 8007b68:	1ac0      	subs	r0, r0, r3
 8007b6a:	6963      	ldr	r3, [r4, #20]
 8007b6c:	b2f6      	uxtb	r6, r6
 8007b6e:	4283      	cmp	r3, r0
 8007b70:	4637      	mov	r7, r6
 8007b72:	dc04      	bgt.n	8007b7e <__swbuf_r+0x42>
 8007b74:	4621      	mov	r1, r4
 8007b76:	4628      	mov	r0, r5
 8007b78:	f000 f93c 	bl	8007df4 <_fflush_r>
 8007b7c:	bb30      	cbnz	r0, 8007bcc <__swbuf_r+0x90>
 8007b7e:	68a3      	ldr	r3, [r4, #8]
 8007b80:	3b01      	subs	r3, #1
 8007b82:	60a3      	str	r3, [r4, #8]
 8007b84:	6823      	ldr	r3, [r4, #0]
 8007b86:	1c5a      	adds	r2, r3, #1
 8007b88:	6022      	str	r2, [r4, #0]
 8007b8a:	701e      	strb	r6, [r3, #0]
 8007b8c:	6963      	ldr	r3, [r4, #20]
 8007b8e:	3001      	adds	r0, #1
 8007b90:	4283      	cmp	r3, r0
 8007b92:	d004      	beq.n	8007b9e <__swbuf_r+0x62>
 8007b94:	89a3      	ldrh	r3, [r4, #12]
 8007b96:	07db      	lsls	r3, r3, #31
 8007b98:	d506      	bpl.n	8007ba8 <__swbuf_r+0x6c>
 8007b9a:	2e0a      	cmp	r6, #10
 8007b9c:	d104      	bne.n	8007ba8 <__swbuf_r+0x6c>
 8007b9e:	4621      	mov	r1, r4
 8007ba0:	4628      	mov	r0, r5
 8007ba2:	f000 f927 	bl	8007df4 <_fflush_r>
 8007ba6:	b988      	cbnz	r0, 8007bcc <__swbuf_r+0x90>
 8007ba8:	4638      	mov	r0, r7
 8007baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bac:	4b0a      	ldr	r3, [pc, #40]	; (8007bd8 <__swbuf_r+0x9c>)
 8007bae:	429c      	cmp	r4, r3
 8007bb0:	d101      	bne.n	8007bb6 <__swbuf_r+0x7a>
 8007bb2:	68ac      	ldr	r4, [r5, #8]
 8007bb4:	e7cf      	b.n	8007b56 <__swbuf_r+0x1a>
 8007bb6:	4b09      	ldr	r3, [pc, #36]	; (8007bdc <__swbuf_r+0xa0>)
 8007bb8:	429c      	cmp	r4, r3
 8007bba:	bf08      	it	eq
 8007bbc:	68ec      	ldreq	r4, [r5, #12]
 8007bbe:	e7ca      	b.n	8007b56 <__swbuf_r+0x1a>
 8007bc0:	4621      	mov	r1, r4
 8007bc2:	4628      	mov	r0, r5
 8007bc4:	f000 f81a 	bl	8007bfc <__swsetup_r>
 8007bc8:	2800      	cmp	r0, #0
 8007bca:	d0cb      	beq.n	8007b64 <__swbuf_r+0x28>
 8007bcc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007bd0:	e7ea      	b.n	8007ba8 <__swbuf_r+0x6c>
 8007bd2:	bf00      	nop
 8007bd4:	08009c0c 	.word	0x08009c0c
 8007bd8:	08009c2c 	.word	0x08009c2c
 8007bdc:	08009bec 	.word	0x08009bec

08007be0 <__ascii_wctomb>:
 8007be0:	b149      	cbz	r1, 8007bf6 <__ascii_wctomb+0x16>
 8007be2:	2aff      	cmp	r2, #255	; 0xff
 8007be4:	bf85      	ittet	hi
 8007be6:	238a      	movhi	r3, #138	; 0x8a
 8007be8:	6003      	strhi	r3, [r0, #0]
 8007bea:	700a      	strbls	r2, [r1, #0]
 8007bec:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8007bf0:	bf98      	it	ls
 8007bf2:	2001      	movls	r0, #1
 8007bf4:	4770      	bx	lr
 8007bf6:	4608      	mov	r0, r1
 8007bf8:	4770      	bx	lr
	...

08007bfc <__swsetup_r>:
 8007bfc:	4b32      	ldr	r3, [pc, #200]	; (8007cc8 <__swsetup_r+0xcc>)
 8007bfe:	b570      	push	{r4, r5, r6, lr}
 8007c00:	681d      	ldr	r5, [r3, #0]
 8007c02:	4606      	mov	r6, r0
 8007c04:	460c      	mov	r4, r1
 8007c06:	b125      	cbz	r5, 8007c12 <__swsetup_r+0x16>
 8007c08:	69ab      	ldr	r3, [r5, #24]
 8007c0a:	b913      	cbnz	r3, 8007c12 <__swsetup_r+0x16>
 8007c0c:	4628      	mov	r0, r5
 8007c0e:	f000 f985 	bl	8007f1c <__sinit>
 8007c12:	4b2e      	ldr	r3, [pc, #184]	; (8007ccc <__swsetup_r+0xd0>)
 8007c14:	429c      	cmp	r4, r3
 8007c16:	d10f      	bne.n	8007c38 <__swsetup_r+0x3c>
 8007c18:	686c      	ldr	r4, [r5, #4]
 8007c1a:	89a3      	ldrh	r3, [r4, #12]
 8007c1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c20:	0719      	lsls	r1, r3, #28
 8007c22:	d42c      	bmi.n	8007c7e <__swsetup_r+0x82>
 8007c24:	06dd      	lsls	r5, r3, #27
 8007c26:	d411      	bmi.n	8007c4c <__swsetup_r+0x50>
 8007c28:	2309      	movs	r3, #9
 8007c2a:	6033      	str	r3, [r6, #0]
 8007c2c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007c30:	81a3      	strh	r3, [r4, #12]
 8007c32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c36:	e03e      	b.n	8007cb6 <__swsetup_r+0xba>
 8007c38:	4b25      	ldr	r3, [pc, #148]	; (8007cd0 <__swsetup_r+0xd4>)
 8007c3a:	429c      	cmp	r4, r3
 8007c3c:	d101      	bne.n	8007c42 <__swsetup_r+0x46>
 8007c3e:	68ac      	ldr	r4, [r5, #8]
 8007c40:	e7eb      	b.n	8007c1a <__swsetup_r+0x1e>
 8007c42:	4b24      	ldr	r3, [pc, #144]	; (8007cd4 <__swsetup_r+0xd8>)
 8007c44:	429c      	cmp	r4, r3
 8007c46:	bf08      	it	eq
 8007c48:	68ec      	ldreq	r4, [r5, #12]
 8007c4a:	e7e6      	b.n	8007c1a <__swsetup_r+0x1e>
 8007c4c:	0758      	lsls	r0, r3, #29
 8007c4e:	d512      	bpl.n	8007c76 <__swsetup_r+0x7a>
 8007c50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c52:	b141      	cbz	r1, 8007c66 <__swsetup_r+0x6a>
 8007c54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c58:	4299      	cmp	r1, r3
 8007c5a:	d002      	beq.n	8007c62 <__swsetup_r+0x66>
 8007c5c:	4630      	mov	r0, r6
 8007c5e:	f7ff fb6f 	bl	8007340 <_free_r>
 8007c62:	2300      	movs	r3, #0
 8007c64:	6363      	str	r3, [r4, #52]	; 0x34
 8007c66:	89a3      	ldrh	r3, [r4, #12]
 8007c68:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007c6c:	81a3      	strh	r3, [r4, #12]
 8007c6e:	2300      	movs	r3, #0
 8007c70:	6063      	str	r3, [r4, #4]
 8007c72:	6923      	ldr	r3, [r4, #16]
 8007c74:	6023      	str	r3, [r4, #0]
 8007c76:	89a3      	ldrh	r3, [r4, #12]
 8007c78:	f043 0308 	orr.w	r3, r3, #8
 8007c7c:	81a3      	strh	r3, [r4, #12]
 8007c7e:	6923      	ldr	r3, [r4, #16]
 8007c80:	b94b      	cbnz	r3, 8007c96 <__swsetup_r+0x9a>
 8007c82:	89a3      	ldrh	r3, [r4, #12]
 8007c84:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007c88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c8c:	d003      	beq.n	8007c96 <__swsetup_r+0x9a>
 8007c8e:	4621      	mov	r1, r4
 8007c90:	4630      	mov	r0, r6
 8007c92:	f000 fa07 	bl	80080a4 <__smakebuf_r>
 8007c96:	89a0      	ldrh	r0, [r4, #12]
 8007c98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c9c:	f010 0301 	ands.w	r3, r0, #1
 8007ca0:	d00a      	beq.n	8007cb8 <__swsetup_r+0xbc>
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	60a3      	str	r3, [r4, #8]
 8007ca6:	6963      	ldr	r3, [r4, #20]
 8007ca8:	425b      	negs	r3, r3
 8007caa:	61a3      	str	r3, [r4, #24]
 8007cac:	6923      	ldr	r3, [r4, #16]
 8007cae:	b943      	cbnz	r3, 8007cc2 <__swsetup_r+0xc6>
 8007cb0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007cb4:	d1ba      	bne.n	8007c2c <__swsetup_r+0x30>
 8007cb6:	bd70      	pop	{r4, r5, r6, pc}
 8007cb8:	0781      	lsls	r1, r0, #30
 8007cba:	bf58      	it	pl
 8007cbc:	6963      	ldrpl	r3, [r4, #20]
 8007cbe:	60a3      	str	r3, [r4, #8]
 8007cc0:	e7f4      	b.n	8007cac <__swsetup_r+0xb0>
 8007cc2:	2000      	movs	r0, #0
 8007cc4:	e7f7      	b.n	8007cb6 <__swsetup_r+0xba>
 8007cc6:	bf00      	nop
 8007cc8:	20000014 	.word	0x20000014
 8007ccc:	08009c0c 	.word	0x08009c0c
 8007cd0:	08009c2c 	.word	0x08009c2c
 8007cd4:	08009bec 	.word	0x08009bec

08007cd8 <abort>:
 8007cd8:	b508      	push	{r3, lr}
 8007cda:	2006      	movs	r0, #6
 8007cdc:	f000 fa52 	bl	8008184 <raise>
 8007ce0:	2001      	movs	r0, #1
 8007ce2:	f7fa feb5 	bl	8002a50 <_exit>
	...

08007ce8 <__sflush_r>:
 8007ce8:	898a      	ldrh	r2, [r1, #12]
 8007cea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cee:	4605      	mov	r5, r0
 8007cf0:	0710      	lsls	r0, r2, #28
 8007cf2:	460c      	mov	r4, r1
 8007cf4:	d458      	bmi.n	8007da8 <__sflush_r+0xc0>
 8007cf6:	684b      	ldr	r3, [r1, #4]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	dc05      	bgt.n	8007d08 <__sflush_r+0x20>
 8007cfc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	dc02      	bgt.n	8007d08 <__sflush_r+0x20>
 8007d02:	2000      	movs	r0, #0
 8007d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d0a:	2e00      	cmp	r6, #0
 8007d0c:	d0f9      	beq.n	8007d02 <__sflush_r+0x1a>
 8007d0e:	2300      	movs	r3, #0
 8007d10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007d14:	682f      	ldr	r7, [r5, #0]
 8007d16:	602b      	str	r3, [r5, #0]
 8007d18:	d032      	beq.n	8007d80 <__sflush_r+0x98>
 8007d1a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007d1c:	89a3      	ldrh	r3, [r4, #12]
 8007d1e:	075a      	lsls	r2, r3, #29
 8007d20:	d505      	bpl.n	8007d2e <__sflush_r+0x46>
 8007d22:	6863      	ldr	r3, [r4, #4]
 8007d24:	1ac0      	subs	r0, r0, r3
 8007d26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007d28:	b10b      	cbz	r3, 8007d2e <__sflush_r+0x46>
 8007d2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007d2c:	1ac0      	subs	r0, r0, r3
 8007d2e:	2300      	movs	r3, #0
 8007d30:	4602      	mov	r2, r0
 8007d32:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d34:	6a21      	ldr	r1, [r4, #32]
 8007d36:	4628      	mov	r0, r5
 8007d38:	47b0      	blx	r6
 8007d3a:	1c43      	adds	r3, r0, #1
 8007d3c:	89a3      	ldrh	r3, [r4, #12]
 8007d3e:	d106      	bne.n	8007d4e <__sflush_r+0x66>
 8007d40:	6829      	ldr	r1, [r5, #0]
 8007d42:	291d      	cmp	r1, #29
 8007d44:	d82c      	bhi.n	8007da0 <__sflush_r+0xb8>
 8007d46:	4a2a      	ldr	r2, [pc, #168]	; (8007df0 <__sflush_r+0x108>)
 8007d48:	40ca      	lsrs	r2, r1
 8007d4a:	07d6      	lsls	r6, r2, #31
 8007d4c:	d528      	bpl.n	8007da0 <__sflush_r+0xb8>
 8007d4e:	2200      	movs	r2, #0
 8007d50:	6062      	str	r2, [r4, #4]
 8007d52:	04d9      	lsls	r1, r3, #19
 8007d54:	6922      	ldr	r2, [r4, #16]
 8007d56:	6022      	str	r2, [r4, #0]
 8007d58:	d504      	bpl.n	8007d64 <__sflush_r+0x7c>
 8007d5a:	1c42      	adds	r2, r0, #1
 8007d5c:	d101      	bne.n	8007d62 <__sflush_r+0x7a>
 8007d5e:	682b      	ldr	r3, [r5, #0]
 8007d60:	b903      	cbnz	r3, 8007d64 <__sflush_r+0x7c>
 8007d62:	6560      	str	r0, [r4, #84]	; 0x54
 8007d64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d66:	602f      	str	r7, [r5, #0]
 8007d68:	2900      	cmp	r1, #0
 8007d6a:	d0ca      	beq.n	8007d02 <__sflush_r+0x1a>
 8007d6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d70:	4299      	cmp	r1, r3
 8007d72:	d002      	beq.n	8007d7a <__sflush_r+0x92>
 8007d74:	4628      	mov	r0, r5
 8007d76:	f7ff fae3 	bl	8007340 <_free_r>
 8007d7a:	2000      	movs	r0, #0
 8007d7c:	6360      	str	r0, [r4, #52]	; 0x34
 8007d7e:	e7c1      	b.n	8007d04 <__sflush_r+0x1c>
 8007d80:	6a21      	ldr	r1, [r4, #32]
 8007d82:	2301      	movs	r3, #1
 8007d84:	4628      	mov	r0, r5
 8007d86:	47b0      	blx	r6
 8007d88:	1c41      	adds	r1, r0, #1
 8007d8a:	d1c7      	bne.n	8007d1c <__sflush_r+0x34>
 8007d8c:	682b      	ldr	r3, [r5, #0]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d0c4      	beq.n	8007d1c <__sflush_r+0x34>
 8007d92:	2b1d      	cmp	r3, #29
 8007d94:	d001      	beq.n	8007d9a <__sflush_r+0xb2>
 8007d96:	2b16      	cmp	r3, #22
 8007d98:	d101      	bne.n	8007d9e <__sflush_r+0xb6>
 8007d9a:	602f      	str	r7, [r5, #0]
 8007d9c:	e7b1      	b.n	8007d02 <__sflush_r+0x1a>
 8007d9e:	89a3      	ldrh	r3, [r4, #12]
 8007da0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007da4:	81a3      	strh	r3, [r4, #12]
 8007da6:	e7ad      	b.n	8007d04 <__sflush_r+0x1c>
 8007da8:	690f      	ldr	r7, [r1, #16]
 8007daa:	2f00      	cmp	r7, #0
 8007dac:	d0a9      	beq.n	8007d02 <__sflush_r+0x1a>
 8007dae:	0793      	lsls	r3, r2, #30
 8007db0:	680e      	ldr	r6, [r1, #0]
 8007db2:	bf08      	it	eq
 8007db4:	694b      	ldreq	r3, [r1, #20]
 8007db6:	600f      	str	r7, [r1, #0]
 8007db8:	bf18      	it	ne
 8007dba:	2300      	movne	r3, #0
 8007dbc:	eba6 0807 	sub.w	r8, r6, r7
 8007dc0:	608b      	str	r3, [r1, #8]
 8007dc2:	f1b8 0f00 	cmp.w	r8, #0
 8007dc6:	dd9c      	ble.n	8007d02 <__sflush_r+0x1a>
 8007dc8:	6a21      	ldr	r1, [r4, #32]
 8007dca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007dcc:	4643      	mov	r3, r8
 8007dce:	463a      	mov	r2, r7
 8007dd0:	4628      	mov	r0, r5
 8007dd2:	47b0      	blx	r6
 8007dd4:	2800      	cmp	r0, #0
 8007dd6:	dc06      	bgt.n	8007de6 <__sflush_r+0xfe>
 8007dd8:	89a3      	ldrh	r3, [r4, #12]
 8007dda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007dde:	81a3      	strh	r3, [r4, #12]
 8007de0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007de4:	e78e      	b.n	8007d04 <__sflush_r+0x1c>
 8007de6:	4407      	add	r7, r0
 8007de8:	eba8 0800 	sub.w	r8, r8, r0
 8007dec:	e7e9      	b.n	8007dc2 <__sflush_r+0xda>
 8007dee:	bf00      	nop
 8007df0:	20400001 	.word	0x20400001

08007df4 <_fflush_r>:
 8007df4:	b538      	push	{r3, r4, r5, lr}
 8007df6:	690b      	ldr	r3, [r1, #16]
 8007df8:	4605      	mov	r5, r0
 8007dfa:	460c      	mov	r4, r1
 8007dfc:	b913      	cbnz	r3, 8007e04 <_fflush_r+0x10>
 8007dfe:	2500      	movs	r5, #0
 8007e00:	4628      	mov	r0, r5
 8007e02:	bd38      	pop	{r3, r4, r5, pc}
 8007e04:	b118      	cbz	r0, 8007e0e <_fflush_r+0x1a>
 8007e06:	6983      	ldr	r3, [r0, #24]
 8007e08:	b90b      	cbnz	r3, 8007e0e <_fflush_r+0x1a>
 8007e0a:	f000 f887 	bl	8007f1c <__sinit>
 8007e0e:	4b14      	ldr	r3, [pc, #80]	; (8007e60 <_fflush_r+0x6c>)
 8007e10:	429c      	cmp	r4, r3
 8007e12:	d11b      	bne.n	8007e4c <_fflush_r+0x58>
 8007e14:	686c      	ldr	r4, [r5, #4]
 8007e16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d0ef      	beq.n	8007dfe <_fflush_r+0xa>
 8007e1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007e20:	07d0      	lsls	r0, r2, #31
 8007e22:	d404      	bmi.n	8007e2e <_fflush_r+0x3a>
 8007e24:	0599      	lsls	r1, r3, #22
 8007e26:	d402      	bmi.n	8007e2e <_fflush_r+0x3a>
 8007e28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e2a:	f000 f915 	bl	8008058 <__retarget_lock_acquire_recursive>
 8007e2e:	4628      	mov	r0, r5
 8007e30:	4621      	mov	r1, r4
 8007e32:	f7ff ff59 	bl	8007ce8 <__sflush_r>
 8007e36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e38:	07da      	lsls	r2, r3, #31
 8007e3a:	4605      	mov	r5, r0
 8007e3c:	d4e0      	bmi.n	8007e00 <_fflush_r+0xc>
 8007e3e:	89a3      	ldrh	r3, [r4, #12]
 8007e40:	059b      	lsls	r3, r3, #22
 8007e42:	d4dd      	bmi.n	8007e00 <_fflush_r+0xc>
 8007e44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e46:	f000 f908 	bl	800805a <__retarget_lock_release_recursive>
 8007e4a:	e7d9      	b.n	8007e00 <_fflush_r+0xc>
 8007e4c:	4b05      	ldr	r3, [pc, #20]	; (8007e64 <_fflush_r+0x70>)
 8007e4e:	429c      	cmp	r4, r3
 8007e50:	d101      	bne.n	8007e56 <_fflush_r+0x62>
 8007e52:	68ac      	ldr	r4, [r5, #8]
 8007e54:	e7df      	b.n	8007e16 <_fflush_r+0x22>
 8007e56:	4b04      	ldr	r3, [pc, #16]	; (8007e68 <_fflush_r+0x74>)
 8007e58:	429c      	cmp	r4, r3
 8007e5a:	bf08      	it	eq
 8007e5c:	68ec      	ldreq	r4, [r5, #12]
 8007e5e:	e7da      	b.n	8007e16 <_fflush_r+0x22>
 8007e60:	08009c0c 	.word	0x08009c0c
 8007e64:	08009c2c 	.word	0x08009c2c
 8007e68:	08009bec 	.word	0x08009bec

08007e6c <std>:
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	b510      	push	{r4, lr}
 8007e70:	4604      	mov	r4, r0
 8007e72:	e9c0 3300 	strd	r3, r3, [r0]
 8007e76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e7a:	6083      	str	r3, [r0, #8]
 8007e7c:	8181      	strh	r1, [r0, #12]
 8007e7e:	6643      	str	r3, [r0, #100]	; 0x64
 8007e80:	81c2      	strh	r2, [r0, #14]
 8007e82:	6183      	str	r3, [r0, #24]
 8007e84:	4619      	mov	r1, r3
 8007e86:	2208      	movs	r2, #8
 8007e88:	305c      	adds	r0, #92	; 0x5c
 8007e8a:	f7fd fba5 	bl	80055d8 <memset>
 8007e8e:	4b05      	ldr	r3, [pc, #20]	; (8007ea4 <std+0x38>)
 8007e90:	6263      	str	r3, [r4, #36]	; 0x24
 8007e92:	4b05      	ldr	r3, [pc, #20]	; (8007ea8 <std+0x3c>)
 8007e94:	62a3      	str	r3, [r4, #40]	; 0x28
 8007e96:	4b05      	ldr	r3, [pc, #20]	; (8007eac <std+0x40>)
 8007e98:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007e9a:	4b05      	ldr	r3, [pc, #20]	; (8007eb0 <std+0x44>)
 8007e9c:	6224      	str	r4, [r4, #32]
 8007e9e:	6323      	str	r3, [r4, #48]	; 0x30
 8007ea0:	bd10      	pop	{r4, pc}
 8007ea2:	bf00      	nop
 8007ea4:	080081bd 	.word	0x080081bd
 8007ea8:	080081df 	.word	0x080081df
 8007eac:	08008217 	.word	0x08008217
 8007eb0:	0800823b 	.word	0x0800823b

08007eb4 <_cleanup_r>:
 8007eb4:	4901      	ldr	r1, [pc, #4]	; (8007ebc <_cleanup_r+0x8>)
 8007eb6:	f000 b8af 	b.w	8008018 <_fwalk_reent>
 8007eba:	bf00      	nop
 8007ebc:	08007df5 	.word	0x08007df5

08007ec0 <__sfmoreglue>:
 8007ec0:	b570      	push	{r4, r5, r6, lr}
 8007ec2:	1e4a      	subs	r2, r1, #1
 8007ec4:	2568      	movs	r5, #104	; 0x68
 8007ec6:	4355      	muls	r5, r2
 8007ec8:	460e      	mov	r6, r1
 8007eca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007ece:	f7ff fa87 	bl	80073e0 <_malloc_r>
 8007ed2:	4604      	mov	r4, r0
 8007ed4:	b140      	cbz	r0, 8007ee8 <__sfmoreglue+0x28>
 8007ed6:	2100      	movs	r1, #0
 8007ed8:	e9c0 1600 	strd	r1, r6, [r0]
 8007edc:	300c      	adds	r0, #12
 8007ede:	60a0      	str	r0, [r4, #8]
 8007ee0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007ee4:	f7fd fb78 	bl	80055d8 <memset>
 8007ee8:	4620      	mov	r0, r4
 8007eea:	bd70      	pop	{r4, r5, r6, pc}

08007eec <__sfp_lock_acquire>:
 8007eec:	4801      	ldr	r0, [pc, #4]	; (8007ef4 <__sfp_lock_acquire+0x8>)
 8007eee:	f000 b8b3 	b.w	8008058 <__retarget_lock_acquire_recursive>
 8007ef2:	bf00      	nop
 8007ef4:	200002d8 	.word	0x200002d8

08007ef8 <__sfp_lock_release>:
 8007ef8:	4801      	ldr	r0, [pc, #4]	; (8007f00 <__sfp_lock_release+0x8>)
 8007efa:	f000 b8ae 	b.w	800805a <__retarget_lock_release_recursive>
 8007efe:	bf00      	nop
 8007f00:	200002d8 	.word	0x200002d8

08007f04 <__sinit_lock_acquire>:
 8007f04:	4801      	ldr	r0, [pc, #4]	; (8007f0c <__sinit_lock_acquire+0x8>)
 8007f06:	f000 b8a7 	b.w	8008058 <__retarget_lock_acquire_recursive>
 8007f0a:	bf00      	nop
 8007f0c:	200002d3 	.word	0x200002d3

08007f10 <__sinit_lock_release>:
 8007f10:	4801      	ldr	r0, [pc, #4]	; (8007f18 <__sinit_lock_release+0x8>)
 8007f12:	f000 b8a2 	b.w	800805a <__retarget_lock_release_recursive>
 8007f16:	bf00      	nop
 8007f18:	200002d3 	.word	0x200002d3

08007f1c <__sinit>:
 8007f1c:	b510      	push	{r4, lr}
 8007f1e:	4604      	mov	r4, r0
 8007f20:	f7ff fff0 	bl	8007f04 <__sinit_lock_acquire>
 8007f24:	69a3      	ldr	r3, [r4, #24]
 8007f26:	b11b      	cbz	r3, 8007f30 <__sinit+0x14>
 8007f28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f2c:	f7ff bff0 	b.w	8007f10 <__sinit_lock_release>
 8007f30:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007f34:	6523      	str	r3, [r4, #80]	; 0x50
 8007f36:	4b13      	ldr	r3, [pc, #76]	; (8007f84 <__sinit+0x68>)
 8007f38:	4a13      	ldr	r2, [pc, #76]	; (8007f88 <__sinit+0x6c>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	62a2      	str	r2, [r4, #40]	; 0x28
 8007f3e:	42a3      	cmp	r3, r4
 8007f40:	bf04      	itt	eq
 8007f42:	2301      	moveq	r3, #1
 8007f44:	61a3      	streq	r3, [r4, #24]
 8007f46:	4620      	mov	r0, r4
 8007f48:	f000 f820 	bl	8007f8c <__sfp>
 8007f4c:	6060      	str	r0, [r4, #4]
 8007f4e:	4620      	mov	r0, r4
 8007f50:	f000 f81c 	bl	8007f8c <__sfp>
 8007f54:	60a0      	str	r0, [r4, #8]
 8007f56:	4620      	mov	r0, r4
 8007f58:	f000 f818 	bl	8007f8c <__sfp>
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	60e0      	str	r0, [r4, #12]
 8007f60:	2104      	movs	r1, #4
 8007f62:	6860      	ldr	r0, [r4, #4]
 8007f64:	f7ff ff82 	bl	8007e6c <std>
 8007f68:	68a0      	ldr	r0, [r4, #8]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	2109      	movs	r1, #9
 8007f6e:	f7ff ff7d 	bl	8007e6c <std>
 8007f72:	68e0      	ldr	r0, [r4, #12]
 8007f74:	2202      	movs	r2, #2
 8007f76:	2112      	movs	r1, #18
 8007f78:	f7ff ff78 	bl	8007e6c <std>
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	61a3      	str	r3, [r4, #24]
 8007f80:	e7d2      	b.n	8007f28 <__sinit+0xc>
 8007f82:	bf00      	nop
 8007f84:	0800986c 	.word	0x0800986c
 8007f88:	08007eb5 	.word	0x08007eb5

08007f8c <__sfp>:
 8007f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f8e:	4607      	mov	r7, r0
 8007f90:	f7ff ffac 	bl	8007eec <__sfp_lock_acquire>
 8007f94:	4b1e      	ldr	r3, [pc, #120]	; (8008010 <__sfp+0x84>)
 8007f96:	681e      	ldr	r6, [r3, #0]
 8007f98:	69b3      	ldr	r3, [r6, #24]
 8007f9a:	b913      	cbnz	r3, 8007fa2 <__sfp+0x16>
 8007f9c:	4630      	mov	r0, r6
 8007f9e:	f7ff ffbd 	bl	8007f1c <__sinit>
 8007fa2:	3648      	adds	r6, #72	; 0x48
 8007fa4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007fa8:	3b01      	subs	r3, #1
 8007faa:	d503      	bpl.n	8007fb4 <__sfp+0x28>
 8007fac:	6833      	ldr	r3, [r6, #0]
 8007fae:	b30b      	cbz	r3, 8007ff4 <__sfp+0x68>
 8007fb0:	6836      	ldr	r6, [r6, #0]
 8007fb2:	e7f7      	b.n	8007fa4 <__sfp+0x18>
 8007fb4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007fb8:	b9d5      	cbnz	r5, 8007ff0 <__sfp+0x64>
 8007fba:	4b16      	ldr	r3, [pc, #88]	; (8008014 <__sfp+0x88>)
 8007fbc:	60e3      	str	r3, [r4, #12]
 8007fbe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007fc2:	6665      	str	r5, [r4, #100]	; 0x64
 8007fc4:	f000 f847 	bl	8008056 <__retarget_lock_init_recursive>
 8007fc8:	f7ff ff96 	bl	8007ef8 <__sfp_lock_release>
 8007fcc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007fd0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007fd4:	6025      	str	r5, [r4, #0]
 8007fd6:	61a5      	str	r5, [r4, #24]
 8007fd8:	2208      	movs	r2, #8
 8007fda:	4629      	mov	r1, r5
 8007fdc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007fe0:	f7fd fafa 	bl	80055d8 <memset>
 8007fe4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007fe8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007fec:	4620      	mov	r0, r4
 8007fee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ff0:	3468      	adds	r4, #104	; 0x68
 8007ff2:	e7d9      	b.n	8007fa8 <__sfp+0x1c>
 8007ff4:	2104      	movs	r1, #4
 8007ff6:	4638      	mov	r0, r7
 8007ff8:	f7ff ff62 	bl	8007ec0 <__sfmoreglue>
 8007ffc:	4604      	mov	r4, r0
 8007ffe:	6030      	str	r0, [r6, #0]
 8008000:	2800      	cmp	r0, #0
 8008002:	d1d5      	bne.n	8007fb0 <__sfp+0x24>
 8008004:	f7ff ff78 	bl	8007ef8 <__sfp_lock_release>
 8008008:	230c      	movs	r3, #12
 800800a:	603b      	str	r3, [r7, #0]
 800800c:	e7ee      	b.n	8007fec <__sfp+0x60>
 800800e:	bf00      	nop
 8008010:	0800986c 	.word	0x0800986c
 8008014:	ffff0001 	.word	0xffff0001

08008018 <_fwalk_reent>:
 8008018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800801c:	4606      	mov	r6, r0
 800801e:	4688      	mov	r8, r1
 8008020:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008024:	2700      	movs	r7, #0
 8008026:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800802a:	f1b9 0901 	subs.w	r9, r9, #1
 800802e:	d505      	bpl.n	800803c <_fwalk_reent+0x24>
 8008030:	6824      	ldr	r4, [r4, #0]
 8008032:	2c00      	cmp	r4, #0
 8008034:	d1f7      	bne.n	8008026 <_fwalk_reent+0xe>
 8008036:	4638      	mov	r0, r7
 8008038:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800803c:	89ab      	ldrh	r3, [r5, #12]
 800803e:	2b01      	cmp	r3, #1
 8008040:	d907      	bls.n	8008052 <_fwalk_reent+0x3a>
 8008042:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008046:	3301      	adds	r3, #1
 8008048:	d003      	beq.n	8008052 <_fwalk_reent+0x3a>
 800804a:	4629      	mov	r1, r5
 800804c:	4630      	mov	r0, r6
 800804e:	47c0      	blx	r8
 8008050:	4307      	orrs	r7, r0
 8008052:	3568      	adds	r5, #104	; 0x68
 8008054:	e7e9      	b.n	800802a <_fwalk_reent+0x12>

08008056 <__retarget_lock_init_recursive>:
 8008056:	4770      	bx	lr

08008058 <__retarget_lock_acquire_recursive>:
 8008058:	4770      	bx	lr

0800805a <__retarget_lock_release_recursive>:
 800805a:	4770      	bx	lr

0800805c <__swhatbuf_r>:
 800805c:	b570      	push	{r4, r5, r6, lr}
 800805e:	460e      	mov	r6, r1
 8008060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008064:	2900      	cmp	r1, #0
 8008066:	b096      	sub	sp, #88	; 0x58
 8008068:	4614      	mov	r4, r2
 800806a:	461d      	mov	r5, r3
 800806c:	da07      	bge.n	800807e <__swhatbuf_r+0x22>
 800806e:	2300      	movs	r3, #0
 8008070:	602b      	str	r3, [r5, #0]
 8008072:	89b3      	ldrh	r3, [r6, #12]
 8008074:	061a      	lsls	r2, r3, #24
 8008076:	d410      	bmi.n	800809a <__swhatbuf_r+0x3e>
 8008078:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800807c:	e00e      	b.n	800809c <__swhatbuf_r+0x40>
 800807e:	466a      	mov	r2, sp
 8008080:	f000 f902 	bl	8008288 <_fstat_r>
 8008084:	2800      	cmp	r0, #0
 8008086:	dbf2      	blt.n	800806e <__swhatbuf_r+0x12>
 8008088:	9a01      	ldr	r2, [sp, #4]
 800808a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800808e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008092:	425a      	negs	r2, r3
 8008094:	415a      	adcs	r2, r3
 8008096:	602a      	str	r2, [r5, #0]
 8008098:	e7ee      	b.n	8008078 <__swhatbuf_r+0x1c>
 800809a:	2340      	movs	r3, #64	; 0x40
 800809c:	2000      	movs	r0, #0
 800809e:	6023      	str	r3, [r4, #0]
 80080a0:	b016      	add	sp, #88	; 0x58
 80080a2:	bd70      	pop	{r4, r5, r6, pc}

080080a4 <__smakebuf_r>:
 80080a4:	898b      	ldrh	r3, [r1, #12]
 80080a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80080a8:	079d      	lsls	r5, r3, #30
 80080aa:	4606      	mov	r6, r0
 80080ac:	460c      	mov	r4, r1
 80080ae:	d507      	bpl.n	80080c0 <__smakebuf_r+0x1c>
 80080b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80080b4:	6023      	str	r3, [r4, #0]
 80080b6:	6123      	str	r3, [r4, #16]
 80080b8:	2301      	movs	r3, #1
 80080ba:	6163      	str	r3, [r4, #20]
 80080bc:	b002      	add	sp, #8
 80080be:	bd70      	pop	{r4, r5, r6, pc}
 80080c0:	ab01      	add	r3, sp, #4
 80080c2:	466a      	mov	r2, sp
 80080c4:	f7ff ffca 	bl	800805c <__swhatbuf_r>
 80080c8:	9900      	ldr	r1, [sp, #0]
 80080ca:	4605      	mov	r5, r0
 80080cc:	4630      	mov	r0, r6
 80080ce:	f7ff f987 	bl	80073e0 <_malloc_r>
 80080d2:	b948      	cbnz	r0, 80080e8 <__smakebuf_r+0x44>
 80080d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080d8:	059a      	lsls	r2, r3, #22
 80080da:	d4ef      	bmi.n	80080bc <__smakebuf_r+0x18>
 80080dc:	f023 0303 	bic.w	r3, r3, #3
 80080e0:	f043 0302 	orr.w	r3, r3, #2
 80080e4:	81a3      	strh	r3, [r4, #12]
 80080e6:	e7e3      	b.n	80080b0 <__smakebuf_r+0xc>
 80080e8:	4b0d      	ldr	r3, [pc, #52]	; (8008120 <__smakebuf_r+0x7c>)
 80080ea:	62b3      	str	r3, [r6, #40]	; 0x28
 80080ec:	89a3      	ldrh	r3, [r4, #12]
 80080ee:	6020      	str	r0, [r4, #0]
 80080f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080f4:	81a3      	strh	r3, [r4, #12]
 80080f6:	9b00      	ldr	r3, [sp, #0]
 80080f8:	6163      	str	r3, [r4, #20]
 80080fa:	9b01      	ldr	r3, [sp, #4]
 80080fc:	6120      	str	r0, [r4, #16]
 80080fe:	b15b      	cbz	r3, 8008118 <__smakebuf_r+0x74>
 8008100:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008104:	4630      	mov	r0, r6
 8008106:	f000 f8d1 	bl	80082ac <_isatty_r>
 800810a:	b128      	cbz	r0, 8008118 <__smakebuf_r+0x74>
 800810c:	89a3      	ldrh	r3, [r4, #12]
 800810e:	f023 0303 	bic.w	r3, r3, #3
 8008112:	f043 0301 	orr.w	r3, r3, #1
 8008116:	81a3      	strh	r3, [r4, #12]
 8008118:	89a0      	ldrh	r0, [r4, #12]
 800811a:	4305      	orrs	r5, r0
 800811c:	81a5      	strh	r5, [r4, #12]
 800811e:	e7cd      	b.n	80080bc <__smakebuf_r+0x18>
 8008120:	08007eb5 	.word	0x08007eb5

08008124 <_malloc_usable_size_r>:
 8008124:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008128:	1f18      	subs	r0, r3, #4
 800812a:	2b00      	cmp	r3, #0
 800812c:	bfbc      	itt	lt
 800812e:	580b      	ldrlt	r3, [r1, r0]
 8008130:	18c0      	addlt	r0, r0, r3
 8008132:	4770      	bx	lr

08008134 <_raise_r>:
 8008134:	291f      	cmp	r1, #31
 8008136:	b538      	push	{r3, r4, r5, lr}
 8008138:	4604      	mov	r4, r0
 800813a:	460d      	mov	r5, r1
 800813c:	d904      	bls.n	8008148 <_raise_r+0x14>
 800813e:	2316      	movs	r3, #22
 8008140:	6003      	str	r3, [r0, #0]
 8008142:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008146:	bd38      	pop	{r3, r4, r5, pc}
 8008148:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800814a:	b112      	cbz	r2, 8008152 <_raise_r+0x1e>
 800814c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008150:	b94b      	cbnz	r3, 8008166 <_raise_r+0x32>
 8008152:	4620      	mov	r0, r4
 8008154:	f000 f830 	bl	80081b8 <_getpid_r>
 8008158:	462a      	mov	r2, r5
 800815a:	4601      	mov	r1, r0
 800815c:	4620      	mov	r0, r4
 800815e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008162:	f000 b817 	b.w	8008194 <_kill_r>
 8008166:	2b01      	cmp	r3, #1
 8008168:	d00a      	beq.n	8008180 <_raise_r+0x4c>
 800816a:	1c59      	adds	r1, r3, #1
 800816c:	d103      	bne.n	8008176 <_raise_r+0x42>
 800816e:	2316      	movs	r3, #22
 8008170:	6003      	str	r3, [r0, #0]
 8008172:	2001      	movs	r0, #1
 8008174:	e7e7      	b.n	8008146 <_raise_r+0x12>
 8008176:	2400      	movs	r4, #0
 8008178:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800817c:	4628      	mov	r0, r5
 800817e:	4798      	blx	r3
 8008180:	2000      	movs	r0, #0
 8008182:	e7e0      	b.n	8008146 <_raise_r+0x12>

08008184 <raise>:
 8008184:	4b02      	ldr	r3, [pc, #8]	; (8008190 <raise+0xc>)
 8008186:	4601      	mov	r1, r0
 8008188:	6818      	ldr	r0, [r3, #0]
 800818a:	f7ff bfd3 	b.w	8008134 <_raise_r>
 800818e:	bf00      	nop
 8008190:	20000014 	.word	0x20000014

08008194 <_kill_r>:
 8008194:	b538      	push	{r3, r4, r5, lr}
 8008196:	4d07      	ldr	r5, [pc, #28]	; (80081b4 <_kill_r+0x20>)
 8008198:	2300      	movs	r3, #0
 800819a:	4604      	mov	r4, r0
 800819c:	4608      	mov	r0, r1
 800819e:	4611      	mov	r1, r2
 80081a0:	602b      	str	r3, [r5, #0]
 80081a2:	f7fa fc45 	bl	8002a30 <_kill>
 80081a6:	1c43      	adds	r3, r0, #1
 80081a8:	d102      	bne.n	80081b0 <_kill_r+0x1c>
 80081aa:	682b      	ldr	r3, [r5, #0]
 80081ac:	b103      	cbz	r3, 80081b0 <_kill_r+0x1c>
 80081ae:	6023      	str	r3, [r4, #0]
 80081b0:	bd38      	pop	{r3, r4, r5, pc}
 80081b2:	bf00      	nop
 80081b4:	200002cc 	.word	0x200002cc

080081b8 <_getpid_r>:
 80081b8:	f7fa bc32 	b.w	8002a20 <_getpid>

080081bc <__sread>:
 80081bc:	b510      	push	{r4, lr}
 80081be:	460c      	mov	r4, r1
 80081c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081c4:	f000 f894 	bl	80082f0 <_read_r>
 80081c8:	2800      	cmp	r0, #0
 80081ca:	bfab      	itete	ge
 80081cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80081ce:	89a3      	ldrhlt	r3, [r4, #12]
 80081d0:	181b      	addge	r3, r3, r0
 80081d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80081d6:	bfac      	ite	ge
 80081d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80081da:	81a3      	strhlt	r3, [r4, #12]
 80081dc:	bd10      	pop	{r4, pc}

080081de <__swrite>:
 80081de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081e2:	461f      	mov	r7, r3
 80081e4:	898b      	ldrh	r3, [r1, #12]
 80081e6:	05db      	lsls	r3, r3, #23
 80081e8:	4605      	mov	r5, r0
 80081ea:	460c      	mov	r4, r1
 80081ec:	4616      	mov	r6, r2
 80081ee:	d505      	bpl.n	80081fc <__swrite+0x1e>
 80081f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081f4:	2302      	movs	r3, #2
 80081f6:	2200      	movs	r2, #0
 80081f8:	f000 f868 	bl	80082cc <_lseek_r>
 80081fc:	89a3      	ldrh	r3, [r4, #12]
 80081fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008202:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008206:	81a3      	strh	r3, [r4, #12]
 8008208:	4632      	mov	r2, r6
 800820a:	463b      	mov	r3, r7
 800820c:	4628      	mov	r0, r5
 800820e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008212:	f000 b817 	b.w	8008244 <_write_r>

08008216 <__sseek>:
 8008216:	b510      	push	{r4, lr}
 8008218:	460c      	mov	r4, r1
 800821a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800821e:	f000 f855 	bl	80082cc <_lseek_r>
 8008222:	1c43      	adds	r3, r0, #1
 8008224:	89a3      	ldrh	r3, [r4, #12]
 8008226:	bf15      	itete	ne
 8008228:	6560      	strne	r0, [r4, #84]	; 0x54
 800822a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800822e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008232:	81a3      	strheq	r3, [r4, #12]
 8008234:	bf18      	it	ne
 8008236:	81a3      	strhne	r3, [r4, #12]
 8008238:	bd10      	pop	{r4, pc}

0800823a <__sclose>:
 800823a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800823e:	f000 b813 	b.w	8008268 <_close_r>
	...

08008244 <_write_r>:
 8008244:	b538      	push	{r3, r4, r5, lr}
 8008246:	4d07      	ldr	r5, [pc, #28]	; (8008264 <_write_r+0x20>)
 8008248:	4604      	mov	r4, r0
 800824a:	4608      	mov	r0, r1
 800824c:	4611      	mov	r1, r2
 800824e:	2200      	movs	r2, #0
 8008250:	602a      	str	r2, [r5, #0]
 8008252:	461a      	mov	r2, r3
 8008254:	f7fa fc23 	bl	8002a9e <_write>
 8008258:	1c43      	adds	r3, r0, #1
 800825a:	d102      	bne.n	8008262 <_write_r+0x1e>
 800825c:	682b      	ldr	r3, [r5, #0]
 800825e:	b103      	cbz	r3, 8008262 <_write_r+0x1e>
 8008260:	6023      	str	r3, [r4, #0]
 8008262:	bd38      	pop	{r3, r4, r5, pc}
 8008264:	200002cc 	.word	0x200002cc

08008268 <_close_r>:
 8008268:	b538      	push	{r3, r4, r5, lr}
 800826a:	4d06      	ldr	r5, [pc, #24]	; (8008284 <_close_r+0x1c>)
 800826c:	2300      	movs	r3, #0
 800826e:	4604      	mov	r4, r0
 8008270:	4608      	mov	r0, r1
 8008272:	602b      	str	r3, [r5, #0]
 8008274:	f7fa fc2f 	bl	8002ad6 <_close>
 8008278:	1c43      	adds	r3, r0, #1
 800827a:	d102      	bne.n	8008282 <_close_r+0x1a>
 800827c:	682b      	ldr	r3, [r5, #0]
 800827e:	b103      	cbz	r3, 8008282 <_close_r+0x1a>
 8008280:	6023      	str	r3, [r4, #0]
 8008282:	bd38      	pop	{r3, r4, r5, pc}
 8008284:	200002cc 	.word	0x200002cc

08008288 <_fstat_r>:
 8008288:	b538      	push	{r3, r4, r5, lr}
 800828a:	4d07      	ldr	r5, [pc, #28]	; (80082a8 <_fstat_r+0x20>)
 800828c:	2300      	movs	r3, #0
 800828e:	4604      	mov	r4, r0
 8008290:	4608      	mov	r0, r1
 8008292:	4611      	mov	r1, r2
 8008294:	602b      	str	r3, [r5, #0]
 8008296:	f7fa fc2a 	bl	8002aee <_fstat>
 800829a:	1c43      	adds	r3, r0, #1
 800829c:	d102      	bne.n	80082a4 <_fstat_r+0x1c>
 800829e:	682b      	ldr	r3, [r5, #0]
 80082a0:	b103      	cbz	r3, 80082a4 <_fstat_r+0x1c>
 80082a2:	6023      	str	r3, [r4, #0]
 80082a4:	bd38      	pop	{r3, r4, r5, pc}
 80082a6:	bf00      	nop
 80082a8:	200002cc 	.word	0x200002cc

080082ac <_isatty_r>:
 80082ac:	b538      	push	{r3, r4, r5, lr}
 80082ae:	4d06      	ldr	r5, [pc, #24]	; (80082c8 <_isatty_r+0x1c>)
 80082b0:	2300      	movs	r3, #0
 80082b2:	4604      	mov	r4, r0
 80082b4:	4608      	mov	r0, r1
 80082b6:	602b      	str	r3, [r5, #0]
 80082b8:	f7fa fc29 	bl	8002b0e <_isatty>
 80082bc:	1c43      	adds	r3, r0, #1
 80082be:	d102      	bne.n	80082c6 <_isatty_r+0x1a>
 80082c0:	682b      	ldr	r3, [r5, #0]
 80082c2:	b103      	cbz	r3, 80082c6 <_isatty_r+0x1a>
 80082c4:	6023      	str	r3, [r4, #0]
 80082c6:	bd38      	pop	{r3, r4, r5, pc}
 80082c8:	200002cc 	.word	0x200002cc

080082cc <_lseek_r>:
 80082cc:	b538      	push	{r3, r4, r5, lr}
 80082ce:	4d07      	ldr	r5, [pc, #28]	; (80082ec <_lseek_r+0x20>)
 80082d0:	4604      	mov	r4, r0
 80082d2:	4608      	mov	r0, r1
 80082d4:	4611      	mov	r1, r2
 80082d6:	2200      	movs	r2, #0
 80082d8:	602a      	str	r2, [r5, #0]
 80082da:	461a      	mov	r2, r3
 80082dc:	f7fa fc22 	bl	8002b24 <_lseek>
 80082e0:	1c43      	adds	r3, r0, #1
 80082e2:	d102      	bne.n	80082ea <_lseek_r+0x1e>
 80082e4:	682b      	ldr	r3, [r5, #0]
 80082e6:	b103      	cbz	r3, 80082ea <_lseek_r+0x1e>
 80082e8:	6023      	str	r3, [r4, #0]
 80082ea:	bd38      	pop	{r3, r4, r5, pc}
 80082ec:	200002cc 	.word	0x200002cc

080082f0 <_read_r>:
 80082f0:	b538      	push	{r3, r4, r5, lr}
 80082f2:	4d07      	ldr	r5, [pc, #28]	; (8008310 <_read_r+0x20>)
 80082f4:	4604      	mov	r4, r0
 80082f6:	4608      	mov	r0, r1
 80082f8:	4611      	mov	r1, r2
 80082fa:	2200      	movs	r2, #0
 80082fc:	602a      	str	r2, [r5, #0]
 80082fe:	461a      	mov	r2, r3
 8008300:	f7fa fbb0 	bl	8002a64 <_read>
 8008304:	1c43      	adds	r3, r0, #1
 8008306:	d102      	bne.n	800830e <_read_r+0x1e>
 8008308:	682b      	ldr	r3, [r5, #0]
 800830a:	b103      	cbz	r3, 800830e <_read_r+0x1e>
 800830c:	6023      	str	r3, [r4, #0]
 800830e:	bd38      	pop	{r3, r4, r5, pc}
 8008310:	200002cc 	.word	0x200002cc
 8008314:	00000000 	.word	0x00000000

08008318 <cos>:
 8008318:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800831a:	ec53 2b10 	vmov	r2, r3, d0
 800831e:	4824      	ldr	r0, [pc, #144]	; (80083b0 <cos+0x98>)
 8008320:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008324:	4281      	cmp	r1, r0
 8008326:	dc06      	bgt.n	8008336 <cos+0x1e>
 8008328:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 80083a8 <cos+0x90>
 800832c:	f000 fb48 	bl	80089c0 <__kernel_cos>
 8008330:	ec51 0b10 	vmov	r0, r1, d0
 8008334:	e007      	b.n	8008346 <cos+0x2e>
 8008336:	481f      	ldr	r0, [pc, #124]	; (80083b4 <cos+0x9c>)
 8008338:	4281      	cmp	r1, r0
 800833a:	dd09      	ble.n	8008350 <cos+0x38>
 800833c:	ee10 0a10 	vmov	r0, s0
 8008340:	4619      	mov	r1, r3
 8008342:	f7f7 ffc1 	bl	80002c8 <__aeabi_dsub>
 8008346:	ec41 0b10 	vmov	d0, r0, r1
 800834a:	b005      	add	sp, #20
 800834c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008350:	4668      	mov	r0, sp
 8008352:	f000 f889 	bl	8008468 <__ieee754_rem_pio2>
 8008356:	f000 0003 	and.w	r0, r0, #3
 800835a:	2801      	cmp	r0, #1
 800835c:	d007      	beq.n	800836e <cos+0x56>
 800835e:	2802      	cmp	r0, #2
 8008360:	d012      	beq.n	8008388 <cos+0x70>
 8008362:	b9c0      	cbnz	r0, 8008396 <cos+0x7e>
 8008364:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008368:	ed9d 0b00 	vldr	d0, [sp]
 800836c:	e7de      	b.n	800832c <cos+0x14>
 800836e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008372:	ed9d 0b00 	vldr	d0, [sp]
 8008376:	f000 ff2b 	bl	80091d0 <__kernel_sin>
 800837a:	ec53 2b10 	vmov	r2, r3, d0
 800837e:	ee10 0a10 	vmov	r0, s0
 8008382:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008386:	e7de      	b.n	8008346 <cos+0x2e>
 8008388:	ed9d 1b02 	vldr	d1, [sp, #8]
 800838c:	ed9d 0b00 	vldr	d0, [sp]
 8008390:	f000 fb16 	bl	80089c0 <__kernel_cos>
 8008394:	e7f1      	b.n	800837a <cos+0x62>
 8008396:	ed9d 1b02 	vldr	d1, [sp, #8]
 800839a:	ed9d 0b00 	vldr	d0, [sp]
 800839e:	2001      	movs	r0, #1
 80083a0:	f000 ff16 	bl	80091d0 <__kernel_sin>
 80083a4:	e7c4      	b.n	8008330 <cos+0x18>
 80083a6:	bf00      	nop
	...
 80083b0:	3fe921fb 	.word	0x3fe921fb
 80083b4:	7fefffff 	.word	0x7fefffff

080083b8 <sin>:
 80083b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80083ba:	ec53 2b10 	vmov	r2, r3, d0
 80083be:	4826      	ldr	r0, [pc, #152]	; (8008458 <sin+0xa0>)
 80083c0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80083c4:	4281      	cmp	r1, r0
 80083c6:	dc07      	bgt.n	80083d8 <sin+0x20>
 80083c8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8008450 <sin+0x98>
 80083cc:	2000      	movs	r0, #0
 80083ce:	f000 feff 	bl	80091d0 <__kernel_sin>
 80083d2:	ec51 0b10 	vmov	r0, r1, d0
 80083d6:	e007      	b.n	80083e8 <sin+0x30>
 80083d8:	4820      	ldr	r0, [pc, #128]	; (800845c <sin+0xa4>)
 80083da:	4281      	cmp	r1, r0
 80083dc:	dd09      	ble.n	80083f2 <sin+0x3a>
 80083de:	ee10 0a10 	vmov	r0, s0
 80083e2:	4619      	mov	r1, r3
 80083e4:	f7f7 ff70 	bl	80002c8 <__aeabi_dsub>
 80083e8:	ec41 0b10 	vmov	d0, r0, r1
 80083ec:	b005      	add	sp, #20
 80083ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80083f2:	4668      	mov	r0, sp
 80083f4:	f000 f838 	bl	8008468 <__ieee754_rem_pio2>
 80083f8:	f000 0003 	and.w	r0, r0, #3
 80083fc:	2801      	cmp	r0, #1
 80083fe:	d008      	beq.n	8008412 <sin+0x5a>
 8008400:	2802      	cmp	r0, #2
 8008402:	d00d      	beq.n	8008420 <sin+0x68>
 8008404:	b9d0      	cbnz	r0, 800843c <sin+0x84>
 8008406:	ed9d 1b02 	vldr	d1, [sp, #8]
 800840a:	ed9d 0b00 	vldr	d0, [sp]
 800840e:	2001      	movs	r0, #1
 8008410:	e7dd      	b.n	80083ce <sin+0x16>
 8008412:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008416:	ed9d 0b00 	vldr	d0, [sp]
 800841a:	f000 fad1 	bl	80089c0 <__kernel_cos>
 800841e:	e7d8      	b.n	80083d2 <sin+0x1a>
 8008420:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008424:	ed9d 0b00 	vldr	d0, [sp]
 8008428:	2001      	movs	r0, #1
 800842a:	f000 fed1 	bl	80091d0 <__kernel_sin>
 800842e:	ec53 2b10 	vmov	r2, r3, d0
 8008432:	ee10 0a10 	vmov	r0, s0
 8008436:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800843a:	e7d5      	b.n	80083e8 <sin+0x30>
 800843c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008440:	ed9d 0b00 	vldr	d0, [sp]
 8008444:	f000 fabc 	bl	80089c0 <__kernel_cos>
 8008448:	e7f1      	b.n	800842e <sin+0x76>
 800844a:	bf00      	nop
 800844c:	f3af 8000 	nop.w
	...
 8008458:	3fe921fb 	.word	0x3fe921fb
 800845c:	7fefffff 	.word	0x7fefffff

08008460 <atan2f>:
 8008460:	f000 ba0c 	b.w	800887c <__ieee754_atan2f>
 8008464:	0000      	movs	r0, r0
	...

08008468 <__ieee754_rem_pio2>:
 8008468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800846c:	ed2d 8b02 	vpush	{d8}
 8008470:	ec55 4b10 	vmov	r4, r5, d0
 8008474:	4bca      	ldr	r3, [pc, #808]	; (80087a0 <__ieee754_rem_pio2+0x338>)
 8008476:	b08b      	sub	sp, #44	; 0x2c
 8008478:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800847c:	4598      	cmp	r8, r3
 800847e:	4682      	mov	sl, r0
 8008480:	9502      	str	r5, [sp, #8]
 8008482:	dc08      	bgt.n	8008496 <__ieee754_rem_pio2+0x2e>
 8008484:	2200      	movs	r2, #0
 8008486:	2300      	movs	r3, #0
 8008488:	ed80 0b00 	vstr	d0, [r0]
 800848c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008490:	f04f 0b00 	mov.w	fp, #0
 8008494:	e028      	b.n	80084e8 <__ieee754_rem_pio2+0x80>
 8008496:	4bc3      	ldr	r3, [pc, #780]	; (80087a4 <__ieee754_rem_pio2+0x33c>)
 8008498:	4598      	cmp	r8, r3
 800849a:	dc78      	bgt.n	800858e <__ieee754_rem_pio2+0x126>
 800849c:	9b02      	ldr	r3, [sp, #8]
 800849e:	4ec2      	ldr	r6, [pc, #776]	; (80087a8 <__ieee754_rem_pio2+0x340>)
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	ee10 0a10 	vmov	r0, s0
 80084a6:	a3b0      	add	r3, pc, #704	; (adr r3, 8008768 <__ieee754_rem_pio2+0x300>)
 80084a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ac:	4629      	mov	r1, r5
 80084ae:	dd39      	ble.n	8008524 <__ieee754_rem_pio2+0xbc>
 80084b0:	f7f7 ff0a 	bl	80002c8 <__aeabi_dsub>
 80084b4:	45b0      	cmp	r8, r6
 80084b6:	4604      	mov	r4, r0
 80084b8:	460d      	mov	r5, r1
 80084ba:	d01b      	beq.n	80084f4 <__ieee754_rem_pio2+0x8c>
 80084bc:	a3ac      	add	r3, pc, #688	; (adr r3, 8008770 <__ieee754_rem_pio2+0x308>)
 80084be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c2:	f7f7 ff01 	bl	80002c8 <__aeabi_dsub>
 80084c6:	4602      	mov	r2, r0
 80084c8:	460b      	mov	r3, r1
 80084ca:	e9ca 2300 	strd	r2, r3, [sl]
 80084ce:	4620      	mov	r0, r4
 80084d0:	4629      	mov	r1, r5
 80084d2:	f7f7 fef9 	bl	80002c8 <__aeabi_dsub>
 80084d6:	a3a6      	add	r3, pc, #664	; (adr r3, 8008770 <__ieee754_rem_pio2+0x308>)
 80084d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084dc:	f7f7 fef4 	bl	80002c8 <__aeabi_dsub>
 80084e0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80084e4:	f04f 0b01 	mov.w	fp, #1
 80084e8:	4658      	mov	r0, fp
 80084ea:	b00b      	add	sp, #44	; 0x2c
 80084ec:	ecbd 8b02 	vpop	{d8}
 80084f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084f4:	a3a0      	add	r3, pc, #640	; (adr r3, 8008778 <__ieee754_rem_pio2+0x310>)
 80084f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084fa:	f7f7 fee5 	bl	80002c8 <__aeabi_dsub>
 80084fe:	a3a0      	add	r3, pc, #640	; (adr r3, 8008780 <__ieee754_rem_pio2+0x318>)
 8008500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008504:	4604      	mov	r4, r0
 8008506:	460d      	mov	r5, r1
 8008508:	f7f7 fede 	bl	80002c8 <__aeabi_dsub>
 800850c:	4602      	mov	r2, r0
 800850e:	460b      	mov	r3, r1
 8008510:	e9ca 2300 	strd	r2, r3, [sl]
 8008514:	4620      	mov	r0, r4
 8008516:	4629      	mov	r1, r5
 8008518:	f7f7 fed6 	bl	80002c8 <__aeabi_dsub>
 800851c:	a398      	add	r3, pc, #608	; (adr r3, 8008780 <__ieee754_rem_pio2+0x318>)
 800851e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008522:	e7db      	b.n	80084dc <__ieee754_rem_pio2+0x74>
 8008524:	f7f7 fed2 	bl	80002cc <__adddf3>
 8008528:	45b0      	cmp	r8, r6
 800852a:	4604      	mov	r4, r0
 800852c:	460d      	mov	r5, r1
 800852e:	d016      	beq.n	800855e <__ieee754_rem_pio2+0xf6>
 8008530:	a38f      	add	r3, pc, #572	; (adr r3, 8008770 <__ieee754_rem_pio2+0x308>)
 8008532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008536:	f7f7 fec9 	bl	80002cc <__adddf3>
 800853a:	4602      	mov	r2, r0
 800853c:	460b      	mov	r3, r1
 800853e:	e9ca 2300 	strd	r2, r3, [sl]
 8008542:	4620      	mov	r0, r4
 8008544:	4629      	mov	r1, r5
 8008546:	f7f7 febf 	bl	80002c8 <__aeabi_dsub>
 800854a:	a389      	add	r3, pc, #548	; (adr r3, 8008770 <__ieee754_rem_pio2+0x308>)
 800854c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008550:	f7f7 febc 	bl	80002cc <__adddf3>
 8008554:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8008558:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800855c:	e7c4      	b.n	80084e8 <__ieee754_rem_pio2+0x80>
 800855e:	a386      	add	r3, pc, #536	; (adr r3, 8008778 <__ieee754_rem_pio2+0x310>)
 8008560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008564:	f7f7 feb2 	bl	80002cc <__adddf3>
 8008568:	a385      	add	r3, pc, #532	; (adr r3, 8008780 <__ieee754_rem_pio2+0x318>)
 800856a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800856e:	4604      	mov	r4, r0
 8008570:	460d      	mov	r5, r1
 8008572:	f7f7 feab 	bl	80002cc <__adddf3>
 8008576:	4602      	mov	r2, r0
 8008578:	460b      	mov	r3, r1
 800857a:	e9ca 2300 	strd	r2, r3, [sl]
 800857e:	4620      	mov	r0, r4
 8008580:	4629      	mov	r1, r5
 8008582:	f7f7 fea1 	bl	80002c8 <__aeabi_dsub>
 8008586:	a37e      	add	r3, pc, #504	; (adr r3, 8008780 <__ieee754_rem_pio2+0x318>)
 8008588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800858c:	e7e0      	b.n	8008550 <__ieee754_rem_pio2+0xe8>
 800858e:	4b87      	ldr	r3, [pc, #540]	; (80087ac <__ieee754_rem_pio2+0x344>)
 8008590:	4598      	cmp	r8, r3
 8008592:	f300 80d9 	bgt.w	8008748 <__ieee754_rem_pio2+0x2e0>
 8008596:	f000 fed9 	bl	800934c <fabs>
 800859a:	ec55 4b10 	vmov	r4, r5, d0
 800859e:	ee10 0a10 	vmov	r0, s0
 80085a2:	a379      	add	r3, pc, #484	; (adr r3, 8008788 <__ieee754_rem_pio2+0x320>)
 80085a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a8:	4629      	mov	r1, r5
 80085aa:	f7f8 f845 	bl	8000638 <__aeabi_dmul>
 80085ae:	4b80      	ldr	r3, [pc, #512]	; (80087b0 <__ieee754_rem_pio2+0x348>)
 80085b0:	2200      	movs	r2, #0
 80085b2:	f7f7 fe8b 	bl	80002cc <__adddf3>
 80085b6:	f7f8 faef 	bl	8000b98 <__aeabi_d2iz>
 80085ba:	4683      	mov	fp, r0
 80085bc:	f7f7 ffd2 	bl	8000564 <__aeabi_i2d>
 80085c0:	4602      	mov	r2, r0
 80085c2:	460b      	mov	r3, r1
 80085c4:	ec43 2b18 	vmov	d8, r2, r3
 80085c8:	a367      	add	r3, pc, #412	; (adr r3, 8008768 <__ieee754_rem_pio2+0x300>)
 80085ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ce:	f7f8 f833 	bl	8000638 <__aeabi_dmul>
 80085d2:	4602      	mov	r2, r0
 80085d4:	460b      	mov	r3, r1
 80085d6:	4620      	mov	r0, r4
 80085d8:	4629      	mov	r1, r5
 80085da:	f7f7 fe75 	bl	80002c8 <__aeabi_dsub>
 80085de:	a364      	add	r3, pc, #400	; (adr r3, 8008770 <__ieee754_rem_pio2+0x308>)
 80085e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085e4:	4606      	mov	r6, r0
 80085e6:	460f      	mov	r7, r1
 80085e8:	ec51 0b18 	vmov	r0, r1, d8
 80085ec:	f7f8 f824 	bl	8000638 <__aeabi_dmul>
 80085f0:	f1bb 0f1f 	cmp.w	fp, #31
 80085f4:	4604      	mov	r4, r0
 80085f6:	460d      	mov	r5, r1
 80085f8:	dc0d      	bgt.n	8008616 <__ieee754_rem_pio2+0x1ae>
 80085fa:	4b6e      	ldr	r3, [pc, #440]	; (80087b4 <__ieee754_rem_pio2+0x34c>)
 80085fc:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8008600:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008604:	4543      	cmp	r3, r8
 8008606:	d006      	beq.n	8008616 <__ieee754_rem_pio2+0x1ae>
 8008608:	4622      	mov	r2, r4
 800860a:	462b      	mov	r3, r5
 800860c:	4630      	mov	r0, r6
 800860e:	4639      	mov	r1, r7
 8008610:	f7f7 fe5a 	bl	80002c8 <__aeabi_dsub>
 8008614:	e00f      	b.n	8008636 <__ieee754_rem_pio2+0x1ce>
 8008616:	462b      	mov	r3, r5
 8008618:	4622      	mov	r2, r4
 800861a:	4630      	mov	r0, r6
 800861c:	4639      	mov	r1, r7
 800861e:	f7f7 fe53 	bl	80002c8 <__aeabi_dsub>
 8008622:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008626:	9303      	str	r3, [sp, #12]
 8008628:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800862c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8008630:	f1b8 0f10 	cmp.w	r8, #16
 8008634:	dc02      	bgt.n	800863c <__ieee754_rem_pio2+0x1d4>
 8008636:	e9ca 0100 	strd	r0, r1, [sl]
 800863a:	e039      	b.n	80086b0 <__ieee754_rem_pio2+0x248>
 800863c:	a34e      	add	r3, pc, #312	; (adr r3, 8008778 <__ieee754_rem_pio2+0x310>)
 800863e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008642:	ec51 0b18 	vmov	r0, r1, d8
 8008646:	f7f7 fff7 	bl	8000638 <__aeabi_dmul>
 800864a:	4604      	mov	r4, r0
 800864c:	460d      	mov	r5, r1
 800864e:	4602      	mov	r2, r0
 8008650:	460b      	mov	r3, r1
 8008652:	4630      	mov	r0, r6
 8008654:	4639      	mov	r1, r7
 8008656:	f7f7 fe37 	bl	80002c8 <__aeabi_dsub>
 800865a:	4602      	mov	r2, r0
 800865c:	460b      	mov	r3, r1
 800865e:	4680      	mov	r8, r0
 8008660:	4689      	mov	r9, r1
 8008662:	4630      	mov	r0, r6
 8008664:	4639      	mov	r1, r7
 8008666:	f7f7 fe2f 	bl	80002c8 <__aeabi_dsub>
 800866a:	4622      	mov	r2, r4
 800866c:	462b      	mov	r3, r5
 800866e:	f7f7 fe2b 	bl	80002c8 <__aeabi_dsub>
 8008672:	a343      	add	r3, pc, #268	; (adr r3, 8008780 <__ieee754_rem_pio2+0x318>)
 8008674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008678:	4604      	mov	r4, r0
 800867a:	460d      	mov	r5, r1
 800867c:	ec51 0b18 	vmov	r0, r1, d8
 8008680:	f7f7 ffda 	bl	8000638 <__aeabi_dmul>
 8008684:	4622      	mov	r2, r4
 8008686:	462b      	mov	r3, r5
 8008688:	f7f7 fe1e 	bl	80002c8 <__aeabi_dsub>
 800868c:	4602      	mov	r2, r0
 800868e:	460b      	mov	r3, r1
 8008690:	4604      	mov	r4, r0
 8008692:	460d      	mov	r5, r1
 8008694:	4640      	mov	r0, r8
 8008696:	4649      	mov	r1, r9
 8008698:	f7f7 fe16 	bl	80002c8 <__aeabi_dsub>
 800869c:	9a03      	ldr	r2, [sp, #12]
 800869e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80086a2:	1ad3      	subs	r3, r2, r3
 80086a4:	2b31      	cmp	r3, #49	; 0x31
 80086a6:	dc24      	bgt.n	80086f2 <__ieee754_rem_pio2+0x28a>
 80086a8:	e9ca 0100 	strd	r0, r1, [sl]
 80086ac:	4646      	mov	r6, r8
 80086ae:	464f      	mov	r7, r9
 80086b0:	e9da 8900 	ldrd	r8, r9, [sl]
 80086b4:	4630      	mov	r0, r6
 80086b6:	4642      	mov	r2, r8
 80086b8:	464b      	mov	r3, r9
 80086ba:	4639      	mov	r1, r7
 80086bc:	f7f7 fe04 	bl	80002c8 <__aeabi_dsub>
 80086c0:	462b      	mov	r3, r5
 80086c2:	4622      	mov	r2, r4
 80086c4:	f7f7 fe00 	bl	80002c8 <__aeabi_dsub>
 80086c8:	9b02      	ldr	r3, [sp, #8]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80086d0:	f6bf af0a 	bge.w	80084e8 <__ieee754_rem_pio2+0x80>
 80086d4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80086d8:	f8ca 3004 	str.w	r3, [sl, #4]
 80086dc:	f8ca 8000 	str.w	r8, [sl]
 80086e0:	f8ca 0008 	str.w	r0, [sl, #8]
 80086e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80086e8:	f8ca 300c 	str.w	r3, [sl, #12]
 80086ec:	f1cb 0b00 	rsb	fp, fp, #0
 80086f0:	e6fa      	b.n	80084e8 <__ieee754_rem_pio2+0x80>
 80086f2:	a327      	add	r3, pc, #156	; (adr r3, 8008790 <__ieee754_rem_pio2+0x328>)
 80086f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f8:	ec51 0b18 	vmov	r0, r1, d8
 80086fc:	f7f7 ff9c 	bl	8000638 <__aeabi_dmul>
 8008700:	4604      	mov	r4, r0
 8008702:	460d      	mov	r5, r1
 8008704:	4602      	mov	r2, r0
 8008706:	460b      	mov	r3, r1
 8008708:	4640      	mov	r0, r8
 800870a:	4649      	mov	r1, r9
 800870c:	f7f7 fddc 	bl	80002c8 <__aeabi_dsub>
 8008710:	4602      	mov	r2, r0
 8008712:	460b      	mov	r3, r1
 8008714:	4606      	mov	r6, r0
 8008716:	460f      	mov	r7, r1
 8008718:	4640      	mov	r0, r8
 800871a:	4649      	mov	r1, r9
 800871c:	f7f7 fdd4 	bl	80002c8 <__aeabi_dsub>
 8008720:	4622      	mov	r2, r4
 8008722:	462b      	mov	r3, r5
 8008724:	f7f7 fdd0 	bl	80002c8 <__aeabi_dsub>
 8008728:	a31b      	add	r3, pc, #108	; (adr r3, 8008798 <__ieee754_rem_pio2+0x330>)
 800872a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800872e:	4604      	mov	r4, r0
 8008730:	460d      	mov	r5, r1
 8008732:	ec51 0b18 	vmov	r0, r1, d8
 8008736:	f7f7 ff7f 	bl	8000638 <__aeabi_dmul>
 800873a:	4622      	mov	r2, r4
 800873c:	462b      	mov	r3, r5
 800873e:	f7f7 fdc3 	bl	80002c8 <__aeabi_dsub>
 8008742:	4604      	mov	r4, r0
 8008744:	460d      	mov	r5, r1
 8008746:	e75f      	b.n	8008608 <__ieee754_rem_pio2+0x1a0>
 8008748:	4b1b      	ldr	r3, [pc, #108]	; (80087b8 <__ieee754_rem_pio2+0x350>)
 800874a:	4598      	cmp	r8, r3
 800874c:	dd36      	ble.n	80087bc <__ieee754_rem_pio2+0x354>
 800874e:	ee10 2a10 	vmov	r2, s0
 8008752:	462b      	mov	r3, r5
 8008754:	4620      	mov	r0, r4
 8008756:	4629      	mov	r1, r5
 8008758:	f7f7 fdb6 	bl	80002c8 <__aeabi_dsub>
 800875c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008760:	e9ca 0100 	strd	r0, r1, [sl]
 8008764:	e694      	b.n	8008490 <__ieee754_rem_pio2+0x28>
 8008766:	bf00      	nop
 8008768:	54400000 	.word	0x54400000
 800876c:	3ff921fb 	.word	0x3ff921fb
 8008770:	1a626331 	.word	0x1a626331
 8008774:	3dd0b461 	.word	0x3dd0b461
 8008778:	1a600000 	.word	0x1a600000
 800877c:	3dd0b461 	.word	0x3dd0b461
 8008780:	2e037073 	.word	0x2e037073
 8008784:	3ba3198a 	.word	0x3ba3198a
 8008788:	6dc9c883 	.word	0x6dc9c883
 800878c:	3fe45f30 	.word	0x3fe45f30
 8008790:	2e000000 	.word	0x2e000000
 8008794:	3ba3198a 	.word	0x3ba3198a
 8008798:	252049c1 	.word	0x252049c1
 800879c:	397b839a 	.word	0x397b839a
 80087a0:	3fe921fb 	.word	0x3fe921fb
 80087a4:	4002d97b 	.word	0x4002d97b
 80087a8:	3ff921fb 	.word	0x3ff921fb
 80087ac:	413921fb 	.word	0x413921fb
 80087b0:	3fe00000 	.word	0x3fe00000
 80087b4:	08009c4c 	.word	0x08009c4c
 80087b8:	7fefffff 	.word	0x7fefffff
 80087bc:	ea4f 5428 	mov.w	r4, r8, asr #20
 80087c0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80087c4:	ee10 0a10 	vmov	r0, s0
 80087c8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80087cc:	ee10 6a10 	vmov	r6, s0
 80087d0:	460f      	mov	r7, r1
 80087d2:	f7f8 f9e1 	bl	8000b98 <__aeabi_d2iz>
 80087d6:	f7f7 fec5 	bl	8000564 <__aeabi_i2d>
 80087da:	4602      	mov	r2, r0
 80087dc:	460b      	mov	r3, r1
 80087de:	4630      	mov	r0, r6
 80087e0:	4639      	mov	r1, r7
 80087e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80087e6:	f7f7 fd6f 	bl	80002c8 <__aeabi_dsub>
 80087ea:	4b22      	ldr	r3, [pc, #136]	; (8008874 <__ieee754_rem_pio2+0x40c>)
 80087ec:	2200      	movs	r2, #0
 80087ee:	f7f7 ff23 	bl	8000638 <__aeabi_dmul>
 80087f2:	460f      	mov	r7, r1
 80087f4:	4606      	mov	r6, r0
 80087f6:	f7f8 f9cf 	bl	8000b98 <__aeabi_d2iz>
 80087fa:	f7f7 feb3 	bl	8000564 <__aeabi_i2d>
 80087fe:	4602      	mov	r2, r0
 8008800:	460b      	mov	r3, r1
 8008802:	4630      	mov	r0, r6
 8008804:	4639      	mov	r1, r7
 8008806:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800880a:	f7f7 fd5d 	bl	80002c8 <__aeabi_dsub>
 800880e:	4b19      	ldr	r3, [pc, #100]	; (8008874 <__ieee754_rem_pio2+0x40c>)
 8008810:	2200      	movs	r2, #0
 8008812:	f7f7 ff11 	bl	8000638 <__aeabi_dmul>
 8008816:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800881a:	ad04      	add	r5, sp, #16
 800881c:	f04f 0803 	mov.w	r8, #3
 8008820:	46a9      	mov	r9, r5
 8008822:	2600      	movs	r6, #0
 8008824:	2700      	movs	r7, #0
 8008826:	4632      	mov	r2, r6
 8008828:	463b      	mov	r3, r7
 800882a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800882e:	46c3      	mov	fp, r8
 8008830:	3d08      	subs	r5, #8
 8008832:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8008836:	f7f8 f967 	bl	8000b08 <__aeabi_dcmpeq>
 800883a:	2800      	cmp	r0, #0
 800883c:	d1f3      	bne.n	8008826 <__ieee754_rem_pio2+0x3be>
 800883e:	4b0e      	ldr	r3, [pc, #56]	; (8008878 <__ieee754_rem_pio2+0x410>)
 8008840:	9301      	str	r3, [sp, #4]
 8008842:	2302      	movs	r3, #2
 8008844:	9300      	str	r3, [sp, #0]
 8008846:	4622      	mov	r2, r4
 8008848:	465b      	mov	r3, fp
 800884a:	4651      	mov	r1, sl
 800884c:	4648      	mov	r0, r9
 800884e:	f000 f97f 	bl	8008b50 <__kernel_rem_pio2>
 8008852:	9b02      	ldr	r3, [sp, #8]
 8008854:	2b00      	cmp	r3, #0
 8008856:	4683      	mov	fp, r0
 8008858:	f6bf ae46 	bge.w	80084e8 <__ieee754_rem_pio2+0x80>
 800885c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8008860:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008864:	f8ca 3004 	str.w	r3, [sl, #4]
 8008868:	f8da 300c 	ldr.w	r3, [sl, #12]
 800886c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008870:	e73a      	b.n	80086e8 <__ieee754_rem_pio2+0x280>
 8008872:	bf00      	nop
 8008874:	41700000 	.word	0x41700000
 8008878:	08009ccc 	.word	0x08009ccc

0800887c <__ieee754_atan2f>:
 800887c:	ee10 2a90 	vmov	r2, s1
 8008880:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8008884:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8008888:	b510      	push	{r4, lr}
 800888a:	eef0 7a40 	vmov.f32	s15, s0
 800888e:	dc06      	bgt.n	800889e <__ieee754_atan2f+0x22>
 8008890:	ee10 0a10 	vmov	r0, s0
 8008894:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8008898:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800889c:	dd04      	ble.n	80088a8 <__ieee754_atan2f+0x2c>
 800889e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80088a2:	eeb0 0a67 	vmov.f32	s0, s15
 80088a6:	bd10      	pop	{r4, pc}
 80088a8:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80088ac:	d103      	bne.n	80088b6 <__ieee754_atan2f+0x3a>
 80088ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088b2:	f000 be5b 	b.w	800956c <atanf>
 80088b6:	1794      	asrs	r4, r2, #30
 80088b8:	f004 0402 	and.w	r4, r4, #2
 80088bc:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80088c0:	b943      	cbnz	r3, 80088d4 <__ieee754_atan2f+0x58>
 80088c2:	2c02      	cmp	r4, #2
 80088c4:	d05e      	beq.n	8008984 <__ieee754_atan2f+0x108>
 80088c6:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8008998 <__ieee754_atan2f+0x11c>
 80088ca:	2c03      	cmp	r4, #3
 80088cc:	bf08      	it	eq
 80088ce:	eef0 7a47 	vmoveq.f32	s15, s14
 80088d2:	e7e6      	b.n	80088a2 <__ieee754_atan2f+0x26>
 80088d4:	b941      	cbnz	r1, 80088e8 <__ieee754_atan2f+0x6c>
 80088d6:	eddf 7a31 	vldr	s15, [pc, #196]	; 800899c <__ieee754_atan2f+0x120>
 80088da:	ed9f 0a31 	vldr	s0, [pc, #196]	; 80089a0 <__ieee754_atan2f+0x124>
 80088de:	2800      	cmp	r0, #0
 80088e0:	bfb8      	it	lt
 80088e2:	eef0 7a40 	vmovlt.f32	s15, s0
 80088e6:	e7dc      	b.n	80088a2 <__ieee754_atan2f+0x26>
 80088e8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80088ec:	d110      	bne.n	8008910 <__ieee754_atan2f+0x94>
 80088ee:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80088f2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80088f6:	d107      	bne.n	8008908 <__ieee754_atan2f+0x8c>
 80088f8:	2c02      	cmp	r4, #2
 80088fa:	d846      	bhi.n	800898a <__ieee754_atan2f+0x10e>
 80088fc:	4b29      	ldr	r3, [pc, #164]	; (80089a4 <__ieee754_atan2f+0x128>)
 80088fe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008902:	edd4 7a00 	vldr	s15, [r4]
 8008906:	e7cc      	b.n	80088a2 <__ieee754_atan2f+0x26>
 8008908:	2c02      	cmp	r4, #2
 800890a:	d841      	bhi.n	8008990 <__ieee754_atan2f+0x114>
 800890c:	4b26      	ldr	r3, [pc, #152]	; (80089a8 <__ieee754_atan2f+0x12c>)
 800890e:	e7f6      	b.n	80088fe <__ieee754_atan2f+0x82>
 8008910:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008914:	d0df      	beq.n	80088d6 <__ieee754_atan2f+0x5a>
 8008916:	1a5b      	subs	r3, r3, r1
 8008918:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800891c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8008920:	da1a      	bge.n	8008958 <__ieee754_atan2f+0xdc>
 8008922:	2a00      	cmp	r2, #0
 8008924:	da01      	bge.n	800892a <__ieee754_atan2f+0xae>
 8008926:	313c      	adds	r1, #60	; 0x3c
 8008928:	db19      	blt.n	800895e <__ieee754_atan2f+0xe2>
 800892a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800892e:	f000 fef1 	bl	8009714 <fabsf>
 8008932:	f000 fe1b 	bl	800956c <atanf>
 8008936:	eef0 7a40 	vmov.f32	s15, s0
 800893a:	2c01      	cmp	r4, #1
 800893c:	d012      	beq.n	8008964 <__ieee754_atan2f+0xe8>
 800893e:	2c02      	cmp	r4, #2
 8008940:	d017      	beq.n	8008972 <__ieee754_atan2f+0xf6>
 8008942:	2c00      	cmp	r4, #0
 8008944:	d0ad      	beq.n	80088a2 <__ieee754_atan2f+0x26>
 8008946:	ed9f 0a19 	vldr	s0, [pc, #100]	; 80089ac <__ieee754_atan2f+0x130>
 800894a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800894e:	ed9f 0a18 	vldr	s0, [pc, #96]	; 80089b0 <__ieee754_atan2f+0x134>
 8008952:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008956:	e7a4      	b.n	80088a2 <__ieee754_atan2f+0x26>
 8008958:	eddf 7a10 	vldr	s15, [pc, #64]	; 800899c <__ieee754_atan2f+0x120>
 800895c:	e7ed      	b.n	800893a <__ieee754_atan2f+0xbe>
 800895e:	eddf 7a15 	vldr	s15, [pc, #84]	; 80089b4 <__ieee754_atan2f+0x138>
 8008962:	e7ea      	b.n	800893a <__ieee754_atan2f+0xbe>
 8008964:	ee17 3a90 	vmov	r3, s15
 8008968:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800896c:	ee07 3a90 	vmov	s15, r3
 8008970:	e797      	b.n	80088a2 <__ieee754_atan2f+0x26>
 8008972:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80089ac <__ieee754_atan2f+0x130>
 8008976:	ee77 7a80 	vadd.f32	s15, s15, s0
 800897a:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80089b0 <__ieee754_atan2f+0x134>
 800897e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8008982:	e78e      	b.n	80088a2 <__ieee754_atan2f+0x26>
 8008984:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80089b0 <__ieee754_atan2f+0x134>
 8008988:	e78b      	b.n	80088a2 <__ieee754_atan2f+0x26>
 800898a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80089b8 <__ieee754_atan2f+0x13c>
 800898e:	e788      	b.n	80088a2 <__ieee754_atan2f+0x26>
 8008990:	eddf 7a08 	vldr	s15, [pc, #32]	; 80089b4 <__ieee754_atan2f+0x138>
 8008994:	e785      	b.n	80088a2 <__ieee754_atan2f+0x26>
 8008996:	bf00      	nop
 8008998:	c0490fdb 	.word	0xc0490fdb
 800899c:	3fc90fdb 	.word	0x3fc90fdb
 80089a0:	bfc90fdb 	.word	0xbfc90fdb
 80089a4:	08009dd4 	.word	0x08009dd4
 80089a8:	08009de0 	.word	0x08009de0
 80089ac:	33bbbd2e 	.word	0x33bbbd2e
 80089b0:	40490fdb 	.word	0x40490fdb
 80089b4:	00000000 	.word	0x00000000
 80089b8:	3f490fdb 	.word	0x3f490fdb
 80089bc:	00000000 	.word	0x00000000

080089c0 <__kernel_cos>:
 80089c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089c4:	ec57 6b10 	vmov	r6, r7, d0
 80089c8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80089cc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80089d0:	ed8d 1b00 	vstr	d1, [sp]
 80089d4:	da07      	bge.n	80089e6 <__kernel_cos+0x26>
 80089d6:	ee10 0a10 	vmov	r0, s0
 80089da:	4639      	mov	r1, r7
 80089dc:	f7f8 f8dc 	bl	8000b98 <__aeabi_d2iz>
 80089e0:	2800      	cmp	r0, #0
 80089e2:	f000 8088 	beq.w	8008af6 <__kernel_cos+0x136>
 80089e6:	4632      	mov	r2, r6
 80089e8:	463b      	mov	r3, r7
 80089ea:	4630      	mov	r0, r6
 80089ec:	4639      	mov	r1, r7
 80089ee:	f7f7 fe23 	bl	8000638 <__aeabi_dmul>
 80089f2:	4b51      	ldr	r3, [pc, #324]	; (8008b38 <__kernel_cos+0x178>)
 80089f4:	2200      	movs	r2, #0
 80089f6:	4604      	mov	r4, r0
 80089f8:	460d      	mov	r5, r1
 80089fa:	f7f7 fe1d 	bl	8000638 <__aeabi_dmul>
 80089fe:	a340      	add	r3, pc, #256	; (adr r3, 8008b00 <__kernel_cos+0x140>)
 8008a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a04:	4682      	mov	sl, r0
 8008a06:	468b      	mov	fp, r1
 8008a08:	4620      	mov	r0, r4
 8008a0a:	4629      	mov	r1, r5
 8008a0c:	f7f7 fe14 	bl	8000638 <__aeabi_dmul>
 8008a10:	a33d      	add	r3, pc, #244	; (adr r3, 8008b08 <__kernel_cos+0x148>)
 8008a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a16:	f7f7 fc59 	bl	80002cc <__adddf3>
 8008a1a:	4622      	mov	r2, r4
 8008a1c:	462b      	mov	r3, r5
 8008a1e:	f7f7 fe0b 	bl	8000638 <__aeabi_dmul>
 8008a22:	a33b      	add	r3, pc, #236	; (adr r3, 8008b10 <__kernel_cos+0x150>)
 8008a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a28:	f7f7 fc4e 	bl	80002c8 <__aeabi_dsub>
 8008a2c:	4622      	mov	r2, r4
 8008a2e:	462b      	mov	r3, r5
 8008a30:	f7f7 fe02 	bl	8000638 <__aeabi_dmul>
 8008a34:	a338      	add	r3, pc, #224	; (adr r3, 8008b18 <__kernel_cos+0x158>)
 8008a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a3a:	f7f7 fc47 	bl	80002cc <__adddf3>
 8008a3e:	4622      	mov	r2, r4
 8008a40:	462b      	mov	r3, r5
 8008a42:	f7f7 fdf9 	bl	8000638 <__aeabi_dmul>
 8008a46:	a336      	add	r3, pc, #216	; (adr r3, 8008b20 <__kernel_cos+0x160>)
 8008a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a4c:	f7f7 fc3c 	bl	80002c8 <__aeabi_dsub>
 8008a50:	4622      	mov	r2, r4
 8008a52:	462b      	mov	r3, r5
 8008a54:	f7f7 fdf0 	bl	8000638 <__aeabi_dmul>
 8008a58:	a333      	add	r3, pc, #204	; (adr r3, 8008b28 <__kernel_cos+0x168>)
 8008a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a5e:	f7f7 fc35 	bl	80002cc <__adddf3>
 8008a62:	4622      	mov	r2, r4
 8008a64:	462b      	mov	r3, r5
 8008a66:	f7f7 fde7 	bl	8000638 <__aeabi_dmul>
 8008a6a:	4622      	mov	r2, r4
 8008a6c:	462b      	mov	r3, r5
 8008a6e:	f7f7 fde3 	bl	8000638 <__aeabi_dmul>
 8008a72:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a76:	4604      	mov	r4, r0
 8008a78:	460d      	mov	r5, r1
 8008a7a:	4630      	mov	r0, r6
 8008a7c:	4639      	mov	r1, r7
 8008a7e:	f7f7 fddb 	bl	8000638 <__aeabi_dmul>
 8008a82:	460b      	mov	r3, r1
 8008a84:	4602      	mov	r2, r0
 8008a86:	4629      	mov	r1, r5
 8008a88:	4620      	mov	r0, r4
 8008a8a:	f7f7 fc1d 	bl	80002c8 <__aeabi_dsub>
 8008a8e:	4b2b      	ldr	r3, [pc, #172]	; (8008b3c <__kernel_cos+0x17c>)
 8008a90:	4598      	cmp	r8, r3
 8008a92:	4606      	mov	r6, r0
 8008a94:	460f      	mov	r7, r1
 8008a96:	dc10      	bgt.n	8008aba <__kernel_cos+0xfa>
 8008a98:	4602      	mov	r2, r0
 8008a9a:	460b      	mov	r3, r1
 8008a9c:	4650      	mov	r0, sl
 8008a9e:	4659      	mov	r1, fp
 8008aa0:	f7f7 fc12 	bl	80002c8 <__aeabi_dsub>
 8008aa4:	460b      	mov	r3, r1
 8008aa6:	4926      	ldr	r1, [pc, #152]	; (8008b40 <__kernel_cos+0x180>)
 8008aa8:	4602      	mov	r2, r0
 8008aaa:	2000      	movs	r0, #0
 8008aac:	f7f7 fc0c 	bl	80002c8 <__aeabi_dsub>
 8008ab0:	ec41 0b10 	vmov	d0, r0, r1
 8008ab4:	b003      	add	sp, #12
 8008ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aba:	4b22      	ldr	r3, [pc, #136]	; (8008b44 <__kernel_cos+0x184>)
 8008abc:	4920      	ldr	r1, [pc, #128]	; (8008b40 <__kernel_cos+0x180>)
 8008abe:	4598      	cmp	r8, r3
 8008ac0:	bfcc      	ite	gt
 8008ac2:	4d21      	ldrgt	r5, [pc, #132]	; (8008b48 <__kernel_cos+0x188>)
 8008ac4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8008ac8:	2400      	movs	r4, #0
 8008aca:	4622      	mov	r2, r4
 8008acc:	462b      	mov	r3, r5
 8008ace:	2000      	movs	r0, #0
 8008ad0:	f7f7 fbfa 	bl	80002c8 <__aeabi_dsub>
 8008ad4:	4622      	mov	r2, r4
 8008ad6:	4680      	mov	r8, r0
 8008ad8:	4689      	mov	r9, r1
 8008ada:	462b      	mov	r3, r5
 8008adc:	4650      	mov	r0, sl
 8008ade:	4659      	mov	r1, fp
 8008ae0:	f7f7 fbf2 	bl	80002c8 <__aeabi_dsub>
 8008ae4:	4632      	mov	r2, r6
 8008ae6:	463b      	mov	r3, r7
 8008ae8:	f7f7 fbee 	bl	80002c8 <__aeabi_dsub>
 8008aec:	4602      	mov	r2, r0
 8008aee:	460b      	mov	r3, r1
 8008af0:	4640      	mov	r0, r8
 8008af2:	4649      	mov	r1, r9
 8008af4:	e7da      	b.n	8008aac <__kernel_cos+0xec>
 8008af6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8008b30 <__kernel_cos+0x170>
 8008afa:	e7db      	b.n	8008ab4 <__kernel_cos+0xf4>
 8008afc:	f3af 8000 	nop.w
 8008b00:	be8838d4 	.word	0xbe8838d4
 8008b04:	bda8fae9 	.word	0xbda8fae9
 8008b08:	bdb4b1c4 	.word	0xbdb4b1c4
 8008b0c:	3e21ee9e 	.word	0x3e21ee9e
 8008b10:	809c52ad 	.word	0x809c52ad
 8008b14:	3e927e4f 	.word	0x3e927e4f
 8008b18:	19cb1590 	.word	0x19cb1590
 8008b1c:	3efa01a0 	.word	0x3efa01a0
 8008b20:	16c15177 	.word	0x16c15177
 8008b24:	3f56c16c 	.word	0x3f56c16c
 8008b28:	5555554c 	.word	0x5555554c
 8008b2c:	3fa55555 	.word	0x3fa55555
 8008b30:	00000000 	.word	0x00000000
 8008b34:	3ff00000 	.word	0x3ff00000
 8008b38:	3fe00000 	.word	0x3fe00000
 8008b3c:	3fd33332 	.word	0x3fd33332
 8008b40:	3ff00000 	.word	0x3ff00000
 8008b44:	3fe90000 	.word	0x3fe90000
 8008b48:	3fd20000 	.word	0x3fd20000
 8008b4c:	00000000 	.word	0x00000000

08008b50 <__kernel_rem_pio2>:
 8008b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b54:	ed2d 8b02 	vpush	{d8}
 8008b58:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8008b5c:	f112 0f14 	cmn.w	r2, #20
 8008b60:	9308      	str	r3, [sp, #32]
 8008b62:	9101      	str	r1, [sp, #4]
 8008b64:	4bc6      	ldr	r3, [pc, #792]	; (8008e80 <__kernel_rem_pio2+0x330>)
 8008b66:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8008b68:	9009      	str	r0, [sp, #36]	; 0x24
 8008b6a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008b6e:	9304      	str	r3, [sp, #16]
 8008b70:	9b08      	ldr	r3, [sp, #32]
 8008b72:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8008b76:	bfa8      	it	ge
 8008b78:	1ed4      	subge	r4, r2, #3
 8008b7a:	9306      	str	r3, [sp, #24]
 8008b7c:	bfb2      	itee	lt
 8008b7e:	2400      	movlt	r4, #0
 8008b80:	2318      	movge	r3, #24
 8008b82:	fb94 f4f3 	sdivge	r4, r4, r3
 8008b86:	f06f 0317 	mvn.w	r3, #23
 8008b8a:	fb04 3303 	mla	r3, r4, r3, r3
 8008b8e:	eb03 0a02 	add.w	sl, r3, r2
 8008b92:	9b04      	ldr	r3, [sp, #16]
 8008b94:	9a06      	ldr	r2, [sp, #24]
 8008b96:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8008e70 <__kernel_rem_pio2+0x320>
 8008b9a:	eb03 0802 	add.w	r8, r3, r2
 8008b9e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8008ba0:	1aa7      	subs	r7, r4, r2
 8008ba2:	ae20      	add	r6, sp, #128	; 0x80
 8008ba4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008ba8:	2500      	movs	r5, #0
 8008baa:	4545      	cmp	r5, r8
 8008bac:	dd18      	ble.n	8008be0 <__kernel_rem_pio2+0x90>
 8008bae:	9b08      	ldr	r3, [sp, #32]
 8008bb0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8008bb4:	aa20      	add	r2, sp, #128	; 0x80
 8008bb6:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8008e70 <__kernel_rem_pio2+0x320>
 8008bba:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8008bbe:	f1c3 0301 	rsb	r3, r3, #1
 8008bc2:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8008bc6:	9307      	str	r3, [sp, #28]
 8008bc8:	9b07      	ldr	r3, [sp, #28]
 8008bca:	9a04      	ldr	r2, [sp, #16]
 8008bcc:	4443      	add	r3, r8
 8008bce:	429a      	cmp	r2, r3
 8008bd0:	db2f      	blt.n	8008c32 <__kernel_rem_pio2+0xe2>
 8008bd2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008bd6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008bda:	462f      	mov	r7, r5
 8008bdc:	2600      	movs	r6, #0
 8008bde:	e01b      	b.n	8008c18 <__kernel_rem_pio2+0xc8>
 8008be0:	42ef      	cmn	r7, r5
 8008be2:	d407      	bmi.n	8008bf4 <__kernel_rem_pio2+0xa4>
 8008be4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008be8:	f7f7 fcbc 	bl	8000564 <__aeabi_i2d>
 8008bec:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008bf0:	3501      	adds	r5, #1
 8008bf2:	e7da      	b.n	8008baa <__kernel_rem_pio2+0x5a>
 8008bf4:	ec51 0b18 	vmov	r0, r1, d8
 8008bf8:	e7f8      	b.n	8008bec <__kernel_rem_pio2+0x9c>
 8008bfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bfe:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008c02:	f7f7 fd19 	bl	8000638 <__aeabi_dmul>
 8008c06:	4602      	mov	r2, r0
 8008c08:	460b      	mov	r3, r1
 8008c0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c0e:	f7f7 fb5d 	bl	80002cc <__adddf3>
 8008c12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c16:	3601      	adds	r6, #1
 8008c18:	9b06      	ldr	r3, [sp, #24]
 8008c1a:	429e      	cmp	r6, r3
 8008c1c:	f1a7 0708 	sub.w	r7, r7, #8
 8008c20:	ddeb      	ble.n	8008bfa <__kernel_rem_pio2+0xaa>
 8008c22:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008c26:	3508      	adds	r5, #8
 8008c28:	ecab 7b02 	vstmia	fp!, {d7}
 8008c2c:	f108 0801 	add.w	r8, r8, #1
 8008c30:	e7ca      	b.n	8008bc8 <__kernel_rem_pio2+0x78>
 8008c32:	9b04      	ldr	r3, [sp, #16]
 8008c34:	aa0c      	add	r2, sp, #48	; 0x30
 8008c36:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008c3a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c3c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8008c3e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008c42:	9c04      	ldr	r4, [sp, #16]
 8008c44:	930a      	str	r3, [sp, #40]	; 0x28
 8008c46:	ab98      	add	r3, sp, #608	; 0x260
 8008c48:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008c4c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8008c50:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8008c54:	f8cd b008 	str.w	fp, [sp, #8]
 8008c58:	4625      	mov	r5, r4
 8008c5a:	2d00      	cmp	r5, #0
 8008c5c:	dc78      	bgt.n	8008d50 <__kernel_rem_pio2+0x200>
 8008c5e:	ec47 6b10 	vmov	d0, r6, r7
 8008c62:	4650      	mov	r0, sl
 8008c64:	f000 fbfc 	bl	8009460 <scalbn>
 8008c68:	ec57 6b10 	vmov	r6, r7, d0
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008c72:	ee10 0a10 	vmov	r0, s0
 8008c76:	4639      	mov	r1, r7
 8008c78:	f7f7 fcde 	bl	8000638 <__aeabi_dmul>
 8008c7c:	ec41 0b10 	vmov	d0, r0, r1
 8008c80:	f000 fb6e 	bl	8009360 <floor>
 8008c84:	4b7f      	ldr	r3, [pc, #508]	; (8008e84 <__kernel_rem_pio2+0x334>)
 8008c86:	ec51 0b10 	vmov	r0, r1, d0
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	f7f7 fcd4 	bl	8000638 <__aeabi_dmul>
 8008c90:	4602      	mov	r2, r0
 8008c92:	460b      	mov	r3, r1
 8008c94:	4630      	mov	r0, r6
 8008c96:	4639      	mov	r1, r7
 8008c98:	f7f7 fb16 	bl	80002c8 <__aeabi_dsub>
 8008c9c:	460f      	mov	r7, r1
 8008c9e:	4606      	mov	r6, r0
 8008ca0:	f7f7 ff7a 	bl	8000b98 <__aeabi_d2iz>
 8008ca4:	9007      	str	r0, [sp, #28]
 8008ca6:	f7f7 fc5d 	bl	8000564 <__aeabi_i2d>
 8008caa:	4602      	mov	r2, r0
 8008cac:	460b      	mov	r3, r1
 8008cae:	4630      	mov	r0, r6
 8008cb0:	4639      	mov	r1, r7
 8008cb2:	f7f7 fb09 	bl	80002c8 <__aeabi_dsub>
 8008cb6:	f1ba 0f00 	cmp.w	sl, #0
 8008cba:	4606      	mov	r6, r0
 8008cbc:	460f      	mov	r7, r1
 8008cbe:	dd70      	ble.n	8008da2 <__kernel_rem_pio2+0x252>
 8008cc0:	1e62      	subs	r2, r4, #1
 8008cc2:	ab0c      	add	r3, sp, #48	; 0x30
 8008cc4:	9d07      	ldr	r5, [sp, #28]
 8008cc6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008cca:	f1ca 0118 	rsb	r1, sl, #24
 8008cce:	fa40 f301 	asr.w	r3, r0, r1
 8008cd2:	441d      	add	r5, r3
 8008cd4:	408b      	lsls	r3, r1
 8008cd6:	1ac0      	subs	r0, r0, r3
 8008cd8:	ab0c      	add	r3, sp, #48	; 0x30
 8008cda:	9507      	str	r5, [sp, #28]
 8008cdc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8008ce0:	f1ca 0317 	rsb	r3, sl, #23
 8008ce4:	fa40 f303 	asr.w	r3, r0, r3
 8008ce8:	9302      	str	r3, [sp, #8]
 8008cea:	9b02      	ldr	r3, [sp, #8]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	dd66      	ble.n	8008dbe <__kernel_rem_pio2+0x26e>
 8008cf0:	9b07      	ldr	r3, [sp, #28]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	3301      	adds	r3, #1
 8008cf6:	9307      	str	r3, [sp, #28]
 8008cf8:	4615      	mov	r5, r2
 8008cfa:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8008cfe:	4294      	cmp	r4, r2
 8008d00:	f300 8099 	bgt.w	8008e36 <__kernel_rem_pio2+0x2e6>
 8008d04:	f1ba 0f00 	cmp.w	sl, #0
 8008d08:	dd07      	ble.n	8008d1a <__kernel_rem_pio2+0x1ca>
 8008d0a:	f1ba 0f01 	cmp.w	sl, #1
 8008d0e:	f000 80a5 	beq.w	8008e5c <__kernel_rem_pio2+0x30c>
 8008d12:	f1ba 0f02 	cmp.w	sl, #2
 8008d16:	f000 80c1 	beq.w	8008e9c <__kernel_rem_pio2+0x34c>
 8008d1a:	9b02      	ldr	r3, [sp, #8]
 8008d1c:	2b02      	cmp	r3, #2
 8008d1e:	d14e      	bne.n	8008dbe <__kernel_rem_pio2+0x26e>
 8008d20:	4632      	mov	r2, r6
 8008d22:	463b      	mov	r3, r7
 8008d24:	4958      	ldr	r1, [pc, #352]	; (8008e88 <__kernel_rem_pio2+0x338>)
 8008d26:	2000      	movs	r0, #0
 8008d28:	f7f7 face 	bl	80002c8 <__aeabi_dsub>
 8008d2c:	4606      	mov	r6, r0
 8008d2e:	460f      	mov	r7, r1
 8008d30:	2d00      	cmp	r5, #0
 8008d32:	d044      	beq.n	8008dbe <__kernel_rem_pio2+0x26e>
 8008d34:	4650      	mov	r0, sl
 8008d36:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8008e78 <__kernel_rem_pio2+0x328>
 8008d3a:	f000 fb91 	bl	8009460 <scalbn>
 8008d3e:	4630      	mov	r0, r6
 8008d40:	4639      	mov	r1, r7
 8008d42:	ec53 2b10 	vmov	r2, r3, d0
 8008d46:	f7f7 fabf 	bl	80002c8 <__aeabi_dsub>
 8008d4a:	4606      	mov	r6, r0
 8008d4c:	460f      	mov	r7, r1
 8008d4e:	e036      	b.n	8008dbe <__kernel_rem_pio2+0x26e>
 8008d50:	4b4e      	ldr	r3, [pc, #312]	; (8008e8c <__kernel_rem_pio2+0x33c>)
 8008d52:	2200      	movs	r2, #0
 8008d54:	4630      	mov	r0, r6
 8008d56:	4639      	mov	r1, r7
 8008d58:	f7f7 fc6e 	bl	8000638 <__aeabi_dmul>
 8008d5c:	f7f7 ff1c 	bl	8000b98 <__aeabi_d2iz>
 8008d60:	f7f7 fc00 	bl	8000564 <__aeabi_i2d>
 8008d64:	4b4a      	ldr	r3, [pc, #296]	; (8008e90 <__kernel_rem_pio2+0x340>)
 8008d66:	2200      	movs	r2, #0
 8008d68:	4680      	mov	r8, r0
 8008d6a:	4689      	mov	r9, r1
 8008d6c:	f7f7 fc64 	bl	8000638 <__aeabi_dmul>
 8008d70:	4602      	mov	r2, r0
 8008d72:	460b      	mov	r3, r1
 8008d74:	4630      	mov	r0, r6
 8008d76:	4639      	mov	r1, r7
 8008d78:	f7f7 faa6 	bl	80002c8 <__aeabi_dsub>
 8008d7c:	f7f7 ff0c 	bl	8000b98 <__aeabi_d2iz>
 8008d80:	9b02      	ldr	r3, [sp, #8]
 8008d82:	f843 0b04 	str.w	r0, [r3], #4
 8008d86:	3d01      	subs	r5, #1
 8008d88:	9302      	str	r3, [sp, #8]
 8008d8a:	ab70      	add	r3, sp, #448	; 0x1c0
 8008d8c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d94:	4640      	mov	r0, r8
 8008d96:	4649      	mov	r1, r9
 8008d98:	f7f7 fa98 	bl	80002cc <__adddf3>
 8008d9c:	4606      	mov	r6, r0
 8008d9e:	460f      	mov	r7, r1
 8008da0:	e75b      	b.n	8008c5a <__kernel_rem_pio2+0x10a>
 8008da2:	d105      	bne.n	8008db0 <__kernel_rem_pio2+0x260>
 8008da4:	1e63      	subs	r3, r4, #1
 8008da6:	aa0c      	add	r2, sp, #48	; 0x30
 8008da8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008dac:	15c3      	asrs	r3, r0, #23
 8008dae:	e79b      	b.n	8008ce8 <__kernel_rem_pio2+0x198>
 8008db0:	4b38      	ldr	r3, [pc, #224]	; (8008e94 <__kernel_rem_pio2+0x344>)
 8008db2:	2200      	movs	r2, #0
 8008db4:	f7f7 fec6 	bl	8000b44 <__aeabi_dcmpge>
 8008db8:	2800      	cmp	r0, #0
 8008dba:	d139      	bne.n	8008e30 <__kernel_rem_pio2+0x2e0>
 8008dbc:	9002      	str	r0, [sp, #8]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	4630      	mov	r0, r6
 8008dc4:	4639      	mov	r1, r7
 8008dc6:	f7f7 fe9f 	bl	8000b08 <__aeabi_dcmpeq>
 8008dca:	2800      	cmp	r0, #0
 8008dcc:	f000 80b4 	beq.w	8008f38 <__kernel_rem_pio2+0x3e8>
 8008dd0:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 8008dd4:	465b      	mov	r3, fp
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	9904      	ldr	r1, [sp, #16]
 8008dda:	428b      	cmp	r3, r1
 8008ddc:	da65      	bge.n	8008eaa <__kernel_rem_pio2+0x35a>
 8008dde:	2a00      	cmp	r2, #0
 8008de0:	d07b      	beq.n	8008eda <__kernel_rem_pio2+0x38a>
 8008de2:	ab0c      	add	r3, sp, #48	; 0x30
 8008de4:	f1aa 0a18 	sub.w	sl, sl, #24
 8008de8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	f000 80a0 	beq.w	8008f32 <__kernel_rem_pio2+0x3e2>
 8008df2:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8008e78 <__kernel_rem_pio2+0x328>
 8008df6:	4650      	mov	r0, sl
 8008df8:	f000 fb32 	bl	8009460 <scalbn>
 8008dfc:	4f23      	ldr	r7, [pc, #140]	; (8008e8c <__kernel_rem_pio2+0x33c>)
 8008dfe:	ec55 4b10 	vmov	r4, r5, d0
 8008e02:	46d8      	mov	r8, fp
 8008e04:	2600      	movs	r6, #0
 8008e06:	f1b8 0f00 	cmp.w	r8, #0
 8008e0a:	f280 80cf 	bge.w	8008fac <__kernel_rem_pio2+0x45c>
 8008e0e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8008e70 <__kernel_rem_pio2+0x320>
 8008e12:	465f      	mov	r7, fp
 8008e14:	f04f 0800 	mov.w	r8, #0
 8008e18:	2f00      	cmp	r7, #0
 8008e1a:	f2c0 80fd 	blt.w	8009018 <__kernel_rem_pio2+0x4c8>
 8008e1e:	ab70      	add	r3, sp, #448	; 0x1c0
 8008e20:	f8df a074 	ldr.w	sl, [pc, #116]	; 8008e98 <__kernel_rem_pio2+0x348>
 8008e24:	ec55 4b18 	vmov	r4, r5, d8
 8008e28:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8008e2c:	2600      	movs	r6, #0
 8008e2e:	e0e5      	b.n	8008ffc <__kernel_rem_pio2+0x4ac>
 8008e30:	2302      	movs	r3, #2
 8008e32:	9302      	str	r3, [sp, #8]
 8008e34:	e75c      	b.n	8008cf0 <__kernel_rem_pio2+0x1a0>
 8008e36:	f8db 3000 	ldr.w	r3, [fp]
 8008e3a:	b955      	cbnz	r5, 8008e52 <__kernel_rem_pio2+0x302>
 8008e3c:	b123      	cbz	r3, 8008e48 <__kernel_rem_pio2+0x2f8>
 8008e3e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8008e42:	f8cb 3000 	str.w	r3, [fp]
 8008e46:	2301      	movs	r3, #1
 8008e48:	3201      	adds	r2, #1
 8008e4a:	f10b 0b04 	add.w	fp, fp, #4
 8008e4e:	461d      	mov	r5, r3
 8008e50:	e755      	b.n	8008cfe <__kernel_rem_pio2+0x1ae>
 8008e52:	1acb      	subs	r3, r1, r3
 8008e54:	f8cb 3000 	str.w	r3, [fp]
 8008e58:	462b      	mov	r3, r5
 8008e5a:	e7f5      	b.n	8008e48 <__kernel_rem_pio2+0x2f8>
 8008e5c:	1e62      	subs	r2, r4, #1
 8008e5e:	ab0c      	add	r3, sp, #48	; 0x30
 8008e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e64:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008e68:	a90c      	add	r1, sp, #48	; 0x30
 8008e6a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008e6e:	e754      	b.n	8008d1a <__kernel_rem_pio2+0x1ca>
	...
 8008e7c:	3ff00000 	.word	0x3ff00000
 8008e80:	08009e30 	.word	0x08009e30
 8008e84:	40200000 	.word	0x40200000
 8008e88:	3ff00000 	.word	0x3ff00000
 8008e8c:	3e700000 	.word	0x3e700000
 8008e90:	41700000 	.word	0x41700000
 8008e94:	3fe00000 	.word	0x3fe00000
 8008e98:	08009df0 	.word	0x08009df0
 8008e9c:	1e62      	subs	r2, r4, #1
 8008e9e:	ab0c      	add	r3, sp, #48	; 0x30
 8008ea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ea4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008ea8:	e7de      	b.n	8008e68 <__kernel_rem_pio2+0x318>
 8008eaa:	a90c      	add	r1, sp, #48	; 0x30
 8008eac:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008eb0:	3b01      	subs	r3, #1
 8008eb2:	430a      	orrs	r2, r1
 8008eb4:	e790      	b.n	8008dd8 <__kernel_rem_pio2+0x288>
 8008eb6:	3301      	adds	r3, #1
 8008eb8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8008ebc:	2900      	cmp	r1, #0
 8008ebe:	d0fa      	beq.n	8008eb6 <__kernel_rem_pio2+0x366>
 8008ec0:	9a08      	ldr	r2, [sp, #32]
 8008ec2:	18e3      	adds	r3, r4, r3
 8008ec4:	18a6      	adds	r6, r4, r2
 8008ec6:	aa20      	add	r2, sp, #128	; 0x80
 8008ec8:	1c65      	adds	r5, r4, #1
 8008eca:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8008ece:	9302      	str	r3, [sp, #8]
 8008ed0:	9b02      	ldr	r3, [sp, #8]
 8008ed2:	42ab      	cmp	r3, r5
 8008ed4:	da04      	bge.n	8008ee0 <__kernel_rem_pio2+0x390>
 8008ed6:	461c      	mov	r4, r3
 8008ed8:	e6b5      	b.n	8008c46 <__kernel_rem_pio2+0xf6>
 8008eda:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008edc:	2301      	movs	r3, #1
 8008ede:	e7eb      	b.n	8008eb8 <__kernel_rem_pio2+0x368>
 8008ee0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ee2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008ee6:	f7f7 fb3d 	bl	8000564 <__aeabi_i2d>
 8008eea:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008eee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ef0:	46b3      	mov	fp, r6
 8008ef2:	461c      	mov	r4, r3
 8008ef4:	2700      	movs	r7, #0
 8008ef6:	f04f 0800 	mov.w	r8, #0
 8008efa:	f04f 0900 	mov.w	r9, #0
 8008efe:	9b06      	ldr	r3, [sp, #24]
 8008f00:	429f      	cmp	r7, r3
 8008f02:	dd06      	ble.n	8008f12 <__kernel_rem_pio2+0x3c2>
 8008f04:	ab70      	add	r3, sp, #448	; 0x1c0
 8008f06:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008f0a:	e9c3 8900 	strd	r8, r9, [r3]
 8008f0e:	3501      	adds	r5, #1
 8008f10:	e7de      	b.n	8008ed0 <__kernel_rem_pio2+0x380>
 8008f12:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8008f16:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8008f1a:	f7f7 fb8d 	bl	8000638 <__aeabi_dmul>
 8008f1e:	4602      	mov	r2, r0
 8008f20:	460b      	mov	r3, r1
 8008f22:	4640      	mov	r0, r8
 8008f24:	4649      	mov	r1, r9
 8008f26:	f7f7 f9d1 	bl	80002cc <__adddf3>
 8008f2a:	3701      	adds	r7, #1
 8008f2c:	4680      	mov	r8, r0
 8008f2e:	4689      	mov	r9, r1
 8008f30:	e7e5      	b.n	8008efe <__kernel_rem_pio2+0x3ae>
 8008f32:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008f36:	e754      	b.n	8008de2 <__kernel_rem_pio2+0x292>
 8008f38:	ec47 6b10 	vmov	d0, r6, r7
 8008f3c:	f1ca 0000 	rsb	r0, sl, #0
 8008f40:	f000 fa8e 	bl	8009460 <scalbn>
 8008f44:	ec57 6b10 	vmov	r6, r7, d0
 8008f48:	4b9f      	ldr	r3, [pc, #636]	; (80091c8 <__kernel_rem_pio2+0x678>)
 8008f4a:	ee10 0a10 	vmov	r0, s0
 8008f4e:	2200      	movs	r2, #0
 8008f50:	4639      	mov	r1, r7
 8008f52:	f7f7 fdf7 	bl	8000b44 <__aeabi_dcmpge>
 8008f56:	b300      	cbz	r0, 8008f9a <__kernel_rem_pio2+0x44a>
 8008f58:	4b9c      	ldr	r3, [pc, #624]	; (80091cc <__kernel_rem_pio2+0x67c>)
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	4630      	mov	r0, r6
 8008f5e:	4639      	mov	r1, r7
 8008f60:	f7f7 fb6a 	bl	8000638 <__aeabi_dmul>
 8008f64:	f7f7 fe18 	bl	8000b98 <__aeabi_d2iz>
 8008f68:	4605      	mov	r5, r0
 8008f6a:	f7f7 fafb 	bl	8000564 <__aeabi_i2d>
 8008f6e:	4b96      	ldr	r3, [pc, #600]	; (80091c8 <__kernel_rem_pio2+0x678>)
 8008f70:	2200      	movs	r2, #0
 8008f72:	f7f7 fb61 	bl	8000638 <__aeabi_dmul>
 8008f76:	460b      	mov	r3, r1
 8008f78:	4602      	mov	r2, r0
 8008f7a:	4639      	mov	r1, r7
 8008f7c:	4630      	mov	r0, r6
 8008f7e:	f7f7 f9a3 	bl	80002c8 <__aeabi_dsub>
 8008f82:	f7f7 fe09 	bl	8000b98 <__aeabi_d2iz>
 8008f86:	f104 0b01 	add.w	fp, r4, #1
 8008f8a:	ab0c      	add	r3, sp, #48	; 0x30
 8008f8c:	f10a 0a18 	add.w	sl, sl, #24
 8008f90:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008f94:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8008f98:	e72b      	b.n	8008df2 <__kernel_rem_pio2+0x2a2>
 8008f9a:	4630      	mov	r0, r6
 8008f9c:	4639      	mov	r1, r7
 8008f9e:	f7f7 fdfb 	bl	8000b98 <__aeabi_d2iz>
 8008fa2:	ab0c      	add	r3, sp, #48	; 0x30
 8008fa4:	46a3      	mov	fp, r4
 8008fa6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008faa:	e722      	b.n	8008df2 <__kernel_rem_pio2+0x2a2>
 8008fac:	ab70      	add	r3, sp, #448	; 0x1c0
 8008fae:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8008fb2:	ab0c      	add	r3, sp, #48	; 0x30
 8008fb4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8008fb8:	f7f7 fad4 	bl	8000564 <__aeabi_i2d>
 8008fbc:	4622      	mov	r2, r4
 8008fbe:	462b      	mov	r3, r5
 8008fc0:	f7f7 fb3a 	bl	8000638 <__aeabi_dmul>
 8008fc4:	4632      	mov	r2, r6
 8008fc6:	e9c9 0100 	strd	r0, r1, [r9]
 8008fca:	463b      	mov	r3, r7
 8008fcc:	4620      	mov	r0, r4
 8008fce:	4629      	mov	r1, r5
 8008fd0:	f7f7 fb32 	bl	8000638 <__aeabi_dmul>
 8008fd4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8008fd8:	4604      	mov	r4, r0
 8008fda:	460d      	mov	r5, r1
 8008fdc:	e713      	b.n	8008e06 <__kernel_rem_pio2+0x2b6>
 8008fde:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8008fe2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8008fe6:	f7f7 fb27 	bl	8000638 <__aeabi_dmul>
 8008fea:	4602      	mov	r2, r0
 8008fec:	460b      	mov	r3, r1
 8008fee:	4620      	mov	r0, r4
 8008ff0:	4629      	mov	r1, r5
 8008ff2:	f7f7 f96b 	bl	80002cc <__adddf3>
 8008ff6:	3601      	adds	r6, #1
 8008ff8:	4604      	mov	r4, r0
 8008ffa:	460d      	mov	r5, r1
 8008ffc:	9b04      	ldr	r3, [sp, #16]
 8008ffe:	429e      	cmp	r6, r3
 8009000:	dc01      	bgt.n	8009006 <__kernel_rem_pio2+0x4b6>
 8009002:	45b0      	cmp	r8, r6
 8009004:	daeb      	bge.n	8008fde <__kernel_rem_pio2+0x48e>
 8009006:	ab48      	add	r3, sp, #288	; 0x120
 8009008:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800900c:	e9c3 4500 	strd	r4, r5, [r3]
 8009010:	3f01      	subs	r7, #1
 8009012:	f108 0801 	add.w	r8, r8, #1
 8009016:	e6ff      	b.n	8008e18 <__kernel_rem_pio2+0x2c8>
 8009018:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800901a:	2b02      	cmp	r3, #2
 800901c:	dc0b      	bgt.n	8009036 <__kernel_rem_pio2+0x4e6>
 800901e:	2b00      	cmp	r3, #0
 8009020:	dc6e      	bgt.n	8009100 <__kernel_rem_pio2+0x5b0>
 8009022:	d045      	beq.n	80090b0 <__kernel_rem_pio2+0x560>
 8009024:	9b07      	ldr	r3, [sp, #28]
 8009026:	f003 0007 	and.w	r0, r3, #7
 800902a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800902e:	ecbd 8b02 	vpop	{d8}
 8009032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009036:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8009038:	2b03      	cmp	r3, #3
 800903a:	d1f3      	bne.n	8009024 <__kernel_rem_pio2+0x4d4>
 800903c:	ab48      	add	r3, sp, #288	; 0x120
 800903e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8009042:	46d0      	mov	r8, sl
 8009044:	46d9      	mov	r9, fp
 8009046:	f1b9 0f00 	cmp.w	r9, #0
 800904a:	f1a8 0808 	sub.w	r8, r8, #8
 800904e:	dc64      	bgt.n	800911a <__kernel_rem_pio2+0x5ca>
 8009050:	465c      	mov	r4, fp
 8009052:	2c01      	cmp	r4, #1
 8009054:	f1aa 0a08 	sub.w	sl, sl, #8
 8009058:	dc7e      	bgt.n	8009158 <__kernel_rem_pio2+0x608>
 800905a:	2000      	movs	r0, #0
 800905c:	2100      	movs	r1, #0
 800905e:	f1bb 0f01 	cmp.w	fp, #1
 8009062:	f300 8097 	bgt.w	8009194 <__kernel_rem_pio2+0x644>
 8009066:	9b02      	ldr	r3, [sp, #8]
 8009068:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800906c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8009070:	2b00      	cmp	r3, #0
 8009072:	f040 8099 	bne.w	80091a8 <__kernel_rem_pio2+0x658>
 8009076:	9b01      	ldr	r3, [sp, #4]
 8009078:	e9c3 5600 	strd	r5, r6, [r3]
 800907c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8009080:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8009084:	e7ce      	b.n	8009024 <__kernel_rem_pio2+0x4d4>
 8009086:	ab48      	add	r3, sp, #288	; 0x120
 8009088:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800908c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009090:	f7f7 f91c 	bl	80002cc <__adddf3>
 8009094:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009098:	f1bb 0f00 	cmp.w	fp, #0
 800909c:	daf3      	bge.n	8009086 <__kernel_rem_pio2+0x536>
 800909e:	9b02      	ldr	r3, [sp, #8]
 80090a0:	b113      	cbz	r3, 80090a8 <__kernel_rem_pio2+0x558>
 80090a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80090a6:	4619      	mov	r1, r3
 80090a8:	9b01      	ldr	r3, [sp, #4]
 80090aa:	e9c3 0100 	strd	r0, r1, [r3]
 80090ae:	e7b9      	b.n	8009024 <__kernel_rem_pio2+0x4d4>
 80090b0:	2000      	movs	r0, #0
 80090b2:	2100      	movs	r1, #0
 80090b4:	e7f0      	b.n	8009098 <__kernel_rem_pio2+0x548>
 80090b6:	ab48      	add	r3, sp, #288	; 0x120
 80090b8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80090bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090c0:	f7f7 f904 	bl	80002cc <__adddf3>
 80090c4:	3c01      	subs	r4, #1
 80090c6:	2c00      	cmp	r4, #0
 80090c8:	daf5      	bge.n	80090b6 <__kernel_rem_pio2+0x566>
 80090ca:	9b02      	ldr	r3, [sp, #8]
 80090cc:	b1e3      	cbz	r3, 8009108 <__kernel_rem_pio2+0x5b8>
 80090ce:	4602      	mov	r2, r0
 80090d0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80090d4:	9c01      	ldr	r4, [sp, #4]
 80090d6:	e9c4 2300 	strd	r2, r3, [r4]
 80090da:	4602      	mov	r2, r0
 80090dc:	460b      	mov	r3, r1
 80090de:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80090e2:	f7f7 f8f1 	bl	80002c8 <__aeabi_dsub>
 80090e6:	ad4a      	add	r5, sp, #296	; 0x128
 80090e8:	2401      	movs	r4, #1
 80090ea:	45a3      	cmp	fp, r4
 80090ec:	da0f      	bge.n	800910e <__kernel_rem_pio2+0x5be>
 80090ee:	9b02      	ldr	r3, [sp, #8]
 80090f0:	b113      	cbz	r3, 80090f8 <__kernel_rem_pio2+0x5a8>
 80090f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80090f6:	4619      	mov	r1, r3
 80090f8:	9b01      	ldr	r3, [sp, #4]
 80090fa:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80090fe:	e791      	b.n	8009024 <__kernel_rem_pio2+0x4d4>
 8009100:	465c      	mov	r4, fp
 8009102:	2000      	movs	r0, #0
 8009104:	2100      	movs	r1, #0
 8009106:	e7de      	b.n	80090c6 <__kernel_rem_pio2+0x576>
 8009108:	4602      	mov	r2, r0
 800910a:	460b      	mov	r3, r1
 800910c:	e7e2      	b.n	80090d4 <__kernel_rem_pio2+0x584>
 800910e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8009112:	f7f7 f8db 	bl	80002cc <__adddf3>
 8009116:	3401      	adds	r4, #1
 8009118:	e7e7      	b.n	80090ea <__kernel_rem_pio2+0x59a>
 800911a:	e9d8 4500 	ldrd	r4, r5, [r8]
 800911e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 8009122:	4620      	mov	r0, r4
 8009124:	4632      	mov	r2, r6
 8009126:	463b      	mov	r3, r7
 8009128:	4629      	mov	r1, r5
 800912a:	f7f7 f8cf 	bl	80002cc <__adddf3>
 800912e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009132:	4602      	mov	r2, r0
 8009134:	460b      	mov	r3, r1
 8009136:	4620      	mov	r0, r4
 8009138:	4629      	mov	r1, r5
 800913a:	f7f7 f8c5 	bl	80002c8 <__aeabi_dsub>
 800913e:	4632      	mov	r2, r6
 8009140:	463b      	mov	r3, r7
 8009142:	f7f7 f8c3 	bl	80002cc <__adddf3>
 8009146:	ed9d 7b04 	vldr	d7, [sp, #16]
 800914a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800914e:	ed88 7b00 	vstr	d7, [r8]
 8009152:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8009156:	e776      	b.n	8009046 <__kernel_rem_pio2+0x4f6>
 8009158:	e9da 8900 	ldrd	r8, r9, [sl]
 800915c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8009160:	4640      	mov	r0, r8
 8009162:	4632      	mov	r2, r6
 8009164:	463b      	mov	r3, r7
 8009166:	4649      	mov	r1, r9
 8009168:	f7f7 f8b0 	bl	80002cc <__adddf3>
 800916c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009170:	4602      	mov	r2, r0
 8009172:	460b      	mov	r3, r1
 8009174:	4640      	mov	r0, r8
 8009176:	4649      	mov	r1, r9
 8009178:	f7f7 f8a6 	bl	80002c8 <__aeabi_dsub>
 800917c:	4632      	mov	r2, r6
 800917e:	463b      	mov	r3, r7
 8009180:	f7f7 f8a4 	bl	80002cc <__adddf3>
 8009184:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009188:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800918c:	ed8a 7b00 	vstr	d7, [sl]
 8009190:	3c01      	subs	r4, #1
 8009192:	e75e      	b.n	8009052 <__kernel_rem_pio2+0x502>
 8009194:	ab48      	add	r3, sp, #288	; 0x120
 8009196:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800919a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800919e:	f7f7 f895 	bl	80002cc <__adddf3>
 80091a2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80091a6:	e75a      	b.n	800905e <__kernel_rem_pio2+0x50e>
 80091a8:	9b01      	ldr	r3, [sp, #4]
 80091aa:	9a01      	ldr	r2, [sp, #4]
 80091ac:	601d      	str	r5, [r3, #0]
 80091ae:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80091b2:	605c      	str	r4, [r3, #4]
 80091b4:	609f      	str	r7, [r3, #8]
 80091b6:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80091ba:	60d3      	str	r3, [r2, #12]
 80091bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80091c0:	6110      	str	r0, [r2, #16]
 80091c2:	6153      	str	r3, [r2, #20]
 80091c4:	e72e      	b.n	8009024 <__kernel_rem_pio2+0x4d4>
 80091c6:	bf00      	nop
 80091c8:	41700000 	.word	0x41700000
 80091cc:	3e700000 	.word	0x3e700000

080091d0 <__kernel_sin>:
 80091d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091d4:	ed2d 8b04 	vpush	{d8-d9}
 80091d8:	eeb0 8a41 	vmov.f32	s16, s2
 80091dc:	eef0 8a61 	vmov.f32	s17, s3
 80091e0:	ec55 4b10 	vmov	r4, r5, d0
 80091e4:	b083      	sub	sp, #12
 80091e6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80091ea:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80091ee:	9001      	str	r0, [sp, #4]
 80091f0:	da06      	bge.n	8009200 <__kernel_sin+0x30>
 80091f2:	ee10 0a10 	vmov	r0, s0
 80091f6:	4629      	mov	r1, r5
 80091f8:	f7f7 fcce 	bl	8000b98 <__aeabi_d2iz>
 80091fc:	2800      	cmp	r0, #0
 80091fe:	d051      	beq.n	80092a4 <__kernel_sin+0xd4>
 8009200:	4622      	mov	r2, r4
 8009202:	462b      	mov	r3, r5
 8009204:	4620      	mov	r0, r4
 8009206:	4629      	mov	r1, r5
 8009208:	f7f7 fa16 	bl	8000638 <__aeabi_dmul>
 800920c:	4682      	mov	sl, r0
 800920e:	468b      	mov	fp, r1
 8009210:	4602      	mov	r2, r0
 8009212:	460b      	mov	r3, r1
 8009214:	4620      	mov	r0, r4
 8009216:	4629      	mov	r1, r5
 8009218:	f7f7 fa0e 	bl	8000638 <__aeabi_dmul>
 800921c:	a341      	add	r3, pc, #260	; (adr r3, 8009324 <__kernel_sin+0x154>)
 800921e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009222:	4680      	mov	r8, r0
 8009224:	4689      	mov	r9, r1
 8009226:	4650      	mov	r0, sl
 8009228:	4659      	mov	r1, fp
 800922a:	f7f7 fa05 	bl	8000638 <__aeabi_dmul>
 800922e:	a33f      	add	r3, pc, #252	; (adr r3, 800932c <__kernel_sin+0x15c>)
 8009230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009234:	f7f7 f848 	bl	80002c8 <__aeabi_dsub>
 8009238:	4652      	mov	r2, sl
 800923a:	465b      	mov	r3, fp
 800923c:	f7f7 f9fc 	bl	8000638 <__aeabi_dmul>
 8009240:	a33c      	add	r3, pc, #240	; (adr r3, 8009334 <__kernel_sin+0x164>)
 8009242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009246:	f7f7 f841 	bl	80002cc <__adddf3>
 800924a:	4652      	mov	r2, sl
 800924c:	465b      	mov	r3, fp
 800924e:	f7f7 f9f3 	bl	8000638 <__aeabi_dmul>
 8009252:	a33a      	add	r3, pc, #232	; (adr r3, 800933c <__kernel_sin+0x16c>)
 8009254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009258:	f7f7 f836 	bl	80002c8 <__aeabi_dsub>
 800925c:	4652      	mov	r2, sl
 800925e:	465b      	mov	r3, fp
 8009260:	f7f7 f9ea 	bl	8000638 <__aeabi_dmul>
 8009264:	a337      	add	r3, pc, #220	; (adr r3, 8009344 <__kernel_sin+0x174>)
 8009266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800926a:	f7f7 f82f 	bl	80002cc <__adddf3>
 800926e:	9b01      	ldr	r3, [sp, #4]
 8009270:	4606      	mov	r6, r0
 8009272:	460f      	mov	r7, r1
 8009274:	b9eb      	cbnz	r3, 80092b2 <__kernel_sin+0xe2>
 8009276:	4602      	mov	r2, r0
 8009278:	460b      	mov	r3, r1
 800927a:	4650      	mov	r0, sl
 800927c:	4659      	mov	r1, fp
 800927e:	f7f7 f9db 	bl	8000638 <__aeabi_dmul>
 8009282:	a325      	add	r3, pc, #148	; (adr r3, 8009318 <__kernel_sin+0x148>)
 8009284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009288:	f7f7 f81e 	bl	80002c8 <__aeabi_dsub>
 800928c:	4642      	mov	r2, r8
 800928e:	464b      	mov	r3, r9
 8009290:	f7f7 f9d2 	bl	8000638 <__aeabi_dmul>
 8009294:	4602      	mov	r2, r0
 8009296:	460b      	mov	r3, r1
 8009298:	4620      	mov	r0, r4
 800929a:	4629      	mov	r1, r5
 800929c:	f7f7 f816 	bl	80002cc <__adddf3>
 80092a0:	4604      	mov	r4, r0
 80092a2:	460d      	mov	r5, r1
 80092a4:	ec45 4b10 	vmov	d0, r4, r5
 80092a8:	b003      	add	sp, #12
 80092aa:	ecbd 8b04 	vpop	{d8-d9}
 80092ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092b2:	4b1b      	ldr	r3, [pc, #108]	; (8009320 <__kernel_sin+0x150>)
 80092b4:	ec51 0b18 	vmov	r0, r1, d8
 80092b8:	2200      	movs	r2, #0
 80092ba:	f7f7 f9bd 	bl	8000638 <__aeabi_dmul>
 80092be:	4632      	mov	r2, r6
 80092c0:	ec41 0b19 	vmov	d9, r0, r1
 80092c4:	463b      	mov	r3, r7
 80092c6:	4640      	mov	r0, r8
 80092c8:	4649      	mov	r1, r9
 80092ca:	f7f7 f9b5 	bl	8000638 <__aeabi_dmul>
 80092ce:	4602      	mov	r2, r0
 80092d0:	460b      	mov	r3, r1
 80092d2:	ec51 0b19 	vmov	r0, r1, d9
 80092d6:	f7f6 fff7 	bl	80002c8 <__aeabi_dsub>
 80092da:	4652      	mov	r2, sl
 80092dc:	465b      	mov	r3, fp
 80092de:	f7f7 f9ab 	bl	8000638 <__aeabi_dmul>
 80092e2:	ec53 2b18 	vmov	r2, r3, d8
 80092e6:	f7f6 ffef 	bl	80002c8 <__aeabi_dsub>
 80092ea:	a30b      	add	r3, pc, #44	; (adr r3, 8009318 <__kernel_sin+0x148>)
 80092ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f0:	4606      	mov	r6, r0
 80092f2:	460f      	mov	r7, r1
 80092f4:	4640      	mov	r0, r8
 80092f6:	4649      	mov	r1, r9
 80092f8:	f7f7 f99e 	bl	8000638 <__aeabi_dmul>
 80092fc:	4602      	mov	r2, r0
 80092fe:	460b      	mov	r3, r1
 8009300:	4630      	mov	r0, r6
 8009302:	4639      	mov	r1, r7
 8009304:	f7f6 ffe2 	bl	80002cc <__adddf3>
 8009308:	4602      	mov	r2, r0
 800930a:	460b      	mov	r3, r1
 800930c:	4620      	mov	r0, r4
 800930e:	4629      	mov	r1, r5
 8009310:	f7f6 ffda 	bl	80002c8 <__aeabi_dsub>
 8009314:	e7c4      	b.n	80092a0 <__kernel_sin+0xd0>
 8009316:	bf00      	nop
 8009318:	55555549 	.word	0x55555549
 800931c:	3fc55555 	.word	0x3fc55555
 8009320:	3fe00000 	.word	0x3fe00000
 8009324:	5acfd57c 	.word	0x5acfd57c
 8009328:	3de5d93a 	.word	0x3de5d93a
 800932c:	8a2b9ceb 	.word	0x8a2b9ceb
 8009330:	3e5ae5e6 	.word	0x3e5ae5e6
 8009334:	57b1fe7d 	.word	0x57b1fe7d
 8009338:	3ec71de3 	.word	0x3ec71de3
 800933c:	19c161d5 	.word	0x19c161d5
 8009340:	3f2a01a0 	.word	0x3f2a01a0
 8009344:	1110f8a6 	.word	0x1110f8a6
 8009348:	3f811111 	.word	0x3f811111

0800934c <fabs>:
 800934c:	ec51 0b10 	vmov	r0, r1, d0
 8009350:	ee10 2a10 	vmov	r2, s0
 8009354:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009358:	ec43 2b10 	vmov	d0, r2, r3
 800935c:	4770      	bx	lr
	...

08009360 <floor>:
 8009360:	ec51 0b10 	vmov	r0, r1, d0
 8009364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009368:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800936c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8009370:	2e13      	cmp	r6, #19
 8009372:	ee10 5a10 	vmov	r5, s0
 8009376:	ee10 8a10 	vmov	r8, s0
 800937a:	460c      	mov	r4, r1
 800937c:	dc32      	bgt.n	80093e4 <floor+0x84>
 800937e:	2e00      	cmp	r6, #0
 8009380:	da14      	bge.n	80093ac <floor+0x4c>
 8009382:	a333      	add	r3, pc, #204	; (adr r3, 8009450 <floor+0xf0>)
 8009384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009388:	f7f6 ffa0 	bl	80002cc <__adddf3>
 800938c:	2200      	movs	r2, #0
 800938e:	2300      	movs	r3, #0
 8009390:	f7f7 fbe2 	bl	8000b58 <__aeabi_dcmpgt>
 8009394:	b138      	cbz	r0, 80093a6 <floor+0x46>
 8009396:	2c00      	cmp	r4, #0
 8009398:	da57      	bge.n	800944a <floor+0xea>
 800939a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800939e:	431d      	orrs	r5, r3
 80093a0:	d001      	beq.n	80093a6 <floor+0x46>
 80093a2:	4c2d      	ldr	r4, [pc, #180]	; (8009458 <floor+0xf8>)
 80093a4:	2500      	movs	r5, #0
 80093a6:	4621      	mov	r1, r4
 80093a8:	4628      	mov	r0, r5
 80093aa:	e025      	b.n	80093f8 <floor+0x98>
 80093ac:	4f2b      	ldr	r7, [pc, #172]	; (800945c <floor+0xfc>)
 80093ae:	4137      	asrs	r7, r6
 80093b0:	ea01 0307 	and.w	r3, r1, r7
 80093b4:	4303      	orrs	r3, r0
 80093b6:	d01f      	beq.n	80093f8 <floor+0x98>
 80093b8:	a325      	add	r3, pc, #148	; (adr r3, 8009450 <floor+0xf0>)
 80093ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093be:	f7f6 ff85 	bl	80002cc <__adddf3>
 80093c2:	2200      	movs	r2, #0
 80093c4:	2300      	movs	r3, #0
 80093c6:	f7f7 fbc7 	bl	8000b58 <__aeabi_dcmpgt>
 80093ca:	2800      	cmp	r0, #0
 80093cc:	d0eb      	beq.n	80093a6 <floor+0x46>
 80093ce:	2c00      	cmp	r4, #0
 80093d0:	bfbe      	ittt	lt
 80093d2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80093d6:	fa43 f606 	asrlt.w	r6, r3, r6
 80093da:	19a4      	addlt	r4, r4, r6
 80093dc:	ea24 0407 	bic.w	r4, r4, r7
 80093e0:	2500      	movs	r5, #0
 80093e2:	e7e0      	b.n	80093a6 <floor+0x46>
 80093e4:	2e33      	cmp	r6, #51	; 0x33
 80093e6:	dd0b      	ble.n	8009400 <floor+0xa0>
 80093e8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80093ec:	d104      	bne.n	80093f8 <floor+0x98>
 80093ee:	ee10 2a10 	vmov	r2, s0
 80093f2:	460b      	mov	r3, r1
 80093f4:	f7f6 ff6a 	bl	80002cc <__adddf3>
 80093f8:	ec41 0b10 	vmov	d0, r0, r1
 80093fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009400:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8009404:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009408:	fa23 f707 	lsr.w	r7, r3, r7
 800940c:	4207      	tst	r7, r0
 800940e:	d0f3      	beq.n	80093f8 <floor+0x98>
 8009410:	a30f      	add	r3, pc, #60	; (adr r3, 8009450 <floor+0xf0>)
 8009412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009416:	f7f6 ff59 	bl	80002cc <__adddf3>
 800941a:	2200      	movs	r2, #0
 800941c:	2300      	movs	r3, #0
 800941e:	f7f7 fb9b 	bl	8000b58 <__aeabi_dcmpgt>
 8009422:	2800      	cmp	r0, #0
 8009424:	d0bf      	beq.n	80093a6 <floor+0x46>
 8009426:	2c00      	cmp	r4, #0
 8009428:	da02      	bge.n	8009430 <floor+0xd0>
 800942a:	2e14      	cmp	r6, #20
 800942c:	d103      	bne.n	8009436 <floor+0xd6>
 800942e:	3401      	adds	r4, #1
 8009430:	ea25 0507 	bic.w	r5, r5, r7
 8009434:	e7b7      	b.n	80093a6 <floor+0x46>
 8009436:	2301      	movs	r3, #1
 8009438:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800943c:	fa03 f606 	lsl.w	r6, r3, r6
 8009440:	4435      	add	r5, r6
 8009442:	4545      	cmp	r5, r8
 8009444:	bf38      	it	cc
 8009446:	18e4      	addcc	r4, r4, r3
 8009448:	e7f2      	b.n	8009430 <floor+0xd0>
 800944a:	2500      	movs	r5, #0
 800944c:	462c      	mov	r4, r5
 800944e:	e7aa      	b.n	80093a6 <floor+0x46>
 8009450:	8800759c 	.word	0x8800759c
 8009454:	7e37e43c 	.word	0x7e37e43c
 8009458:	bff00000 	.word	0xbff00000
 800945c:	000fffff 	.word	0x000fffff

08009460 <scalbn>:
 8009460:	b570      	push	{r4, r5, r6, lr}
 8009462:	ec55 4b10 	vmov	r4, r5, d0
 8009466:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800946a:	4606      	mov	r6, r0
 800946c:	462b      	mov	r3, r5
 800946e:	b99a      	cbnz	r2, 8009498 <scalbn+0x38>
 8009470:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009474:	4323      	orrs	r3, r4
 8009476:	d036      	beq.n	80094e6 <scalbn+0x86>
 8009478:	4b39      	ldr	r3, [pc, #228]	; (8009560 <scalbn+0x100>)
 800947a:	4629      	mov	r1, r5
 800947c:	ee10 0a10 	vmov	r0, s0
 8009480:	2200      	movs	r2, #0
 8009482:	f7f7 f8d9 	bl	8000638 <__aeabi_dmul>
 8009486:	4b37      	ldr	r3, [pc, #220]	; (8009564 <scalbn+0x104>)
 8009488:	429e      	cmp	r6, r3
 800948a:	4604      	mov	r4, r0
 800948c:	460d      	mov	r5, r1
 800948e:	da10      	bge.n	80094b2 <scalbn+0x52>
 8009490:	a32b      	add	r3, pc, #172	; (adr r3, 8009540 <scalbn+0xe0>)
 8009492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009496:	e03a      	b.n	800950e <scalbn+0xae>
 8009498:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800949c:	428a      	cmp	r2, r1
 800949e:	d10c      	bne.n	80094ba <scalbn+0x5a>
 80094a0:	ee10 2a10 	vmov	r2, s0
 80094a4:	4620      	mov	r0, r4
 80094a6:	4629      	mov	r1, r5
 80094a8:	f7f6 ff10 	bl	80002cc <__adddf3>
 80094ac:	4604      	mov	r4, r0
 80094ae:	460d      	mov	r5, r1
 80094b0:	e019      	b.n	80094e6 <scalbn+0x86>
 80094b2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80094b6:	460b      	mov	r3, r1
 80094b8:	3a36      	subs	r2, #54	; 0x36
 80094ba:	4432      	add	r2, r6
 80094bc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80094c0:	428a      	cmp	r2, r1
 80094c2:	dd08      	ble.n	80094d6 <scalbn+0x76>
 80094c4:	2d00      	cmp	r5, #0
 80094c6:	a120      	add	r1, pc, #128	; (adr r1, 8009548 <scalbn+0xe8>)
 80094c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094cc:	da1c      	bge.n	8009508 <scalbn+0xa8>
 80094ce:	a120      	add	r1, pc, #128	; (adr r1, 8009550 <scalbn+0xf0>)
 80094d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094d4:	e018      	b.n	8009508 <scalbn+0xa8>
 80094d6:	2a00      	cmp	r2, #0
 80094d8:	dd08      	ble.n	80094ec <scalbn+0x8c>
 80094da:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80094de:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80094e2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80094e6:	ec45 4b10 	vmov	d0, r4, r5
 80094ea:	bd70      	pop	{r4, r5, r6, pc}
 80094ec:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80094f0:	da19      	bge.n	8009526 <scalbn+0xc6>
 80094f2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80094f6:	429e      	cmp	r6, r3
 80094f8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80094fc:	dd0a      	ble.n	8009514 <scalbn+0xb4>
 80094fe:	a112      	add	r1, pc, #72	; (adr r1, 8009548 <scalbn+0xe8>)
 8009500:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d1e2      	bne.n	80094ce <scalbn+0x6e>
 8009508:	a30f      	add	r3, pc, #60	; (adr r3, 8009548 <scalbn+0xe8>)
 800950a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800950e:	f7f7 f893 	bl	8000638 <__aeabi_dmul>
 8009512:	e7cb      	b.n	80094ac <scalbn+0x4c>
 8009514:	a10a      	add	r1, pc, #40	; (adr r1, 8009540 <scalbn+0xe0>)
 8009516:	e9d1 0100 	ldrd	r0, r1, [r1]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d0b8      	beq.n	8009490 <scalbn+0x30>
 800951e:	a10e      	add	r1, pc, #56	; (adr r1, 8009558 <scalbn+0xf8>)
 8009520:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009524:	e7b4      	b.n	8009490 <scalbn+0x30>
 8009526:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800952a:	3236      	adds	r2, #54	; 0x36
 800952c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009530:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009534:	4620      	mov	r0, r4
 8009536:	4b0c      	ldr	r3, [pc, #48]	; (8009568 <scalbn+0x108>)
 8009538:	2200      	movs	r2, #0
 800953a:	e7e8      	b.n	800950e <scalbn+0xae>
 800953c:	f3af 8000 	nop.w
 8009540:	c2f8f359 	.word	0xc2f8f359
 8009544:	01a56e1f 	.word	0x01a56e1f
 8009548:	8800759c 	.word	0x8800759c
 800954c:	7e37e43c 	.word	0x7e37e43c
 8009550:	8800759c 	.word	0x8800759c
 8009554:	fe37e43c 	.word	0xfe37e43c
 8009558:	c2f8f359 	.word	0xc2f8f359
 800955c:	81a56e1f 	.word	0x81a56e1f
 8009560:	43500000 	.word	0x43500000
 8009564:	ffff3cb0 	.word	0xffff3cb0
 8009568:	3c900000 	.word	0x3c900000

0800956c <atanf>:
 800956c:	b538      	push	{r3, r4, r5, lr}
 800956e:	ee10 5a10 	vmov	r5, s0
 8009572:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8009576:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800957a:	eef0 7a40 	vmov.f32	s15, s0
 800957e:	db10      	blt.n	80095a2 <atanf+0x36>
 8009580:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8009584:	dd04      	ble.n	8009590 <atanf+0x24>
 8009586:	ee70 7a00 	vadd.f32	s15, s0, s0
 800958a:	eeb0 0a67 	vmov.f32	s0, s15
 800958e:	bd38      	pop	{r3, r4, r5, pc}
 8009590:	eddf 7a4d 	vldr	s15, [pc, #308]	; 80096c8 <atanf+0x15c>
 8009594:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 80096cc <atanf+0x160>
 8009598:	2d00      	cmp	r5, #0
 800959a:	bfd8      	it	le
 800959c:	eef0 7a40 	vmovle.f32	s15, s0
 80095a0:	e7f3      	b.n	800958a <atanf+0x1e>
 80095a2:	4b4b      	ldr	r3, [pc, #300]	; (80096d0 <atanf+0x164>)
 80095a4:	429c      	cmp	r4, r3
 80095a6:	dc10      	bgt.n	80095ca <atanf+0x5e>
 80095a8:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 80095ac:	da0a      	bge.n	80095c4 <atanf+0x58>
 80095ae:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80096d4 <atanf+0x168>
 80095b2:	ee30 7a07 	vadd.f32	s14, s0, s14
 80095b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095ba:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80095be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095c2:	dce2      	bgt.n	800958a <atanf+0x1e>
 80095c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80095c8:	e013      	b.n	80095f2 <atanf+0x86>
 80095ca:	f000 f8a3 	bl	8009714 <fabsf>
 80095ce:	4b42      	ldr	r3, [pc, #264]	; (80096d8 <atanf+0x16c>)
 80095d0:	429c      	cmp	r4, r3
 80095d2:	dc4f      	bgt.n	8009674 <atanf+0x108>
 80095d4:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80095d8:	429c      	cmp	r4, r3
 80095da:	dc41      	bgt.n	8009660 <atanf+0xf4>
 80095dc:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80095e0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80095e4:	eea0 7a27 	vfma.f32	s14, s0, s15
 80095e8:	2300      	movs	r3, #0
 80095ea:	ee30 0a27 	vadd.f32	s0, s0, s15
 80095ee:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80095f2:	1c5a      	adds	r2, r3, #1
 80095f4:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80095f8:	eddf 5a38 	vldr	s11, [pc, #224]	; 80096dc <atanf+0x170>
 80095fc:	ed9f 6a38 	vldr	s12, [pc, #224]	; 80096e0 <atanf+0x174>
 8009600:	ed9f 5a38 	vldr	s10, [pc, #224]	; 80096e4 <atanf+0x178>
 8009604:	ed9f 0a38 	vldr	s0, [pc, #224]	; 80096e8 <atanf+0x17c>
 8009608:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800960c:	eea7 6a25 	vfma.f32	s12, s14, s11
 8009610:	eddf 5a36 	vldr	s11, [pc, #216]	; 80096ec <atanf+0x180>
 8009614:	eee6 5a07 	vfma.f32	s11, s12, s14
 8009618:	ed9f 6a35 	vldr	s12, [pc, #212]	; 80096f0 <atanf+0x184>
 800961c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8009620:	eddf 5a34 	vldr	s11, [pc, #208]	; 80096f4 <atanf+0x188>
 8009624:	eee6 5a07 	vfma.f32	s11, s12, s14
 8009628:	ed9f 6a33 	vldr	s12, [pc, #204]	; 80096f8 <atanf+0x18c>
 800962c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8009630:	eddf 5a32 	vldr	s11, [pc, #200]	; 80096fc <atanf+0x190>
 8009634:	eee7 5a05 	vfma.f32	s11, s14, s10
 8009638:	ed9f 5a31 	vldr	s10, [pc, #196]	; 8009700 <atanf+0x194>
 800963c:	eea5 5a87 	vfma.f32	s10, s11, s14
 8009640:	eddf 5a30 	vldr	s11, [pc, #192]	; 8009704 <atanf+0x198>
 8009644:	eee5 5a07 	vfma.f32	s11, s10, s14
 8009648:	eea5 0a87 	vfma.f32	s0, s11, s14
 800964c:	ee20 0a07 	vmul.f32	s0, s0, s14
 8009650:	eea6 0a26 	vfma.f32	s0, s12, s13
 8009654:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009658:	d121      	bne.n	800969e <atanf+0x132>
 800965a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800965e:	e794      	b.n	800958a <atanf+0x1e>
 8009660:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8009664:	ee30 7a67 	vsub.f32	s14, s0, s15
 8009668:	ee30 0a27 	vadd.f32	s0, s0, s15
 800966c:	2301      	movs	r3, #1
 800966e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009672:	e7be      	b.n	80095f2 <atanf+0x86>
 8009674:	4b24      	ldr	r3, [pc, #144]	; (8009708 <atanf+0x19c>)
 8009676:	429c      	cmp	r4, r3
 8009678:	dc0b      	bgt.n	8009692 <atanf+0x126>
 800967a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800967e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009682:	eea0 7a27 	vfma.f32	s14, s0, s15
 8009686:	2302      	movs	r3, #2
 8009688:	ee70 6a67 	vsub.f32	s13, s0, s15
 800968c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009690:	e7af      	b.n	80095f2 <atanf+0x86>
 8009692:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8009696:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800969a:	2303      	movs	r3, #3
 800969c:	e7a9      	b.n	80095f2 <atanf+0x86>
 800969e:	4a1b      	ldr	r2, [pc, #108]	; (800970c <atanf+0x1a0>)
 80096a0:	491b      	ldr	r1, [pc, #108]	; (8009710 <atanf+0x1a4>)
 80096a2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80096a6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80096aa:	ed93 7a00 	vldr	s14, [r3]
 80096ae:	ee30 0a47 	vsub.f32	s0, s0, s14
 80096b2:	2d00      	cmp	r5, #0
 80096b4:	ee70 7a67 	vsub.f32	s15, s0, s15
 80096b8:	ed92 0a00 	vldr	s0, [r2]
 80096bc:	ee70 7a67 	vsub.f32	s15, s0, s15
 80096c0:	bfb8      	it	lt
 80096c2:	eef1 7a67 	vneglt.f32	s15, s15
 80096c6:	e760      	b.n	800958a <atanf+0x1e>
 80096c8:	3fc90fdb 	.word	0x3fc90fdb
 80096cc:	bfc90fdb 	.word	0xbfc90fdb
 80096d0:	3edfffff 	.word	0x3edfffff
 80096d4:	7149f2ca 	.word	0x7149f2ca
 80096d8:	3f97ffff 	.word	0x3f97ffff
 80096dc:	3c8569d7 	.word	0x3c8569d7
 80096e0:	3d4bda59 	.word	0x3d4bda59
 80096e4:	bd15a221 	.word	0xbd15a221
 80096e8:	be4ccccd 	.word	0xbe4ccccd
 80096ec:	3d886b35 	.word	0x3d886b35
 80096f0:	3dba2e6e 	.word	0x3dba2e6e
 80096f4:	3e124925 	.word	0x3e124925
 80096f8:	3eaaaaab 	.word	0x3eaaaaab
 80096fc:	bd6ef16b 	.word	0xbd6ef16b
 8009700:	bd9d8795 	.word	0xbd9d8795
 8009704:	bde38e38 	.word	0xbde38e38
 8009708:	401bffff 	.word	0x401bffff
 800970c:	08009e40 	.word	0x08009e40
 8009710:	08009e50 	.word	0x08009e50

08009714 <fabsf>:
 8009714:	ee10 3a10 	vmov	r3, s0
 8009718:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800971c:	ee00 3a10 	vmov	s0, r3
 8009720:	4770      	bx	lr
	...

08009724 <_init>:
 8009724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009726:	bf00      	nop
 8009728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800972a:	bc08      	pop	{r3}
 800972c:	469e      	mov	lr, r3
 800972e:	4770      	bx	lr

08009730 <_fini>:
 8009730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009732:	bf00      	nop
 8009734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009736:	bc08      	pop	{r3}
 8009738:	469e      	mov	lr, r3
 800973a:	4770      	bx	lr
