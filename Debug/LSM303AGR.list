
LSM303AGR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000972c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000828  08009900  08009900  00019900  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a128  0800a128  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a128  0800a128  0001a128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a130  0800a130  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a130  0800a130  0001a130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a134  0800a134  0001a134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800a138  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  200001e4  0800a31c  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002dc  0800a31c  000202dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e0b9  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c02  00000000  00000000  0002e2cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a08  00000000  00000000  0002fed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000988  00000000  00000000  000308d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002262a  00000000  00000000  00031260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dc3a  00000000  00000000  0005388a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd15b  00000000  00000000  000614c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012e61f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ddc  00000000  00000000  0012e674  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080098e4 	.word	0x080098e4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e8 	.word	0x200001e8
 800020c:	080098e4 	.word	0x080098e4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b96e 	b.w	8000f7c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468c      	mov	ip, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8083 	bne.w	8000dce <__udivmoddi4+0x116>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d947      	bls.n	8000d5e <__udivmoddi4+0xa6>
 8000cce:	fab2 f282 	clz	r2, r2
 8000cd2:	b142      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	f1c2 0020 	rsb	r0, r2, #32
 8000cd8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cdc:	4091      	lsls	r1, r2
 8000cde:	4097      	lsls	r7, r2
 8000ce0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbbc f6f8 	udiv	r6, ip, r8
 8000cf0:	fa1f fe87 	uxth.w	lr, r7
 8000cf4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfc:	fb06 f10e 	mul.w	r1, r6, lr
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18fb      	adds	r3, r7, r3
 8000d06:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d0a:	f080 8119 	bcs.w	8000f40 <__udivmoddi4+0x288>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8116 	bls.w	8000f40 <__udivmoddi4+0x288>
 8000d14:	3e02      	subs	r6, #2
 8000d16:	443b      	add	r3, r7
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d20:	fb08 3310 	mls	r3, r8, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d2c:	45a6      	cmp	lr, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	193c      	adds	r4, r7, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d36:	f080 8105 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d3a:	45a6      	cmp	lr, r4
 8000d3c:	f240 8102 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d40:	3802      	subs	r0, #2
 8000d42:	443c      	add	r4, r7
 8000d44:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d48:	eba4 040e 	sub.w	r4, r4, lr
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	b11d      	cbz	r5, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c5 4300 	strd	r4, r3, [r5]
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	b902      	cbnz	r2, 8000d62 <__udivmoddi4+0xaa>
 8000d60:	deff      	udf	#255	; 0xff
 8000d62:	fab2 f282 	clz	r2, r2
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	d150      	bne.n	8000e0c <__udivmoddi4+0x154>
 8000d6a:	1bcb      	subs	r3, r1, r7
 8000d6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d70:	fa1f f887 	uxth.w	r8, r7
 8000d74:	2601      	movs	r6, #1
 8000d76:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d7a:	0c21      	lsrs	r1, r4, #16
 8000d7c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb08 f30c 	mul.w	r3, r8, ip
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0xe2>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	f200 80e9 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1ac9      	subs	r1, r1, r3
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000da8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x10c>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x10a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80d9 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e7bf      	b.n	8000d4e <__udivmoddi4+0x96>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0x12e>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80b1 	beq.w	8000f3a <__udivmoddi4+0x282>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x1cc>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0x140>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80b8 	bhi.w	8000f68 <__udivmoddi4+0x2b0>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0103 	sbc.w	r1, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	468c      	mov	ip, r1
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0a8      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000e06:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e0a:	e7a5      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f603 	lsr.w	r6, r0, r3
 8000e14:	4097      	lsls	r7, r2
 8000e16:	fa01 f002 	lsl.w	r0, r1, r2
 8000e1a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1e:	40d9      	lsrs	r1, r3
 8000e20:	4330      	orrs	r0, r6
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e28:	fa1f f887 	uxth.w	r8, r7
 8000e2c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e34:	fb06 f108 	mul.w	r1, r6, r8
 8000e38:	4299      	cmp	r1, r3
 8000e3a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3e:	d909      	bls.n	8000e54 <__udivmoddi4+0x19c>
 8000e40:	18fb      	adds	r3, r7, r3
 8000e42:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e46:	f080 808d 	bcs.w	8000f64 <__udivmoddi4+0x2ac>
 8000e4a:	4299      	cmp	r1, r3
 8000e4c:	f240 808a 	bls.w	8000f64 <__udivmoddi4+0x2ac>
 8000e50:	3e02      	subs	r6, #2
 8000e52:	443b      	add	r3, r7
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b281      	uxth	r1, r0
 8000e58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e64:	fb00 f308 	mul.w	r3, r0, r8
 8000e68:	428b      	cmp	r3, r1
 8000e6a:	d907      	bls.n	8000e7c <__udivmoddi4+0x1c4>
 8000e6c:	1879      	adds	r1, r7, r1
 8000e6e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e72:	d273      	bcs.n	8000f5c <__udivmoddi4+0x2a4>
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d971      	bls.n	8000f5c <__udivmoddi4+0x2a4>
 8000e78:	3802      	subs	r0, #2
 8000e7a:	4439      	add	r1, r7
 8000e7c:	1acb      	subs	r3, r1, r3
 8000e7e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e82:	e778      	b.n	8000d76 <__udivmoddi4+0xbe>
 8000e84:	f1c6 0c20 	rsb	ip, r6, #32
 8000e88:	fa03 f406 	lsl.w	r4, r3, r6
 8000e8c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e90:	431c      	orrs	r4, r3
 8000e92:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e9e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ea2:	431f      	orrs	r7, r3
 8000ea4:	0c3b      	lsrs	r3, r7, #16
 8000ea6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eaa:	fa1f f884 	uxth.w	r8, r4
 8000eae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eb2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000eb6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eba:	458a      	cmp	sl, r1
 8000ebc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x220>
 8000ec6:	1861      	adds	r1, r4, r1
 8000ec8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ecc:	d248      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000ece:	458a      	cmp	sl, r1
 8000ed0:	d946      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000ed2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ed6:	4421      	add	r1, r4
 8000ed8:	eba1 010a 	sub.w	r1, r1, sl
 8000edc:	b2bf      	uxth	r7, r7
 8000ede:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ee2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ee6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eea:	fb00 f808 	mul.w	r8, r0, r8
 8000eee:	45b8      	cmp	r8, r7
 8000ef0:	d907      	bls.n	8000f02 <__udivmoddi4+0x24a>
 8000ef2:	19e7      	adds	r7, r4, r7
 8000ef4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ef8:	d22e      	bcs.n	8000f58 <__udivmoddi4+0x2a0>
 8000efa:	45b8      	cmp	r8, r7
 8000efc:	d92c      	bls.n	8000f58 <__udivmoddi4+0x2a0>
 8000efe:	3802      	subs	r0, #2
 8000f00:	4427      	add	r7, r4
 8000f02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f06:	eba7 0708 	sub.w	r7, r7, r8
 8000f0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f0e:	454f      	cmp	r7, r9
 8000f10:	46c6      	mov	lr, r8
 8000f12:	4649      	mov	r1, r9
 8000f14:	d31a      	bcc.n	8000f4c <__udivmoddi4+0x294>
 8000f16:	d017      	beq.n	8000f48 <__udivmoddi4+0x290>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x27a>
 8000f1a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f1e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f22:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f26:	40f2      	lsrs	r2, r6
 8000f28:	ea4c 0202 	orr.w	r2, ip, r2
 8000f2c:	40f7      	lsrs	r7, r6
 8000f2e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f32:	2600      	movs	r6, #0
 8000f34:	4631      	mov	r1, r6
 8000f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e70b      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6fd      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f48:	4543      	cmp	r3, r8
 8000f4a:	d2e5      	bcs.n	8000f18 <__udivmoddi4+0x260>
 8000f4c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f50:	eb69 0104 	sbc.w	r1, r9, r4
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7df      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e7d2      	b.n	8000f02 <__udivmoddi4+0x24a>
 8000f5c:	4660      	mov	r0, ip
 8000f5e:	e78d      	b.n	8000e7c <__udivmoddi4+0x1c4>
 8000f60:	4681      	mov	r9, r0
 8000f62:	e7b9      	b.n	8000ed8 <__udivmoddi4+0x220>
 8000f64:	4666      	mov	r6, ip
 8000f66:	e775      	b.n	8000e54 <__udivmoddi4+0x19c>
 8000f68:	4630      	mov	r0, r6
 8000f6a:	e74a      	b.n	8000e02 <__udivmoddi4+0x14a>
 8000f6c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f70:	4439      	add	r1, r7
 8000f72:	e713      	b.n	8000d9c <__udivmoddi4+0xe4>
 8000f74:	3802      	subs	r0, #2
 8000f76:	443c      	add	r4, r7
 8000f78:	e724      	b.n	8000dc4 <__udivmoddi4+0x10c>
 8000f7a:	bf00      	nop

08000f7c <__aeabi_idiv0>:
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <main>:
 * Step length
 */
float step_length = 1.1;//in meter

int main(void)
{
 8000f80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f84:	b0fd      	sub	sp, #500	; 0x1f4
 8000f86:	af04      	add	r7, sp, #16
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f88:	f001 ff2e 	bl	8002de8 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8000f8c:	f001 fc0e 	bl	80027ac <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f90:	f001 fcd2 	bl	8002938 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000f94:	f001 fca6 	bl	80028e4 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 8000f98:	f001 fc76 	bl	8002888 <MX_I2C1_Init>

	/* USER CODE BEGIN 2 */
	__HAL_RCC_I2C1_CLK_ENABLE();
 8000f9c:	463b      	mov	r3, r7
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	4b48      	ldr	r3, [pc, #288]	; (80010c4 <main+0x144>)
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa6:	4a47      	ldr	r2, [pc, #284]	; (80010c4 <main+0x144>)
 8000fa8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fac:	6413      	str	r3, [r2, #64]	; 0x40
 8000fae:	4b45      	ldr	r3, [pc, #276]	; (80010c4 <main+0x144>)
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb2:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8000fb6:	463b      	mov	r3, r7
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	463b      	mov	r3, r7
 8000fbc:	681b      	ldr	r3, [r3, #0]
	char aTxBuffer[16];
	char clear[7] = "\x1B[2J";
 8000fbe:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 8000fc2:	4941      	ldr	r1, [pc, #260]	; (80010c8 <main+0x148>)
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	c903      	ldmia	r1, {r0, r1}
 8000fc8:	6018      	str	r0, [r3, #0]
 8000fca:	3304      	adds	r3, #4
 8000fcc:	7019      	strb	r1, [r3, #0]
 8000fce:	1d53      	adds	r3, r2, #5
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	801a      	strh	r2, [r3, #0]
	/*
	 * Start LED ON
	 */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	2120      	movs	r1, #32
 8000fd8:	483c      	ldr	r0, [pc, #240]	; (80010cc <main+0x14c>)
 8000fda:	f002 fa2d 	bl	8003438 <HAL_GPIO_WritePin>

	/*
	* Clear console
	*/
	HAL_UART_Transmit(&huart2,  (uint8_t*)clear, sizeof(clear), 100);
 8000fde:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 8000fe2:	2364      	movs	r3, #100	; 0x64
 8000fe4:	2207      	movs	r2, #7
 8000fe6:	483a      	ldr	r0, [pc, #232]	; (80010d0 <main+0x150>)
 8000fe8:	f004 f8e5 	bl	80051b6 <HAL_UART_Transmit>

	/*
	 * I2C SCANNER
	 */
	HAL_UART_Transmit(&huart2,  (uint8_t*)"I2C Scan\n\r", 11, 100);
 8000fec:	2364      	movs	r3, #100	; 0x64
 8000fee:	220b      	movs	r2, #11
 8000ff0:	4938      	ldr	r1, [pc, #224]	; (80010d4 <main+0x154>)
 8000ff2:	4837      	ldr	r0, [pc, #220]	; (80010d0 <main+0x150>)
 8000ff4:	f004 f8df 	bl	80051b6 <HAL_UART_Transmit>
	for (uint8_t i = 0; i < 128; i++) {
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	f887 31d5 	strb.w	r3, [r7, #469]	; 0x1d5
 8000ffe:	e021      	b.n	8001044 <main+0xc4>
		if (HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 3, 5) == HAL_OK) {
 8001000:	f897 31d5 	ldrb.w	r3, [r7, #469]	; 0x1d5
 8001004:	b29b      	uxth	r3, r3
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	b299      	uxth	r1, r3
 800100a:	2305      	movs	r3, #5
 800100c:	2203      	movs	r2, #3
 800100e:	4832      	ldr	r0, [pc, #200]	; (80010d8 <main+0x158>)
 8001010:	f002 fe90 	bl	8003d34 <HAL_I2C_IsDeviceReady>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d10f      	bne.n	800103a <main+0xba>
			HAL_UART_Transmit(&huart2, (uint8_t*)aTxBuffer, sprintf(aTxBuffer, "%d\n\r", i), 100);
 800101a:	f897 21d5 	ldrb.w	r2, [r7, #469]	; 0x1d5
 800101e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001022:	492e      	ldr	r1, [pc, #184]	; (80010dc <main+0x15c>)
 8001024:	4618      	mov	r0, r3
 8001026:	f005 f82b 	bl	8006080 <siprintf>
 800102a:	4603      	mov	r3, r0
 800102c:	b29a      	uxth	r2, r3
 800102e:	f107 01d4 	add.w	r1, r7, #212	; 0xd4
 8001032:	2364      	movs	r3, #100	; 0x64
 8001034:	4826      	ldr	r0, [pc, #152]	; (80010d0 <main+0x150>)
 8001036:	f004 f8be 	bl	80051b6 <HAL_UART_Transmit>
	for (uint8_t i = 0; i < 128; i++) {
 800103a:	f897 31d5 	ldrb.w	r3, [r7, #469]	; 0x1d5
 800103e:	3301      	adds	r3, #1
 8001040:	f887 31d5 	strb.w	r3, [r7, #469]	; 0x1d5
 8001044:	f997 31d5 	ldrsb.w	r3, [r7, #469]	; 0x1d5
 8001048:	2b00      	cmp	r3, #0
 800104a:	dad9      	bge.n	8001000 <main+0x80>
		}
	}
	HAL_UART_Transmit(&huart2,  (uint8_t*)"Scanned\n\r", 10, 100);
 800104c:	2364      	movs	r3, #100	; 0x64
 800104e:	220a      	movs	r2, #10
 8001050:	4923      	ldr	r1, [pc, #140]	; (80010e0 <main+0x160>)
 8001052:	481f      	ldr	r0, [pc, #124]	; (80010d0 <main+0x150>)
 8001054:	f004 f8af 	bl	80051b6 <HAL_UART_Transmit>

	/*
	 * Start up
	 */
	HAL_Delay(500);
 8001058:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800105c:	f001 ff36 	bl	8002ecc <HAL_Delay>
	 * Accelerometer
	 */
	/*
	 * Check Communication from Accelerometer
	 */
	char acc_enabled[30] = "Accelerometer Enabled\n\r";
 8001060:	f107 06ac 	add.w	r6, r7, #172	; 0xac
 8001064:	4b1f      	ldr	r3, [pc, #124]	; (80010e4 <main+0x164>)
 8001066:	4634      	mov	r4, r6
 8001068:	461d      	mov	r5, r3
 800106a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800106c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800106e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001072:	e884 0003 	stmia.w	r4, {r0, r1}
 8001076:	f106 0318 	add.w	r3, r6, #24
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	809a      	strh	r2, [r3, #4]
	uint8_t who_am_i_a_val;
	HAL_StatusTypeDef who_am_i_a_status = HAL_I2C_Mem_Read(&hi2c1, (ACC<<1)|0x1 , WHO_AM_I_A, 1, &who_am_i_a_val, 1, 50);
 8001080:	2332      	movs	r3, #50	; 0x32
 8001082:	9302      	str	r3, [sp, #8]
 8001084:	2301      	movs	r3, #1
 8001086:	9301      	str	r3, [sp, #4]
 8001088:	f107 03ab 	add.w	r3, r7, #171	; 0xab
 800108c:	9300      	str	r3, [sp, #0]
 800108e:	2301      	movs	r3, #1
 8001090:	220f      	movs	r2, #15
 8001092:	2133      	movs	r1, #51	; 0x33
 8001094:	4810      	ldr	r0, [pc, #64]	; (80010d8 <main+0x158>)
 8001096:	f002 fc27 	bl	80038e8 <HAL_I2C_Mem_Read>
 800109a:	4603      	mov	r3, r0
 800109c:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
	char ACC_Buffer[32];
	if (who_am_i_a_status == HAL_OK && who_am_i_a_val == 51) {
 80010a0:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d11f      	bne.n	80010e8 <main+0x168>
 80010a8:	f107 03ab 	add.w	r3, r7, #171	; 0xab
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	2b33      	cmp	r3, #51	; 0x33
 80010b0:	d11a      	bne.n	80010e8 <main+0x168>
		HAL_UART_Transmit(&huart2, (uint8_t*)acc_enabled , sizeof(acc_enabled), 100);
 80010b2:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 80010b6:	2364      	movs	r3, #100	; 0x64
 80010b8:	221e      	movs	r2, #30
 80010ba:	4805      	ldr	r0, [pc, #20]	; (80010d0 <main+0x150>)
 80010bc:	f004 f87b 	bl	80051b6 <HAL_UART_Transmit>
 80010c0:	e026      	b.n	8001110 <main+0x190>
 80010c2:	bf00      	nop
 80010c4:	40023800 	.word	0x40023800
 80010c8:	08009ac0 	.word	0x08009ac0
 80010cc:	40020000 	.word	0x40020000
 80010d0:	20000284 	.word	0x20000284
 80010d4:	08009900 	.word	0x08009900
 80010d8:	20000230 	.word	0x20000230
 80010dc:	0800990c 	.word	0x0800990c
 80010e0:	08009914 	.word	0x08009914
 80010e4:	08009ac8 	.word	0x08009ac8
	} else if (who_am_i_a_status != HAL_OK) {
 80010e8:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d00f      	beq.n	8001110 <main+0x190>
		HAL_UART_Transmit(&huart2,  (uint8_t*)ACC_Buffer, sprintf(ACC_Buffer, "%d\n\r", who_am_i_a_status), 100);
 80010f0:	f897 2157 	ldrb.w	r2, [r7, #343]	; 0x157
 80010f4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80010f8:	4998      	ldr	r1, [pc, #608]	; (800135c <main+0x3dc>)
 80010fa:	4618      	mov	r0, r3
 80010fc:	f004 ffc0 	bl	8006080 <siprintf>
 8001100:	4603      	mov	r3, r0
 8001102:	b29a      	uxth	r2, r3
 8001104:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001108:	2364      	movs	r3, #100	; 0x64
 800110a:	4895      	ldr	r0, [pc, #596]	; (8001360 <main+0x3e0>)
 800110c:	f004 f853 	bl	80051b6 <HAL_UART_Transmit>
	}
	/*
	 * Set Control Registers
	 */
	uint8_t CTRL_REG1_A_val = 0x57;
 8001110:	f107 0387 	add.w	r3, r7, #135	; 0x87
 8001114:	2257      	movs	r2, #87	; 0x57
 8001116:	701a      	strb	r2, [r3, #0]
	uint8_t CTRL_REG2_A_val = 0x00;
 8001118:	f107 0386 	add.w	r3, r7, #134	; 0x86
 800111c:	2200      	movs	r2, #0
 800111e:	701a      	strb	r2, [r3, #0]
	uint8_t CTRL_REG3_A_val = 0x00;
 8001120:	f107 0385 	add.w	r3, r7, #133	; 0x85
 8001124:	2200      	movs	r2, #0
 8001126:	701a      	strb	r2, [r3, #0]
	uint8_t CTRL_REG4_A_val = 0x81;
 8001128:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800112c:	2281      	movs	r2, #129	; 0x81
 800112e:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef CTRL_REG1_A_status = HAL_I2C_Mem_Write(&hi2c1, (ACC<<1), CTRL_REG1_A, 1, &CTRL_REG1_A_val, 1, 50);
 8001130:	2332      	movs	r3, #50	; 0x32
 8001132:	9302      	str	r3, [sp, #8]
 8001134:	2301      	movs	r3, #1
 8001136:	9301      	str	r3, [sp, #4]
 8001138:	f107 0387 	add.w	r3, r7, #135	; 0x87
 800113c:	9300      	str	r3, [sp, #0]
 800113e:	2301      	movs	r3, #1
 8001140:	2220      	movs	r2, #32
 8001142:	2132      	movs	r1, #50	; 0x32
 8001144:	4887      	ldr	r0, [pc, #540]	; (8001364 <main+0x3e4>)
 8001146:	f002 fad5 	bl	80036f4 <HAL_I2C_Mem_Write>
 800114a:	4603      	mov	r3, r0
 800114c:	f887 3156 	strb.w	r3, [r7, #342]	; 0x156
	HAL_StatusTypeDef CTRL_REG2_A_status = HAL_I2C_Mem_Write(&hi2c1, (ACC<<1), CTRL_REG2_A, 1, &CTRL_REG2_A_val, 1, 50);
 8001150:	2332      	movs	r3, #50	; 0x32
 8001152:	9302      	str	r3, [sp, #8]
 8001154:	2301      	movs	r3, #1
 8001156:	9301      	str	r3, [sp, #4]
 8001158:	f107 0386 	add.w	r3, r7, #134	; 0x86
 800115c:	9300      	str	r3, [sp, #0]
 800115e:	2301      	movs	r3, #1
 8001160:	2221      	movs	r2, #33	; 0x21
 8001162:	2132      	movs	r1, #50	; 0x32
 8001164:	487f      	ldr	r0, [pc, #508]	; (8001364 <main+0x3e4>)
 8001166:	f002 fac5 	bl	80036f4 <HAL_I2C_Mem_Write>
 800116a:	4603      	mov	r3, r0
 800116c:	f887 3155 	strb.w	r3, [r7, #341]	; 0x155
	HAL_StatusTypeDef CTRL_REG3_A_status = HAL_I2C_Mem_Write(&hi2c1, (ACC<<1), CTRL_REG3_A, 1, &CTRL_REG3_A_val, 1, 50);
 8001170:	2332      	movs	r3, #50	; 0x32
 8001172:	9302      	str	r3, [sp, #8]
 8001174:	2301      	movs	r3, #1
 8001176:	9301      	str	r3, [sp, #4]
 8001178:	f107 0385 	add.w	r3, r7, #133	; 0x85
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	2301      	movs	r3, #1
 8001180:	2222      	movs	r2, #34	; 0x22
 8001182:	2132      	movs	r1, #50	; 0x32
 8001184:	4877      	ldr	r0, [pc, #476]	; (8001364 <main+0x3e4>)
 8001186:	f002 fab5 	bl	80036f4 <HAL_I2C_Mem_Write>
 800118a:	4603      	mov	r3, r0
 800118c:	f887 3154 	strb.w	r3, [r7, #340]	; 0x154
	HAL_StatusTypeDef CTRL_REG4_A_status = HAL_I2C_Mem_Write(&hi2c1, (ACC<<1), CTRL_REG4_A, 1, &CTRL_REG4_A_val, 1, 50);
 8001190:	2332      	movs	r3, #50	; 0x32
 8001192:	9302      	str	r3, [sp, #8]
 8001194:	2301      	movs	r3, #1
 8001196:	9301      	str	r3, [sp, #4]
 8001198:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800119c:	9300      	str	r3, [sp, #0]
 800119e:	2301      	movs	r3, #1
 80011a0:	2223      	movs	r2, #35	; 0x23
 80011a2:	2132      	movs	r1, #50	; 0x32
 80011a4:	486f      	ldr	r0, [pc, #444]	; (8001364 <main+0x3e4>)
 80011a6:	f002 faa5 	bl	80036f4 <HAL_I2C_Mem_Write>
 80011aa:	4603      	mov	r3, r0
 80011ac:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153

	if (CTRL_REG1_A_status != HAL_OK) {
 80011b0:	f897 3156 	ldrb.w	r3, [r7, #342]	; 0x156
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d014      	beq.n	80011e2 <main+0x262>
		HAL_UART_Transmit(&huart2,  (uint8_t*)ACC_Buffer, sprintf(ACC_Buffer, "Failed REG1:  %d\n\r", CTRL_REG1_A_status), 100);
 80011b8:	f897 2156 	ldrb.w	r2, [r7, #342]	; 0x156
 80011bc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80011c0:	4969      	ldr	r1, [pc, #420]	; (8001368 <main+0x3e8>)
 80011c2:	4618      	mov	r0, r3
 80011c4:	f004 ff5c 	bl	8006080 <siprintf>
 80011c8:	4603      	mov	r3, r0
 80011ca:	b29a      	uxth	r2, r3
 80011cc:	f107 0188 	add.w	r1, r7, #136	; 0x88
 80011d0:	2364      	movs	r3, #100	; 0x64
 80011d2:	4863      	ldr	r0, [pc, #396]	; (8001360 <main+0x3e0>)
 80011d4:	f003 ffef 	bl	80051b6 <HAL_UART_Transmit>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 80011d8:	2200      	movs	r2, #0
 80011da:	2120      	movs	r1, #32
 80011dc:	4863      	ldr	r0, [pc, #396]	; (800136c <main+0x3ec>)
 80011de:	f002 f92b 	bl	8003438 <HAL_GPIO_WritePin>
	}

	if (CTRL_REG2_A_status != HAL_OK) {
 80011e2:	f897 3155 	ldrb.w	r3, [r7, #341]	; 0x155
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d014      	beq.n	8001214 <main+0x294>
		HAL_UART_Transmit(&huart2,  (uint8_t*)ACC_Buffer, sprintf(ACC_Buffer, "Failed REG2:  %d\n\r", CTRL_REG2_A_status), 100);
 80011ea:	f897 2155 	ldrb.w	r2, [r7, #341]	; 0x155
 80011ee:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80011f2:	495f      	ldr	r1, [pc, #380]	; (8001370 <main+0x3f0>)
 80011f4:	4618      	mov	r0, r3
 80011f6:	f004 ff43 	bl	8006080 <siprintf>
 80011fa:	4603      	mov	r3, r0
 80011fc:	b29a      	uxth	r2, r3
 80011fe:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001202:	2364      	movs	r3, #100	; 0x64
 8001204:	4856      	ldr	r0, [pc, #344]	; (8001360 <main+0x3e0>)
 8001206:	f003 ffd6 	bl	80051b6 <HAL_UART_Transmit>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 800120a:	2200      	movs	r2, #0
 800120c:	2120      	movs	r1, #32
 800120e:	4857      	ldr	r0, [pc, #348]	; (800136c <main+0x3ec>)
 8001210:	f002 f912 	bl	8003438 <HAL_GPIO_WritePin>
	}

	if (CTRL_REG3_A_status != HAL_OK) {
 8001214:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8001218:	2b00      	cmp	r3, #0
 800121a:	d014      	beq.n	8001246 <main+0x2c6>
		HAL_UART_Transmit(&huart2,  (uint8_t*)ACC_Buffer, sprintf(ACC_Buffer, "Failed REG3:  %d\n\r", CTRL_REG3_A_status), 100);
 800121c:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8001220:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001224:	4953      	ldr	r1, [pc, #332]	; (8001374 <main+0x3f4>)
 8001226:	4618      	mov	r0, r3
 8001228:	f004 ff2a 	bl	8006080 <siprintf>
 800122c:	4603      	mov	r3, r0
 800122e:	b29a      	uxth	r2, r3
 8001230:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001234:	2364      	movs	r3, #100	; 0x64
 8001236:	484a      	ldr	r0, [pc, #296]	; (8001360 <main+0x3e0>)
 8001238:	f003 ffbd 	bl	80051b6 <HAL_UART_Transmit>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 800123c:	2200      	movs	r2, #0
 800123e:	2120      	movs	r1, #32
 8001240:	484a      	ldr	r0, [pc, #296]	; (800136c <main+0x3ec>)
 8001242:	f002 f8f9 	bl	8003438 <HAL_GPIO_WritePin>
	}

	if (CTRL_REG4_A_status != HAL_OK) {
 8001246:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 800124a:	2b00      	cmp	r3, #0
 800124c:	d014      	beq.n	8001278 <main+0x2f8>
		HAL_UART_Transmit(&huart2,  (uint8_t*)ACC_Buffer, sprintf(ACC_Buffer, "Failed REG4:  %d\n\r", CTRL_REG4_A_status), 100);
 800124e:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
 8001252:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001256:	4948      	ldr	r1, [pc, #288]	; (8001378 <main+0x3f8>)
 8001258:	4618      	mov	r0, r3
 800125a:	f004 ff11 	bl	8006080 <siprintf>
 800125e:	4603      	mov	r3, r0
 8001260:	b29a      	uxth	r2, r3
 8001262:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001266:	2364      	movs	r3, #100	; 0x64
 8001268:	483d      	ldr	r0, [pc, #244]	; (8001360 <main+0x3e0>)
 800126a:	f003 ffa4 	bl	80051b6 <HAL_UART_Transmit>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 800126e:	2200      	movs	r2, #0
 8001270:	2120      	movs	r1, #32
 8001272:	483e      	ldr	r0, [pc, #248]	; (800136c <main+0x3ec>)
 8001274:	f002 f8e0 	bl	8003438 <HAL_GPIO_WritePin>
	}

	/*
	 * Check Status
	 */
	uint8_t STATUS_REG_A_val = 0;
 8001278:	f107 0383 	add.w	r3, r7, #131	; 0x83
 800127c:	2200      	movs	r2, #0
 800127e:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef STATUS_REG_A_status;

	/*
	 * Read First
	 */
	uint8_t OUT_X_L_A_val = 0x00;
 8001280:	f107 0382 	add.w	r3, r7, #130	; 0x82
 8001284:	2200      	movs	r2, #0
 8001286:	701a      	strb	r2, [r3, #0]
	uint8_t OUT_X_H_A_val = 0x00;
 8001288:	f107 0381 	add.w	r3, r7, #129	; 0x81
 800128c:	2200      	movs	r2, #0
 800128e:	701a      	strb	r2, [r3, #0]
	int16_t OUT_X_A_val = 0x00;
 8001290:	2300      	movs	r3, #0
 8001292:	f8a7 31d2 	strh.w	r3, [r7, #466]	; 0x1d2

	uint8_t OUT_Y_L_A_val = 0x00;
 8001296:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800129a:	2200      	movs	r2, #0
 800129c:	701a      	strb	r2, [r3, #0]
	uint8_t OUT_Y_H_A_val = 0x00;
 800129e:	f107 037f 	add.w	r3, r7, #127	; 0x7f
 80012a2:	2200      	movs	r2, #0
 80012a4:	701a      	strb	r2, [r3, #0]
	int16_t OUT_Y_A_val = 0x00;
 80012a6:	2300      	movs	r3, #0
 80012a8:	f8a7 31d0 	strh.w	r3, [r7, #464]	; 0x1d0

	uint8_t OUT_Z_L_A_val = 0x00;
 80012ac:	f107 037e 	add.w	r3, r7, #126	; 0x7e
 80012b0:	2200      	movs	r2, #0
 80012b2:	701a      	strb	r2, [r3, #0]
	uint8_t OUT_Z_H_A_val = 0x00;
 80012b4:	f107 037d 	add.w	r3, r7, #125	; 0x7d
 80012b8:	2200      	movs	r2, #0
 80012ba:	701a      	strb	r2, [r3, #0]
	int16_t OUT_Z_A_val = 0x00;
 80012bc:	2300      	movs	r3, #0
 80012be:	f8a7 31ca 	strh.w	r3, [r7, #458]	; 0x1ca

	HAL_StatusTypeDef OUT_X_L_A_status = 0x00;
 80012c2:	2300      	movs	r3, #0
 80012c4:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
	HAL_StatusTypeDef OUT_X_H_A_status = 0x00;
 80012c8:	2300      	movs	r3, #0
 80012ca:	f887 3151 	strb.w	r3, [r7, #337]	; 0x151

	HAL_StatusTypeDef OUT_Y_L_A_status = 0x00;
 80012ce:	2300      	movs	r3, #0
 80012d0:	f887 3150 	strb.w	r3, [r7, #336]	; 0x150
	HAL_StatusTypeDef OUT_Y_H_A_status = 0x00;
 80012d4:	2300      	movs	r3, #0
 80012d6:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f

	HAL_StatusTypeDef OUT_Z_L_A_status = 0x00;
 80012da:	2300      	movs	r3, #0
 80012dc:	f887 314e 	strb.w	r3, [r7, #334]	; 0x14e
	HAL_StatusTypeDef OUT_Z_H_A_status = 0x00;
 80012e0:	2300      	movs	r3, #0
 80012e2:	f887 314d 	strb.w	r3, [r7, #333]	; 0x14d
	 * Magnetometer
	 */
	/*
	 * Check Communication from Magnetometer
	 */
	char mag_enabled[50] = "Magnetometer Enabled\n\r";
 80012e6:	f107 0648 	add.w	r6, r7, #72	; 0x48
 80012ea:	4b24      	ldr	r3, [pc, #144]	; (800137c <main+0x3fc>)
 80012ec:	4634      	mov	r4, r6
 80012ee:	461d      	mov	r5, r3
 80012f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012f4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80012f8:	6020      	str	r0, [r4, #0]
 80012fa:	3404      	adds	r4, #4
 80012fc:	8021      	strh	r1, [r4, #0]
 80012fe:	3402      	adds	r4, #2
 8001300:	0c0b      	lsrs	r3, r1, #16
 8001302:	7023      	strb	r3, [r4, #0]
 8001304:	f106 0317 	add.w	r3, r6, #23
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	611a      	str	r2, [r3, #16]
 8001314:	615a      	str	r2, [r3, #20]
 8001316:	f8c3 2017 	str.w	r2, [r3, #23]
	uint8_t who_am_i_m_val;
	HAL_StatusTypeDef who_am_i_m_status = HAL_I2C_Mem_Read(&hi2c1, (MAG<<1)|0x1 , WHO_AM_I_M, 1, &who_am_i_m_val, 1, 50);
 800131a:	2332      	movs	r3, #50	; 0x32
 800131c:	9302      	str	r3, [sp, #8]
 800131e:	2301      	movs	r3, #1
 8001320:	9301      	str	r3, [sp, #4]
 8001322:	f107 0347 	add.w	r3, r7, #71	; 0x47
 8001326:	9300      	str	r3, [sp, #0]
 8001328:	2301      	movs	r3, #1
 800132a:	224f      	movs	r2, #79	; 0x4f
 800132c:	213d      	movs	r1, #61	; 0x3d
 800132e:	480d      	ldr	r0, [pc, #52]	; (8001364 <main+0x3e4>)
 8001330:	f002 fada 	bl	80038e8 <HAL_I2C_Mem_Read>
 8001334:	4603      	mov	r3, r0
 8001336:	f887 314c 	strb.w	r3, [r7, #332]	; 0x14c
	char MAG_Buffer[32];
	if (who_am_i_m_status == HAL_OK && who_am_i_m_val == 64) {
 800133a:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800133e:	2b00      	cmp	r3, #0
 8001340:	d11e      	bne.n	8001380 <main+0x400>
 8001342:	f107 0347 	add.w	r3, r7, #71	; 0x47
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b40      	cmp	r3, #64	; 0x40
 800134a:	d119      	bne.n	8001380 <main+0x400>
		HAL_UART_Transmit(&huart2, (uint8_t*)mag_enabled , sizeof(mag_enabled), 100);
 800134c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001350:	2364      	movs	r3, #100	; 0x64
 8001352:	2232      	movs	r2, #50	; 0x32
 8001354:	4802      	ldr	r0, [pc, #8]	; (8001360 <main+0x3e0>)
 8001356:	f003 ff2e 	bl	80051b6 <HAL_UART_Transmit>
 800135a:	e025      	b.n	80013a8 <main+0x428>
 800135c:	0800990c 	.word	0x0800990c
 8001360:	20000284 	.word	0x20000284
 8001364:	20000230 	.word	0x20000230
 8001368:	08009920 	.word	0x08009920
 800136c:	40020000 	.word	0x40020000
 8001370:	08009934 	.word	0x08009934
 8001374:	08009948 	.word	0x08009948
 8001378:	0800995c 	.word	0x0800995c
 800137c:	08009ae8 	.word	0x08009ae8
	} else if (who_am_i_m_status != HAL_OK) {
 8001380:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8001384:	2b00      	cmp	r3, #0
 8001386:	d00f      	beq.n	80013a8 <main+0x428>
		HAL_UART_Transmit(&huart2,  (uint8_t*)MAG_Buffer, sprintf(MAG_Buffer, "%d\n\r", who_am_i_m_status), 100);
 8001388:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800138c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001390:	4993      	ldr	r1, [pc, #588]	; (80015e0 <main+0x660>)
 8001392:	4618      	mov	r0, r3
 8001394:	f004 fe74 	bl	8006080 <siprintf>
 8001398:	4603      	mov	r3, r0
 800139a:	b29a      	uxth	r2, r3
 800139c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80013a0:	2364      	movs	r3, #100	; 0x64
 80013a2:	4890      	ldr	r0, [pc, #576]	; (80015e4 <main+0x664>)
 80013a4:	f003 ff07 	bl	80051b6 <HAL_UART_Transmit>
	}
	/*
	 * Set Control Registers
	 */
	uint8_t CFG_REG_A_M_val = 0x8C;
 80013a8:	f107 0323 	add.w	r3, r7, #35	; 0x23
 80013ac:	228c      	movs	r2, #140	; 0x8c
 80013ae:	701a      	strb	r2, [r3, #0]
	uint8_t CFG_REG_B_M_val = 0x03;
 80013b0:	f107 0322 	add.w	r3, r7, #34	; 0x22
 80013b4:	2203      	movs	r2, #3
 80013b6:	701a      	strb	r2, [r3, #0]
	uint8_t CFG_REG_C_M_val = 0x10;
 80013b8:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80013bc:	2210      	movs	r2, #16
 80013be:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef CFG_REG_A_M_Status = HAL_I2C_Mem_Write(&hi2c1, (MAG<<1), CFG_REG_A_M, 1, &CFG_REG_A_M_val, 1, 50);
 80013c0:	2332      	movs	r3, #50	; 0x32
 80013c2:	9302      	str	r3, [sp, #8]
 80013c4:	2301      	movs	r3, #1
 80013c6:	9301      	str	r3, [sp, #4]
 80013c8:	f107 0323 	add.w	r3, r7, #35	; 0x23
 80013cc:	9300      	str	r3, [sp, #0]
 80013ce:	2301      	movs	r3, #1
 80013d0:	2260      	movs	r2, #96	; 0x60
 80013d2:	213c      	movs	r1, #60	; 0x3c
 80013d4:	4884      	ldr	r0, [pc, #528]	; (80015e8 <main+0x668>)
 80013d6:	f002 f98d 	bl	80036f4 <HAL_I2C_Mem_Write>
 80013da:	4603      	mov	r3, r0
 80013dc:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
	HAL_StatusTypeDef CFG_REG_B_M_status = HAL_I2C_Mem_Write(&hi2c1, (MAG<<1), CFG_REG_B_M, 1, &CFG_REG_B_M_val, 1, 50);
 80013e0:	2332      	movs	r3, #50	; 0x32
 80013e2:	9302      	str	r3, [sp, #8]
 80013e4:	2301      	movs	r3, #1
 80013e6:	9301      	str	r3, [sp, #4]
 80013e8:	f107 0322 	add.w	r3, r7, #34	; 0x22
 80013ec:	9300      	str	r3, [sp, #0]
 80013ee:	2301      	movs	r3, #1
 80013f0:	2261      	movs	r2, #97	; 0x61
 80013f2:	213c      	movs	r1, #60	; 0x3c
 80013f4:	487c      	ldr	r0, [pc, #496]	; (80015e8 <main+0x668>)
 80013f6:	f002 f97d 	bl	80036f4 <HAL_I2C_Mem_Write>
 80013fa:	4603      	mov	r3, r0
 80013fc:	f887 314a 	strb.w	r3, [r7, #330]	; 0x14a
	HAL_StatusTypeDef CFG_REG_C_M_status = HAL_I2C_Mem_Write(&hi2c1, (MAG<<1), CFG_REG_C_M, 1, &CFG_REG_C_M_val, 1, 50);
 8001400:	2332      	movs	r3, #50	; 0x32
 8001402:	9302      	str	r3, [sp, #8]
 8001404:	2301      	movs	r3, #1
 8001406:	9301      	str	r3, [sp, #4]
 8001408:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800140c:	9300      	str	r3, [sp, #0]
 800140e:	2301      	movs	r3, #1
 8001410:	2262      	movs	r2, #98	; 0x62
 8001412:	213c      	movs	r1, #60	; 0x3c
 8001414:	4874      	ldr	r0, [pc, #464]	; (80015e8 <main+0x668>)
 8001416:	f002 f96d 	bl	80036f4 <HAL_I2C_Mem_Write>
 800141a:	4603      	mov	r3, r0
 800141c:	f887 3149 	strb.w	r3, [r7, #329]	; 0x149

	if (CFG_REG_A_M_Status != HAL_OK) {
 8001420:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 8001424:	2b00      	cmp	r3, #0
 8001426:	d014      	beq.n	8001452 <main+0x4d2>
		HAL_UART_Transmit(&huart2,  (uint8_t*)MAG_Buffer, sprintf(MAG_Buffer, "Failed REG1:  %d\n\r", CFG_REG_A_M_Status), 100);
 8001428:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 800142c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001430:	496e      	ldr	r1, [pc, #440]	; (80015ec <main+0x66c>)
 8001432:	4618      	mov	r0, r3
 8001434:	f004 fe24 	bl	8006080 <siprintf>
 8001438:	4603      	mov	r3, r0
 800143a:	b29a      	uxth	r2, r3
 800143c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001440:	2364      	movs	r3, #100	; 0x64
 8001442:	4868      	ldr	r0, [pc, #416]	; (80015e4 <main+0x664>)
 8001444:	f003 feb7 	bl	80051b6 <HAL_UART_Transmit>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 8001448:	2200      	movs	r2, #0
 800144a:	2120      	movs	r1, #32
 800144c:	4868      	ldr	r0, [pc, #416]	; (80015f0 <main+0x670>)
 800144e:	f001 fff3 	bl	8003438 <HAL_GPIO_WritePin>
	}

	if (CFG_REG_B_M_status != HAL_OK) {
 8001452:	f897 314a 	ldrb.w	r3, [r7, #330]	; 0x14a
 8001456:	2b00      	cmp	r3, #0
 8001458:	d014      	beq.n	8001484 <main+0x504>
		HAL_UART_Transmit(&huart2,  (uint8_t*)MAG_Buffer, sprintf(MAG_Buffer, "Failed REG2:  %d\n\r", CFG_REG_B_M_status), 100);
 800145a:	f897 214a 	ldrb.w	r2, [r7, #330]	; 0x14a
 800145e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001462:	4964      	ldr	r1, [pc, #400]	; (80015f4 <main+0x674>)
 8001464:	4618      	mov	r0, r3
 8001466:	f004 fe0b 	bl	8006080 <siprintf>
 800146a:	4603      	mov	r3, r0
 800146c:	b29a      	uxth	r2, r3
 800146e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001472:	2364      	movs	r3, #100	; 0x64
 8001474:	485b      	ldr	r0, [pc, #364]	; (80015e4 <main+0x664>)
 8001476:	f003 fe9e 	bl	80051b6 <HAL_UART_Transmit>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 800147a:	2200      	movs	r2, #0
 800147c:	2120      	movs	r1, #32
 800147e:	485c      	ldr	r0, [pc, #368]	; (80015f0 <main+0x670>)
 8001480:	f001 ffda 	bl	8003438 <HAL_GPIO_WritePin>
	}

	if (CFG_REG_C_M_status != HAL_OK) {
 8001484:	f897 3149 	ldrb.w	r3, [r7, #329]	; 0x149
 8001488:	2b00      	cmp	r3, #0
 800148a:	d014      	beq.n	80014b6 <main+0x536>
		HAL_UART_Transmit(&huart2,  (uint8_t*)MAG_Buffer, sprintf(MAG_Buffer, "Failed REG3:  %d\n\r", CFG_REG_C_M_status), 100);
 800148c:	f897 2149 	ldrb.w	r2, [r7, #329]	; 0x149
 8001490:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001494:	4958      	ldr	r1, [pc, #352]	; (80015f8 <main+0x678>)
 8001496:	4618      	mov	r0, r3
 8001498:	f004 fdf2 	bl	8006080 <siprintf>
 800149c:	4603      	mov	r3, r0
 800149e:	b29a      	uxth	r2, r3
 80014a0:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80014a4:	2364      	movs	r3, #100	; 0x64
 80014a6:	484f      	ldr	r0, [pc, #316]	; (80015e4 <main+0x664>)
 80014a8:	f003 fe85 	bl	80051b6 <HAL_UART_Transmit>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 80014ac:	2200      	movs	r2, #0
 80014ae:	2120      	movs	r1, #32
 80014b0:	484f      	ldr	r0, [pc, #316]	; (80015f0 <main+0x670>)
 80014b2:	f001 ffc1 	bl	8003438 <HAL_GPIO_WritePin>
	}

	/*
	 * Check Status
	 */
	uint8_t STATUS_REG_M_val = 0;
 80014b6:	f107 0320 	add.w	r3, r7, #32
 80014ba:	2200      	movs	r2, #0
 80014bc:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef STATUS_REG_M_status;

	/*
	 * Read First
	 */
	uint8_t OUTX_L_REG_M_val = 0x00;
 80014be:	f107 031f 	add.w	r3, r7, #31
 80014c2:	2200      	movs	r2, #0
 80014c4:	701a      	strb	r2, [r3, #0]
	uint8_t OUTX_H_REG_M_val = 0x00;
 80014c6:	f107 031e 	add.w	r3, r7, #30
 80014ca:	2200      	movs	r2, #0
 80014cc:	701a      	strb	r2, [r3, #0]
	int16_t OUTX_M_val = 0x00;
 80014ce:	2300      	movs	r3, #0
 80014d0:	f8a7 31cc 	strh.w	r3, [r7, #460]	; 0x1cc

	uint8_t OUTY_L_REG_M_val = 0x00;
 80014d4:	f107 031d 	add.w	r3, r7, #29
 80014d8:	2200      	movs	r2, #0
 80014da:	701a      	strb	r2, [r3, #0]
	uint8_t OUTY_H_REG_M_val = 0x00;
 80014dc:	f107 031c 	add.w	r3, r7, #28
 80014e0:	2200      	movs	r2, #0
 80014e2:	701a      	strb	r2, [r3, #0]
	int16_t OUTY_M_val = 0x00;
 80014e4:	2300      	movs	r3, #0
 80014e6:	f8a7 31ce 	strh.w	r3, [r7, #462]	; 0x1ce

	uint8_t OUTZ_L_REG_M_val = 0x00;
 80014ea:	f107 031b 	add.w	r3, r7, #27
 80014ee:	2200      	movs	r2, #0
 80014f0:	701a      	strb	r2, [r3, #0]
	uint8_t OUTZ_H_REG_M_val = 0x00;
 80014f2:	f107 031a 	add.w	r3, r7, #26
 80014f6:	2200      	movs	r2, #0
 80014f8:	701a      	strb	r2, [r3, #0]
	int16_t OUTZ_M_val = 0x00;
 80014fa:	2300      	movs	r3, #0
 80014fc:	f8a7 31d6 	strh.w	r3, [r7, #470]	; 0x1d6

	HAL_StatusTypeDef OUTX_L_M_status = 0x00;
 8001500:	2300      	movs	r3, #0
 8001502:	f887 3148 	strb.w	r3, [r7, #328]	; 0x148
	HAL_StatusTypeDef OUTX_H_M_status = 0x00;
 8001506:	2300      	movs	r3, #0
 8001508:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	HAL_StatusTypeDef OUTY_L_M_status = 0x00;
 800150c:	2300      	movs	r3, #0
 800150e:	f887 3146 	strb.w	r3, [r7, #326]	; 0x146
	HAL_StatusTypeDef OUTY_H_M_status = 0x00;
 8001512:	2300      	movs	r3, #0
 8001514:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145

	HAL_StatusTypeDef OUTZ_L_M_status = 0x00;
 8001518:	2300      	movs	r3, #0
 800151a:	f887 3144 	strb.w	r3, [r7, #324]	; 0x144
	HAL_StatusTypeDef OUTZ_H_M_status = 0x00;
 800151e:	2300      	movs	r3, #0
 8001520:	f887 3143 	strb.w	r3, [r7, #323]	; 0x143


	/*
	 * Start up
	 */
	HAL_Delay(1000);
 8001524:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001528:	f001 fcd0 	bl	8002ecc <HAL_Delay>

	/*
	* Button De-bounce
	*/
	int pushed = 0;
 800152c:	2300      	movs	r3, #0
 800152e:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8

	/*
	 * Tick
	 */
	uint32_t current_tick =  HAL_GetTick();
 8001532:	f001 fcbf 	bl	8002eb4 <HAL_GetTick>
 8001536:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c

	/*
	 * Step Count
	 */
	uint8_t start_count = 0;
 800153a:	2300      	movs	r3, #0
 800153c:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
	uint8_t step_counting = 0;
 8001540:	2300      	movs	r3, #0
 8001542:	f887 31dd 	strb.w	r3, [r7, #477]	; 0x1dd
	uint16_t steps = 0;
 8001546:	2300      	movs	r3, #0
 8001548:	f8a7 31de 	strh.w	r3, [r7, #478]	; 0x1de
	uint32_t increase_prev = 0;
 800154c:	2300      	movs	r3, #0
 800154e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4

	/*
	 * Orientation
	 */
	float initial_yaw = 0;
 8001552:	f04f 0300 	mov.w	r3, #0
 8001556:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
	uint8_t offset_measure = 0;
 800155a:	2300      	movs	r3, #0
 800155c:	f887 31bf 	strb.w	r3, [r7, #447]	; 0x1bf
	float offset = 11.9758333333;
 8001560:	4b26      	ldr	r3, [pc, #152]	; (80015fc <main+0x67c>)
 8001562:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
	float yaw = 0;
 8001566:	f04f 0300 	mov.w	r3, #0
 800156a:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4

	/*
	 * Init button
	 */
	uint8_t first_pochi = 0;
 800156e:	2300      	movs	r3, #0
 8001570:	f887 313a 	strb.w	r3, [r7, #314]	; 0x13a

	/*
	 * Previous Coord
	 */
	float x_pos_prev = 0;
 8001574:	f04f 0300 	mov.w	r3, #0
 8001578:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
	float y_pos_prev = 0;
 800157c:	f04f 0300 	mov.w	r3, #0
 8001580:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac

	/*
	 * Send Coord
	 */
	uint8_t ready_to_send = 0;
 8001584:	2300      	movs	r3, #0
 8001586:	f887 31ab 	strb.w	r3, [r7, #427]	; 0x1ab

	/*
	 * Stationary G
	 */
	float stationary_x = 0;
 800158a:	f04f 0300 	mov.w	r3, #0
 800158e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
	float stationary_y = 0;
 8001592:	f04f 0300 	mov.w	r3, #0
 8001596:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	float stationary_z = 0;
 800159a:	f04f 0300 	mov.w	r3, #0
 800159e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

	/*
	 * Average Accelerometer
	 */
	float avg_x_a = 0;
 80015a2:	f04f 0300 	mov.w	r3, #0
 80015a6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
	float avg_y_a = 0;
 80015aa:	f04f 0300 	mov.w	r3, #0
 80015ae:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
	float avg_z_a = 0;
 80015b2:	f04f 0300 	mov.w	r3, #0
 80015b6:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
	uint8_t offset_avg_count = 0;
 80015ba:	2300      	movs	r3, #0
 80015bc:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197

	/*
	 * Average Magnetometer
	 */
	float avg_x_m = 0;
 80015c0:	f04f 0300 	mov.w	r3, #0
 80015c4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
	float avg_y_m = 0;
 80015c8:	f04f 0300 	mov.w	r3, #0
 80015cc:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
	float avg_z_m = 0;
 80015d0:	f04f 0300 	mov.w	r3, #0
 80015d4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	/*
	 * Average Angle
	 */
	float angles[5];
	float angle_avg;
	for (int i = 0; i<sizeof(angles)/sizeof(float); i++) {
 80015d8:	2300      	movs	r3, #0
 80015da:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80015de:	e01c      	b.n	800161a <main+0x69a>
 80015e0:	0800990c 	.word	0x0800990c
 80015e4:	20000284 	.word	0x20000284
 80015e8:	20000230 	.word	0x20000230
 80015ec:	08009920 	.word	0x08009920
 80015f0:	40020000 	.word	0x40020000
 80015f4:	08009934 	.word	0x08009934
 80015f8:	08009948 	.word	0x08009948
 80015fc:	413f9d03 	.word	0x413f9d03
		angles[i] = 0;//initialise
 8001600:	1d3a      	adds	r2, r7, #4
 8001602:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	4413      	add	r3, r2
 800160a:	f04f 0200 	mov.w	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
	for (int i = 0; i<sizeof(angles)/sizeof(float); i++) {
 8001610:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001614:	3301      	adds	r3, #1
 8001616:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800161a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800161e:	2b04      	cmp	r3, #4
 8001620:	d9ee      	bls.n	8001600 <main+0x680>
	}
	float turn_prev = 0;
 8001622:	f04f 0300 	mov.w	r3, #0
 8001626:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
	uint8_t angle_count = 0;
 800162a:	2300      	movs	r3, #0
 800162c:	f887 317b 	strb.w	r3, [r7, #379]	; 0x17b

	while (1)
	{

//		HAL_UART_Transmit(&huart2,  (uint8_t*)clear, sizeof(clear), 100);
		STATUS_REG_A_status = HAL_I2C_Mem_Read(&hi2c1, (ACC<<1)|0x1, STATUS_REG_A, 1, &STATUS_REG_A_val, 1, 50);
 8001630:	2332      	movs	r3, #50	; 0x32
 8001632:	9302      	str	r3, [sp, #8]
 8001634:	2301      	movs	r3, #1
 8001636:	9301      	str	r3, [sp, #4]
 8001638:	f107 0383 	add.w	r3, r7, #131	; 0x83
 800163c:	9300      	str	r3, [sp, #0]
 800163e:	2301      	movs	r3, #1
 8001640:	2227      	movs	r2, #39	; 0x27
 8001642:	2133      	movs	r1, #51	; 0x33
 8001644:	48d3      	ldr	r0, [pc, #844]	; (8001994 <main+0xa14>)
 8001646:	f002 f94f 	bl	80038e8 <HAL_I2C_Mem_Read>
 800164a:	4603      	mov	r3, r0
 800164c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

		if (STATUS_REG_A_status == HAL_OK && ((STATUS_REG_A_val & 0x08)>>3) == 1) {
 8001650:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8001654:	2b00      	cmp	r3, #0
 8001656:	f040 84e4 	bne.w	8002022 <main+0x10a2>
 800165a:	f107 0383 	add.w	r3, r7, #131	; 0x83
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	f003 0308 	and.w	r3, r3, #8
 8001664:	2b00      	cmp	r3, #0
 8001666:	f000 84dc 	beq.w	8002022 <main+0x10a2>
 800166a:	466b      	mov	r3, sp
 800166c:	461e      	mov	r6, r3
			/*
			 * Sampling
			 */
			uint8_t sample_a = 5;
 800166e:	2305      	movs	r3, #5
 8001670:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
			int16_t arr_x_a[sample_a];
 8001674:	f897 412e 	ldrb.w	r4, [r7, #302]	; 0x12e
 8001678:	4623      	mov	r3, r4
 800167a:	3b01      	subs	r3, #1
 800167c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001680:	b2e0      	uxtb	r0, r4
 8001682:	f04f 0100 	mov.w	r1, #0
 8001686:	f04f 0200 	mov.w	r2, #0
 800168a:	f04f 0300 	mov.w	r3, #0
 800168e:	010b      	lsls	r3, r1, #4
 8001690:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8001694:	0102      	lsls	r2, r0, #4
 8001696:	b2e0      	uxtb	r0, r4
 8001698:	f04f 0100 	mov.w	r1, #0
 800169c:	f04f 0200 	mov.w	r2, #0
 80016a0:	f04f 0300 	mov.w	r3, #0
 80016a4:	010b      	lsls	r3, r1, #4
 80016a6:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 80016aa:	0102      	lsls	r2, r0, #4
 80016ac:	4623      	mov	r3, r4
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	3307      	adds	r3, #7
 80016b2:	08db      	lsrs	r3, r3, #3
 80016b4:	00db      	lsls	r3, r3, #3
 80016b6:	ebad 0d03 	sub.w	sp, sp, r3
 80016ba:	ab04      	add	r3, sp, #16
 80016bc:	3301      	adds	r3, #1
 80016be:	085b      	lsrs	r3, r3, #1
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
			int16_t arr_y_a[sample_a];
 80016c6:	f897 412e 	ldrb.w	r4, [r7, #302]	; 0x12e
 80016ca:	4623      	mov	r3, r4
 80016cc:	3b01      	subs	r3, #1
 80016ce:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80016d2:	b2e0      	uxtb	r0, r4
 80016d4:	f04f 0100 	mov.w	r1, #0
 80016d8:	f04f 0200 	mov.w	r2, #0
 80016dc:	f04f 0300 	mov.w	r3, #0
 80016e0:	010b      	lsls	r3, r1, #4
 80016e2:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 80016e6:	0102      	lsls	r2, r0, #4
 80016e8:	b2e0      	uxtb	r0, r4
 80016ea:	f04f 0100 	mov.w	r1, #0
 80016ee:	f04f 0200 	mov.w	r2, #0
 80016f2:	f04f 0300 	mov.w	r3, #0
 80016f6:	010b      	lsls	r3, r1, #4
 80016f8:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 80016fc:	0102      	lsls	r2, r0, #4
 80016fe:	4623      	mov	r3, r4
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	3307      	adds	r3, #7
 8001704:	08db      	lsrs	r3, r3, #3
 8001706:	00db      	lsls	r3, r3, #3
 8001708:	ebad 0d03 	sub.w	sp, sp, r3
 800170c:	ab04      	add	r3, sp, #16
 800170e:	3301      	adds	r3, #1
 8001710:	085b      	lsrs	r3, r3, #1
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
			int16_t arr_z_a[sample_a];
 8001718:	f897 412e 	ldrb.w	r4, [r7, #302]	; 0x12e
 800171c:	4623      	mov	r3, r4
 800171e:	3b01      	subs	r3, #1
 8001720:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8001724:	b2e0      	uxtb	r0, r4
 8001726:	f04f 0100 	mov.w	r1, #0
 800172a:	f04f 0200 	mov.w	r2, #0
 800172e:	f04f 0300 	mov.w	r3, #0
 8001732:	010b      	lsls	r3, r1, #4
 8001734:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8001738:	0102      	lsls	r2, r0, #4
 800173a:	b2e0      	uxtb	r0, r4
 800173c:	f04f 0100 	mov.w	r1, #0
 8001740:	f04f 0200 	mov.w	r2, #0
 8001744:	f04f 0300 	mov.w	r3, #0
 8001748:	010b      	lsls	r3, r1, #4
 800174a:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 800174e:	0102      	lsls	r2, r0, #4
 8001750:	4623      	mov	r3, r4
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	3307      	adds	r3, #7
 8001756:	08db      	lsrs	r3, r3, #3
 8001758:	00db      	lsls	r3, r3, #3
 800175a:	ebad 0d03 	sub.w	sp, sp, r3
 800175e:	ab04      	add	r3, sp, #16
 8001760:	3301      	adds	r3, #1
 8001762:	085b      	lsrs	r3, r3, #1
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
			for (int i=0;i<sample_a;i++) {
 800176a:	2300      	movs	r3, #0
 800176c:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8001770:	e104      	b.n	800197c <main+0x9fc>

				STATUS_REG_A_status = HAL_I2C_Mem_Read(&hi2c1, (ACC<<1)|0x1, STATUS_REG_A, 1, &STATUS_REG_A_val, 1, 50);
 8001772:	2332      	movs	r3, #50	; 0x32
 8001774:	9302      	str	r3, [sp, #8]
 8001776:	2301      	movs	r3, #1
 8001778:	9301      	str	r3, [sp, #4]
 800177a:	f107 0383 	add.w	r3, r7, #131	; 0x83
 800177e:	9300      	str	r3, [sp, #0]
 8001780:	2301      	movs	r3, #1
 8001782:	2227      	movs	r2, #39	; 0x27
 8001784:	2133      	movs	r1, #51	; 0x33
 8001786:	4883      	ldr	r0, [pc, #524]	; (8001994 <main+0xa14>)
 8001788:	f002 f8ae 	bl	80038e8 <HAL_I2C_Mem_Read>
 800178c:	4603      	mov	r3, r0
 800178e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
				while (((STATUS_REG_A_val & 0x08)>>3) != 1) {
 8001792:	e00f      	b.n	80017b4 <main+0x834>
					STATUS_REG_A_status = HAL_I2C_Mem_Read(&hi2c1, (ACC<<1)|0x1, STATUS_REG_A, 1, &STATUS_REG_A_val, 1, 50);
 8001794:	2332      	movs	r3, #50	; 0x32
 8001796:	9302      	str	r3, [sp, #8]
 8001798:	2301      	movs	r3, #1
 800179a:	9301      	str	r3, [sp, #4]
 800179c:	f107 0383 	add.w	r3, r7, #131	; 0x83
 80017a0:	9300      	str	r3, [sp, #0]
 80017a2:	2301      	movs	r3, #1
 80017a4:	2227      	movs	r2, #39	; 0x27
 80017a6:	2133      	movs	r1, #51	; 0x33
 80017a8:	487a      	ldr	r0, [pc, #488]	; (8001994 <main+0xa14>)
 80017aa:	f002 f89d 	bl	80038e8 <HAL_I2C_Mem_Read>
 80017ae:	4603      	mov	r3, r0
 80017b0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
				while (((STATUS_REG_A_val & 0x08)>>3) != 1) {
 80017b4:	f107 0383 	add.w	r3, r7, #131	; 0x83
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	f003 0308 	and.w	r3, r3, #8
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d0e8      	beq.n	8001794 <main+0x814>
				}
				OUT_X_L_A_status = HAL_I2C_Mem_Read(&hi2c1, (ACC<<1)|0x1, OUT_X_L_A, 1, &OUT_X_L_A_val, 1, 50);
 80017c2:	2332      	movs	r3, #50	; 0x32
 80017c4:	9302      	str	r3, [sp, #8]
 80017c6:	2301      	movs	r3, #1
 80017c8:	9301      	str	r3, [sp, #4]
 80017ca:	f107 0382 	add.w	r3, r7, #130	; 0x82
 80017ce:	9300      	str	r3, [sp, #0]
 80017d0:	2301      	movs	r3, #1
 80017d2:	2228      	movs	r2, #40	; 0x28
 80017d4:	2133      	movs	r1, #51	; 0x33
 80017d6:	486f      	ldr	r0, [pc, #444]	; (8001994 <main+0xa14>)
 80017d8:	f002 f886 	bl	80038e8 <HAL_I2C_Mem_Read>
 80017dc:	4603      	mov	r3, r0
 80017de:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
				OUT_X_H_A_status = HAL_I2C_Mem_Read(&hi2c1, (ACC<<1)|0x1, OUT_X_H_A, 1, &OUT_X_H_A_val, 1, 50);
 80017e2:	2332      	movs	r3, #50	; 0x32
 80017e4:	9302      	str	r3, [sp, #8]
 80017e6:	2301      	movs	r3, #1
 80017e8:	9301      	str	r3, [sp, #4]
 80017ea:	f107 0381 	add.w	r3, r7, #129	; 0x81
 80017ee:	9300      	str	r3, [sp, #0]
 80017f0:	2301      	movs	r3, #1
 80017f2:	2229      	movs	r2, #41	; 0x29
 80017f4:	2133      	movs	r1, #51	; 0x33
 80017f6:	4867      	ldr	r0, [pc, #412]	; (8001994 <main+0xa14>)
 80017f8:	f002 f876 	bl	80038e8 <HAL_I2C_Mem_Read>
 80017fc:	4603      	mov	r3, r0
 80017fe:	f887 3151 	strb.w	r3, [r7, #337]	; 0x151

				OUT_Y_L_A_status = HAL_I2C_Mem_Read(&hi2c1, (ACC<<1)|0x1, OUT_Y_L_A, 1, &OUT_Y_L_A_val, 1, 50);
 8001802:	2332      	movs	r3, #50	; 0x32
 8001804:	9302      	str	r3, [sp, #8]
 8001806:	2301      	movs	r3, #1
 8001808:	9301      	str	r3, [sp, #4]
 800180a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800180e:	9300      	str	r3, [sp, #0]
 8001810:	2301      	movs	r3, #1
 8001812:	222a      	movs	r2, #42	; 0x2a
 8001814:	2133      	movs	r1, #51	; 0x33
 8001816:	485f      	ldr	r0, [pc, #380]	; (8001994 <main+0xa14>)
 8001818:	f002 f866 	bl	80038e8 <HAL_I2C_Mem_Read>
 800181c:	4603      	mov	r3, r0
 800181e:	f887 3150 	strb.w	r3, [r7, #336]	; 0x150
				OUT_Y_H_A_status = HAL_I2C_Mem_Read(&hi2c1, (ACC<<1)|0x1, OUT_Y_H_A, 1, &OUT_Y_H_A_val, 1, 50);
 8001822:	2332      	movs	r3, #50	; 0x32
 8001824:	9302      	str	r3, [sp, #8]
 8001826:	2301      	movs	r3, #1
 8001828:	9301      	str	r3, [sp, #4]
 800182a:	f107 037f 	add.w	r3, r7, #127	; 0x7f
 800182e:	9300      	str	r3, [sp, #0]
 8001830:	2301      	movs	r3, #1
 8001832:	222b      	movs	r2, #43	; 0x2b
 8001834:	2133      	movs	r1, #51	; 0x33
 8001836:	4857      	ldr	r0, [pc, #348]	; (8001994 <main+0xa14>)
 8001838:	f002 f856 	bl	80038e8 <HAL_I2C_Mem_Read>
 800183c:	4603      	mov	r3, r0
 800183e:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f

				OUT_Z_L_A_status = HAL_I2C_Mem_Read(&hi2c1, (ACC<<1)|0x1, OUT_Z_L_A, 1, &OUT_Z_L_A_val, 1, 50);
 8001842:	2332      	movs	r3, #50	; 0x32
 8001844:	9302      	str	r3, [sp, #8]
 8001846:	2301      	movs	r3, #1
 8001848:	9301      	str	r3, [sp, #4]
 800184a:	f107 037e 	add.w	r3, r7, #126	; 0x7e
 800184e:	9300      	str	r3, [sp, #0]
 8001850:	2301      	movs	r3, #1
 8001852:	222c      	movs	r2, #44	; 0x2c
 8001854:	2133      	movs	r1, #51	; 0x33
 8001856:	484f      	ldr	r0, [pc, #316]	; (8001994 <main+0xa14>)
 8001858:	f002 f846 	bl	80038e8 <HAL_I2C_Mem_Read>
 800185c:	4603      	mov	r3, r0
 800185e:	f887 314e 	strb.w	r3, [r7, #334]	; 0x14e
				OUT_Z_H_A_status = HAL_I2C_Mem_Read(&hi2c1, (ACC<<1)|0x1, OUT_Z_H_A, 1, &OUT_Z_H_A_val, 1, 50);
 8001862:	2332      	movs	r3, #50	; 0x32
 8001864:	9302      	str	r3, [sp, #8]
 8001866:	2301      	movs	r3, #1
 8001868:	9301      	str	r3, [sp, #4]
 800186a:	f107 037d 	add.w	r3, r7, #125	; 0x7d
 800186e:	9300      	str	r3, [sp, #0]
 8001870:	2301      	movs	r3, #1
 8001872:	222d      	movs	r2, #45	; 0x2d
 8001874:	2133      	movs	r1, #51	; 0x33
 8001876:	4847      	ldr	r0, [pc, #284]	; (8001994 <main+0xa14>)
 8001878:	f002 f836 	bl	80038e8 <HAL_I2C_Mem_Read>
 800187c:	4603      	mov	r3, r0
 800187e:	f887 314d 	strb.w	r3, [r7, #333]	; 0x14d

				if (OUT_X_L_A_status == HAL_OK && OUT_X_H_A_status == HAL_OK) {
 8001882:	f897 3152 	ldrb.w	r3, [r7, #338]	; 0x152
 8001886:	2b00      	cmp	r3, #0
 8001888:	d11b      	bne.n	80018c2 <main+0x942>
 800188a:	f897 3151 	ldrb.w	r3, [r7, #337]	; 0x151
 800188e:	2b00      	cmp	r3, #0
 8001890:	d117      	bne.n	80018c2 <main+0x942>
					OUT_X_A_val = OUT_X_H_A_val;
 8001892:	f107 0381 	add.w	r3, r7, #129	; 0x81
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	f8a7 31d2 	strh.w	r3, [r7, #466]	; 0x1d2
					OUT_X_A_val <<= 8;
 800189c:	f9b7 31d2 	ldrsh.w	r3, [r7, #466]	; 0x1d2
 80018a0:	021b      	lsls	r3, r3, #8
 80018a2:	f8a7 31d2 	strh.w	r3, [r7, #466]	; 0x1d2
					OUT_X_A_val |= OUT_X_L_A_val;
 80018a6:	f107 0382 	add.w	r3, r7, #130	; 0x82
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	b21a      	sxth	r2, r3
 80018ae:	f8b7 31d2 	ldrh.w	r3, [r7, #466]	; 0x1d2
 80018b2:	4313      	orrs	r3, r2
 80018b4:	f8a7 31d2 	strh.w	r3, [r7, #466]	; 0x1d2
					OUT_X_A_val >>= 6;
 80018b8:	f9b7 31d2 	ldrsh.w	r3, [r7, #466]	; 0x1d2
 80018bc:	119b      	asrs	r3, r3, #6
 80018be:	f8a7 31d2 	strh.w	r3, [r7, #466]	; 0x1d2
				}

				if (OUT_Y_L_A_status == HAL_OK && OUT_Y_H_A_status == HAL_OK) {
 80018c2:	f897 3150 	ldrb.w	r3, [r7, #336]	; 0x150
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d11b      	bne.n	8001902 <main+0x982>
 80018ca:	f897 314f 	ldrb.w	r3, [r7, #335]	; 0x14f
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d117      	bne.n	8001902 <main+0x982>
					OUT_Y_A_val = OUT_Y_H_A_val;
 80018d2:	f107 037f 	add.w	r3, r7, #127	; 0x7f
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	f8a7 31d0 	strh.w	r3, [r7, #464]	; 0x1d0
					OUT_Y_A_val <<= 8;
 80018dc:	f9b7 31d0 	ldrsh.w	r3, [r7, #464]	; 0x1d0
 80018e0:	021b      	lsls	r3, r3, #8
 80018e2:	f8a7 31d0 	strh.w	r3, [r7, #464]	; 0x1d0
					OUT_Y_A_val |= OUT_Y_L_A_val;
 80018e6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	b21a      	sxth	r2, r3
 80018ee:	f8b7 31d0 	ldrh.w	r3, [r7, #464]	; 0x1d0
 80018f2:	4313      	orrs	r3, r2
 80018f4:	f8a7 31d0 	strh.w	r3, [r7, #464]	; 0x1d0
					OUT_Y_A_val >>= 6;
 80018f8:	f9b7 31d0 	ldrsh.w	r3, [r7, #464]	; 0x1d0
 80018fc:	119b      	asrs	r3, r3, #6
 80018fe:	f8a7 31d0 	strh.w	r3, [r7, #464]	; 0x1d0
				}

				if (OUT_Z_L_A_status == HAL_OK && OUT_Z_H_A_status == HAL_OK) {
 8001902:	f897 314e 	ldrb.w	r3, [r7, #334]	; 0x14e
 8001906:	2b00      	cmp	r3, #0
 8001908:	d11b      	bne.n	8001942 <main+0x9c2>
 800190a:	f897 314d 	ldrb.w	r3, [r7, #333]	; 0x14d
 800190e:	2b00      	cmp	r3, #0
 8001910:	d117      	bne.n	8001942 <main+0x9c2>
					OUT_Z_A_val = OUT_Z_H_A_val;
 8001912:	f107 037d 	add.w	r3, r7, #125	; 0x7d
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	f8a7 31ca 	strh.w	r3, [r7, #458]	; 0x1ca
					OUT_Z_A_val <<= 8;
 800191c:	f9b7 31ca 	ldrsh.w	r3, [r7, #458]	; 0x1ca
 8001920:	021b      	lsls	r3, r3, #8
 8001922:	f8a7 31ca 	strh.w	r3, [r7, #458]	; 0x1ca
					OUT_Z_A_val |= OUT_Z_L_A_val;
 8001926:	f107 037e 	add.w	r3, r7, #126	; 0x7e
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	b21a      	sxth	r2, r3
 800192e:	f8b7 31ca 	ldrh.w	r3, [r7, #458]	; 0x1ca
 8001932:	4313      	orrs	r3, r2
 8001934:	f8a7 31ca 	strh.w	r3, [r7, #458]	; 0x1ca
					OUT_Z_A_val >>= 6;
 8001938:	f9b7 31ca 	ldrsh.w	r3, [r7, #458]	; 0x1ca
 800193c:	119b      	asrs	r3, r3, #6
 800193e:	f8a7 31ca 	strh.w	r3, [r7, #458]	; 0x1ca
				}
				arr_x_a[i] = (OUT_X_A_val);
 8001942:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001946:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800194a:	f8b7 11d2 	ldrh.w	r1, [r7, #466]	; 0x1d2
 800194e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				arr_y_a[i] = (OUT_Y_A_val);
 8001952:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001956:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800195a:	f8b7 11d0 	ldrh.w	r1, [r7, #464]	; 0x1d0
 800195e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				arr_z_a[i] = (OUT_Z_A_val);
 8001962:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001966:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800196a:	f8b7 11ca 	ldrh.w	r1, [r7, #458]	; 0x1ca
 800196e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (int i=0;i<sample_a;i++) {
 8001972:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8001976:	3301      	adds	r3, #1
 8001978:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 800197c:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8001980:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001984:	429a      	cmp	r2, r3
 8001986:	f6ff aef4 	blt.w	8001772 <main+0x7f2>


			}


			for (int i=0;i<sample_a;i++) {
 800198a:	2300      	movs	r3, #0
 800198c:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8001990:	e037      	b.n	8001a02 <main+0xa82>
 8001992:	bf00      	nop
 8001994:	20000230 	.word	0x20000230
				avg_x_a += arr_x_a[i];
 8001998:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800199c:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 80019a0:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80019a4:	ee07 3a90 	vmov	s15, r3
 80019a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019ac:	ed97 7a68 	vldr	s14, [r7, #416]	; 0x1a0
 80019b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019b4:	edc7 7a68 	vstr	s15, [r7, #416]	; 0x1a0
				avg_y_a += arr_y_a[i];
 80019b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80019bc:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 80019c0:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80019c4:	ee07 3a90 	vmov	s15, r3
 80019c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019cc:	ed97 7a67 	vldr	s14, [r7, #412]	; 0x19c
 80019d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019d4:	edc7 7a67 	vstr	s15, [r7, #412]	; 0x19c
				avg_z_a += arr_z_a[i];
 80019d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80019dc:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 80019e0:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80019e4:	ee07 3a90 	vmov	s15, r3
 80019e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019ec:	ed97 7a66 	vldr	s14, [r7, #408]	; 0x198
 80019f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019f4:	edc7 7a66 	vstr	s15, [r7, #408]	; 0x198
			for (int i=0;i<sample_a;i++) {
 80019f8:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80019fc:	3301      	adds	r3, #1
 80019fe:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8001a02:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8001a06:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	dbc4      	blt.n	8001998 <main+0xa18>
			}

			/*
			 * Calculation
			 */
			avg_x_a = (avg_x_a / sample_a) * (4.0 / 1023);
 8001a0e:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8001a12:	ee07 3a90 	vmov	s15, r3
 8001a16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a1a:	ed97 7a68 	vldr	s14, [r7, #416]	; 0x1a0
 8001a1e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001a22:	ee16 0a90 	vmov	r0, s13
 8001a26:	f7fe fdaf 	bl	8000588 <__aeabi_f2d>
 8001a2a:	f20f 5360 	addw	r3, pc, #1376	; 0x560
 8001a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a32:	f7fe fe01 	bl	8000638 <__aeabi_dmul>
 8001a36:	4602      	mov	r2, r0
 8001a38:	460b      	mov	r3, r1
 8001a3a:	4610      	mov	r0, r2
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	f7ff f8d3 	bl	8000be8 <__aeabi_d2f>
 8001a42:	4603      	mov	r3, r0
 8001a44:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
			avg_y_a = (avg_y_a / sample_a) * (4.0 / 1023);
 8001a48:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8001a4c:	ee07 3a90 	vmov	s15, r3
 8001a50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a54:	ed97 7a67 	vldr	s14, [r7, #412]	; 0x19c
 8001a58:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001a5c:	ee16 0a90 	vmov	r0, s13
 8001a60:	f7fe fd92 	bl	8000588 <__aeabi_f2d>
 8001a64:	f20f 5324 	addw	r3, pc, #1316	; 0x524
 8001a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a6c:	f7fe fde4 	bl	8000638 <__aeabi_dmul>
 8001a70:	4602      	mov	r2, r0
 8001a72:	460b      	mov	r3, r1
 8001a74:	4610      	mov	r0, r2
 8001a76:	4619      	mov	r1, r3
 8001a78:	f7ff f8b6 	bl	8000be8 <__aeabi_d2f>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
			avg_z_a = (avg_z_a / sample_a) * (4.0 / 1023);
 8001a82:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8001a86:	ee07 3a90 	vmov	s15, r3
 8001a8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a8e:	ed97 7a66 	vldr	s14, [r7, #408]	; 0x198
 8001a92:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001a96:	ee16 0a90 	vmov	r0, s13
 8001a9a:	f7fe fd75 	bl	8000588 <__aeabi_f2d>
 8001a9e:	f20f 43ec 	addw	r3, pc, #1260	; 0x4ec
 8001aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa6:	f7fe fdc7 	bl	8000638 <__aeabi_dmul>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	460b      	mov	r3, r1
 8001aae:	4610      	mov	r0, r2
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	f7ff f899 	bl	8000be8 <__aeabi_d2f>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
			/*
			HAL_UART_Transmit(&huart2, (uint8_t*)ACC_Buffer, sprintf(ACC_Buffer, "% 06.5f,", U_hat_x_a - cal_x), 100); // @suppress("Float formatting support")
			HAL_UART_Transmit(&huart2, (uint8_t*)ACC_Buffer, sprintf(ACC_Buffer, "% 06.5f,", U_hat_y_a - cal_y), 100); // @suppress("Float formatting support")
			HAL_UART_Transmit(&huart2, (uint8_t*)ACC_Buffer, sprintf(ACC_Buffer, "% 06.5f\n", U_hat_z_a - cal_z), 100); // @suppress("Float formatting support")
			*/
			current_tick = HAL_GetTick();
 8001abc:	f001 f9fa 	bl	8002eb4 <HAL_GetTick>
 8001ac0:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c

			if (avg_x_a > -0.70 && step_counting == 0 && (current_tick - increase_prev) > 300 && ready_to_send == 0) {
 8001ac4:	f8d7 01a0 	ldr.w	r0, [r7, #416]	; 0x1a0
 8001ac8:	f7fe fd5e 	bl	8000588 <__aeabi_f2d>
 8001acc:	f20f 43c4 	addw	r3, pc, #1220	; 0x4c4
 8001ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad4:	f7ff f840 	bl	8000b58 <__aeabi_dcmpgt>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d027      	beq.n	8001b2e <main+0xbae>
 8001ade:	f897 31dd 	ldrb.w	r3, [r7, #477]	; 0x1dd
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d123      	bne.n	8001b2e <main+0xbae>
 8001ae6:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8001aea:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001af4:	d91b      	bls.n	8001b2e <main+0xbae>
 8001af6:	f897 31ab 	ldrb.w	r3, [r7, #427]	; 0x1ab
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d107      	bne.n	8001b0e <main+0xb8e>
				step_counting = 1;
 8001afe:	2301      	movs	r3, #1
 8001b00:	f887 31dd 	strb.w	r3, [r7, #477]	; 0x1dd
				increase_prev = HAL_GetTick();
 8001b04:	f001 f9d6 	bl	8002eb4 <HAL_GetTick>
 8001b08:	f8c7 01c4 	str.w	r0, [r7, #452]	; 0x1c4
 8001b0c:	e00f      	b.n	8001b2e <main+0xbae>
//				HAL_UART_Transmit(&huart2, (uint8_t*)ACC_Buffer, sprintf(ACC_Buffer, "UP\n\r"), 100);
			} else if (avg_x_a > -0.70 && step_counting == 0 && (current_tick - increase_prev) > 300 && ready_to_send == 1) {
 8001b0e:	f8d7 01a0 	ldr.w	r0, [r7, #416]	; 0x1a0
 8001b12:	f7fe fd39 	bl	8000588 <__aeabi_f2d>
 8001b16:	f20f 437c 	addw	r3, pc, #1148	; 0x47c
 8001b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b1e:	f7ff f81b 	bl	8000b58 <__aeabi_dcmpgt>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d002      	beq.n	8001b2e <main+0xbae>
 8001b28:	f897 31dd 	ldrb.w	r3, [r7, #477]	; 0x1dd
 8001b2c:	2b00      	cmp	r3, #0
//				HAL_UART_Transmit(&huart2, (uint8_t*)ACC_Buffer, sprintf(ACC_Buffer, "Missed Step\n\r"), 100);
			}
			if (step_counting == 1 && avg_x_a < -0.70) {
 8001b2e:	f897 31dd 	ldrb.w	r3, [r7, #477]	; 0x1dd
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d117      	bne.n	8001b66 <main+0xbe6>
 8001b36:	f8d7 01a0 	ldr.w	r0, [r7, #416]	; 0x1a0
 8001b3a:	f7fe fd25 	bl	8000588 <__aeabi_f2d>
 8001b3e:	f20f 4354 	addw	r3, pc, #1108	; 0x454
 8001b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b46:	f7fe ffe9 	bl	8000b1c <__aeabi_dcmplt>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d00a      	beq.n	8001b66 <main+0xbe6>
				step_counting = 0;
 8001b50:	2300      	movs	r3, #0
 8001b52:	f887 31dd 	strb.w	r3, [r7, #477]	; 0x1dd
//				HAL_UART_Transmit(&huart2, (uint8_t*)ACC_Buffer, sprintf(ACC_Buffer, "DOWN\n\r"), 100);
				ready_to_send = 1;
 8001b56:	2301      	movs	r3, #1
 8001b58:	f887 31ab 	strb.w	r3, [r7, #427]	; 0x1ab
				steps++;
 8001b5c:	f8b7 31de 	ldrh.w	r3, [r7, #478]	; 0x1de
 8001b60:	3301      	adds	r3, #1
 8001b62:	f8a7 31de 	strh.w	r3, [r7, #478]	; 0x1de
			}
//			HAL_UART_Transmit(&huart2, (uint8_t*)ACC_Buffer, sprintf(ACC_Buffer, "X %f\n\r", avg_x_a), 100);
			if (avg_x_a > (stationary_x -0.028) && avg_x_a < (stationary_x + 0.028) && ready_to_send == 1 && step_counting == 0) {
 8001b66:	f8d7 01a0 	ldr.w	r0, [r7, #416]	; 0x1a0
 8001b6a:	f7fe fd0d 	bl	8000588 <__aeabi_f2d>
 8001b6e:	4604      	mov	r4, r0
 8001b70:	460d      	mov	r5, r1
 8001b72:	f8d7 01a4 	ldr.w	r0, [r7, #420]	; 0x1a4
 8001b76:	f7fe fd07 	bl	8000588 <__aeabi_f2d>
 8001b7a:	f20f 4320 	addw	r3, pc, #1056	; 0x420
 8001b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b82:	f7fe fba1 	bl	80002c8 <__aeabi_dsub>
 8001b86:	4602      	mov	r2, r0
 8001b88:	460b      	mov	r3, r1
 8001b8a:	4620      	mov	r0, r4
 8001b8c:	4629      	mov	r1, r5
 8001b8e:	f7fe ffe3 	bl	8000b58 <__aeabi_dcmpgt>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	f000 8243 	beq.w	8002020 <main+0x10a0>
 8001b9a:	f8d7 01a0 	ldr.w	r0, [r7, #416]	; 0x1a0
 8001b9e:	f7fe fcf3 	bl	8000588 <__aeabi_f2d>
 8001ba2:	4604      	mov	r4, r0
 8001ba4:	460d      	mov	r5, r1
 8001ba6:	f8d7 01a4 	ldr.w	r0, [r7, #420]	; 0x1a4
 8001baa:	f7fe fced 	bl	8000588 <__aeabi_f2d>
 8001bae:	a3fb      	add	r3, pc, #1004	; (adr r3, 8001f9c <main+0x101c>)
 8001bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb4:	f7fe fb8a 	bl	80002cc <__adddf3>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	460b      	mov	r3, r1
 8001bbc:	4620      	mov	r0, r4
 8001bbe:	4629      	mov	r1, r5
 8001bc0:	f7fe ffac 	bl	8000b1c <__aeabi_dcmplt>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	f000 822a 	beq.w	8002020 <main+0x10a0>
 8001bcc:	f897 31ab 	ldrb.w	r3, [r7, #427]	; 0x1ab
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	f040 8225 	bne.w	8002020 <main+0x10a0>
 8001bd6:	f897 31dd 	ldrb.w	r3, [r7, #477]	; 0x1dd
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f040 8220 	bne.w	8002020 <main+0x10a0>
//				HAL_UART_Transmit(&huart2, (uint8_t*)ACC_Buffer, sprintf(ACC_Buffer, "ZERO %d\n\r", steps), 100);
				ready_to_send = 0;
 8001be0:	2300      	movs	r3, #0
 8001be2:	f887 31ab 	strb.w	r3, [r7, #427]	; 0x1ab
				if (offset_measure == 0) {
 8001be6:	f897 31bf 	ldrb.w	r3, [r7, #447]	; 0x1bf
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	f040 8168 	bne.w	8001ec0 <main+0xf40>
					float turn = initial_yaw - yaw - offset;
 8001bf0:	ed97 7a70 	vldr	s14, [r7, #448]	; 0x1c0
 8001bf4:	edd7 7a6d 	vldr	s15, [r7, #436]	; 0x1b4
 8001bf8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001bfc:	edd7 7a6e 	vldr	s15, [r7, #440]	; 0x1b8
 8001c00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c04:	edc7 7a43 	vstr	s15, [r7, #268]	; 0x10c
					float temp_angle = fabs(turn - turn_prev);
 8001c08:	ed97 7a43 	vldr	s14, [r7, #268]	; 0x10c
 8001c0c:	edd7 7a5f 	vldr	s15, [r7, #380]	; 0x17c
 8001c10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c14:	eef0 7ae7 	vabs.f32	s15, s15
 8001c18:	edc7 7a42 	vstr	s15, [r7, #264]	; 0x108
					if (temp_angle > 30) {
 8001c1c:	edd7 7a42 	vldr	s15, [r7, #264]	; 0x108
 8001c20:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001c24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c2c:	dd17      	ble.n	8001c5e <main+0xcde>
//						HAL_UART_Transmit(&huart2, (uint8_t*)ACC_Buffer, sprintf(ACC_Buffer, "Turned\n\r"), 100);
						for (int i = 0; i<sizeof(angles)/sizeof(float); i++) {
 8001c2e:	2300      	movs	r3, #0
 8001c30:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8001c34:	e00c      	b.n	8001c50 <main+0xcd0>
							angles[i] = 0;// Re-initialise
 8001c36:	1d3a      	adds	r2, r7, #4
 8001c38:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	4413      	add	r3, r2
 8001c40:	f04f 0200 	mov.w	r2, #0
 8001c44:	601a      	str	r2, [r3, #0]
						for (int i = 0; i<sizeof(angles)/sizeof(float); i++) {
 8001c46:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8001c50:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001c54:	2b04      	cmp	r3, #4
 8001c56:	d9ee      	bls.n	8001c36 <main+0xcb6>
						}
						angle_count = 0;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	f887 317b 	strb.w	r3, [r7, #379]	; 0x17b
					}
					if (angle_count < 5) {
 8001c5e:	f897 317b 	ldrb.w	r3, [r7, #379]	; 0x17b
 8001c62:	2b04      	cmp	r3, #4
 8001c64:	d80c      	bhi.n	8001c80 <main+0xd00>
						angles[angle_count] = turn;
 8001c66:	f897 317b 	ldrb.w	r3, [r7, #379]	; 0x17b
 8001c6a:	1d3a      	adds	r2, r7, #4
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	4413      	add	r3, r2
 8001c70:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8001c74:	601a      	str	r2, [r3, #0]
						angle_count++;
 8001c76:	f897 317b 	ldrb.w	r3, [r7, #379]	; 0x17b
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	f887 317b 	strb.w	r3, [r7, #379]	; 0x17b
					}
					if (angle_count == 5) {
 8001c80:	f897 317b 	ldrb.w	r3, [r7, #379]	; 0x17b
 8001c84:	2b05      	cmp	r3, #5
 8001c86:	d11d      	bne.n	8001cc4 <main+0xd44>
					    for(int i=5-1;i>0;i--)
 8001c88:	2304      	movs	r3, #4
 8001c8a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8001c8e:	e011      	b.n	8001cb4 <main+0xd34>
					    {
					    	angles[i]=angles[i-1];
 8001c90:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001c94:	3b01      	subs	r3, #1
 8001c96:	1d3a      	adds	r2, r7, #4
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	4413      	add	r3, r2
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	1d39      	adds	r1, r7, #4
 8001ca0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	440b      	add	r3, r1
 8001ca8:	601a      	str	r2, [r3, #0]
					    for(int i=5-1;i>0;i--)
 8001caa:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8001cb4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	dce9      	bgt.n	8001c90 <main+0xd10>
					    }
					    angles[0] = turn;
 8001cbc:	1d3b      	adds	r3, r7, #4
 8001cbe:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8001cc2:	601a      	str	r2, [r3, #0]
					}
					angle_avg = 0;
 8001cc4:	f04f 0300 	mov.w	r3, #0
 8001cc8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
					for (int k=0; k<angle_count; k++) {
 8001ccc:	2300      	movs	r3, #0
 8001cce:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8001cd2:	e011      	b.n	8001cf8 <main+0xd78>
						angle_avg += angles[k];
 8001cd4:	1d3a      	adds	r2, r7, #4
 8001cd6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	4413      	add	r3, r2
 8001cde:	edd3 7a00 	vldr	s15, [r3]
 8001ce2:	ed97 7a61 	vldr	s14, [r7, #388]	; 0x184
 8001ce6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cea:	edc7 7a61 	vstr	s15, [r7, #388]	; 0x184
					for (int k=0; k<angle_count; k++) {
 8001cee:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8001cf8:	f897 317b 	ldrb.w	r3, [r7, #379]	; 0x17b
 8001cfc:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8001d00:	429a      	cmp	r2, r3
 8001d02:	dbe7      	blt.n	8001cd4 <main+0xd54>
//						HAL_UART_Transmit(&huart2, (uint8_t*)ACC_Buffer, sprintf(ACC_Buffer, "Added\n\r"), 100);
					}
					angle_avg = angle_avg / (angle_count);
 8001d04:	f897 317b 	ldrb.w	r3, [r7, #379]	; 0x17b
 8001d08:	ee07 3a90 	vmov	s15, r3
 8001d0c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d10:	edd7 6a61 	vldr	s13, [r7, #388]	; 0x184
 8001d14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d18:	edc7 7a61 	vstr	s15, [r7, #388]	; 0x184
//					HAL_UART_Transmit(&huart2, (uint8_t*)ACC_Buffer, sprintf(ACC_Buffer, "AVG %f\n\r", angle_avg), 100);

//					for (int j =0; j < 5;j++) {
//						HAL_UART_Transmit(&huart2, (uint8_t*)ACC_Buffer, sprintf(ACC_Buffer, "Angle %f\n\r", angles[j]), 100);
//					}
					float x_pos = x_pos_prev + step_length * 1 * cos(turn * PI/180);
 8001d1c:	f8d7 01b0 	ldr.w	r0, [r7, #432]	; 0x1b0
 8001d20:	f7fe fc32 	bl	8000588 <__aeabi_f2d>
 8001d24:	4604      	mov	r4, r0
 8001d26:	460d      	mov	r5, r1
 8001d28:	4b8f      	ldr	r3, [pc, #572]	; (8001f68 <main+0xfe8>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7fe fc2b 	bl	8000588 <__aeabi_f2d>
 8001d32:	4680      	mov	r8, r0
 8001d34:	4689      	mov	r9, r1
 8001d36:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8001d3a:	f7fe fc25 	bl	8000588 <__aeabi_f2d>
 8001d3e:	a388      	add	r3, pc, #544	; (adr r3, 8001f60 <main+0xfe0>)
 8001d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d44:	f7fe fc78 	bl	8000638 <__aeabi_dmul>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	4610      	mov	r0, r2
 8001d4e:	4619      	mov	r1, r3
 8001d50:	f04f 0200 	mov.w	r2, #0
 8001d54:	4b85      	ldr	r3, [pc, #532]	; (8001f6c <main+0xfec>)
 8001d56:	f7fe fd99 	bl	800088c <__aeabi_ddiv>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	ec43 2b17 	vmov	d7, r2, r3
 8001d62:	eeb0 0a47 	vmov.f32	s0, s14
 8001d66:	eef0 0a67 	vmov.f32	s1, s15
 8001d6a:	f006 fbb5 	bl	80084d8 <cos>
 8001d6e:	ec53 2b10 	vmov	r2, r3, d0
 8001d72:	4640      	mov	r0, r8
 8001d74:	4649      	mov	r1, r9
 8001d76:	f7fe fc5f 	bl	8000638 <__aeabi_dmul>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	4620      	mov	r0, r4
 8001d80:	4629      	mov	r1, r5
 8001d82:	f7fe faa3 	bl	80002cc <__adddf3>
 8001d86:	4602      	mov	r2, r0
 8001d88:	460b      	mov	r3, r1
 8001d8a:	4610      	mov	r0, r2
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	f7fe ff2b 	bl	8000be8 <__aeabi_d2f>
 8001d92:	4603      	mov	r3, r0
 8001d94:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
					float y_pos = y_pos_prev + step_length * 1 * sin(turn * PI/180);
 8001d98:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 8001d9c:	f7fe fbf4 	bl	8000588 <__aeabi_f2d>
 8001da0:	4604      	mov	r4, r0
 8001da2:	460d      	mov	r5, r1
 8001da4:	4b70      	ldr	r3, [pc, #448]	; (8001f68 <main+0xfe8>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7fe fbed 	bl	8000588 <__aeabi_f2d>
 8001dae:	4680      	mov	r8, r0
 8001db0:	4689      	mov	r9, r1
 8001db2:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8001db6:	f7fe fbe7 	bl	8000588 <__aeabi_f2d>
 8001dba:	a369      	add	r3, pc, #420	; (adr r3, 8001f60 <main+0xfe0>)
 8001dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc0:	f7fe fc3a 	bl	8000638 <__aeabi_dmul>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	4610      	mov	r0, r2
 8001dca:	4619      	mov	r1, r3
 8001dcc:	f04f 0200 	mov.w	r2, #0
 8001dd0:	4b66      	ldr	r3, [pc, #408]	; (8001f6c <main+0xfec>)
 8001dd2:	f7fe fd5b 	bl	800088c <__aeabi_ddiv>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	460b      	mov	r3, r1
 8001dda:	ec43 2b17 	vmov	d7, r2, r3
 8001dde:	eeb0 0a47 	vmov.f32	s0, s14
 8001de2:	eef0 0a67 	vmov.f32	s1, s15
 8001de6:	f006 fbc7 	bl	8008578 <sin>
 8001dea:	ec53 2b10 	vmov	r2, r3, d0
 8001dee:	4640      	mov	r0, r8
 8001df0:	4649      	mov	r1, r9
 8001df2:	f7fe fc21 	bl	8000638 <__aeabi_dmul>
 8001df6:	4602      	mov	r2, r0
 8001df8:	460b      	mov	r3, r1
 8001dfa:	4620      	mov	r0, r4
 8001dfc:	4629      	mov	r1, r5
 8001dfe:	f7fe fa65 	bl	80002cc <__adddf3>
 8001e02:	4602      	mov	r2, r0
 8001e04:	460b      	mov	r3, r1
 8001e06:	4610      	mov	r0, r2
 8001e08:	4619      	mov	r1, r3
 8001e0a:	f7fe feed 	bl	8000be8 <__aeabi_d2f>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

					if (MODE == 0) {
						HAL_UART_Transmit(&huart2, (uint8_t*)ACC_Buffer, sprintf(ACC_Buffer, "Step : %03d, ", steps), 100);
 8001e14:	f8b7 21de 	ldrh.w	r2, [r7, #478]	; 0x1de
 8001e18:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001e1c:	4954      	ldr	r1, [pc, #336]	; (8001f70 <main+0xff0>)
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f004 f92e 	bl	8006080 <siprintf>
 8001e24:	4603      	mov	r3, r0
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001e2c:	2364      	movs	r3, #100	; 0x64
 8001e2e:	4851      	ldr	r0, [pc, #324]	; (8001f74 <main+0xff4>)
 8001e30:	f003 f9c1 	bl	80051b6 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart2, (uint8_t*)ACC_Buffer, sprintf(ACC_Buffer, "Heading : % 06.3f degrees,", angle_avg), 100);
 8001e34:	f8d7 0184 	ldr.w	r0, [r7, #388]	; 0x184
 8001e38:	f7fe fba6 	bl	8000588 <__aeabi_f2d>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	460b      	mov	r3, r1
 8001e40:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8001e44:	494c      	ldr	r1, [pc, #304]	; (8001f78 <main+0xff8>)
 8001e46:	f004 f91b 	bl	8006080 <siprintf>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	b29a      	uxth	r2, r3
 8001e4e:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001e52:	2364      	movs	r3, #100	; 0x64
 8001e54:	4847      	ldr	r0, [pc, #284]	; (8001f74 <main+0xff4>)
 8001e56:	f003 f9ae 	bl	80051b6 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart2, (uint8_t*)ACC_Buffer, sprintf(ACC_Buffer, "X : % 06.3f meters,", y_pos), 100);
 8001e5a:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 8001e5e:	f7fe fb93 	bl	8000588 <__aeabi_f2d>
 8001e62:	4602      	mov	r2, r0
 8001e64:	460b      	mov	r3, r1
 8001e66:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8001e6a:	4944      	ldr	r1, [pc, #272]	; (8001f7c <main+0xffc>)
 8001e6c:	f004 f908 	bl	8006080 <siprintf>
 8001e70:	4603      	mov	r3, r0
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001e78:	2364      	movs	r3, #100	; 0x64
 8001e7a:	483e      	ldr	r0, [pc, #248]	; (8001f74 <main+0xff4>)
 8001e7c:	f003 f99b 	bl	80051b6 <HAL_UART_Transmit>
						HAL_UART_Transmit(&huart2, (uint8_t*)ACC_Buffer, sprintf(ACC_Buffer, "Y : % 06.3f meters\n\r", x_pos), 100);
 8001e80:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 8001e84:	f7fe fb80 	bl	8000588 <__aeabi_f2d>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8001e90:	493b      	ldr	r1, [pc, #236]	; (8001f80 <main+0x1000>)
 8001e92:	f004 f8f5 	bl	8006080 <siprintf>
 8001e96:	4603      	mov	r3, r0
 8001e98:	b29a      	uxth	r2, r3
 8001e9a:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001e9e:	2364      	movs	r3, #100	; 0x64
 8001ea0:	4834      	ldr	r0, [pc, #208]	; (8001f74 <main+0xff4>)
 8001ea2:	f003 f988 	bl	80051b6 <HAL_UART_Transmit>
					if (MODE == 1) {
						HAL_UART_Transmit(&huart2, (uint8_t*)ACC_Buffer, sprintf(ACC_Buffer, "%f,", x_pos), 100);
						HAL_UART_Transmit(&huart2, (uint8_t*)ACC_Buffer, sprintf(ACC_Buffer, "%f\n\r", y_pos), 100);
					}

					x_pos_prev = x_pos;
 8001ea6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001eaa:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
					y_pos_prev = y_pos;
 8001eae:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001eb2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
					turn_prev = turn;
 8001eb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001eba:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001ebe:	e0af      	b.n	8002020 <main+0x10a0>

				}else if (offset_measure == 1 && (steps) <= 4) {
 8001ec0:	f897 31bf 	ldrb.w	r3, [r7, #447]	; 0x1bf
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d16d      	bne.n	8001fa4 <main+0x1024>
 8001ec8:	f8b7 31de 	ldrh.w	r3, [r7, #478]	; 0x1de
 8001ecc:	2b04      	cmp	r3, #4
 8001ece:	d869      	bhi.n	8001fa4 <main+0x1024>
					float turn = initial_yaw - yaw;
 8001ed0:	ed97 7a70 	vldr	s14, [r7, #448]	; 0x1c0
 8001ed4:	edd7 7a6d 	vldr	s15, [r7, #436]	; 0x1b4
 8001ed8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001edc:	edc7 7a44 	vstr	s15, [r7, #272]	; 0x110
					if (fabs(turn) > 20) {
 8001ee0:	edd7 7a44 	vldr	s15, [r7, #272]	; 0x110
 8001ee4:	eef0 7ae7 	vabs.f32	s15, s15
 8001ee8:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001eec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ef4:	dd0d      	ble.n	8001f12 <main+0xf92>
						HAL_UART_Transmit(&huart2, (uint8_t*)ACC_Buffer, sprintf(ACC_Buffer, "Something went wrong, re-init\n\r"), 100);
 8001ef6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001efa:	4922      	ldr	r1, [pc, #136]	; (8001f84 <main+0x1004>)
 8001efc:	4618      	mov	r0, r3
 8001efe:	f004 f8bf 	bl	8006080 <siprintf>
 8001f02:	4603      	mov	r3, r0
 8001f04:	b29a      	uxth	r2, r3
 8001f06:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001f0a:	2364      	movs	r3, #100	; 0x64
 8001f0c:	4819      	ldr	r0, [pc, #100]	; (8001f74 <main+0xff4>)
 8001f0e:	f003 f952 	bl	80051b6 <HAL_UART_Transmit>
					}

					HAL_UART_Transmit(&huart2, (uint8_t*)ACC_Buffer, sprintf(ACC_Buffer, "Sample %d   Measuring %f\n\r", steps, turn), 100);
 8001f12:	f8b7 41de 	ldrh.w	r4, [r7, #478]	; 0x1de
 8001f16:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8001f1a:	f7fe fb35 	bl	8000588 <__aeabi_f2d>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	460b      	mov	r3, r1
 8001f22:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8001f26:	e9cd 2300 	strd	r2, r3, [sp]
 8001f2a:	4622      	mov	r2, r4
 8001f2c:	4916      	ldr	r1, [pc, #88]	; (8001f88 <main+0x1008>)
 8001f2e:	f004 f8a7 	bl	8006080 <siprintf>
 8001f32:	4603      	mov	r3, r0
 8001f34:	b29a      	uxth	r2, r3
 8001f36:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001f3a:	2364      	movs	r3, #100	; 0x64
 8001f3c:	480d      	ldr	r0, [pc, #52]	; (8001f74 <main+0xff4>)
 8001f3e:	f003 f93a 	bl	80051b6 <HAL_UART_Transmit>
					offset += turn;
 8001f42:	ed97 7a6e 	vldr	s14, [r7, #440]	; 0x1b8
 8001f46:	edd7 7a44 	vldr	s15, [r7, #272]	; 0x110
 8001f4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f4e:	edc7 7a6e 	vstr	s15, [r7, #440]	; 0x1b8
					offset_avg_count++;
 8001f52:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8001f56:	3301      	adds	r3, #1
 8001f58:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
				}else if (offset_measure == 1 && (steps) <= 4) {
 8001f5c:	e060      	b.n	8002020 <main+0x10a0>
 8001f5e:	bf00      	nop
 8001f60:	54524550 	.word	0x54524550
 8001f64:	400921fb 	.word	0x400921fb
 8001f68:	20000004 	.word	0x20000004
 8001f6c:	40668000 	.word	0x40668000
 8001f70:	08009970 	.word	0x08009970
 8001f74:	20000284 	.word	0x20000284
 8001f78:	08009980 	.word	0x08009980
 8001f7c:	0800999c 	.word	0x0800999c
 8001f80:	080099b0 	.word	0x080099b0
 8001f84:	080099c8 	.word	0x080099c8
 8001f88:	080099e8 	.word	0x080099e8
 8001f8c:	00401004 	.word	0x00401004
 8001f90:	3f700401 	.word	0x3f700401
 8001f94:	66666666 	.word	0x66666666
 8001f98:	bfe66666 	.word	0xbfe66666
 8001f9c:	3126e979 	.word	0x3126e979
 8001fa0:	3f9cac08 	.word	0x3f9cac08


				} else if (offset_measure == 1 && (steps) >= 5) {
 8001fa4:	f897 31bf 	ldrb.w	r3, [r7, #447]	; 0x1bf
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d139      	bne.n	8002020 <main+0x10a0>
 8001fac:	f8b7 31de 	ldrh.w	r3, [r7, #478]	; 0x1de
 8001fb0:	2b04      	cmp	r3, #4
 8001fb2:	d935      	bls.n	8002020 <main+0x10a0>
					offset = offset/offset_avg_count;
 8001fb4:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8001fb8:	ee07 3a90 	vmov	s15, r3
 8001fbc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fc0:	edd7 6a6e 	vldr	s13, [r7, #440]	; 0x1b8
 8001fc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fc8:	edc7 7a6e 	vstr	s15, [r7, #440]	; 0x1b8
					HAL_UART_Transmit(&huart2, (uint8_t*)ACC_Buffer, sprintf(ACC_Buffer, "Offset calculated %f\n\r", offset), 100);
 8001fcc:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 8001fd0:	f7fe fada 	bl	8000588 <__aeabi_f2d>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8001fdc:	496a      	ldr	r1, [pc, #424]	; (8002188 <main+0x1208>)
 8001fde:	f004 f84f 	bl	8006080 <siprintf>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	b29a      	uxth	r2, r3
 8001fe6:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001fea:	2364      	movs	r3, #100	; 0x64
 8001fec:	4867      	ldr	r0, [pc, #412]	; (800218c <main+0x120c>)
 8001fee:	f003 f8e2 	bl	80051b6 <HAL_UART_Transmit>
					offset_measure = 0;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	f887 31bf 	strb.w	r3, [r7, #447]	; 0x1bf
					steps = 0;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	f8a7 31de 	strh.w	r3, [r7, #478]	; 0x1de
					offset_avg_count = 0;
 8001ffe:	2300      	movs	r3, #0
 8002000:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
					HAL_UART_Transmit(&huart2, (uint8_t*)ACC_Buffer, sprintf(ACC_Buffer, "Ready\n\r"), 100);
 8002004:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002008:	4961      	ldr	r1, [pc, #388]	; (8002190 <main+0x1210>)
 800200a:	4618      	mov	r0, r3
 800200c:	f004 f838 	bl	8006080 <siprintf>
 8002010:	4603      	mov	r3, r0
 8002012:	b29a      	uxth	r2, r3
 8002014:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8002018:	2364      	movs	r3, #100	; 0x64
 800201a:	485c      	ldr	r0, [pc, #368]	; (800218c <main+0x120c>)
 800201c:	f003 f8cb 	bl	80051b6 <HAL_UART_Transmit>
 8002020:	46b5      	mov	sp, r6

		/*
		 * Magnetometer
		 */

		STATUS_REG_M_status = HAL_I2C_Mem_Read(&hi2c1, (MAG<<1)|0x1, STATUS_REG_M, 1, &STATUS_REG_M_val, 1, 50);
 8002022:	2332      	movs	r3, #50	; 0x32
 8002024:	9302      	str	r3, [sp, #8]
 8002026:	2301      	movs	r3, #1
 8002028:	9301      	str	r3, [sp, #4]
 800202a:	f107 0320 	add.w	r3, r7, #32
 800202e:	9300      	str	r3, [sp, #0]
 8002030:	2301      	movs	r3, #1
 8002032:	2267      	movs	r2, #103	; 0x67
 8002034:	213d      	movs	r1, #61	; 0x3d
 8002036:	4857      	ldr	r0, [pc, #348]	; (8002194 <main+0x1214>)
 8002038:	f001 fc56 	bl	80038e8 <HAL_I2C_Mem_Read>
 800203c:	4603      	mov	r3, r0
 800203e:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff

		if (STATUS_REG_M_status == HAL_OK && ((STATUS_REG_M_val & 0x08)>>3) == 1) {
 8002042:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 8002046:	2b00      	cmp	r3, #0
 8002048:	f040 8240 	bne.w	80024cc <main+0x154c>
 800204c:	f107 0320 	add.w	r3, r7, #32
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	f003 0308 	and.w	r3, r3, #8
 8002056:	2b00      	cmp	r3, #0
 8002058:	f000 8238 	beq.w	80024cc <main+0x154c>
 800205c:	466b      	mov	r3, sp
 800205e:	461d      	mov	r5, r3
			/*
			 * Sampling
			 */
			uint8_t sample_m = 10;
 8002060:	230a      	movs	r3, #10
 8002062:	f887 30fe 	strb.w	r3, [r7, #254]	; 0xfe
			int16_t arr_x_m[sample_m];
 8002066:	f897 40fe 	ldrb.w	r4, [r7, #254]	; 0xfe
 800206a:	4623      	mov	r3, r4
 800206c:	3b01      	subs	r3, #1
 800206e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002072:	b2e0      	uxtb	r0, r4
 8002074:	f04f 0100 	mov.w	r1, #0
 8002078:	f04f 0200 	mov.w	r2, #0
 800207c:	f04f 0300 	mov.w	r3, #0
 8002080:	010b      	lsls	r3, r1, #4
 8002082:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8002086:	0102      	lsls	r2, r0, #4
 8002088:	b2e0      	uxtb	r0, r4
 800208a:	f04f 0100 	mov.w	r1, #0
 800208e:	f04f 0200 	mov.w	r2, #0
 8002092:	f04f 0300 	mov.w	r3, #0
 8002096:	010b      	lsls	r3, r1, #4
 8002098:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 800209c:	0102      	lsls	r2, r0, #4
 800209e:	4623      	mov	r3, r4
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	3307      	adds	r3, #7
 80020a4:	08db      	lsrs	r3, r3, #3
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	ebad 0d03 	sub.w	sp, sp, r3
 80020ac:	ab04      	add	r3, sp, #16
 80020ae:	3301      	adds	r3, #1
 80020b0:	085b      	lsrs	r3, r3, #1
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
			int16_t arr_y_m[sample_m];
 80020b8:	f897 40fe 	ldrb.w	r4, [r7, #254]	; 0xfe
 80020bc:	4623      	mov	r3, r4
 80020be:	3b01      	subs	r3, #1
 80020c0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80020c4:	b2e0      	uxtb	r0, r4
 80020c6:	f04f 0100 	mov.w	r1, #0
 80020ca:	f04f 0200 	mov.w	r2, #0
 80020ce:	f04f 0300 	mov.w	r3, #0
 80020d2:	010b      	lsls	r3, r1, #4
 80020d4:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 80020d8:	0102      	lsls	r2, r0, #4
 80020da:	b2e0      	uxtb	r0, r4
 80020dc:	f04f 0100 	mov.w	r1, #0
 80020e0:	f04f 0200 	mov.w	r2, #0
 80020e4:	f04f 0300 	mov.w	r3, #0
 80020e8:	010b      	lsls	r3, r1, #4
 80020ea:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 80020ee:	0102      	lsls	r2, r0, #4
 80020f0:	4623      	mov	r3, r4
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	3307      	adds	r3, #7
 80020f6:	08db      	lsrs	r3, r3, #3
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	ebad 0d03 	sub.w	sp, sp, r3
 80020fe:	ab04      	add	r3, sp, #16
 8002100:	3301      	adds	r3, #1
 8002102:	085b      	lsrs	r3, r3, #1
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
			int16_t arr_z_m[sample_m];
 800210a:	f897 40fe 	ldrb.w	r4, [r7, #254]	; 0xfe
 800210e:	4623      	mov	r3, r4
 8002110:	3b01      	subs	r3, #1
 8002112:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002116:	b2e0      	uxtb	r0, r4
 8002118:	f04f 0100 	mov.w	r1, #0
 800211c:	f04f 0200 	mov.w	r2, #0
 8002120:	f04f 0300 	mov.w	r3, #0
 8002124:	010b      	lsls	r3, r1, #4
 8002126:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 800212a:	0102      	lsls	r2, r0, #4
 800212c:	b2e0      	uxtb	r0, r4
 800212e:	f04f 0100 	mov.w	r1, #0
 8002132:	f04f 0200 	mov.w	r2, #0
 8002136:	f04f 0300 	mov.w	r3, #0
 800213a:	010b      	lsls	r3, r1, #4
 800213c:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8002140:	0102      	lsls	r2, r0, #4
 8002142:	4623      	mov	r3, r4
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	3307      	adds	r3, #7
 8002148:	08db      	lsrs	r3, r3, #3
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	ebad 0d03 	sub.w	sp, sp, r3
 8002150:	ab04      	add	r3, sp, #16
 8002152:	3301      	adds	r3, #1
 8002154:	085b      	lsrs	r3, r3, #1
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

			for (int i=0;i<sample_m;i++) {
 800215c:	2300      	movs	r3, #0
 800215e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8002162:	e0fe      	b.n	8002362 <main+0x13e2>

				STATUS_REG_M_status = HAL_I2C_Mem_Read(&hi2c1, (MAG<<1)|0x1, STATUS_REG_M, 1, &STATUS_REG_M_val, 1, 50);
 8002164:	2332      	movs	r3, #50	; 0x32
 8002166:	9302      	str	r3, [sp, #8]
 8002168:	2301      	movs	r3, #1
 800216a:	9301      	str	r3, [sp, #4]
 800216c:	f107 0320 	add.w	r3, r7, #32
 8002170:	9300      	str	r3, [sp, #0]
 8002172:	2301      	movs	r3, #1
 8002174:	2267      	movs	r2, #103	; 0x67
 8002176:	213d      	movs	r1, #61	; 0x3d
 8002178:	4806      	ldr	r0, [pc, #24]	; (8002194 <main+0x1214>)
 800217a:	f001 fbb5 	bl	80038e8 <HAL_I2C_Mem_Read>
 800217e:	4603      	mov	r3, r0
 8002180:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
				while (((STATUS_REG_M_val & 0x08)>>3) != 1) {
 8002184:	e018      	b.n	80021b8 <main+0x1238>
 8002186:	bf00      	nop
 8002188:	08009a04 	.word	0x08009a04
 800218c:	20000284 	.word	0x20000284
 8002190:	08009a1c 	.word	0x08009a1c
 8002194:	20000230 	.word	0x20000230
					STATUS_REG_M_status = HAL_I2C_Mem_Read(&hi2c1, (MAG<<1)|0x1, STATUS_REG_M, 1, &STATUS_REG_M_val, 1, 50);
 8002198:	2332      	movs	r3, #50	; 0x32
 800219a:	9302      	str	r3, [sp, #8]
 800219c:	2301      	movs	r3, #1
 800219e:	9301      	str	r3, [sp, #4]
 80021a0:	f107 0320 	add.w	r3, r7, #32
 80021a4:	9300      	str	r3, [sp, #0]
 80021a6:	2301      	movs	r3, #1
 80021a8:	2267      	movs	r2, #103	; 0x67
 80021aa:	213d      	movs	r1, #61	; 0x3d
 80021ac:	48d4      	ldr	r0, [pc, #848]	; (8002500 <main+0x1580>)
 80021ae:	f001 fb9b 	bl	80038e8 <HAL_I2C_Mem_Read>
 80021b2:	4603      	mov	r3, r0
 80021b4:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
				while (((STATUS_REG_M_val & 0x08)>>3) != 1) {
 80021b8:	f107 0320 	add.w	r3, r7, #32
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	f003 0308 	and.w	r3, r3, #8
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d0e8      	beq.n	8002198 <main+0x1218>
				}
				OUTX_L_M_status = HAL_I2C_Mem_Read(&hi2c1, (MAG<<1)|0x1, OUTX_L_REG_M, 1, &OUTX_L_REG_M_val, 1, 50);
 80021c6:	2332      	movs	r3, #50	; 0x32
 80021c8:	9302      	str	r3, [sp, #8]
 80021ca:	2301      	movs	r3, #1
 80021cc:	9301      	str	r3, [sp, #4]
 80021ce:	f107 031f 	add.w	r3, r7, #31
 80021d2:	9300      	str	r3, [sp, #0]
 80021d4:	2301      	movs	r3, #1
 80021d6:	2268      	movs	r2, #104	; 0x68
 80021d8:	213d      	movs	r1, #61	; 0x3d
 80021da:	48c9      	ldr	r0, [pc, #804]	; (8002500 <main+0x1580>)
 80021dc:	f001 fb84 	bl	80038e8 <HAL_I2C_Mem_Read>
 80021e0:	4603      	mov	r3, r0
 80021e2:	f887 3148 	strb.w	r3, [r7, #328]	; 0x148
				OUTX_H_M_status = HAL_I2C_Mem_Read(&hi2c1, (MAG<<1)|0x1, OUTX_H_REG_M, 1, &OUTX_H_REG_M_val, 1, 50);
 80021e6:	2332      	movs	r3, #50	; 0x32
 80021e8:	9302      	str	r3, [sp, #8]
 80021ea:	2301      	movs	r3, #1
 80021ec:	9301      	str	r3, [sp, #4]
 80021ee:	f107 031e 	add.w	r3, r7, #30
 80021f2:	9300      	str	r3, [sp, #0]
 80021f4:	2301      	movs	r3, #1
 80021f6:	2269      	movs	r2, #105	; 0x69
 80021f8:	213d      	movs	r1, #61	; 0x3d
 80021fa:	48c1      	ldr	r0, [pc, #772]	; (8002500 <main+0x1580>)
 80021fc:	f001 fb74 	bl	80038e8 <HAL_I2C_Mem_Read>
 8002200:	4603      	mov	r3, r0
 8002202:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

				OUTY_L_M_status = HAL_I2C_Mem_Read(&hi2c1, (MAG<<1)|0x1, OUTY_L_REG_M, 1, &OUTY_L_REG_M_val, 1, 50);
 8002206:	2332      	movs	r3, #50	; 0x32
 8002208:	9302      	str	r3, [sp, #8]
 800220a:	2301      	movs	r3, #1
 800220c:	9301      	str	r3, [sp, #4]
 800220e:	f107 031d 	add.w	r3, r7, #29
 8002212:	9300      	str	r3, [sp, #0]
 8002214:	2301      	movs	r3, #1
 8002216:	226a      	movs	r2, #106	; 0x6a
 8002218:	213d      	movs	r1, #61	; 0x3d
 800221a:	48b9      	ldr	r0, [pc, #740]	; (8002500 <main+0x1580>)
 800221c:	f001 fb64 	bl	80038e8 <HAL_I2C_Mem_Read>
 8002220:	4603      	mov	r3, r0
 8002222:	f887 3146 	strb.w	r3, [r7, #326]	; 0x146
				OUTY_H_M_status = HAL_I2C_Mem_Read(&hi2c1, (MAG<<1)|0x1, OUTY_H_REG_M, 1, &OUTY_H_REG_M_val, 1, 50);
 8002226:	2332      	movs	r3, #50	; 0x32
 8002228:	9302      	str	r3, [sp, #8]
 800222a:	2301      	movs	r3, #1
 800222c:	9301      	str	r3, [sp, #4]
 800222e:	f107 031c 	add.w	r3, r7, #28
 8002232:	9300      	str	r3, [sp, #0]
 8002234:	2301      	movs	r3, #1
 8002236:	226b      	movs	r2, #107	; 0x6b
 8002238:	213d      	movs	r1, #61	; 0x3d
 800223a:	48b1      	ldr	r0, [pc, #708]	; (8002500 <main+0x1580>)
 800223c:	f001 fb54 	bl	80038e8 <HAL_I2C_Mem_Read>
 8002240:	4603      	mov	r3, r0
 8002242:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145

				OUTZ_L_M_status = HAL_I2C_Mem_Read(&hi2c1, (MAG<<1)|0x1, OUTZ_L_REG_M, 1, &OUTZ_L_REG_M_val, 1, 50);
 8002246:	2332      	movs	r3, #50	; 0x32
 8002248:	9302      	str	r3, [sp, #8]
 800224a:	2301      	movs	r3, #1
 800224c:	9301      	str	r3, [sp, #4]
 800224e:	f107 031b 	add.w	r3, r7, #27
 8002252:	9300      	str	r3, [sp, #0]
 8002254:	2301      	movs	r3, #1
 8002256:	226c      	movs	r2, #108	; 0x6c
 8002258:	213d      	movs	r1, #61	; 0x3d
 800225a:	48a9      	ldr	r0, [pc, #676]	; (8002500 <main+0x1580>)
 800225c:	f001 fb44 	bl	80038e8 <HAL_I2C_Mem_Read>
 8002260:	4603      	mov	r3, r0
 8002262:	f887 3144 	strb.w	r3, [r7, #324]	; 0x144
				OUTZ_H_M_status = HAL_I2C_Mem_Read(&hi2c1, (MAG<<1)|0x1, OUTZ_H_REG_M, 1, &OUTZ_H_REG_M_val, 1, 50);
 8002266:	2332      	movs	r3, #50	; 0x32
 8002268:	9302      	str	r3, [sp, #8]
 800226a:	2301      	movs	r3, #1
 800226c:	9301      	str	r3, [sp, #4]
 800226e:	f107 031a 	add.w	r3, r7, #26
 8002272:	9300      	str	r3, [sp, #0]
 8002274:	2301      	movs	r3, #1
 8002276:	226d      	movs	r2, #109	; 0x6d
 8002278:	213d      	movs	r1, #61	; 0x3d
 800227a:	48a1      	ldr	r0, [pc, #644]	; (8002500 <main+0x1580>)
 800227c:	f001 fb34 	bl	80038e8 <HAL_I2C_Mem_Read>
 8002280:	4603      	mov	r3, r0
 8002282:	f887 3143 	strb.w	r3, [r7, #323]	; 0x143

				if (OUTX_L_M_status == HAL_OK && OUTX_H_M_status == HAL_OK) {
 8002286:	f897 3148 	ldrb.w	r3, [r7, #328]	; 0x148
 800228a:	2b00      	cmp	r3, #0
 800228c:	d116      	bne.n	80022bc <main+0x133c>
 800228e:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 8002292:	2b00      	cmp	r3, #0
 8002294:	d112      	bne.n	80022bc <main+0x133c>
					OUTX_M_val = OUTX_H_REG_M_val;
 8002296:	f107 031e 	add.w	r3, r7, #30
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	f8a7 31cc 	strh.w	r3, [r7, #460]	; 0x1cc
					OUTX_M_val <<= 8;
 80022a0:	f9b7 31cc 	ldrsh.w	r3, [r7, #460]	; 0x1cc
 80022a4:	021b      	lsls	r3, r3, #8
 80022a6:	f8a7 31cc 	strh.w	r3, [r7, #460]	; 0x1cc
					OUTX_M_val |= OUTX_L_REG_M_val;
 80022aa:	f107 031f 	add.w	r3, r7, #31
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	b21a      	sxth	r2, r3
 80022b2:	f8b7 31cc 	ldrh.w	r3, [r7, #460]	; 0x1cc
 80022b6:	4313      	orrs	r3, r2
 80022b8:	f8a7 31cc 	strh.w	r3, [r7, #460]	; 0x1cc
//					HAL_UART_Transmit(&huart2, (uint8_t*)MAG_Buffer, sprintf(MAG_Buffer, "X: %05d  ", OUTX_M_val), 100);
				}

				if (OUTY_L_M_status == HAL_OK && OUTY_H_M_status == HAL_OK) {
 80022bc:	f897 3146 	ldrb.w	r3, [r7, #326]	; 0x146
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d116      	bne.n	80022f2 <main+0x1372>
 80022c4:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d112      	bne.n	80022f2 <main+0x1372>
					OUTY_M_val = OUTY_H_REG_M_val;
 80022cc:	f107 031c 	add.w	r3, r7, #28
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	f8a7 31ce 	strh.w	r3, [r7, #462]	; 0x1ce
					OUTY_M_val <<= 8;
 80022d6:	f9b7 31ce 	ldrsh.w	r3, [r7, #462]	; 0x1ce
 80022da:	021b      	lsls	r3, r3, #8
 80022dc:	f8a7 31ce 	strh.w	r3, [r7, #462]	; 0x1ce
					OUTY_M_val |= OUTY_L_REG_M_val;
 80022e0:	f107 031d 	add.w	r3, r7, #29
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	b21a      	sxth	r2, r3
 80022e8:	f8b7 31ce 	ldrh.w	r3, [r7, #462]	; 0x1ce
 80022ec:	4313      	orrs	r3, r2
 80022ee:	f8a7 31ce 	strh.w	r3, [r7, #462]	; 0x1ce
//					HAL_UART_Transmit(&huart2, (uint8_t*)MAG_Buffer, sprintf(MAG_Buffer, "Y: %05d  ", OUTY_M_val), 100);
				}

				if (OUTZ_L_M_status == HAL_OK && OUTZ_H_M_status == HAL_OK) {
 80022f2:	f897 3144 	ldrb.w	r3, [r7, #324]	; 0x144
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d116      	bne.n	8002328 <main+0x13a8>
 80022fa:	f897 3143 	ldrb.w	r3, [r7, #323]	; 0x143
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d112      	bne.n	8002328 <main+0x13a8>
					OUTZ_M_val = OUTZ_H_REG_M_val;
 8002302:	f107 031a 	add.w	r3, r7, #26
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	f8a7 31d6 	strh.w	r3, [r7, #470]	; 0x1d6
					OUTZ_M_val <<= 8;
 800230c:	f9b7 31d6 	ldrsh.w	r3, [r7, #470]	; 0x1d6
 8002310:	021b      	lsls	r3, r3, #8
 8002312:	f8a7 31d6 	strh.w	r3, [r7, #470]	; 0x1d6
					OUTZ_M_val |= OUTZ_L_REG_M_val;
 8002316:	f107 031b 	add.w	r3, r7, #27
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	b21a      	sxth	r2, r3
 800231e:	f8b7 31d6 	ldrh.w	r3, [r7, #470]	; 0x1d6
 8002322:	4313      	orrs	r3, r2
 8002324:	f8a7 31d6 	strh.w	r3, [r7, #470]	; 0x1d6
//					HAL_UART_Transmit(&huart2, (uint8_t*)MAG_Buffer, sprintf(MAG_Buffer, "Z: %05d  \n\r", OUTZ_M_val), 100);
				}
				arr_x_m[i] = OUTX_M_val;
 8002328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800232c:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8002330:	f8b7 11cc 	ldrh.w	r1, [r7, #460]	; 0x1cc
 8002334:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				arr_y_m[i] = OUTY_M_val;
 8002338:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800233c:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8002340:	f8b7 11ce 	ldrh.w	r1, [r7, #462]	; 0x1ce
 8002344:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				arr_z_m[i] = OUTZ_M_val;
 8002348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800234c:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8002350:	f8b7 11d6 	ldrh.w	r1, [r7, #470]	; 0x1d6
 8002354:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (int i=0;i<sample_m;i++) {
 8002358:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800235c:	3301      	adds	r3, #1
 800235e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8002362:	f897 30fe 	ldrb.w	r3, [r7, #254]	; 0xfe
 8002366:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 800236a:	429a      	cmp	r2, r3
 800236c:	f6ff aefa 	blt.w	8002164 <main+0x11e4>
			}


			for (int i=0;i<sample_m;i++) {
 8002370:	2300      	movs	r3, #0
 8002372:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8002376:	e034      	b.n	80023e2 <main+0x1462>
				avg_x_m += arr_x_m[i];
 8002378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800237c:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8002380:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8002384:	ee07 3a90 	vmov	s15, r3
 8002388:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800238c:	ed97 7a64 	vldr	s14, [r7, #400]	; 0x190
 8002390:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002394:	edc7 7a64 	vstr	s15, [r7, #400]	; 0x190
				avg_y_m += arr_y_m[i];
 8002398:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800239c:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 80023a0:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80023a4:	ee07 3a90 	vmov	s15, r3
 80023a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023ac:	ed97 7a63 	vldr	s14, [r7, #396]	; 0x18c
 80023b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023b4:	edc7 7a63 	vstr	s15, [r7, #396]	; 0x18c
				avg_z_m += arr_z_m[i];
 80023b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023bc:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 80023c0:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80023c4:	ee07 3a90 	vmov	s15, r3
 80023c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023cc:	ed97 7a62 	vldr	s14, [r7, #392]	; 0x188
 80023d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023d4:	edc7 7a62 	vstr	s15, [r7, #392]	; 0x188
			for (int i=0;i<sample_m;i++) {
 80023d8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80023dc:	3301      	adds	r3, #1
 80023de:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80023e2:	f897 30fe 	ldrb.w	r3, [r7, #254]	; 0xfe
 80023e6:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 80023ea:	429a      	cmp	r2, r3
 80023ec:	dbc4      	blt.n	8002378 <main+0x13f8>
			}

			/*
			 * Calculation
			 */
			avg_x_m = (avg_x_m / sample_m) * (100.0/65536);
 80023ee:	f897 30fe 	ldrb.w	r3, [r7, #254]	; 0xfe
 80023f2:	ee07 3a90 	vmov	s15, r3
 80023f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023fa:	edd7 6a64 	vldr	s13, [r7, #400]	; 0x190
 80023fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002402:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8002504 <main+0x1584>
 8002406:	ee67 7a87 	vmul.f32	s15, s15, s14
 800240a:	edc7 7a64 	vstr	s15, [r7, #400]	; 0x190
			avg_y_m = (avg_y_m / sample_m) * (100.0/65536);
 800240e:	f897 30fe 	ldrb.w	r3, [r7, #254]	; 0xfe
 8002412:	ee07 3a90 	vmov	s15, r3
 8002416:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800241a:	edd7 6a63 	vldr	s13, [r7, #396]	; 0x18c
 800241e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002422:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8002504 <main+0x1584>
 8002426:	ee67 7a87 	vmul.f32	s15, s15, s14
 800242a:	edc7 7a63 	vstr	s15, [r7, #396]	; 0x18c
			avg_z_m = (avg_z_m / sample_m) * (100.0/65536);
 800242e:	f897 30fe 	ldrb.w	r3, [r7, #254]	; 0xfe
 8002432:	ee07 3a90 	vmov	s15, r3
 8002436:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800243a:	edd7 6a62 	vldr	s13, [r7, #392]	; 0x188
 800243e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002442:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8002504 <main+0x1584>
 8002446:	ee67 7a87 	vmul.f32	s15, s15, s14
 800244a:	edc7 7a62 	vstr	s15, [r7, #392]	; 0x188


			/*
			 * Serial
			 */
			KALMAN(avg_x_m, &P_x_m, &U_hat_x_m, &K_x_m);
 800244e:	4a2e      	ldr	r2, [pc, #184]	; (8002508 <main+0x1588>)
 8002450:	492e      	ldr	r1, [pc, #184]	; (800250c <main+0x158c>)
 8002452:	482f      	ldr	r0, [pc, #188]	; (8002510 <main+0x1590>)
 8002454:	ed97 0a64 	vldr	s0, [r7, #400]	; 0x190
 8002458:	f000 f94a 	bl	80026f0 <KALMAN>
			KALMAN(avg_y_m, &P_y_m, &U_hat_y_m, &K_y_m);
 800245c:	4a2d      	ldr	r2, [pc, #180]	; (8002514 <main+0x1594>)
 800245e:	492e      	ldr	r1, [pc, #184]	; (8002518 <main+0x1598>)
 8002460:	482e      	ldr	r0, [pc, #184]	; (800251c <main+0x159c>)
 8002462:	ed97 0a63 	vldr	s0, [r7, #396]	; 0x18c
 8002466:	f000 f943 	bl	80026f0 <KALMAN>
			KALMAN(avg_z_m, &P_z_m, &U_hat_z_m, &K_z_m);
 800246a:	4a2d      	ldr	r2, [pc, #180]	; (8002520 <main+0x15a0>)
 800246c:	492d      	ldr	r1, [pc, #180]	; (8002524 <main+0x15a4>)
 800246e:	482e      	ldr	r0, [pc, #184]	; (8002528 <main+0x15a8>)
 8002470:	ed97 0a62 	vldr	s0, [r7, #392]	; 0x188
 8002474:	f000 f93c 	bl	80026f0 <KALMAN>
			HAL_UART_Transmit(&huart2, (uint8_t*)MAG_Buffer, sprintf(MAG_Buffer, "% 06.5f,", avg_z_m), 100); // @suppress("Float formatting support")
			*/


//			yaw = atan2f( avg_y_m, avg_z_m);
			yaw = atan2f( U_hat_y_m, U_hat_z_m);
 8002478:	4b27      	ldr	r3, [pc, #156]	; (8002518 <main+0x1598>)
 800247a:	edd3 7a00 	vldr	s15, [r3]
 800247e:	4b29      	ldr	r3, [pc, #164]	; (8002524 <main+0x15a4>)
 8002480:	ed93 7a00 	vldr	s14, [r3]
 8002484:	eef0 0a47 	vmov.f32	s1, s14
 8002488:	eeb0 0a67 	vmov.f32	s0, s15
 800248c:	f006 f8c8 	bl	8008620 <atan2f>
 8002490:	ed87 0a6d 	vstr	s0, [r7, #436]	; 0x1b4

//			if(yaw <0) yaw += 2*PI;
//			// Correcting due to the addition of the declination angle
//			if(yaw > 2*PI)yaw -= 2*PI;
			yaw = yaw * 180.0/PI;
 8002494:	f8d7 01b4 	ldr.w	r0, [r7, #436]	; 0x1b4
 8002498:	f7fe f876 	bl	8000588 <__aeabi_f2d>
 800249c:	f04f 0200 	mov.w	r2, #0
 80024a0:	4b22      	ldr	r3, [pc, #136]	; (800252c <main+0x15ac>)
 80024a2:	f7fe f8c9 	bl	8000638 <__aeabi_dmul>
 80024a6:	4602      	mov	r2, r0
 80024a8:	460b      	mov	r3, r1
 80024aa:	4610      	mov	r0, r2
 80024ac:	4619      	mov	r1, r3
 80024ae:	a312      	add	r3, pc, #72	; (adr r3, 80024f8 <main+0x1578>)
 80024b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b4:	f7fe f9ea 	bl	800088c <__aeabi_ddiv>
 80024b8:	4602      	mov	r2, r0
 80024ba:	460b      	mov	r3, r1
 80024bc:	4610      	mov	r0, r2
 80024be:	4619      	mov	r1, r3
 80024c0:	f7fe fb92 	bl	8000be8 <__aeabi_d2f>
 80024c4:	4603      	mov	r3, r0
 80024c6:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 80024ca:	46ad      	mov	sp, r5
//			HAL_UART_Transmit(&huart2, (uint8_t*)MAG_Buffer, sprintf(MAG_Buffer, "Total: % 06.5f Gauss \n\r", total), 100); // @suppress("Float formatting support")
		}



		if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 0 && pushed == 0) {
 80024cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024d0:	4817      	ldr	r0, [pc, #92]	; (8002530 <main+0x15b0>)
 80024d2:	f000 ff99 	bl	8003408 <HAL_GPIO_ReadPin>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f040 80e3 	bne.w	80026a4 <main+0x1724>
 80024de:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	f040 80de 	bne.w	80026a4 <main+0x1724>
			angle_count= 0;
 80024e8:	2300      	movs	r3, #0
 80024ea:	f887 317b 	strb.w	r3, [r7, #379]	; 0x17b
			for (int i = 0; i<sizeof(angles)/sizeof(float); i++) {
 80024ee:	2300      	movs	r3, #0
 80024f0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80024f4:	e02b      	b.n	800254e <main+0x15ce>
 80024f6:	bf00      	nop
 80024f8:	54524550 	.word	0x54524550
 80024fc:	400921fb 	.word	0x400921fb
 8002500:	20000230 	.word	0x20000230
 8002504:	3ac80000 	.word	0x3ac80000
 8002508:	20000208 	.word	0x20000208
 800250c:	20000204 	.word	0x20000204
 8002510:	20000200 	.word	0x20000200
 8002514:	20000214 	.word	0x20000214
 8002518:	20000210 	.word	0x20000210
 800251c:	2000020c 	.word	0x2000020c
 8002520:	20000220 	.word	0x20000220
 8002524:	2000021c 	.word	0x2000021c
 8002528:	20000218 	.word	0x20000218
 800252c:	40668000 	.word	0x40668000
 8002530:	40020800 	.word	0x40020800
				angles[i] = 0;//initialise
 8002534:	1d3a      	adds	r2, r7, #4
 8002536:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	4413      	add	r3, r2
 800253e:	f04f 0200 	mov.w	r2, #0
 8002542:	601a      	str	r2, [r3, #0]
			for (int i = 0; i<sizeof(angles)/sizeof(float); i++) {
 8002544:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002548:	3301      	adds	r3, #1
 800254a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800254e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002552:	2b04      	cmp	r3, #4
 8002554:	d9ee      	bls.n	8002534 <main+0x15b4>
			}
			offset_avg_count = 0;
 8002556:	2300      	movs	r3, #0
 8002558:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
			pushed = 1;
 800255c:	2301      	movs	r3, #1
 800255e:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
			initial_yaw = yaw;
 8002562:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002566:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
			offset_measure = 1;
 800256a:	2301      	movs	r3, #1
 800256c:	f887 31bf 	strb.w	r3, [r7, #447]	; 0x1bf
			if (MODE == 0) {
				HAL_UART_Transmit(&huart2, (uint8_t*)ACC_Buffer, sprintf(ACC_Buffer, "*Initialising\n\r"), 100);
 8002570:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002574:	4955      	ldr	r1, [pc, #340]	; (80026cc <main+0x174c>)
 8002576:	4618      	mov	r0, r3
 8002578:	f003 fd82 	bl	8006080 <siprintf>
 800257c:	4603      	mov	r3, r0
 800257e:	b29a      	uxth	r2, r3
 8002580:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8002584:	2364      	movs	r3, #100	; 0x64
 8002586:	4852      	ldr	r0, [pc, #328]	; (80026d0 <main+0x1750>)
 8002588:	f002 fe15 	bl	80051b6 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, (uint8_t*)ACC_Buffer, sprintf(ACC_Buffer, "Initial Yaw %f\n\r", initial_yaw), 100);
 800258c:	f8d7 01c0 	ldr.w	r0, [r7, #448]	; 0x1c0
 8002590:	f7fd fffa 	bl	8000588 <__aeabi_f2d>
 8002594:	4602      	mov	r2, r0
 8002596:	460b      	mov	r3, r1
 8002598:	f107 0088 	add.w	r0, r7, #136	; 0x88
 800259c:	494d      	ldr	r1, [pc, #308]	; (80026d4 <main+0x1754>)
 800259e:	f003 fd6f 	bl	8006080 <siprintf>
 80025a2:	4603      	mov	r3, r0
 80025a4:	b29a      	uxth	r2, r3
 80025a6:	f107 0188 	add.w	r1, r7, #136	; 0x88
 80025aa:	2364      	movs	r3, #100	; 0x64
 80025ac:	4848      	ldr	r0, [pc, #288]	; (80026d0 <main+0x1750>)
 80025ae:	f002 fe02 	bl	80051b6 <HAL_UART_Transmit>
			}
			steps = 0;
 80025b2:	2300      	movs	r3, #0
 80025b4:	f8a7 31de 	strh.w	r3, [r7, #478]	; 0x1de
			increase_prev = HAL_GetTick();
 80025b8:	f000 fc7c 	bl	8002eb4 <HAL_GetTick>
 80025bc:	f8c7 01c4 	str.w	r0, [r7, #452]	; 0x1c4
			offset = 0;
 80025c0:	f04f 0300 	mov.w	r3, #0
 80025c4:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
			x_pos_prev = 0;
 80025c8:	f04f 0300 	mov.w	r3, #0
 80025cc:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
			y_pos_prev = 0;
 80025d0:	f04f 0300 	mov.w	r3, #0
 80025d4:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
			if (MODE == 0) {
				HAL_UART_Transmit(&huart2, (uint8_t*)ACC_Buffer, sprintf(ACC_Buffer, "Stand Still\n\r"), 100);
 80025d8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80025dc:	493e      	ldr	r1, [pc, #248]	; (80026d8 <main+0x1758>)
 80025de:	4618      	mov	r0, r3
 80025e0:	f003 fd4e 	bl	8006080 <siprintf>
 80025e4:	4603      	mov	r3, r0
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	f107 0188 	add.w	r1, r7, #136	; 0x88
 80025ec:	2364      	movs	r3, #100	; 0x64
 80025ee:	4838      	ldr	r0, [pc, #224]	; (80026d0 <main+0x1750>)
 80025f0:	f002 fde1 	bl	80051b6 <HAL_UART_Transmit>
			}
			HAL_Delay(3000);
 80025f4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80025f8:	f000 fc68 	bl	8002ecc <HAL_Delay>
			stationary_x = avg_x_a;
 80025fc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002600:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
			stationary_y = avg_y_a;
 8002604:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8002608:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
			stationary_z = avg_z_a;
 800260c:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8002610:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
			if (MODE == 0) {
				HAL_UART_Transmit(&huart2, (uint8_t*)ACC_Buffer, sprintf(ACC_Buffer, "Stationary x is %f\n\r", stationary_x), 100);
 8002614:	f8d7 01a4 	ldr.w	r0, [r7, #420]	; 0x1a4
 8002618:	f7fd ffb6 	bl	8000588 <__aeabi_f2d>
 800261c:	4602      	mov	r2, r0
 800261e:	460b      	mov	r3, r1
 8002620:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8002624:	492d      	ldr	r1, [pc, #180]	; (80026dc <main+0x175c>)
 8002626:	f003 fd2b 	bl	8006080 <siprintf>
 800262a:	4603      	mov	r3, r0
 800262c:	b29a      	uxth	r2, r3
 800262e:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8002632:	2364      	movs	r3, #100	; 0x64
 8002634:	4826      	ldr	r0, [pc, #152]	; (80026d0 <main+0x1750>)
 8002636:	f002 fdbe 	bl	80051b6 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, (uint8_t*)ACC_Buffer, sprintf(ACC_Buffer, "Stationary y is %f\n\r", stationary_y), 100);
 800263a:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
 800263e:	f7fd ffa3 	bl	8000588 <__aeabi_f2d>
 8002642:	4602      	mov	r2, r0
 8002644:	460b      	mov	r3, r1
 8002646:	f107 0088 	add.w	r0, r7, #136	; 0x88
 800264a:	4925      	ldr	r1, [pc, #148]	; (80026e0 <main+0x1760>)
 800264c:	f003 fd18 	bl	8006080 <siprintf>
 8002650:	4603      	mov	r3, r0
 8002652:	b29a      	uxth	r2, r3
 8002654:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8002658:	2364      	movs	r3, #100	; 0x64
 800265a:	481d      	ldr	r0, [pc, #116]	; (80026d0 <main+0x1750>)
 800265c:	f002 fdab 	bl	80051b6 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, (uint8_t*)ACC_Buffer, sprintf(ACC_Buffer, "Stationary z is %f\n\r", stationary_z), 100);
 8002660:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8002664:	f7fd ff90 	bl	8000588 <__aeabi_f2d>
 8002668:	4602      	mov	r2, r0
 800266a:	460b      	mov	r3, r1
 800266c:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8002670:	491c      	ldr	r1, [pc, #112]	; (80026e4 <main+0x1764>)
 8002672:	f003 fd05 	bl	8006080 <siprintf>
 8002676:	4603      	mov	r3, r0
 8002678:	b29a      	uxth	r2, r3
 800267a:	f107 0188 	add.w	r1, r7, #136	; 0x88
 800267e:	2364      	movs	r3, #100	; 0x64
 8002680:	4813      	ldr	r0, [pc, #76]	; (80026d0 <main+0x1750>)
 8002682:	f002 fd98 	bl	80051b6 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, (uint8_t*)ACC_Buffer, sprintf(ACC_Buffer, "Do 4 steps don't move forward\n\r"), 100);
 8002686:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800268a:	4917      	ldr	r1, [pc, #92]	; (80026e8 <main+0x1768>)
 800268c:	4618      	mov	r0, r3
 800268e:	f003 fcf7 	bl	8006080 <siprintf>
 8002692:	4603      	mov	r3, r0
 8002694:	b29a      	uxth	r2, r3
 8002696:	f107 0188 	add.w	r1, r7, #136	; 0x88
 800269a:	2364      	movs	r3, #100	; 0x64
 800269c:	480c      	ldr	r0, [pc, #48]	; (80026d0 <main+0x1750>)
 800269e:	f002 fd8a 	bl	80051b6 <HAL_UART_Transmit>
			if (MODE == 0) {
 80026a2:	e010      	b.n	80026c6 <main+0x1746>
			}

		} else if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 1 && pushed == 1) {
 80026a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026a8:	4810      	ldr	r0, [pc, #64]	; (80026ec <main+0x176c>)
 80026aa:	f000 fead 	bl	8003408 <HAL_GPIO_ReadPin>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	f47e afbd 	bne.w	8001630 <main+0x6b0>
 80026b6:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	f47e afb8 	bne.w	8001630 <main+0x6b0>
			pushed = 0;
 80026c0:	2300      	movs	r3, #0
 80026c2:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
		STATUS_REG_A_status = HAL_I2C_Mem_Read(&hi2c1, (ACC<<1)|0x1, STATUS_REG_A, 1, &STATUS_REG_A_val, 1, 50);
 80026c6:	f7fe bfb3 	b.w	8001630 <main+0x6b0>
 80026ca:	bf00      	nop
 80026cc:	08009a24 	.word	0x08009a24
 80026d0:	20000284 	.word	0x20000284
 80026d4:	08009a34 	.word	0x08009a34
 80026d8:	08009a48 	.word	0x08009a48
 80026dc:	08009a58 	.word	0x08009a58
 80026e0:	08009a70 	.word	0x08009a70
 80026e4:	08009a88 	.word	0x08009a88
 80026e8:	08009aa0 	.word	0x08009aa0
 80026ec:	40020800 	.word	0x40020800

080026f0 <KALMAN>:
	}
}



void KALMAN(float U, float *P, float *U_hat, float *K) {
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	ed87 0a03 	vstr	s0, [r7, #12]
 80026fa:	60b8      	str	r0, [r7, #8]
 80026fc:	6079      	str	r1, [r7, #4]
 80026fe:	603a      	str	r2, [r7, #0]
	*K = (*P)*H/(H*(*P)*H+R);
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	edd3 7a00 	vldr	s15, [r3]
 8002706:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800270a:	ee67 6a87 	vmul.f32	s13, s15, s14
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	edd3 7a00 	vldr	s15, [r3]
 8002714:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002718:	ee67 7a87 	vmul.f32	s15, s15, s14
 800271c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002720:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002724:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80027a4 <KALMAN+0xb4>
 8002728:	ee37 7a87 	vadd.f32	s14, s15, s14
 800272c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	edc3 7a00 	vstr	s15, [r3]
	*U_hat = (*U_hat)+(*K)*(U-H*(*U_hat));
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	ed93 7a00 	vldr	s14, [r3]
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	edd3 6a00 	vldr	s13, [r3]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	edd3 7a00 	vldr	s15, [r3]
 8002748:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800274c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002750:	ed97 6a03 	vldr	s12, [r7, #12]
 8002754:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002758:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800275c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	edc3 7a00 	vstr	s15, [r3]
	*P=(1-(*K)*H)*(*P)+Q;
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	edd3 7a00 	vldr	s15, [r3]
 800276c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002770:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002774:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002778:	ee37 7a67 	vsub.f32	s14, s14, s15
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	edd3 7a00 	vldr	s15, [r3]
 8002782:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002786:	4b08      	ldr	r3, [pc, #32]	; (80027a8 <KALMAN+0xb8>)
 8002788:	edd3 7a00 	vldr	s15, [r3]
 800278c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	edc3 7a00 	vstr	s15, [r3]
	return;
 8002796:	bf00      	nop
}
 8002798:	3714      	adds	r7, #20
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	3e99999a 	.word	0x3e99999a
 80027a8:	20000000 	.word	0x20000000

080027ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b094      	sub	sp, #80	; 0x50
 80027b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027b2:	f107 031c 	add.w	r3, r7, #28
 80027b6:	2234      	movs	r2, #52	; 0x34
 80027b8:	2100      	movs	r1, #0
 80027ba:	4618      	mov	r0, r3
 80027bc:	f002 ffee 	bl	800579c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027c0:	f107 0308 	add.w	r3, r7, #8
 80027c4:	2200      	movs	r2, #0
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	605a      	str	r2, [r3, #4]
 80027ca:	609a      	str	r2, [r3, #8]
 80027cc:	60da      	str	r2, [r3, #12]
 80027ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80027d0:	2300      	movs	r3, #0
 80027d2:	607b      	str	r3, [r7, #4]
 80027d4:	4b2a      	ldr	r3, [pc, #168]	; (8002880 <SystemClock_Config+0xd4>)
 80027d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d8:	4a29      	ldr	r2, [pc, #164]	; (8002880 <SystemClock_Config+0xd4>)
 80027da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027de:	6413      	str	r3, [r2, #64]	; 0x40
 80027e0:	4b27      	ldr	r3, [pc, #156]	; (8002880 <SystemClock_Config+0xd4>)
 80027e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e8:	607b      	str	r3, [r7, #4]
 80027ea:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80027ec:	2300      	movs	r3, #0
 80027ee:	603b      	str	r3, [r7, #0]
 80027f0:	4b24      	ldr	r3, [pc, #144]	; (8002884 <SystemClock_Config+0xd8>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80027f8:	4a22      	ldr	r2, [pc, #136]	; (8002884 <SystemClock_Config+0xd8>)
 80027fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027fe:	6013      	str	r3, [r2, #0]
 8002800:	4b20      	ldr	r3, [pc, #128]	; (8002884 <SystemClock_Config+0xd8>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002808:	603b      	str	r3, [r7, #0]
 800280a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800280c:	2302      	movs	r3, #2
 800280e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002810:	2301      	movs	r3, #1
 8002812:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002814:	2310      	movs	r3, #16
 8002816:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002818:	2302      	movs	r3, #2
 800281a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800281c:	2300      	movs	r3, #0
 800281e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002820:	2310      	movs	r3, #16
 8002822:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002824:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002828:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800282a:	2304      	movs	r3, #4
 800282c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800282e:	2302      	movs	r3, #2
 8002830:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002832:	2302      	movs	r3, #2
 8002834:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002836:	f107 031c 	add.w	r3, r7, #28
 800283a:	4618      	mov	r0, r3
 800283c:	f002 f9d0 	bl	8004be0 <HAL_RCC_OscConfig>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002846:	f000 f8e5 	bl	8002a14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800284a:	230f      	movs	r3, #15
 800284c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800284e:	2302      	movs	r3, #2
 8002850:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002852:	2300      	movs	r3, #0
 8002854:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002856:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800285a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800285c:	2300      	movs	r3, #0
 800285e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002860:	f107 0308 	add.w	r3, r7, #8
 8002864:	2102      	movs	r1, #2
 8002866:	4618      	mov	r0, r3
 8002868:	f001 feee 	bl	8004648 <HAL_RCC_ClockConfig>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8002872:	f000 f8cf 	bl	8002a14 <Error_Handler>
  }
}
 8002876:	bf00      	nop
 8002878:	3750      	adds	r7, #80	; 0x50
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	40023800 	.word	0x40023800
 8002884:	40007000 	.word	0x40007000

08002888 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800288c:	4b12      	ldr	r3, [pc, #72]	; (80028d8 <MX_I2C1_Init+0x50>)
 800288e:	4a13      	ldr	r2, [pc, #76]	; (80028dc <MX_I2C1_Init+0x54>)
 8002890:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002892:	4b11      	ldr	r3, [pc, #68]	; (80028d8 <MX_I2C1_Init+0x50>)
 8002894:	4a12      	ldr	r2, [pc, #72]	; (80028e0 <MX_I2C1_Init+0x58>)
 8002896:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002898:	4b0f      	ldr	r3, [pc, #60]	; (80028d8 <MX_I2C1_Init+0x50>)
 800289a:	2200      	movs	r2, #0
 800289c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800289e:	4b0e      	ldr	r3, [pc, #56]	; (80028d8 <MX_I2C1_Init+0x50>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80028a4:	4b0c      	ldr	r3, [pc, #48]	; (80028d8 <MX_I2C1_Init+0x50>)
 80028a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80028aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80028ac:	4b0a      	ldr	r3, [pc, #40]	; (80028d8 <MX_I2C1_Init+0x50>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80028b2:	4b09      	ldr	r3, [pc, #36]	; (80028d8 <MX_I2C1_Init+0x50>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80028b8:	4b07      	ldr	r3, [pc, #28]	; (80028d8 <MX_I2C1_Init+0x50>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80028be:	4b06      	ldr	r3, [pc, #24]	; (80028d8 <MX_I2C1_Init+0x50>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80028c4:	4804      	ldr	r0, [pc, #16]	; (80028d8 <MX_I2C1_Init+0x50>)
 80028c6:	f000 fdd1 	bl	800346c <HAL_I2C_Init>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80028d0:	f000 f8a0 	bl	8002a14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80028d4:	bf00      	nop
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	20000230 	.word	0x20000230
 80028dc:	40005400 	.word	0x40005400
 80028e0:	000186a0 	.word	0x000186a0

080028e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80028e8:	4b11      	ldr	r3, [pc, #68]	; (8002930 <MX_USART2_UART_Init+0x4c>)
 80028ea:	4a12      	ldr	r2, [pc, #72]	; (8002934 <MX_USART2_UART_Init+0x50>)
 80028ec:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80028ee:	4b10      	ldr	r3, [pc, #64]	; (8002930 <MX_USART2_UART_Init+0x4c>)
 80028f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80028f4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80028f6:	4b0e      	ldr	r3, [pc, #56]	; (8002930 <MX_USART2_UART_Init+0x4c>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80028fc:	4b0c      	ldr	r3, [pc, #48]	; (8002930 <MX_USART2_UART_Init+0x4c>)
 80028fe:	2200      	movs	r2, #0
 8002900:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002902:	4b0b      	ldr	r3, [pc, #44]	; (8002930 <MX_USART2_UART_Init+0x4c>)
 8002904:	2200      	movs	r2, #0
 8002906:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002908:	4b09      	ldr	r3, [pc, #36]	; (8002930 <MX_USART2_UART_Init+0x4c>)
 800290a:	220c      	movs	r2, #12
 800290c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800290e:	4b08      	ldr	r3, [pc, #32]	; (8002930 <MX_USART2_UART_Init+0x4c>)
 8002910:	2200      	movs	r2, #0
 8002912:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002914:	4b06      	ldr	r3, [pc, #24]	; (8002930 <MX_USART2_UART_Init+0x4c>)
 8002916:	2200      	movs	r2, #0
 8002918:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800291a:	4805      	ldr	r0, [pc, #20]	; (8002930 <MX_USART2_UART_Init+0x4c>)
 800291c:	f002 fbfe 	bl	800511c <HAL_UART_Init>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002926:	f000 f875 	bl	8002a14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800292a:	bf00      	nop
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	20000284 	.word	0x20000284
 8002934:	40004400 	.word	0x40004400

08002938 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b08a      	sub	sp, #40	; 0x28
 800293c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800293e:	f107 0314 	add.w	r3, r7, #20
 8002942:	2200      	movs	r2, #0
 8002944:	601a      	str	r2, [r3, #0]
 8002946:	605a      	str	r2, [r3, #4]
 8002948:	609a      	str	r2, [r3, #8]
 800294a:	60da      	str	r2, [r3, #12]
 800294c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800294e:	2300      	movs	r3, #0
 8002950:	613b      	str	r3, [r7, #16]
 8002952:	4b2d      	ldr	r3, [pc, #180]	; (8002a08 <MX_GPIO_Init+0xd0>)
 8002954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002956:	4a2c      	ldr	r2, [pc, #176]	; (8002a08 <MX_GPIO_Init+0xd0>)
 8002958:	f043 0304 	orr.w	r3, r3, #4
 800295c:	6313      	str	r3, [r2, #48]	; 0x30
 800295e:	4b2a      	ldr	r3, [pc, #168]	; (8002a08 <MX_GPIO_Init+0xd0>)
 8002960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002962:	f003 0304 	and.w	r3, r3, #4
 8002966:	613b      	str	r3, [r7, #16]
 8002968:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800296a:	2300      	movs	r3, #0
 800296c:	60fb      	str	r3, [r7, #12]
 800296e:	4b26      	ldr	r3, [pc, #152]	; (8002a08 <MX_GPIO_Init+0xd0>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002972:	4a25      	ldr	r2, [pc, #148]	; (8002a08 <MX_GPIO_Init+0xd0>)
 8002974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002978:	6313      	str	r3, [r2, #48]	; 0x30
 800297a:	4b23      	ldr	r3, [pc, #140]	; (8002a08 <MX_GPIO_Init+0xd0>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002982:	60fb      	str	r3, [r7, #12]
 8002984:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002986:	2300      	movs	r3, #0
 8002988:	60bb      	str	r3, [r7, #8]
 800298a:	4b1f      	ldr	r3, [pc, #124]	; (8002a08 <MX_GPIO_Init+0xd0>)
 800298c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298e:	4a1e      	ldr	r2, [pc, #120]	; (8002a08 <MX_GPIO_Init+0xd0>)
 8002990:	f043 0301 	orr.w	r3, r3, #1
 8002994:	6313      	str	r3, [r2, #48]	; 0x30
 8002996:	4b1c      	ldr	r3, [pc, #112]	; (8002a08 <MX_GPIO_Init+0xd0>)
 8002998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	60bb      	str	r3, [r7, #8]
 80029a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029a2:	2300      	movs	r3, #0
 80029a4:	607b      	str	r3, [r7, #4]
 80029a6:	4b18      	ldr	r3, [pc, #96]	; (8002a08 <MX_GPIO_Init+0xd0>)
 80029a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029aa:	4a17      	ldr	r2, [pc, #92]	; (8002a08 <MX_GPIO_Init+0xd0>)
 80029ac:	f043 0302 	orr.w	r3, r3, #2
 80029b0:	6313      	str	r3, [r2, #48]	; 0x30
 80029b2:	4b15      	ldr	r3, [pc, #84]	; (8002a08 <MX_GPIO_Init+0xd0>)
 80029b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	607b      	str	r3, [r7, #4]
 80029bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80029be:	2200      	movs	r2, #0
 80029c0:	2120      	movs	r1, #32
 80029c2:	4812      	ldr	r0, [pc, #72]	; (8002a0c <MX_GPIO_Init+0xd4>)
 80029c4:	f000 fd38 	bl	8003438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80029c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80029ce:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80029d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d4:	2300      	movs	r3, #0
 80029d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80029d8:	f107 0314 	add.w	r3, r7, #20
 80029dc:	4619      	mov	r1, r3
 80029de:	480c      	ldr	r0, [pc, #48]	; (8002a10 <MX_GPIO_Init+0xd8>)
 80029e0:	f000 fb7e 	bl	80030e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80029e4:	2320      	movs	r3, #32
 80029e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029e8:	2301      	movs	r3, #1
 80029ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ec:	2300      	movs	r3, #0
 80029ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029f0:	2300      	movs	r3, #0
 80029f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80029f4:	f107 0314 	add.w	r3, r7, #20
 80029f8:	4619      	mov	r1, r3
 80029fa:	4804      	ldr	r0, [pc, #16]	; (8002a0c <MX_GPIO_Init+0xd4>)
 80029fc:	f000 fb70 	bl	80030e0 <HAL_GPIO_Init>

}
 8002a00:	bf00      	nop
 8002a02:	3728      	adds	r7, #40	; 0x28
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	40023800 	.word	0x40023800
 8002a0c:	40020000 	.word	0x40020000
 8002a10:	40020800 	.word	0x40020800

08002a14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a18:	b672      	cpsid	i
}
 8002a1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a1c:	e7fe      	b.n	8002a1c <Error_Handler+0x8>
	...

08002a20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a26:	2300      	movs	r3, #0
 8002a28:	607b      	str	r3, [r7, #4]
 8002a2a:	4b10      	ldr	r3, [pc, #64]	; (8002a6c <HAL_MspInit+0x4c>)
 8002a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2e:	4a0f      	ldr	r2, [pc, #60]	; (8002a6c <HAL_MspInit+0x4c>)
 8002a30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a34:	6453      	str	r3, [r2, #68]	; 0x44
 8002a36:	4b0d      	ldr	r3, [pc, #52]	; (8002a6c <HAL_MspInit+0x4c>)
 8002a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a3e:	607b      	str	r3, [r7, #4]
 8002a40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a42:	2300      	movs	r3, #0
 8002a44:	603b      	str	r3, [r7, #0]
 8002a46:	4b09      	ldr	r3, [pc, #36]	; (8002a6c <HAL_MspInit+0x4c>)
 8002a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4a:	4a08      	ldr	r2, [pc, #32]	; (8002a6c <HAL_MspInit+0x4c>)
 8002a4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a50:	6413      	str	r3, [r2, #64]	; 0x40
 8002a52:	4b06      	ldr	r3, [pc, #24]	; (8002a6c <HAL_MspInit+0x4c>)
 8002a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a5a:	603b      	str	r3, [r7, #0]
 8002a5c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002a5e:	2007      	movs	r0, #7
 8002a60:	f000 fb0a 	bl	8003078 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a64:	bf00      	nop
 8002a66:	3708      	adds	r7, #8
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	40023800 	.word	0x40023800

08002a70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b08a      	sub	sp, #40	; 0x28
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a78:	f107 0314 	add.w	r3, r7, #20
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	605a      	str	r2, [r3, #4]
 8002a82:	609a      	str	r2, [r3, #8]
 8002a84:	60da      	str	r2, [r3, #12]
 8002a86:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a19      	ldr	r2, [pc, #100]	; (8002af4 <HAL_I2C_MspInit+0x84>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d12c      	bne.n	8002aec <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a92:	2300      	movs	r3, #0
 8002a94:	613b      	str	r3, [r7, #16]
 8002a96:	4b18      	ldr	r3, [pc, #96]	; (8002af8 <HAL_I2C_MspInit+0x88>)
 8002a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9a:	4a17      	ldr	r2, [pc, #92]	; (8002af8 <HAL_I2C_MspInit+0x88>)
 8002a9c:	f043 0302 	orr.w	r3, r3, #2
 8002aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8002aa2:	4b15      	ldr	r3, [pc, #84]	; (8002af8 <HAL_I2C_MspInit+0x88>)
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	613b      	str	r3, [r7, #16]
 8002aac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002aae:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002ab2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ab4:	2312      	movs	r3, #18
 8002ab6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002abc:	2303      	movs	r3, #3
 8002abe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ac0:	2304      	movs	r3, #4
 8002ac2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ac4:	f107 0314 	add.w	r3, r7, #20
 8002ac8:	4619      	mov	r1, r3
 8002aca:	480c      	ldr	r0, [pc, #48]	; (8002afc <HAL_I2C_MspInit+0x8c>)
 8002acc:	f000 fb08 	bl	80030e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	60fb      	str	r3, [r7, #12]
 8002ad4:	4b08      	ldr	r3, [pc, #32]	; (8002af8 <HAL_I2C_MspInit+0x88>)
 8002ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad8:	4a07      	ldr	r2, [pc, #28]	; (8002af8 <HAL_I2C_MspInit+0x88>)
 8002ada:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ade:	6413      	str	r3, [r2, #64]	; 0x40
 8002ae0:	4b05      	ldr	r3, [pc, #20]	; (8002af8 <HAL_I2C_MspInit+0x88>)
 8002ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ae8:	60fb      	str	r3, [r7, #12]
 8002aea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002aec:	bf00      	nop
 8002aee:	3728      	adds	r7, #40	; 0x28
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40005400 	.word	0x40005400
 8002af8:	40023800 	.word	0x40023800
 8002afc:	40020400 	.word	0x40020400

08002b00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b08a      	sub	sp, #40	; 0x28
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b08:	f107 0314 	add.w	r3, r7, #20
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	605a      	str	r2, [r3, #4]
 8002b12:	609a      	str	r2, [r3, #8]
 8002b14:	60da      	str	r2, [r3, #12]
 8002b16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a19      	ldr	r2, [pc, #100]	; (8002b84 <HAL_UART_MspInit+0x84>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d12b      	bne.n	8002b7a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b22:	2300      	movs	r3, #0
 8002b24:	613b      	str	r3, [r7, #16]
 8002b26:	4b18      	ldr	r3, [pc, #96]	; (8002b88 <HAL_UART_MspInit+0x88>)
 8002b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2a:	4a17      	ldr	r2, [pc, #92]	; (8002b88 <HAL_UART_MspInit+0x88>)
 8002b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b30:	6413      	str	r3, [r2, #64]	; 0x40
 8002b32:	4b15      	ldr	r3, [pc, #84]	; (8002b88 <HAL_UART_MspInit+0x88>)
 8002b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b3a:	613b      	str	r3, [r7, #16]
 8002b3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b3e:	2300      	movs	r3, #0
 8002b40:	60fb      	str	r3, [r7, #12]
 8002b42:	4b11      	ldr	r3, [pc, #68]	; (8002b88 <HAL_UART_MspInit+0x88>)
 8002b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b46:	4a10      	ldr	r2, [pc, #64]	; (8002b88 <HAL_UART_MspInit+0x88>)
 8002b48:	f043 0301 	orr.w	r3, r3, #1
 8002b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b4e:	4b0e      	ldr	r3, [pc, #56]	; (8002b88 <HAL_UART_MspInit+0x88>)
 8002b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	60fb      	str	r3, [r7, #12]
 8002b58:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002b5a:	230c      	movs	r3, #12
 8002b5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b5e:	2302      	movs	r3, #2
 8002b60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b62:	2300      	movs	r3, #0
 8002b64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b66:	2303      	movs	r3, #3
 8002b68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b6a:	2307      	movs	r3, #7
 8002b6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b6e:	f107 0314 	add.w	r3, r7, #20
 8002b72:	4619      	mov	r1, r3
 8002b74:	4805      	ldr	r0, [pc, #20]	; (8002b8c <HAL_UART_MspInit+0x8c>)
 8002b76:	f000 fab3 	bl	80030e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002b7a:	bf00      	nop
 8002b7c:	3728      	adds	r7, #40	; 0x28
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	40004400 	.word	0x40004400
 8002b88:	40023800 	.word	0x40023800
 8002b8c:	40020000 	.word	0x40020000

08002b90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b94:	e7fe      	b.n	8002b94 <NMI_Handler+0x4>

08002b96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b96:	b480      	push	{r7}
 8002b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b9a:	e7fe      	b.n	8002b9a <HardFault_Handler+0x4>

08002b9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ba0:	e7fe      	b.n	8002ba0 <MemManage_Handler+0x4>

08002ba2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ba6:	e7fe      	b.n	8002ba6 <BusFault_Handler+0x4>

08002ba8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bac:	e7fe      	b.n	8002bac <UsageFault_Handler+0x4>

08002bae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bae:	b480      	push	{r7}
 8002bb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bb2:	bf00      	nop
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bc0:	bf00      	nop
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr

08002bca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bce:	bf00      	nop
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bdc:	f000 f956 	bl	8002e8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002be0:	bf00      	nop
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
	return 1;
 8002be8:	2301      	movs	r3, #1
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <_kill>:

int _kill(int pid, int sig)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002bfe:	f002 fda3 	bl	8005748 <__errno>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2216      	movs	r2, #22
 8002c06:	601a      	str	r2, [r3, #0]
	return -1;
 8002c08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3708      	adds	r7, #8
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <_exit>:

void _exit (int status)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002c1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f7ff ffe7 	bl	8002bf4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002c26:	e7fe      	b.n	8002c26 <_exit+0x12>

08002c28 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b086      	sub	sp, #24
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c34:	2300      	movs	r3, #0
 8002c36:	617b      	str	r3, [r7, #20]
 8002c38:	e00a      	b.n	8002c50 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002c3a:	f3af 8000 	nop.w
 8002c3e:	4601      	mov	r1, r0
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	1c5a      	adds	r2, r3, #1
 8002c44:	60ba      	str	r2, [r7, #8]
 8002c46:	b2ca      	uxtb	r2, r1
 8002c48:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	617b      	str	r3, [r7, #20]
 8002c50:	697a      	ldr	r2, [r7, #20]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	dbf0      	blt.n	8002c3a <_read+0x12>
	}

return len;
 8002c58:	687b      	ldr	r3, [r7, #4]
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3718      	adds	r7, #24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b086      	sub	sp, #24
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	60f8      	str	r0, [r7, #12]
 8002c6a:	60b9      	str	r1, [r7, #8]
 8002c6c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c6e:	2300      	movs	r3, #0
 8002c70:	617b      	str	r3, [r7, #20]
 8002c72:	e009      	b.n	8002c88 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	1c5a      	adds	r2, r3, #1
 8002c78:	60ba      	str	r2, [r7, #8]
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	3301      	adds	r3, #1
 8002c86:	617b      	str	r3, [r7, #20]
 8002c88:	697a      	ldr	r2, [r7, #20]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	dbf1      	blt.n	8002c74 <_write+0x12>
	}
	return len;
 8002c90:	687b      	ldr	r3, [r7, #4]
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3718      	adds	r7, #24
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <_close>:

int _close(int file)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b083      	sub	sp, #12
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
	return -1;
 8002ca2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr

08002cb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	b083      	sub	sp, #12
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
 8002cba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cc2:	605a      	str	r2, [r3, #4]
	return 0;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr

08002cd2 <_isatty>:

int _isatty(int file)
{
 8002cd2:	b480      	push	{r7}
 8002cd4:	b083      	sub	sp, #12
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
	return 1;
 8002cda:	2301      	movs	r3, #1
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b085      	sub	sp, #20
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
	return 0;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3714      	adds	r7, #20
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
	...

08002d04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b086      	sub	sp, #24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d0c:	4a14      	ldr	r2, [pc, #80]	; (8002d60 <_sbrk+0x5c>)
 8002d0e:	4b15      	ldr	r3, [pc, #84]	; (8002d64 <_sbrk+0x60>)
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d18:	4b13      	ldr	r3, [pc, #76]	; (8002d68 <_sbrk+0x64>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d102      	bne.n	8002d26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d20:	4b11      	ldr	r3, [pc, #68]	; (8002d68 <_sbrk+0x64>)
 8002d22:	4a12      	ldr	r2, [pc, #72]	; (8002d6c <_sbrk+0x68>)
 8002d24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d26:	4b10      	ldr	r3, [pc, #64]	; (8002d68 <_sbrk+0x64>)
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d207      	bcs.n	8002d44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d34:	f002 fd08 	bl	8005748 <__errno>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	220c      	movs	r2, #12
 8002d3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d42:	e009      	b.n	8002d58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d44:	4b08      	ldr	r3, [pc, #32]	; (8002d68 <_sbrk+0x64>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d4a:	4b07      	ldr	r3, [pc, #28]	; (8002d68 <_sbrk+0x64>)
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4413      	add	r3, r2
 8002d52:	4a05      	ldr	r2, [pc, #20]	; (8002d68 <_sbrk+0x64>)
 8002d54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d56:	68fb      	ldr	r3, [r7, #12]
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3718      	adds	r7, #24
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	20020000 	.word	0x20020000
 8002d64:	00000400 	.word	0x00000400
 8002d68:	20000224 	.word	0x20000224
 8002d6c:	200002e0 	.word	0x200002e0

08002d70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d74:	4b06      	ldr	r3, [pc, #24]	; (8002d90 <SystemInit+0x20>)
 8002d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d7a:	4a05      	ldr	r2, [pc, #20]	; (8002d90 <SystemInit+0x20>)
 8002d7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d84:	bf00      	nop
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	e000ed00 	.word	0xe000ed00

08002d94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002d94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002dcc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d98:	480d      	ldr	r0, [pc, #52]	; (8002dd0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002d9a:	490e      	ldr	r1, [pc, #56]	; (8002dd4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002d9c:	4a0e      	ldr	r2, [pc, #56]	; (8002dd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002da0:	e002      	b.n	8002da8 <LoopCopyDataInit>

08002da2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002da2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002da4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002da6:	3304      	adds	r3, #4

08002da8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002da8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002daa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002dac:	d3f9      	bcc.n	8002da2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dae:	4a0b      	ldr	r2, [pc, #44]	; (8002ddc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002db0:	4c0b      	ldr	r4, [pc, #44]	; (8002de0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002db2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002db4:	e001      	b.n	8002dba <LoopFillZerobss>

08002db6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002db6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002db8:	3204      	adds	r2, #4

08002dba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002dbc:	d3fb      	bcc.n	8002db6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002dbe:	f7ff ffd7 	bl	8002d70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002dc2:	f002 fcc7 	bl	8005754 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002dc6:	f7fe f8db 	bl	8000f80 <main>
  bx  lr    
 8002dca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002dcc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002dd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002dd4:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002dd8:	0800a138 	.word	0x0800a138
  ldr r2, =_sbss
 8002ddc:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002de0:	200002dc 	.word	0x200002dc

08002de4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002de4:	e7fe      	b.n	8002de4 <ADC_IRQHandler>
	...

08002de8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002dec:	4b0e      	ldr	r3, [pc, #56]	; (8002e28 <HAL_Init+0x40>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a0d      	ldr	r2, [pc, #52]	; (8002e28 <HAL_Init+0x40>)
 8002df2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002df6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002df8:	4b0b      	ldr	r3, [pc, #44]	; (8002e28 <HAL_Init+0x40>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a0a      	ldr	r2, [pc, #40]	; (8002e28 <HAL_Init+0x40>)
 8002dfe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e04:	4b08      	ldr	r3, [pc, #32]	; (8002e28 <HAL_Init+0x40>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a07      	ldr	r2, [pc, #28]	; (8002e28 <HAL_Init+0x40>)
 8002e0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e10:	2003      	movs	r0, #3
 8002e12:	f000 f931 	bl	8003078 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e16:	2000      	movs	r0, #0
 8002e18:	f000 f808 	bl	8002e2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e1c:	f7ff fe00 	bl	8002a20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	40023c00 	.word	0x40023c00

08002e2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e34:	4b12      	ldr	r3, [pc, #72]	; (8002e80 <HAL_InitTick+0x54>)
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	4b12      	ldr	r3, [pc, #72]	; (8002e84 <HAL_InitTick+0x58>)
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e42:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f000 f93b 	bl	80030c6 <HAL_SYSTICK_Config>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e00e      	b.n	8002e78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2b0f      	cmp	r3, #15
 8002e5e:	d80a      	bhi.n	8002e76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e60:	2200      	movs	r2, #0
 8002e62:	6879      	ldr	r1, [r7, #4]
 8002e64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e68:	f000 f911 	bl	800308e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e6c:	4a06      	ldr	r2, [pc, #24]	; (8002e88 <HAL_InitTick+0x5c>)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e72:	2300      	movs	r3, #0
 8002e74:	e000      	b.n	8002e78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3708      	adds	r7, #8
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	20000008 	.word	0x20000008
 8002e84:	20000010 	.word	0x20000010
 8002e88:	2000000c 	.word	0x2000000c

08002e8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e90:	4b06      	ldr	r3, [pc, #24]	; (8002eac <HAL_IncTick+0x20>)
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	461a      	mov	r2, r3
 8002e96:	4b06      	ldr	r3, [pc, #24]	; (8002eb0 <HAL_IncTick+0x24>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	4a04      	ldr	r2, [pc, #16]	; (8002eb0 <HAL_IncTick+0x24>)
 8002e9e:	6013      	str	r3, [r2, #0]
}
 8002ea0:	bf00      	nop
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	20000010 	.word	0x20000010
 8002eb0:	200002c8 	.word	0x200002c8

08002eb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
  return uwTick;
 8002eb8:	4b03      	ldr	r3, [pc, #12]	; (8002ec8 <HAL_GetTick+0x14>)
 8002eba:	681b      	ldr	r3, [r3, #0]
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	200002c8 	.word	0x200002c8

08002ecc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ed4:	f7ff ffee 	bl	8002eb4 <HAL_GetTick>
 8002ed8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ee4:	d005      	beq.n	8002ef2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ee6:	4b0a      	ldr	r3, [pc, #40]	; (8002f10 <HAL_Delay+0x44>)
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	461a      	mov	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	4413      	add	r3, r2
 8002ef0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ef2:	bf00      	nop
 8002ef4:	f7ff ffde 	bl	8002eb4 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d8f7      	bhi.n	8002ef4 <HAL_Delay+0x28>
  {
  }
}
 8002f04:	bf00      	nop
 8002f06:	bf00      	nop
 8002f08:	3710      	adds	r7, #16
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	20000010 	.word	0x20000010

08002f14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b085      	sub	sp, #20
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f003 0307 	and.w	r3, r3, #7
 8002f22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f24:	4b0c      	ldr	r3, [pc, #48]	; (8002f58 <__NVIC_SetPriorityGrouping+0x44>)
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f2a:	68ba      	ldr	r2, [r7, #8]
 8002f2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f30:	4013      	ands	r3, r2
 8002f32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f46:	4a04      	ldr	r2, [pc, #16]	; (8002f58 <__NVIC_SetPriorityGrouping+0x44>)
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	60d3      	str	r3, [r2, #12]
}
 8002f4c:	bf00      	nop
 8002f4e:	3714      	adds	r7, #20
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr
 8002f58:	e000ed00 	.word	0xe000ed00

08002f5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f60:	4b04      	ldr	r3, [pc, #16]	; (8002f74 <__NVIC_GetPriorityGrouping+0x18>)
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	0a1b      	lsrs	r3, r3, #8
 8002f66:	f003 0307 	and.w	r3, r3, #7
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr
 8002f74:	e000ed00 	.word	0xe000ed00

08002f78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	4603      	mov	r3, r0
 8002f80:	6039      	str	r1, [r7, #0]
 8002f82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	db0a      	blt.n	8002fa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	b2da      	uxtb	r2, r3
 8002f90:	490c      	ldr	r1, [pc, #48]	; (8002fc4 <__NVIC_SetPriority+0x4c>)
 8002f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f96:	0112      	lsls	r2, r2, #4
 8002f98:	b2d2      	uxtb	r2, r2
 8002f9a:	440b      	add	r3, r1
 8002f9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fa0:	e00a      	b.n	8002fb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	b2da      	uxtb	r2, r3
 8002fa6:	4908      	ldr	r1, [pc, #32]	; (8002fc8 <__NVIC_SetPriority+0x50>)
 8002fa8:	79fb      	ldrb	r3, [r7, #7]
 8002faa:	f003 030f 	and.w	r3, r3, #15
 8002fae:	3b04      	subs	r3, #4
 8002fb0:	0112      	lsls	r2, r2, #4
 8002fb2:	b2d2      	uxtb	r2, r2
 8002fb4:	440b      	add	r3, r1
 8002fb6:	761a      	strb	r2, [r3, #24]
}
 8002fb8:	bf00      	nop
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr
 8002fc4:	e000e100 	.word	0xe000e100
 8002fc8:	e000ed00 	.word	0xe000ed00

08002fcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b089      	sub	sp, #36	; 0x24
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f003 0307 	and.w	r3, r3, #7
 8002fde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	f1c3 0307 	rsb	r3, r3, #7
 8002fe6:	2b04      	cmp	r3, #4
 8002fe8:	bf28      	it	cs
 8002fea:	2304      	movcs	r3, #4
 8002fec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	3304      	adds	r3, #4
 8002ff2:	2b06      	cmp	r3, #6
 8002ff4:	d902      	bls.n	8002ffc <NVIC_EncodePriority+0x30>
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	3b03      	subs	r3, #3
 8002ffa:	e000      	b.n	8002ffe <NVIC_EncodePriority+0x32>
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003000:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	fa02 f303 	lsl.w	r3, r2, r3
 800300a:	43da      	mvns	r2, r3
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	401a      	ands	r2, r3
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003014:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	fa01 f303 	lsl.w	r3, r1, r3
 800301e:	43d9      	mvns	r1, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003024:	4313      	orrs	r3, r2
         );
}
 8003026:	4618      	mov	r0, r3
 8003028:	3724      	adds	r7, #36	; 0x24
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
	...

08003034 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	3b01      	subs	r3, #1
 8003040:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003044:	d301      	bcc.n	800304a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003046:	2301      	movs	r3, #1
 8003048:	e00f      	b.n	800306a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800304a:	4a0a      	ldr	r2, [pc, #40]	; (8003074 <SysTick_Config+0x40>)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	3b01      	subs	r3, #1
 8003050:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003052:	210f      	movs	r1, #15
 8003054:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003058:	f7ff ff8e 	bl	8002f78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800305c:	4b05      	ldr	r3, [pc, #20]	; (8003074 <SysTick_Config+0x40>)
 800305e:	2200      	movs	r2, #0
 8003060:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003062:	4b04      	ldr	r3, [pc, #16]	; (8003074 <SysTick_Config+0x40>)
 8003064:	2207      	movs	r2, #7
 8003066:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	e000e010 	.word	0xe000e010

08003078 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f7ff ff47 	bl	8002f14 <__NVIC_SetPriorityGrouping>
}
 8003086:	bf00      	nop
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800308e:	b580      	push	{r7, lr}
 8003090:	b086      	sub	sp, #24
 8003092:	af00      	add	r7, sp, #0
 8003094:	4603      	mov	r3, r0
 8003096:	60b9      	str	r1, [r7, #8]
 8003098:	607a      	str	r2, [r7, #4]
 800309a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800309c:	2300      	movs	r3, #0
 800309e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030a0:	f7ff ff5c 	bl	8002f5c <__NVIC_GetPriorityGrouping>
 80030a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	68b9      	ldr	r1, [r7, #8]
 80030aa:	6978      	ldr	r0, [r7, #20]
 80030ac:	f7ff ff8e 	bl	8002fcc <NVIC_EncodePriority>
 80030b0:	4602      	mov	r2, r0
 80030b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030b6:	4611      	mov	r1, r2
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7ff ff5d 	bl	8002f78 <__NVIC_SetPriority>
}
 80030be:	bf00      	nop
 80030c0:	3718      	adds	r7, #24
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b082      	sub	sp, #8
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f7ff ffb0 	bl	8003034 <SysTick_Config>
 80030d4:	4603      	mov	r3, r0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3708      	adds	r7, #8
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
	...

080030e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b089      	sub	sp, #36	; 0x24
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030ea:	2300      	movs	r3, #0
 80030ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030ee:	2300      	movs	r3, #0
 80030f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030f2:	2300      	movs	r3, #0
 80030f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030f6:	2300      	movs	r3, #0
 80030f8:	61fb      	str	r3, [r7, #28]
 80030fa:	e165      	b.n	80033c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030fc:	2201      	movs	r2, #1
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	fa02 f303 	lsl.w	r3, r2, r3
 8003104:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	697a      	ldr	r2, [r7, #20]
 800310c:	4013      	ands	r3, r2
 800310e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003110:	693a      	ldr	r2, [r7, #16]
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	429a      	cmp	r2, r3
 8003116:	f040 8154 	bne.w	80033c2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f003 0303 	and.w	r3, r3, #3
 8003122:	2b01      	cmp	r3, #1
 8003124:	d005      	beq.n	8003132 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800312e:	2b02      	cmp	r3, #2
 8003130:	d130      	bne.n	8003194 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	005b      	lsls	r3, r3, #1
 800313c:	2203      	movs	r2, #3
 800313e:	fa02 f303 	lsl.w	r3, r2, r3
 8003142:	43db      	mvns	r3, r3
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	4013      	ands	r3, r2
 8003148:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	68da      	ldr	r2, [r3, #12]
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	fa02 f303 	lsl.w	r3, r2, r3
 8003156:	69ba      	ldr	r2, [r7, #24]
 8003158:	4313      	orrs	r3, r2
 800315a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	69ba      	ldr	r2, [r7, #24]
 8003160:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003168:	2201      	movs	r2, #1
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	fa02 f303 	lsl.w	r3, r2, r3
 8003170:	43db      	mvns	r3, r3
 8003172:	69ba      	ldr	r2, [r7, #24]
 8003174:	4013      	ands	r3, r2
 8003176:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	091b      	lsrs	r3, r3, #4
 800317e:	f003 0201 	and.w	r2, r3, #1
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	fa02 f303 	lsl.w	r3, r2, r3
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	4313      	orrs	r3, r2
 800318c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	69ba      	ldr	r2, [r7, #24]
 8003192:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f003 0303 	and.w	r3, r3, #3
 800319c:	2b03      	cmp	r3, #3
 800319e:	d017      	beq.n	80031d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	005b      	lsls	r3, r3, #1
 80031aa:	2203      	movs	r2, #3
 80031ac:	fa02 f303 	lsl.w	r3, r2, r3
 80031b0:	43db      	mvns	r3, r3
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	4013      	ands	r3, r2
 80031b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	689a      	ldr	r2, [r3, #8]
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	005b      	lsls	r3, r3, #1
 80031c0:	fa02 f303 	lsl.w	r3, r2, r3
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f003 0303 	and.w	r3, r3, #3
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d123      	bne.n	8003224 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	08da      	lsrs	r2, r3, #3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	3208      	adds	r2, #8
 80031e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	f003 0307 	and.w	r3, r3, #7
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	220f      	movs	r2, #15
 80031f4:	fa02 f303 	lsl.w	r3, r2, r3
 80031f8:	43db      	mvns	r3, r3
 80031fa:	69ba      	ldr	r2, [r7, #24]
 80031fc:	4013      	ands	r3, r2
 80031fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	691a      	ldr	r2, [r3, #16]
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	f003 0307 	and.w	r3, r3, #7
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	fa02 f303 	lsl.w	r3, r2, r3
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	4313      	orrs	r3, r2
 8003214:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	08da      	lsrs	r2, r3, #3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	3208      	adds	r2, #8
 800321e:	69b9      	ldr	r1, [r7, #24]
 8003220:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	2203      	movs	r2, #3
 8003230:	fa02 f303 	lsl.w	r3, r2, r3
 8003234:	43db      	mvns	r3, r3
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	4013      	ands	r3, r2
 800323a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f003 0203 	and.w	r2, r3, #3
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	fa02 f303 	lsl.w	r3, r2, r3
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	4313      	orrs	r3, r2
 8003250:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003260:	2b00      	cmp	r3, #0
 8003262:	f000 80ae 	beq.w	80033c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003266:	2300      	movs	r3, #0
 8003268:	60fb      	str	r3, [r7, #12]
 800326a:	4b5d      	ldr	r3, [pc, #372]	; (80033e0 <HAL_GPIO_Init+0x300>)
 800326c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800326e:	4a5c      	ldr	r2, [pc, #368]	; (80033e0 <HAL_GPIO_Init+0x300>)
 8003270:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003274:	6453      	str	r3, [r2, #68]	; 0x44
 8003276:	4b5a      	ldr	r3, [pc, #360]	; (80033e0 <HAL_GPIO_Init+0x300>)
 8003278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800327e:	60fb      	str	r3, [r7, #12]
 8003280:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003282:	4a58      	ldr	r2, [pc, #352]	; (80033e4 <HAL_GPIO_Init+0x304>)
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	089b      	lsrs	r3, r3, #2
 8003288:	3302      	adds	r3, #2
 800328a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800328e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	f003 0303 	and.w	r3, r3, #3
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	220f      	movs	r2, #15
 800329a:	fa02 f303 	lsl.w	r3, r2, r3
 800329e:	43db      	mvns	r3, r3
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	4013      	ands	r3, r2
 80032a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a4f      	ldr	r2, [pc, #316]	; (80033e8 <HAL_GPIO_Init+0x308>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d025      	beq.n	80032fa <HAL_GPIO_Init+0x21a>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a4e      	ldr	r2, [pc, #312]	; (80033ec <HAL_GPIO_Init+0x30c>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d01f      	beq.n	80032f6 <HAL_GPIO_Init+0x216>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a4d      	ldr	r2, [pc, #308]	; (80033f0 <HAL_GPIO_Init+0x310>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d019      	beq.n	80032f2 <HAL_GPIO_Init+0x212>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a4c      	ldr	r2, [pc, #304]	; (80033f4 <HAL_GPIO_Init+0x314>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d013      	beq.n	80032ee <HAL_GPIO_Init+0x20e>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a4b      	ldr	r2, [pc, #300]	; (80033f8 <HAL_GPIO_Init+0x318>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d00d      	beq.n	80032ea <HAL_GPIO_Init+0x20a>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a4a      	ldr	r2, [pc, #296]	; (80033fc <HAL_GPIO_Init+0x31c>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d007      	beq.n	80032e6 <HAL_GPIO_Init+0x206>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a49      	ldr	r2, [pc, #292]	; (8003400 <HAL_GPIO_Init+0x320>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d101      	bne.n	80032e2 <HAL_GPIO_Init+0x202>
 80032de:	2306      	movs	r3, #6
 80032e0:	e00c      	b.n	80032fc <HAL_GPIO_Init+0x21c>
 80032e2:	2307      	movs	r3, #7
 80032e4:	e00a      	b.n	80032fc <HAL_GPIO_Init+0x21c>
 80032e6:	2305      	movs	r3, #5
 80032e8:	e008      	b.n	80032fc <HAL_GPIO_Init+0x21c>
 80032ea:	2304      	movs	r3, #4
 80032ec:	e006      	b.n	80032fc <HAL_GPIO_Init+0x21c>
 80032ee:	2303      	movs	r3, #3
 80032f0:	e004      	b.n	80032fc <HAL_GPIO_Init+0x21c>
 80032f2:	2302      	movs	r3, #2
 80032f4:	e002      	b.n	80032fc <HAL_GPIO_Init+0x21c>
 80032f6:	2301      	movs	r3, #1
 80032f8:	e000      	b.n	80032fc <HAL_GPIO_Init+0x21c>
 80032fa:	2300      	movs	r3, #0
 80032fc:	69fa      	ldr	r2, [r7, #28]
 80032fe:	f002 0203 	and.w	r2, r2, #3
 8003302:	0092      	lsls	r2, r2, #2
 8003304:	4093      	lsls	r3, r2
 8003306:	69ba      	ldr	r2, [r7, #24]
 8003308:	4313      	orrs	r3, r2
 800330a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800330c:	4935      	ldr	r1, [pc, #212]	; (80033e4 <HAL_GPIO_Init+0x304>)
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	089b      	lsrs	r3, r3, #2
 8003312:	3302      	adds	r3, #2
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800331a:	4b3a      	ldr	r3, [pc, #232]	; (8003404 <HAL_GPIO_Init+0x324>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	43db      	mvns	r3, r3
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	4013      	ands	r3, r2
 8003328:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d003      	beq.n	800333e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003336:	69ba      	ldr	r2, [r7, #24]
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	4313      	orrs	r3, r2
 800333c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800333e:	4a31      	ldr	r2, [pc, #196]	; (8003404 <HAL_GPIO_Init+0x324>)
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003344:	4b2f      	ldr	r3, [pc, #188]	; (8003404 <HAL_GPIO_Init+0x324>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	43db      	mvns	r3, r3
 800334e:	69ba      	ldr	r2, [r7, #24]
 8003350:	4013      	ands	r3, r2
 8003352:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d003      	beq.n	8003368 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003360:	69ba      	ldr	r2, [r7, #24]
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	4313      	orrs	r3, r2
 8003366:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003368:	4a26      	ldr	r2, [pc, #152]	; (8003404 <HAL_GPIO_Init+0x324>)
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800336e:	4b25      	ldr	r3, [pc, #148]	; (8003404 <HAL_GPIO_Init+0x324>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	43db      	mvns	r3, r3
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	4013      	ands	r3, r2
 800337c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d003      	beq.n	8003392 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800338a:	69ba      	ldr	r2, [r7, #24]
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	4313      	orrs	r3, r2
 8003390:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003392:	4a1c      	ldr	r2, [pc, #112]	; (8003404 <HAL_GPIO_Init+0x324>)
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003398:	4b1a      	ldr	r3, [pc, #104]	; (8003404 <HAL_GPIO_Init+0x324>)
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	43db      	mvns	r3, r3
 80033a2:	69ba      	ldr	r2, [r7, #24]
 80033a4:	4013      	ands	r3, r2
 80033a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d003      	beq.n	80033bc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033bc:	4a11      	ldr	r2, [pc, #68]	; (8003404 <HAL_GPIO_Init+0x324>)
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	3301      	adds	r3, #1
 80033c6:	61fb      	str	r3, [r7, #28]
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	2b0f      	cmp	r3, #15
 80033cc:	f67f ae96 	bls.w	80030fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033d0:	bf00      	nop
 80033d2:	bf00      	nop
 80033d4:	3724      	adds	r7, #36	; 0x24
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	40023800 	.word	0x40023800
 80033e4:	40013800 	.word	0x40013800
 80033e8:	40020000 	.word	0x40020000
 80033ec:	40020400 	.word	0x40020400
 80033f0:	40020800 	.word	0x40020800
 80033f4:	40020c00 	.word	0x40020c00
 80033f8:	40021000 	.word	0x40021000
 80033fc:	40021400 	.word	0x40021400
 8003400:	40021800 	.word	0x40021800
 8003404:	40013c00 	.word	0x40013c00

08003408 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003408:	b480      	push	{r7}
 800340a:	b085      	sub	sp, #20
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	460b      	mov	r3, r1
 8003412:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	691a      	ldr	r2, [r3, #16]
 8003418:	887b      	ldrh	r3, [r7, #2]
 800341a:	4013      	ands	r3, r2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d002      	beq.n	8003426 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003420:	2301      	movs	r3, #1
 8003422:	73fb      	strb	r3, [r7, #15]
 8003424:	e001      	b.n	800342a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003426:	2300      	movs	r3, #0
 8003428:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800342a:	7bfb      	ldrb	r3, [r7, #15]
}
 800342c:	4618      	mov	r0, r3
 800342e:	3714      	adds	r7, #20
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	460b      	mov	r3, r1
 8003442:	807b      	strh	r3, [r7, #2]
 8003444:	4613      	mov	r3, r2
 8003446:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003448:	787b      	ldrb	r3, [r7, #1]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d003      	beq.n	8003456 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800344e:	887a      	ldrh	r2, [r7, #2]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003454:	e003      	b.n	800345e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003456:	887b      	ldrh	r3, [r7, #2]
 8003458:	041a      	lsls	r2, r3, #16
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	619a      	str	r2, [r3, #24]
}
 800345e:	bf00      	nop
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
	...

0800346c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d101      	bne.n	800347e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e12b      	b.n	80036d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d106      	bne.n	8003498 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f7ff faec 	bl	8002a70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2224      	movs	r2, #36	; 0x24
 800349c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f022 0201 	bic.w	r2, r2, #1
 80034ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80034d0:	f001 f9ac 	bl	800482c <HAL_RCC_GetPCLK1Freq>
 80034d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	4a81      	ldr	r2, [pc, #516]	; (80036e0 <HAL_I2C_Init+0x274>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d807      	bhi.n	80034f0 <HAL_I2C_Init+0x84>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	4a80      	ldr	r2, [pc, #512]	; (80036e4 <HAL_I2C_Init+0x278>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	bf94      	ite	ls
 80034e8:	2301      	movls	r3, #1
 80034ea:	2300      	movhi	r3, #0
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	e006      	b.n	80034fe <HAL_I2C_Init+0x92>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	4a7d      	ldr	r2, [pc, #500]	; (80036e8 <HAL_I2C_Init+0x27c>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	bf94      	ite	ls
 80034f8:	2301      	movls	r3, #1
 80034fa:	2300      	movhi	r3, #0
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e0e7      	b.n	80036d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	4a78      	ldr	r2, [pc, #480]	; (80036ec <HAL_I2C_Init+0x280>)
 800350a:	fba2 2303 	umull	r2, r3, r2, r3
 800350e:	0c9b      	lsrs	r3, r3, #18
 8003510:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68ba      	ldr	r2, [r7, #8]
 8003522:	430a      	orrs	r2, r1
 8003524:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	6a1b      	ldr	r3, [r3, #32]
 800352c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	4a6a      	ldr	r2, [pc, #424]	; (80036e0 <HAL_I2C_Init+0x274>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d802      	bhi.n	8003540 <HAL_I2C_Init+0xd4>
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	3301      	adds	r3, #1
 800353e:	e009      	b.n	8003554 <HAL_I2C_Init+0xe8>
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003546:	fb02 f303 	mul.w	r3, r2, r3
 800354a:	4a69      	ldr	r2, [pc, #420]	; (80036f0 <HAL_I2C_Init+0x284>)
 800354c:	fba2 2303 	umull	r2, r3, r2, r3
 8003550:	099b      	lsrs	r3, r3, #6
 8003552:	3301      	adds	r3, #1
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	6812      	ldr	r2, [r2, #0]
 8003558:	430b      	orrs	r3, r1
 800355a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	69db      	ldr	r3, [r3, #28]
 8003562:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003566:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	495c      	ldr	r1, [pc, #368]	; (80036e0 <HAL_I2C_Init+0x274>)
 8003570:	428b      	cmp	r3, r1
 8003572:	d819      	bhi.n	80035a8 <HAL_I2C_Init+0x13c>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	1e59      	subs	r1, r3, #1
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003582:	1c59      	adds	r1, r3, #1
 8003584:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003588:	400b      	ands	r3, r1
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00a      	beq.n	80035a4 <HAL_I2C_Init+0x138>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	1e59      	subs	r1, r3, #1
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	005b      	lsls	r3, r3, #1
 8003598:	fbb1 f3f3 	udiv	r3, r1, r3
 800359c:	3301      	adds	r3, #1
 800359e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035a2:	e051      	b.n	8003648 <HAL_I2C_Init+0x1dc>
 80035a4:	2304      	movs	r3, #4
 80035a6:	e04f      	b.n	8003648 <HAL_I2C_Init+0x1dc>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d111      	bne.n	80035d4 <HAL_I2C_Init+0x168>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	1e58      	subs	r0, r3, #1
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6859      	ldr	r1, [r3, #4]
 80035b8:	460b      	mov	r3, r1
 80035ba:	005b      	lsls	r3, r3, #1
 80035bc:	440b      	add	r3, r1
 80035be:	fbb0 f3f3 	udiv	r3, r0, r3
 80035c2:	3301      	adds	r3, #1
 80035c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	bf0c      	ite	eq
 80035cc:	2301      	moveq	r3, #1
 80035ce:	2300      	movne	r3, #0
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	e012      	b.n	80035fa <HAL_I2C_Init+0x18e>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	1e58      	subs	r0, r3, #1
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6859      	ldr	r1, [r3, #4]
 80035dc:	460b      	mov	r3, r1
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	440b      	add	r3, r1
 80035e2:	0099      	lsls	r1, r3, #2
 80035e4:	440b      	add	r3, r1
 80035e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80035ea:	3301      	adds	r3, #1
 80035ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	bf0c      	ite	eq
 80035f4:	2301      	moveq	r3, #1
 80035f6:	2300      	movne	r3, #0
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <HAL_I2C_Init+0x196>
 80035fe:	2301      	movs	r3, #1
 8003600:	e022      	b.n	8003648 <HAL_I2C_Init+0x1dc>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d10e      	bne.n	8003628 <HAL_I2C_Init+0x1bc>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	1e58      	subs	r0, r3, #1
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6859      	ldr	r1, [r3, #4]
 8003612:	460b      	mov	r3, r1
 8003614:	005b      	lsls	r3, r3, #1
 8003616:	440b      	add	r3, r1
 8003618:	fbb0 f3f3 	udiv	r3, r0, r3
 800361c:	3301      	adds	r3, #1
 800361e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003622:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003626:	e00f      	b.n	8003648 <HAL_I2C_Init+0x1dc>
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	1e58      	subs	r0, r3, #1
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6859      	ldr	r1, [r3, #4]
 8003630:	460b      	mov	r3, r1
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	440b      	add	r3, r1
 8003636:	0099      	lsls	r1, r3, #2
 8003638:	440b      	add	r3, r1
 800363a:	fbb0 f3f3 	udiv	r3, r0, r3
 800363e:	3301      	adds	r3, #1
 8003640:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003644:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003648:	6879      	ldr	r1, [r7, #4]
 800364a:	6809      	ldr	r1, [r1, #0]
 800364c:	4313      	orrs	r3, r2
 800364e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	69da      	ldr	r2, [r3, #28]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a1b      	ldr	r3, [r3, #32]
 8003662:	431a      	orrs	r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	430a      	orrs	r2, r1
 800366a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003676:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	6911      	ldr	r1, [r2, #16]
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	68d2      	ldr	r2, [r2, #12]
 8003682:	4311      	orrs	r1, r2
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	6812      	ldr	r2, [r2, #0]
 8003688:	430b      	orrs	r3, r1
 800368a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	695a      	ldr	r2, [r3, #20]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	431a      	orrs	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	430a      	orrs	r2, r1
 80036a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f042 0201 	orr.w	r2, r2, #1
 80036b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2220      	movs	r2, #32
 80036c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3710      	adds	r7, #16
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	000186a0 	.word	0x000186a0
 80036e4:	001e847f 	.word	0x001e847f
 80036e8:	003d08ff 	.word	0x003d08ff
 80036ec:	431bde83 	.word	0x431bde83
 80036f0:	10624dd3 	.word	0x10624dd3

080036f4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b088      	sub	sp, #32
 80036f8:	af02      	add	r7, sp, #8
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	4608      	mov	r0, r1
 80036fe:	4611      	mov	r1, r2
 8003700:	461a      	mov	r2, r3
 8003702:	4603      	mov	r3, r0
 8003704:	817b      	strh	r3, [r7, #10]
 8003706:	460b      	mov	r3, r1
 8003708:	813b      	strh	r3, [r7, #8]
 800370a:	4613      	mov	r3, r2
 800370c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800370e:	f7ff fbd1 	bl	8002eb4 <HAL_GetTick>
 8003712:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2b20      	cmp	r3, #32
 800371e:	f040 80d9 	bne.w	80038d4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	9300      	str	r3, [sp, #0]
 8003726:	2319      	movs	r3, #25
 8003728:	2201      	movs	r2, #1
 800372a:	496d      	ldr	r1, [pc, #436]	; (80038e0 <HAL_I2C_Mem_Write+0x1ec>)
 800372c:	68f8      	ldr	r0, [r7, #12]
 800372e:	f000 fdad 	bl	800428c <I2C_WaitOnFlagUntilTimeout>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d001      	beq.n	800373c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003738:	2302      	movs	r3, #2
 800373a:	e0cc      	b.n	80038d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003742:	2b01      	cmp	r3, #1
 8003744:	d101      	bne.n	800374a <HAL_I2C_Mem_Write+0x56>
 8003746:	2302      	movs	r3, #2
 8003748:	e0c5      	b.n	80038d6 <HAL_I2C_Mem_Write+0x1e2>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0301 	and.w	r3, r3, #1
 800375c:	2b01      	cmp	r3, #1
 800375e:	d007      	beq.n	8003770 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f042 0201 	orr.w	r2, r2, #1
 800376e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800377e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2221      	movs	r2, #33	; 0x21
 8003784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2240      	movs	r2, #64	; 0x40
 800378c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6a3a      	ldr	r2, [r7, #32]
 800379a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80037a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a6:	b29a      	uxth	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	4a4d      	ldr	r2, [pc, #308]	; (80038e4 <HAL_I2C_Mem_Write+0x1f0>)
 80037b0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037b2:	88f8      	ldrh	r0, [r7, #6]
 80037b4:	893a      	ldrh	r2, [r7, #8]
 80037b6:	8979      	ldrh	r1, [r7, #10]
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	9301      	str	r3, [sp, #4]
 80037bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037be:	9300      	str	r3, [sp, #0]
 80037c0:	4603      	mov	r3, r0
 80037c2:	68f8      	ldr	r0, [r7, #12]
 80037c4:	f000 fbe4 	bl	8003f90 <I2C_RequestMemoryWrite>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d052      	beq.n	8003874 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e081      	b.n	80038d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037d2:	697a      	ldr	r2, [r7, #20]
 80037d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037d6:	68f8      	ldr	r0, [r7, #12]
 80037d8:	f000 fe2e 	bl	8004438 <I2C_WaitOnTXEFlagUntilTimeout>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00d      	beq.n	80037fe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e6:	2b04      	cmp	r3, #4
 80037e8:	d107      	bne.n	80037fa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e06b      	b.n	80038d6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003802:	781a      	ldrb	r2, [r3, #0]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380e:	1c5a      	adds	r2, r3, #1
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003818:	3b01      	subs	r3, #1
 800381a:	b29a      	uxth	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003824:	b29b      	uxth	r3, r3
 8003826:	3b01      	subs	r3, #1
 8003828:	b29a      	uxth	r2, r3
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	695b      	ldr	r3, [r3, #20]
 8003834:	f003 0304 	and.w	r3, r3, #4
 8003838:	2b04      	cmp	r3, #4
 800383a:	d11b      	bne.n	8003874 <HAL_I2C_Mem_Write+0x180>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003840:	2b00      	cmp	r3, #0
 8003842:	d017      	beq.n	8003874 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003848:	781a      	ldrb	r2, [r3, #0]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003854:	1c5a      	adds	r2, r3, #1
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800385e:	3b01      	subs	r3, #1
 8003860:	b29a      	uxth	r2, r3
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800386a:	b29b      	uxth	r3, r3
 800386c:	3b01      	subs	r3, #1
 800386e:	b29a      	uxth	r2, r3
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003878:	2b00      	cmp	r3, #0
 800387a:	d1aa      	bne.n	80037d2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800387c:	697a      	ldr	r2, [r7, #20]
 800387e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003880:	68f8      	ldr	r0, [r7, #12]
 8003882:	f000 fe1a 	bl	80044ba <I2C_WaitOnBTFFlagUntilTimeout>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00d      	beq.n	80038a8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003890:	2b04      	cmp	r3, #4
 8003892:	d107      	bne.n	80038a4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038a2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e016      	b.n	80038d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2220      	movs	r2, #32
 80038bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80038d0:	2300      	movs	r3, #0
 80038d2:	e000      	b.n	80038d6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80038d4:	2302      	movs	r3, #2
  }
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3718      	adds	r7, #24
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	00100002 	.word	0x00100002
 80038e4:	ffff0000 	.word	0xffff0000

080038e8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b08c      	sub	sp, #48	; 0x30
 80038ec:	af02      	add	r7, sp, #8
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	4608      	mov	r0, r1
 80038f2:	4611      	mov	r1, r2
 80038f4:	461a      	mov	r2, r3
 80038f6:	4603      	mov	r3, r0
 80038f8:	817b      	strh	r3, [r7, #10]
 80038fa:	460b      	mov	r3, r1
 80038fc:	813b      	strh	r3, [r7, #8]
 80038fe:	4613      	mov	r3, r2
 8003900:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003902:	f7ff fad7 	bl	8002eb4 <HAL_GetTick>
 8003906:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800390e:	b2db      	uxtb	r3, r3
 8003910:	2b20      	cmp	r3, #32
 8003912:	f040 8208 	bne.w	8003d26 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003918:	9300      	str	r3, [sp, #0]
 800391a:	2319      	movs	r3, #25
 800391c:	2201      	movs	r2, #1
 800391e:	497b      	ldr	r1, [pc, #492]	; (8003b0c <HAL_I2C_Mem_Read+0x224>)
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	f000 fcb3 	bl	800428c <I2C_WaitOnFlagUntilTimeout>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d001      	beq.n	8003930 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800392c:	2302      	movs	r3, #2
 800392e:	e1fb      	b.n	8003d28 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003936:	2b01      	cmp	r3, #1
 8003938:	d101      	bne.n	800393e <HAL_I2C_Mem_Read+0x56>
 800393a:	2302      	movs	r3, #2
 800393c:	e1f4      	b.n	8003d28 <HAL_I2C_Mem_Read+0x440>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2201      	movs	r2, #1
 8003942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0301 	and.w	r3, r3, #1
 8003950:	2b01      	cmp	r3, #1
 8003952:	d007      	beq.n	8003964 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f042 0201 	orr.w	r2, r2, #1
 8003962:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003972:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2222      	movs	r2, #34	; 0x22
 8003978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2240      	movs	r2, #64	; 0x40
 8003980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2200      	movs	r2, #0
 8003988:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800398e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003994:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800399a:	b29a      	uxth	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	4a5b      	ldr	r2, [pc, #364]	; (8003b10 <HAL_I2C_Mem_Read+0x228>)
 80039a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80039a6:	88f8      	ldrh	r0, [r7, #6]
 80039a8:	893a      	ldrh	r2, [r7, #8]
 80039aa:	8979      	ldrh	r1, [r7, #10]
 80039ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ae:	9301      	str	r3, [sp, #4]
 80039b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b2:	9300      	str	r3, [sp, #0]
 80039b4:	4603      	mov	r3, r0
 80039b6:	68f8      	ldr	r0, [r7, #12]
 80039b8:	f000 fb80 	bl	80040bc <I2C_RequestMemoryRead>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d001      	beq.n	80039c6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e1b0      	b.n	8003d28 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d113      	bne.n	80039f6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039ce:	2300      	movs	r3, #0
 80039d0:	623b      	str	r3, [r7, #32]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	695b      	ldr	r3, [r3, #20]
 80039d8:	623b      	str	r3, [r7, #32]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	699b      	ldr	r3, [r3, #24]
 80039e0:	623b      	str	r3, [r7, #32]
 80039e2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039f2:	601a      	str	r2, [r3, #0]
 80039f4:	e184      	b.n	8003d00 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d11b      	bne.n	8003a36 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a0c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a0e:	2300      	movs	r3, #0
 8003a10:	61fb      	str	r3, [r7, #28]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	695b      	ldr	r3, [r3, #20]
 8003a18:	61fb      	str	r3, [r7, #28]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	61fb      	str	r3, [r7, #28]
 8003a22:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a32:	601a      	str	r2, [r3, #0]
 8003a34:	e164      	b.n	8003d00 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d11b      	bne.n	8003a76 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a4c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a5c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a5e:	2300      	movs	r3, #0
 8003a60:	61bb      	str	r3, [r7, #24]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	695b      	ldr	r3, [r3, #20]
 8003a68:	61bb      	str	r3, [r7, #24]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	699b      	ldr	r3, [r3, #24]
 8003a70:	61bb      	str	r3, [r7, #24]
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	e144      	b.n	8003d00 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a76:	2300      	movs	r3, #0
 8003a78:	617b      	str	r3, [r7, #20]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	695b      	ldr	r3, [r3, #20]
 8003a80:	617b      	str	r3, [r7, #20]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	699b      	ldr	r3, [r3, #24]
 8003a88:	617b      	str	r3, [r7, #20]
 8003a8a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003a8c:	e138      	b.n	8003d00 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a92:	2b03      	cmp	r3, #3
 8003a94:	f200 80f1 	bhi.w	8003c7a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d123      	bne.n	8003ae8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aa2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003aa4:	68f8      	ldr	r0, [r7, #12]
 8003aa6:	f000 fd49 	bl	800453c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d001      	beq.n	8003ab4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e139      	b.n	8003d28 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	691a      	ldr	r2, [r3, #16]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abe:	b2d2      	uxtb	r2, r2
 8003ac0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac6:	1c5a      	adds	r2, r3, #1
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	b29a      	uxth	r2, r3
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	3b01      	subs	r3, #1
 8003ae0:	b29a      	uxth	r2, r3
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ae6:	e10b      	b.n	8003d00 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d14e      	bne.n	8003b8e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af2:	9300      	str	r3, [sp, #0]
 8003af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003af6:	2200      	movs	r2, #0
 8003af8:	4906      	ldr	r1, [pc, #24]	; (8003b14 <HAL_I2C_Mem_Read+0x22c>)
 8003afa:	68f8      	ldr	r0, [r7, #12]
 8003afc:	f000 fbc6 	bl	800428c <I2C_WaitOnFlagUntilTimeout>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d008      	beq.n	8003b18 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e10e      	b.n	8003d28 <HAL_I2C_Mem_Read+0x440>
 8003b0a:	bf00      	nop
 8003b0c:	00100002 	.word	0x00100002
 8003b10:	ffff0000 	.word	0xffff0000
 8003b14:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	691a      	ldr	r2, [r3, #16]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b32:	b2d2      	uxtb	r2, r2
 8003b34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3a:	1c5a      	adds	r2, r3, #1
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b44:	3b01      	subs	r3, #1
 8003b46:	b29a      	uxth	r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	3b01      	subs	r3, #1
 8003b54:	b29a      	uxth	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	691a      	ldr	r2, [r3, #16]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b64:	b2d2      	uxtb	r2, r2
 8003b66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6c:	1c5a      	adds	r2, r3, #1
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b76:	3b01      	subs	r3, #1
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	3b01      	subs	r3, #1
 8003b86:	b29a      	uxth	r2, r3
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b8c:	e0b8      	b.n	8003d00 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b90:	9300      	str	r3, [sp, #0]
 8003b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b94:	2200      	movs	r2, #0
 8003b96:	4966      	ldr	r1, [pc, #408]	; (8003d30 <HAL_I2C_Mem_Read+0x448>)
 8003b98:	68f8      	ldr	r0, [r7, #12]
 8003b9a:	f000 fb77 	bl	800428c <I2C_WaitOnFlagUntilTimeout>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d001      	beq.n	8003ba8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e0bf      	b.n	8003d28 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bb6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	691a      	ldr	r2, [r3, #16]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc2:	b2d2      	uxtb	r2, r2
 8003bc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bca:	1c5a      	adds	r2, r3, #1
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bd4:	3b01      	subs	r3, #1
 8003bd6:	b29a      	uxth	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	3b01      	subs	r3, #1
 8003be4:	b29a      	uxth	r2, r3
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bec:	9300      	str	r3, [sp, #0]
 8003bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	494f      	ldr	r1, [pc, #316]	; (8003d30 <HAL_I2C_Mem_Read+0x448>)
 8003bf4:	68f8      	ldr	r0, [r7, #12]
 8003bf6:	f000 fb49 	bl	800428c <I2C_WaitOnFlagUntilTimeout>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d001      	beq.n	8003c04 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e091      	b.n	8003d28 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	691a      	ldr	r2, [r3, #16]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1e:	b2d2      	uxtb	r2, r2
 8003c20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c26:	1c5a      	adds	r2, r3, #1
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c30:	3b01      	subs	r3, #1
 8003c32:	b29a      	uxth	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	3b01      	subs	r3, #1
 8003c40:	b29a      	uxth	r2, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	691a      	ldr	r2, [r3, #16]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c50:	b2d2      	uxtb	r2, r2
 8003c52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c58:	1c5a      	adds	r2, r3, #1
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c62:	3b01      	subs	r3, #1
 8003c64:	b29a      	uxth	r2, r3
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	3b01      	subs	r3, #1
 8003c72:	b29a      	uxth	r2, r3
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c78:	e042      	b.n	8003d00 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c7c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c7e:	68f8      	ldr	r0, [r7, #12]
 8003c80:	f000 fc5c 	bl	800453c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d001      	beq.n	8003c8e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e04c      	b.n	8003d28 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	691a      	ldr	r2, [r3, #16]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c98:	b2d2      	uxtb	r2, r2
 8003c9a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca0:	1c5a      	adds	r2, r3, #1
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003caa:	3b01      	subs	r3, #1
 8003cac:	b29a      	uxth	r2, r3
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	3b01      	subs	r3, #1
 8003cba:	b29a      	uxth	r2, r3
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	f003 0304 	and.w	r3, r3, #4
 8003cca:	2b04      	cmp	r3, #4
 8003ccc:	d118      	bne.n	8003d00 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	691a      	ldr	r2, [r3, #16]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd8:	b2d2      	uxtb	r2, r2
 8003cda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce0:	1c5a      	adds	r2, r3, #1
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cea:	3b01      	subs	r3, #1
 8003cec:	b29a      	uxth	r2, r3
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	b29a      	uxth	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	f47f aec2 	bne.w	8003a8e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2220      	movs	r2, #32
 8003d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d22:	2300      	movs	r3, #0
 8003d24:	e000      	b.n	8003d28 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003d26:	2302      	movs	r3, #2
  }
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3728      	adds	r7, #40	; 0x28
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	00010004 	.word	0x00010004

08003d34 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b08a      	sub	sp, #40	; 0x28
 8003d38:	af02      	add	r7, sp, #8
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	607a      	str	r2, [r7, #4]
 8003d3e:	603b      	str	r3, [r7, #0]
 8003d40:	460b      	mov	r3, r1
 8003d42:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003d44:	f7ff f8b6 	bl	8002eb4 <HAL_GetTick>
 8003d48:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b20      	cmp	r3, #32
 8003d58:	f040 8111 	bne.w	8003f7e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	9300      	str	r3, [sp, #0]
 8003d60:	2319      	movs	r3, #25
 8003d62:	2201      	movs	r2, #1
 8003d64:	4988      	ldr	r1, [pc, #544]	; (8003f88 <HAL_I2C_IsDeviceReady+0x254>)
 8003d66:	68f8      	ldr	r0, [r7, #12]
 8003d68:	f000 fa90 	bl	800428c <I2C_WaitOnFlagUntilTimeout>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d001      	beq.n	8003d76 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003d72:	2302      	movs	r3, #2
 8003d74:	e104      	b.n	8003f80 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d101      	bne.n	8003d84 <HAL_I2C_IsDeviceReady+0x50>
 8003d80:	2302      	movs	r3, #2
 8003d82:	e0fd      	b.n	8003f80 <HAL_I2C_IsDeviceReady+0x24c>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d007      	beq.n	8003daa <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f042 0201 	orr.w	r2, r2, #1
 8003da8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003db8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2224      	movs	r2, #36	; 0x24
 8003dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	4a70      	ldr	r2, [pc, #448]	; (8003f8c <HAL_I2C_IsDeviceReady+0x258>)
 8003dcc:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ddc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	9300      	str	r3, [sp, #0]
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003dea:	68f8      	ldr	r0, [r7, #12]
 8003dec:	f000 fa4e 	bl	800428c <I2C_WaitOnFlagUntilTimeout>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d00d      	beq.n	8003e12 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e04:	d103      	bne.n	8003e0e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e0c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e0b6      	b.n	8003f80 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e12:	897b      	ldrh	r3, [r7, #10]
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	461a      	mov	r2, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e20:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003e22:	f7ff f847 	bl	8002eb4 <HAL_GetTick>
 8003e26:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	695b      	ldr	r3, [r3, #20]
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	bf0c      	ite	eq
 8003e36:	2301      	moveq	r3, #1
 8003e38:	2300      	movne	r3, #0
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	695b      	ldr	r3, [r3, #20]
 8003e44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e4c:	bf0c      	ite	eq
 8003e4e:	2301      	moveq	r3, #1
 8003e50:	2300      	movne	r3, #0
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003e56:	e025      	b.n	8003ea4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003e58:	f7ff f82c 	bl	8002eb4 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	683a      	ldr	r2, [r7, #0]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d302      	bcc.n	8003e6e <HAL_I2C_IsDeviceReady+0x13a>
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d103      	bne.n	8003e76 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	22a0      	movs	r2, #160	; 0xa0
 8003e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	695b      	ldr	r3, [r3, #20]
 8003e7c:	f003 0302 	and.w	r3, r3, #2
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	bf0c      	ite	eq
 8003e84:	2301      	moveq	r3, #1
 8003e86:	2300      	movne	r3, #0
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	695b      	ldr	r3, [r3, #20]
 8003e92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e9a:	bf0c      	ite	eq
 8003e9c:	2301      	moveq	r3, #1
 8003e9e:	2300      	movne	r3, #0
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	2ba0      	cmp	r3, #160	; 0xa0
 8003eae:	d005      	beq.n	8003ebc <HAL_I2C_IsDeviceReady+0x188>
 8003eb0:	7dfb      	ldrb	r3, [r7, #23]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d102      	bne.n	8003ebc <HAL_I2C_IsDeviceReady+0x188>
 8003eb6:	7dbb      	ldrb	r3, [r7, #22]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d0cd      	beq.n	8003e58 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2220      	movs	r2, #32
 8003ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d129      	bne.n	8003f26 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ee0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	613b      	str	r3, [r7, #16]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	695b      	ldr	r3, [r3, #20]
 8003eec:	613b      	str	r3, [r7, #16]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	613b      	str	r3, [r7, #16]
 8003ef6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	9300      	str	r3, [sp, #0]
 8003efc:	2319      	movs	r3, #25
 8003efe:	2201      	movs	r2, #1
 8003f00:	4921      	ldr	r1, [pc, #132]	; (8003f88 <HAL_I2C_IsDeviceReady+0x254>)
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f000 f9c2 	bl	800428c <I2C_WaitOnFlagUntilTimeout>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d001      	beq.n	8003f12 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e036      	b.n	8003f80 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2220      	movs	r2, #32
 8003f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003f22:	2300      	movs	r3, #0
 8003f24:	e02c      	b.n	8003f80 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f34:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f3e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	9300      	str	r3, [sp, #0]
 8003f44:	2319      	movs	r3, #25
 8003f46:	2201      	movs	r2, #1
 8003f48:	490f      	ldr	r1, [pc, #60]	; (8003f88 <HAL_I2C_IsDeviceReady+0x254>)
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f000 f99e 	bl	800428c <I2C_WaitOnFlagUntilTimeout>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d001      	beq.n	8003f5a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e012      	b.n	8003f80 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003f60:	69ba      	ldr	r2, [r7, #24]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	f4ff af32 	bcc.w	8003dce <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2220      	movs	r2, #32
 8003f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e000      	b.n	8003f80 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003f7e:	2302      	movs	r3, #2
  }
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3720      	adds	r7, #32
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	00100002 	.word	0x00100002
 8003f8c:	ffff0000 	.word	0xffff0000

08003f90 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b088      	sub	sp, #32
 8003f94:	af02      	add	r7, sp, #8
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	4608      	mov	r0, r1
 8003f9a:	4611      	mov	r1, r2
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	817b      	strh	r3, [r7, #10]
 8003fa2:	460b      	mov	r3, r1
 8003fa4:	813b      	strh	r3, [r7, #8]
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fb8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbc:	9300      	str	r3, [sp, #0]
 8003fbe:	6a3b      	ldr	r3, [r7, #32]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003fc6:	68f8      	ldr	r0, [r7, #12]
 8003fc8:	f000 f960 	bl	800428c <I2C_WaitOnFlagUntilTimeout>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00d      	beq.n	8003fee <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fe0:	d103      	bne.n	8003fea <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fe8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e05f      	b.n	80040ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003fee:	897b      	ldrh	r3, [r7, #10]
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ffc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004000:	6a3a      	ldr	r2, [r7, #32]
 8004002:	492d      	ldr	r1, [pc, #180]	; (80040b8 <I2C_RequestMemoryWrite+0x128>)
 8004004:	68f8      	ldr	r0, [r7, #12]
 8004006:	f000 f998 	bl	800433a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d001      	beq.n	8004014 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e04c      	b.n	80040ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004014:	2300      	movs	r3, #0
 8004016:	617b      	str	r3, [r7, #20]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	617b      	str	r3, [r7, #20]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	617b      	str	r3, [r7, #20]
 8004028:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800402a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800402c:	6a39      	ldr	r1, [r7, #32]
 800402e:	68f8      	ldr	r0, [r7, #12]
 8004030:	f000 fa02 	bl	8004438 <I2C_WaitOnTXEFlagUntilTimeout>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00d      	beq.n	8004056 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403e:	2b04      	cmp	r3, #4
 8004040:	d107      	bne.n	8004052 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004050:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e02b      	b.n	80040ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004056:	88fb      	ldrh	r3, [r7, #6]
 8004058:	2b01      	cmp	r3, #1
 800405a:	d105      	bne.n	8004068 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800405c:	893b      	ldrh	r3, [r7, #8]
 800405e:	b2da      	uxtb	r2, r3
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	611a      	str	r2, [r3, #16]
 8004066:	e021      	b.n	80040ac <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004068:	893b      	ldrh	r3, [r7, #8]
 800406a:	0a1b      	lsrs	r3, r3, #8
 800406c:	b29b      	uxth	r3, r3
 800406e:	b2da      	uxtb	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004078:	6a39      	ldr	r1, [r7, #32]
 800407a:	68f8      	ldr	r0, [r7, #12]
 800407c:	f000 f9dc 	bl	8004438 <I2C_WaitOnTXEFlagUntilTimeout>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00d      	beq.n	80040a2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408a:	2b04      	cmp	r3, #4
 800408c:	d107      	bne.n	800409e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800409c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e005      	b.n	80040ae <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80040a2:	893b      	ldrh	r3, [r7, #8]
 80040a4:	b2da      	uxtb	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3718      	adds	r7, #24
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	00010002 	.word	0x00010002

080040bc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b088      	sub	sp, #32
 80040c0:	af02      	add	r7, sp, #8
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	4608      	mov	r0, r1
 80040c6:	4611      	mov	r1, r2
 80040c8:	461a      	mov	r2, r3
 80040ca:	4603      	mov	r3, r0
 80040cc:	817b      	strh	r3, [r7, #10]
 80040ce:	460b      	mov	r3, r1
 80040d0:	813b      	strh	r3, [r7, #8]
 80040d2:	4613      	mov	r3, r2
 80040d4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040e4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040f4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f8:	9300      	str	r3, [sp, #0]
 80040fa:	6a3b      	ldr	r3, [r7, #32]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004102:	68f8      	ldr	r0, [r7, #12]
 8004104:	f000 f8c2 	bl	800428c <I2C_WaitOnFlagUntilTimeout>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00d      	beq.n	800412a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004118:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800411c:	d103      	bne.n	8004126 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004124:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e0aa      	b.n	8004280 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800412a:	897b      	ldrh	r3, [r7, #10]
 800412c:	b2db      	uxtb	r3, r3
 800412e:	461a      	mov	r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004138:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800413a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413c:	6a3a      	ldr	r2, [r7, #32]
 800413e:	4952      	ldr	r1, [pc, #328]	; (8004288 <I2C_RequestMemoryRead+0x1cc>)
 8004140:	68f8      	ldr	r0, [r7, #12]
 8004142:	f000 f8fa 	bl	800433a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d001      	beq.n	8004150 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e097      	b.n	8004280 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004150:	2300      	movs	r3, #0
 8004152:	617b      	str	r3, [r7, #20]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	695b      	ldr	r3, [r3, #20]
 800415a:	617b      	str	r3, [r7, #20]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	617b      	str	r3, [r7, #20]
 8004164:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004168:	6a39      	ldr	r1, [r7, #32]
 800416a:	68f8      	ldr	r0, [r7, #12]
 800416c:	f000 f964 	bl	8004438 <I2C_WaitOnTXEFlagUntilTimeout>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d00d      	beq.n	8004192 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417a:	2b04      	cmp	r3, #4
 800417c:	d107      	bne.n	800418e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800418c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e076      	b.n	8004280 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004192:	88fb      	ldrh	r3, [r7, #6]
 8004194:	2b01      	cmp	r3, #1
 8004196:	d105      	bne.n	80041a4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004198:	893b      	ldrh	r3, [r7, #8]
 800419a:	b2da      	uxtb	r2, r3
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	611a      	str	r2, [r3, #16]
 80041a2:	e021      	b.n	80041e8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80041a4:	893b      	ldrh	r3, [r7, #8]
 80041a6:	0a1b      	lsrs	r3, r3, #8
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	b2da      	uxtb	r2, r3
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041b4:	6a39      	ldr	r1, [r7, #32]
 80041b6:	68f8      	ldr	r0, [r7, #12]
 80041b8:	f000 f93e 	bl	8004438 <I2C_WaitOnTXEFlagUntilTimeout>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00d      	beq.n	80041de <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c6:	2b04      	cmp	r3, #4
 80041c8:	d107      	bne.n	80041da <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041d8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e050      	b.n	8004280 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041de:	893b      	ldrh	r3, [r7, #8]
 80041e0:	b2da      	uxtb	r2, r3
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ea:	6a39      	ldr	r1, [r7, #32]
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	f000 f923 	bl	8004438 <I2C_WaitOnTXEFlagUntilTimeout>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00d      	beq.n	8004214 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fc:	2b04      	cmp	r3, #4
 80041fe:	d107      	bne.n	8004210 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800420e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e035      	b.n	8004280 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004222:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004226:	9300      	str	r3, [sp, #0]
 8004228:	6a3b      	ldr	r3, [r7, #32]
 800422a:	2200      	movs	r2, #0
 800422c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004230:	68f8      	ldr	r0, [r7, #12]
 8004232:	f000 f82b 	bl	800428c <I2C_WaitOnFlagUntilTimeout>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d00d      	beq.n	8004258 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004246:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800424a:	d103      	bne.n	8004254 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004252:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e013      	b.n	8004280 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004258:	897b      	ldrh	r3, [r7, #10]
 800425a:	b2db      	uxtb	r3, r3
 800425c:	f043 0301 	orr.w	r3, r3, #1
 8004260:	b2da      	uxtb	r2, r3
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426a:	6a3a      	ldr	r2, [r7, #32]
 800426c:	4906      	ldr	r1, [pc, #24]	; (8004288 <I2C_RequestMemoryRead+0x1cc>)
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	f000 f863 	bl	800433a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e000      	b.n	8004280 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800427e:	2300      	movs	r3, #0
}
 8004280:	4618      	mov	r0, r3
 8004282:	3718      	adds	r7, #24
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	00010002 	.word	0x00010002

0800428c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	603b      	str	r3, [r7, #0]
 8004298:	4613      	mov	r3, r2
 800429a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800429c:	e025      	b.n	80042ea <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042a4:	d021      	beq.n	80042ea <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042a6:	f7fe fe05 	bl	8002eb4 <HAL_GetTick>
 80042aa:	4602      	mov	r2, r0
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	683a      	ldr	r2, [r7, #0]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d302      	bcc.n	80042bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d116      	bne.n	80042ea <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2200      	movs	r2, #0
 80042c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2220      	movs	r2, #32
 80042c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d6:	f043 0220 	orr.w	r2, r3, #32
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e023      	b.n	8004332 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	0c1b      	lsrs	r3, r3, #16
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d10d      	bne.n	8004310 <I2C_WaitOnFlagUntilTimeout+0x84>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	695b      	ldr	r3, [r3, #20]
 80042fa:	43da      	mvns	r2, r3
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	4013      	ands	r3, r2
 8004300:	b29b      	uxth	r3, r3
 8004302:	2b00      	cmp	r3, #0
 8004304:	bf0c      	ite	eq
 8004306:	2301      	moveq	r3, #1
 8004308:	2300      	movne	r3, #0
 800430a:	b2db      	uxtb	r3, r3
 800430c:	461a      	mov	r2, r3
 800430e:	e00c      	b.n	800432a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	699b      	ldr	r3, [r3, #24]
 8004316:	43da      	mvns	r2, r3
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	4013      	ands	r3, r2
 800431c:	b29b      	uxth	r3, r3
 800431e:	2b00      	cmp	r3, #0
 8004320:	bf0c      	ite	eq
 8004322:	2301      	moveq	r3, #1
 8004324:	2300      	movne	r3, #0
 8004326:	b2db      	uxtb	r3, r3
 8004328:	461a      	mov	r2, r3
 800432a:	79fb      	ldrb	r3, [r7, #7]
 800432c:	429a      	cmp	r2, r3
 800432e:	d0b6      	beq.n	800429e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3710      	adds	r7, #16
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}

0800433a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800433a:	b580      	push	{r7, lr}
 800433c:	b084      	sub	sp, #16
 800433e:	af00      	add	r7, sp, #0
 8004340:	60f8      	str	r0, [r7, #12]
 8004342:	60b9      	str	r1, [r7, #8]
 8004344:	607a      	str	r2, [r7, #4]
 8004346:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004348:	e051      	b.n	80043ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	695b      	ldr	r3, [r3, #20]
 8004350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004354:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004358:	d123      	bne.n	80043a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004368:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004372:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2220      	movs	r2, #32
 800437e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438e:	f043 0204 	orr.w	r2, r3, #4
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e046      	b.n	8004430 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043a8:	d021      	beq.n	80043ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043aa:	f7fe fd83 	bl	8002eb4 <HAL_GetTick>
 80043ae:	4602      	mov	r2, r0
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d302      	bcc.n	80043c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d116      	bne.n	80043ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2200      	movs	r2, #0
 80043c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2220      	movs	r2, #32
 80043ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043da:	f043 0220 	orr.w	r2, r3, #32
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e020      	b.n	8004430 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	0c1b      	lsrs	r3, r3, #16
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d10c      	bne.n	8004412 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	695b      	ldr	r3, [r3, #20]
 80043fe:	43da      	mvns	r2, r3
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	4013      	ands	r3, r2
 8004404:	b29b      	uxth	r3, r3
 8004406:	2b00      	cmp	r3, #0
 8004408:	bf14      	ite	ne
 800440a:	2301      	movne	r3, #1
 800440c:	2300      	moveq	r3, #0
 800440e:	b2db      	uxtb	r3, r3
 8004410:	e00b      	b.n	800442a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	699b      	ldr	r3, [r3, #24]
 8004418:	43da      	mvns	r2, r3
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	4013      	ands	r3, r2
 800441e:	b29b      	uxth	r3, r3
 8004420:	2b00      	cmp	r3, #0
 8004422:	bf14      	ite	ne
 8004424:	2301      	movne	r3, #1
 8004426:	2300      	moveq	r3, #0
 8004428:	b2db      	uxtb	r3, r3
 800442a:	2b00      	cmp	r3, #0
 800442c:	d18d      	bne.n	800434a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3710      	adds	r7, #16
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004444:	e02d      	b.n	80044a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004446:	68f8      	ldr	r0, [r7, #12]
 8004448:	f000 f8ce 	bl	80045e8 <I2C_IsAcknowledgeFailed>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d001      	beq.n	8004456 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e02d      	b.n	80044b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800445c:	d021      	beq.n	80044a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800445e:	f7fe fd29 	bl	8002eb4 <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	68ba      	ldr	r2, [r7, #8]
 800446a:	429a      	cmp	r2, r3
 800446c:	d302      	bcc.n	8004474 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d116      	bne.n	80044a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2200      	movs	r2, #0
 8004478:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2220      	movs	r2, #32
 800447e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448e:	f043 0220 	orr.w	r2, r3, #32
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e007      	b.n	80044b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	695b      	ldr	r3, [r3, #20]
 80044a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ac:	2b80      	cmp	r3, #128	; 0x80
 80044ae:	d1ca      	bne.n	8004446 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3710      	adds	r7, #16
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}

080044ba <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044ba:	b580      	push	{r7, lr}
 80044bc:	b084      	sub	sp, #16
 80044be:	af00      	add	r7, sp, #0
 80044c0:	60f8      	str	r0, [r7, #12]
 80044c2:	60b9      	str	r1, [r7, #8]
 80044c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044c6:	e02d      	b.n	8004524 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044c8:	68f8      	ldr	r0, [r7, #12]
 80044ca:	f000 f88d 	bl	80045e8 <I2C_IsAcknowledgeFailed>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d001      	beq.n	80044d8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e02d      	b.n	8004534 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044de:	d021      	beq.n	8004524 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044e0:	f7fe fce8 	bl	8002eb4 <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	68ba      	ldr	r2, [r7, #8]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d302      	bcc.n	80044f6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d116      	bne.n	8004524 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2200      	movs	r2, #0
 80044fa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2220      	movs	r2, #32
 8004500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004510:	f043 0220 	orr.w	r2, r3, #32
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2200      	movs	r2, #0
 800451c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e007      	b.n	8004534 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	695b      	ldr	r3, [r3, #20]
 800452a:	f003 0304 	and.w	r3, r3, #4
 800452e:	2b04      	cmp	r3, #4
 8004530:	d1ca      	bne.n	80044c8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004532:	2300      	movs	r3, #0
}
 8004534:	4618      	mov	r0, r3
 8004536:	3710      	adds	r7, #16
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004548:	e042      	b.n	80045d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	695b      	ldr	r3, [r3, #20]
 8004550:	f003 0310 	and.w	r3, r3, #16
 8004554:	2b10      	cmp	r3, #16
 8004556:	d119      	bne.n	800458c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f06f 0210 	mvn.w	r2, #16
 8004560:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2200      	movs	r2, #0
 8004566:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2220      	movs	r2, #32
 800456c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2200      	movs	r2, #0
 8004574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e029      	b.n	80045e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800458c:	f7fe fc92 	bl	8002eb4 <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	68ba      	ldr	r2, [r7, #8]
 8004598:	429a      	cmp	r2, r3
 800459a:	d302      	bcc.n	80045a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d116      	bne.n	80045d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2200      	movs	r2, #0
 80045a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2220      	movs	r2, #32
 80045ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045bc:	f043 0220 	orr.w	r2, r3, #32
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e007      	b.n	80045e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	695b      	ldr	r3, [r3, #20]
 80045d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045da:	2b40      	cmp	r3, #64	; 0x40
 80045dc:	d1b5      	bne.n	800454a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80045de:	2300      	movs	r3, #0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3710      	adds	r7, #16
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	695b      	ldr	r3, [r3, #20]
 80045f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045fe:	d11b      	bne.n	8004638 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004608:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2220      	movs	r2, #32
 8004614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004624:	f043 0204 	orr.w	r2, r3, #4
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e000      	b.n	800463a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	370c      	adds	r7, #12
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
	...

08004648 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d101      	bne.n	800465c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e0cc      	b.n	80047f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800465c:	4b68      	ldr	r3, [pc, #416]	; (8004800 <HAL_RCC_ClockConfig+0x1b8>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 030f 	and.w	r3, r3, #15
 8004664:	683a      	ldr	r2, [r7, #0]
 8004666:	429a      	cmp	r2, r3
 8004668:	d90c      	bls.n	8004684 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800466a:	4b65      	ldr	r3, [pc, #404]	; (8004800 <HAL_RCC_ClockConfig+0x1b8>)
 800466c:	683a      	ldr	r2, [r7, #0]
 800466e:	b2d2      	uxtb	r2, r2
 8004670:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004672:	4b63      	ldr	r3, [pc, #396]	; (8004800 <HAL_RCC_ClockConfig+0x1b8>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 030f 	and.w	r3, r3, #15
 800467a:	683a      	ldr	r2, [r7, #0]
 800467c:	429a      	cmp	r2, r3
 800467e:	d001      	beq.n	8004684 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e0b8      	b.n	80047f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0302 	and.w	r3, r3, #2
 800468c:	2b00      	cmp	r3, #0
 800468e:	d020      	beq.n	80046d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0304 	and.w	r3, r3, #4
 8004698:	2b00      	cmp	r3, #0
 800469a:	d005      	beq.n	80046a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800469c:	4b59      	ldr	r3, [pc, #356]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	4a58      	ldr	r2, [pc, #352]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 80046a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80046a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0308 	and.w	r3, r3, #8
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d005      	beq.n	80046c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046b4:	4b53      	ldr	r3, [pc, #332]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	4a52      	ldr	r2, [pc, #328]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 80046ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80046be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046c0:	4b50      	ldr	r3, [pc, #320]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	494d      	ldr	r1, [pc, #308]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0301 	and.w	r3, r3, #1
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d044      	beq.n	8004768 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d107      	bne.n	80046f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046e6:	4b47      	ldr	r3, [pc, #284]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d119      	bne.n	8004726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e07f      	b.n	80047f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d003      	beq.n	8004706 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004702:	2b03      	cmp	r3, #3
 8004704:	d107      	bne.n	8004716 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004706:	4b3f      	ldr	r3, [pc, #252]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d109      	bne.n	8004726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e06f      	b.n	80047f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004716:	4b3b      	ldr	r3, [pc, #236]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0302 	and.w	r3, r3, #2
 800471e:	2b00      	cmp	r3, #0
 8004720:	d101      	bne.n	8004726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e067      	b.n	80047f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004726:	4b37      	ldr	r3, [pc, #220]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	f023 0203 	bic.w	r2, r3, #3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	4934      	ldr	r1, [pc, #208]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 8004734:	4313      	orrs	r3, r2
 8004736:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004738:	f7fe fbbc 	bl	8002eb4 <HAL_GetTick>
 800473c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800473e:	e00a      	b.n	8004756 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004740:	f7fe fbb8 	bl	8002eb4 <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	f241 3288 	movw	r2, #5000	; 0x1388
 800474e:	4293      	cmp	r3, r2
 8004750:	d901      	bls.n	8004756 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e04f      	b.n	80047f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004756:	4b2b      	ldr	r3, [pc, #172]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f003 020c 	and.w	r2, r3, #12
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	429a      	cmp	r2, r3
 8004766:	d1eb      	bne.n	8004740 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004768:	4b25      	ldr	r3, [pc, #148]	; (8004800 <HAL_RCC_ClockConfig+0x1b8>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 030f 	and.w	r3, r3, #15
 8004770:	683a      	ldr	r2, [r7, #0]
 8004772:	429a      	cmp	r2, r3
 8004774:	d20c      	bcs.n	8004790 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004776:	4b22      	ldr	r3, [pc, #136]	; (8004800 <HAL_RCC_ClockConfig+0x1b8>)
 8004778:	683a      	ldr	r2, [r7, #0]
 800477a:	b2d2      	uxtb	r2, r2
 800477c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800477e:	4b20      	ldr	r3, [pc, #128]	; (8004800 <HAL_RCC_ClockConfig+0x1b8>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 030f 	and.w	r3, r3, #15
 8004786:	683a      	ldr	r2, [r7, #0]
 8004788:	429a      	cmp	r2, r3
 800478a:	d001      	beq.n	8004790 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e032      	b.n	80047f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0304 	and.w	r3, r3, #4
 8004798:	2b00      	cmp	r3, #0
 800479a:	d008      	beq.n	80047ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800479c:	4b19      	ldr	r3, [pc, #100]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	4916      	ldr	r1, [pc, #88]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0308 	and.w	r3, r3, #8
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d009      	beq.n	80047ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047ba:	4b12      	ldr	r3, [pc, #72]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	00db      	lsls	r3, r3, #3
 80047c8:	490e      	ldr	r1, [pc, #56]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80047ce:	f000 f855 	bl	800487c <HAL_RCC_GetSysClockFreq>
 80047d2:	4602      	mov	r2, r0
 80047d4:	4b0b      	ldr	r3, [pc, #44]	; (8004804 <HAL_RCC_ClockConfig+0x1bc>)
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	091b      	lsrs	r3, r3, #4
 80047da:	f003 030f 	and.w	r3, r3, #15
 80047de:	490a      	ldr	r1, [pc, #40]	; (8004808 <HAL_RCC_ClockConfig+0x1c0>)
 80047e0:	5ccb      	ldrb	r3, [r1, r3]
 80047e2:	fa22 f303 	lsr.w	r3, r2, r3
 80047e6:	4a09      	ldr	r2, [pc, #36]	; (800480c <HAL_RCC_ClockConfig+0x1c4>)
 80047e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80047ea:	4b09      	ldr	r3, [pc, #36]	; (8004810 <HAL_RCC_ClockConfig+0x1c8>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4618      	mov	r0, r3
 80047f0:	f7fe fb1c 	bl	8002e2c <HAL_InitTick>

  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3710      	adds	r7, #16
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	40023c00 	.word	0x40023c00
 8004804:	40023800 	.word	0x40023800
 8004808:	08009b1c 	.word	0x08009b1c
 800480c:	20000008 	.word	0x20000008
 8004810:	2000000c 	.word	0x2000000c

08004814 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004814:	b480      	push	{r7}
 8004816:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004818:	4b03      	ldr	r3, [pc, #12]	; (8004828 <HAL_RCC_GetHCLKFreq+0x14>)
 800481a:	681b      	ldr	r3, [r3, #0]
}
 800481c:	4618      	mov	r0, r3
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr
 8004826:	bf00      	nop
 8004828:	20000008 	.word	0x20000008

0800482c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004830:	f7ff fff0 	bl	8004814 <HAL_RCC_GetHCLKFreq>
 8004834:	4602      	mov	r2, r0
 8004836:	4b05      	ldr	r3, [pc, #20]	; (800484c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	0a9b      	lsrs	r3, r3, #10
 800483c:	f003 0307 	and.w	r3, r3, #7
 8004840:	4903      	ldr	r1, [pc, #12]	; (8004850 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004842:	5ccb      	ldrb	r3, [r1, r3]
 8004844:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004848:	4618      	mov	r0, r3
 800484a:	bd80      	pop	{r7, pc}
 800484c:	40023800 	.word	0x40023800
 8004850:	08009b2c 	.word	0x08009b2c

08004854 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004858:	f7ff ffdc 	bl	8004814 <HAL_RCC_GetHCLKFreq>
 800485c:	4602      	mov	r2, r0
 800485e:	4b05      	ldr	r3, [pc, #20]	; (8004874 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	0b5b      	lsrs	r3, r3, #13
 8004864:	f003 0307 	and.w	r3, r3, #7
 8004868:	4903      	ldr	r1, [pc, #12]	; (8004878 <HAL_RCC_GetPCLK2Freq+0x24>)
 800486a:	5ccb      	ldrb	r3, [r1, r3]
 800486c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004870:	4618      	mov	r0, r3
 8004872:	bd80      	pop	{r7, pc}
 8004874:	40023800 	.word	0x40023800
 8004878:	08009b2c 	.word	0x08009b2c

0800487c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800487c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004880:	b088      	sub	sp, #32
 8004882:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004884:	2300      	movs	r3, #0
 8004886:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8004888:	2300      	movs	r3, #0
 800488a:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 800488c:	2300      	movs	r3, #0
 800488e:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8004890:	2300      	movs	r3, #0
 8004892:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8004894:	2300      	movs	r3, #0
 8004896:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004898:	4bce      	ldr	r3, [pc, #824]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x358>)
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	f003 030c 	and.w	r3, r3, #12
 80048a0:	2b0c      	cmp	r3, #12
 80048a2:	f200 818d 	bhi.w	8004bc0 <HAL_RCC_GetSysClockFreq+0x344>
 80048a6:	a201      	add	r2, pc, #4	; (adr r2, 80048ac <HAL_RCC_GetSysClockFreq+0x30>)
 80048a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ac:	080048e1 	.word	0x080048e1
 80048b0:	08004bc1 	.word	0x08004bc1
 80048b4:	08004bc1 	.word	0x08004bc1
 80048b8:	08004bc1 	.word	0x08004bc1
 80048bc:	080048e7 	.word	0x080048e7
 80048c0:	08004bc1 	.word	0x08004bc1
 80048c4:	08004bc1 	.word	0x08004bc1
 80048c8:	08004bc1 	.word	0x08004bc1
 80048cc:	080048ed 	.word	0x080048ed
 80048d0:	08004bc1 	.word	0x08004bc1
 80048d4:	08004bc1 	.word	0x08004bc1
 80048d8:	08004bc1 	.word	0x08004bc1
 80048dc:	08004a61 	.word	0x08004a61
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048e0:	4bbd      	ldr	r3, [pc, #756]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80048e2:	61bb      	str	r3, [r7, #24]
       break;
 80048e4:	e16f      	b.n	8004bc6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048e6:	4bbd      	ldr	r3, [pc, #756]	; (8004bdc <HAL_RCC_GetSysClockFreq+0x360>)
 80048e8:	61bb      	str	r3, [r7, #24]
      break;
 80048ea:	e16c      	b.n	8004bc6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048ec:	4bb9      	ldr	r3, [pc, #740]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x358>)
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048f4:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048f6:	4bb7      	ldr	r3, [pc, #732]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x358>)
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d053      	beq.n	80049aa <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004902:	4bb4      	ldr	r3, [pc, #720]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x358>)
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	099b      	lsrs	r3, r3, #6
 8004908:	461a      	mov	r2, r3
 800490a:	f04f 0300 	mov.w	r3, #0
 800490e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004912:	f04f 0100 	mov.w	r1, #0
 8004916:	ea02 0400 	and.w	r4, r2, r0
 800491a:	603c      	str	r4, [r7, #0]
 800491c:	400b      	ands	r3, r1
 800491e:	607b      	str	r3, [r7, #4]
 8004920:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004924:	4620      	mov	r0, r4
 8004926:	4629      	mov	r1, r5
 8004928:	f04f 0200 	mov.w	r2, #0
 800492c:	f04f 0300 	mov.w	r3, #0
 8004930:	014b      	lsls	r3, r1, #5
 8004932:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004936:	0142      	lsls	r2, r0, #5
 8004938:	4610      	mov	r0, r2
 800493a:	4619      	mov	r1, r3
 800493c:	4623      	mov	r3, r4
 800493e:	1ac0      	subs	r0, r0, r3
 8004940:	462b      	mov	r3, r5
 8004942:	eb61 0103 	sbc.w	r1, r1, r3
 8004946:	f04f 0200 	mov.w	r2, #0
 800494a:	f04f 0300 	mov.w	r3, #0
 800494e:	018b      	lsls	r3, r1, #6
 8004950:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004954:	0182      	lsls	r2, r0, #6
 8004956:	1a12      	subs	r2, r2, r0
 8004958:	eb63 0301 	sbc.w	r3, r3, r1
 800495c:	f04f 0000 	mov.w	r0, #0
 8004960:	f04f 0100 	mov.w	r1, #0
 8004964:	00d9      	lsls	r1, r3, #3
 8004966:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800496a:	00d0      	lsls	r0, r2, #3
 800496c:	4602      	mov	r2, r0
 800496e:	460b      	mov	r3, r1
 8004970:	4621      	mov	r1, r4
 8004972:	1852      	adds	r2, r2, r1
 8004974:	4629      	mov	r1, r5
 8004976:	eb43 0101 	adc.w	r1, r3, r1
 800497a:	460b      	mov	r3, r1
 800497c:	f04f 0000 	mov.w	r0, #0
 8004980:	f04f 0100 	mov.w	r1, #0
 8004984:	0259      	lsls	r1, r3, #9
 8004986:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800498a:	0250      	lsls	r0, r2, #9
 800498c:	4602      	mov	r2, r0
 800498e:	460b      	mov	r3, r1
 8004990:	4610      	mov	r0, r2
 8004992:	4619      	mov	r1, r3
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	461a      	mov	r2, r3
 8004998:	f04f 0300 	mov.w	r3, #0
 800499c:	f7fc f974 	bl	8000c88 <__aeabi_uldivmod>
 80049a0:	4602      	mov	r2, r0
 80049a2:	460b      	mov	r3, r1
 80049a4:	4613      	mov	r3, r2
 80049a6:	61fb      	str	r3, [r7, #28]
 80049a8:	e04c      	b.n	8004a44 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049aa:	4b8a      	ldr	r3, [pc, #552]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x358>)
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	099b      	lsrs	r3, r3, #6
 80049b0:	461a      	mov	r2, r3
 80049b2:	f04f 0300 	mov.w	r3, #0
 80049b6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80049ba:	f04f 0100 	mov.w	r1, #0
 80049be:	ea02 0a00 	and.w	sl, r2, r0
 80049c2:	ea03 0b01 	and.w	fp, r3, r1
 80049c6:	4650      	mov	r0, sl
 80049c8:	4659      	mov	r1, fp
 80049ca:	f04f 0200 	mov.w	r2, #0
 80049ce:	f04f 0300 	mov.w	r3, #0
 80049d2:	014b      	lsls	r3, r1, #5
 80049d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80049d8:	0142      	lsls	r2, r0, #5
 80049da:	4610      	mov	r0, r2
 80049dc:	4619      	mov	r1, r3
 80049de:	ebb0 000a 	subs.w	r0, r0, sl
 80049e2:	eb61 010b 	sbc.w	r1, r1, fp
 80049e6:	f04f 0200 	mov.w	r2, #0
 80049ea:	f04f 0300 	mov.w	r3, #0
 80049ee:	018b      	lsls	r3, r1, #6
 80049f0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80049f4:	0182      	lsls	r2, r0, #6
 80049f6:	1a12      	subs	r2, r2, r0
 80049f8:	eb63 0301 	sbc.w	r3, r3, r1
 80049fc:	f04f 0000 	mov.w	r0, #0
 8004a00:	f04f 0100 	mov.w	r1, #0
 8004a04:	00d9      	lsls	r1, r3, #3
 8004a06:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a0a:	00d0      	lsls	r0, r2, #3
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	460b      	mov	r3, r1
 8004a10:	eb12 020a 	adds.w	r2, r2, sl
 8004a14:	eb43 030b 	adc.w	r3, r3, fp
 8004a18:	f04f 0000 	mov.w	r0, #0
 8004a1c:	f04f 0100 	mov.w	r1, #0
 8004a20:	0299      	lsls	r1, r3, #10
 8004a22:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004a26:	0290      	lsls	r0, r2, #10
 8004a28:	4602      	mov	r2, r0
 8004a2a:	460b      	mov	r3, r1
 8004a2c:	4610      	mov	r0, r2
 8004a2e:	4619      	mov	r1, r3
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	461a      	mov	r2, r3
 8004a34:	f04f 0300 	mov.w	r3, #0
 8004a38:	f7fc f926 	bl	8000c88 <__aeabi_uldivmod>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	460b      	mov	r3, r1
 8004a40:	4613      	mov	r3, r2
 8004a42:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a44:	4b63      	ldr	r3, [pc, #396]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x358>)
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	0c1b      	lsrs	r3, r3, #16
 8004a4a:	f003 0303 	and.w	r3, r3, #3
 8004a4e:	3301      	adds	r3, #1
 8004a50:	005b      	lsls	r3, r3, #1
 8004a52:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8004a54:	69fa      	ldr	r2, [r7, #28]
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a5c:	61bb      	str	r3, [r7, #24]
      break;
 8004a5e:	e0b2      	b.n	8004bc6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a60:	4b5c      	ldr	r3, [pc, #368]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x358>)
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a68:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a6a:	4b5a      	ldr	r3, [pc, #360]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x358>)
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d04d      	beq.n	8004b12 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a76:	4b57      	ldr	r3, [pc, #348]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x358>)
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	099b      	lsrs	r3, r3, #6
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	f04f 0300 	mov.w	r3, #0
 8004a82:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004a86:	f04f 0100 	mov.w	r1, #0
 8004a8a:	ea02 0800 	and.w	r8, r2, r0
 8004a8e:	ea03 0901 	and.w	r9, r3, r1
 8004a92:	4640      	mov	r0, r8
 8004a94:	4649      	mov	r1, r9
 8004a96:	f04f 0200 	mov.w	r2, #0
 8004a9a:	f04f 0300 	mov.w	r3, #0
 8004a9e:	014b      	lsls	r3, r1, #5
 8004aa0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004aa4:	0142      	lsls	r2, r0, #5
 8004aa6:	4610      	mov	r0, r2
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	ebb0 0008 	subs.w	r0, r0, r8
 8004aae:	eb61 0109 	sbc.w	r1, r1, r9
 8004ab2:	f04f 0200 	mov.w	r2, #0
 8004ab6:	f04f 0300 	mov.w	r3, #0
 8004aba:	018b      	lsls	r3, r1, #6
 8004abc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004ac0:	0182      	lsls	r2, r0, #6
 8004ac2:	1a12      	subs	r2, r2, r0
 8004ac4:	eb63 0301 	sbc.w	r3, r3, r1
 8004ac8:	f04f 0000 	mov.w	r0, #0
 8004acc:	f04f 0100 	mov.w	r1, #0
 8004ad0:	00d9      	lsls	r1, r3, #3
 8004ad2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ad6:	00d0      	lsls	r0, r2, #3
 8004ad8:	4602      	mov	r2, r0
 8004ada:	460b      	mov	r3, r1
 8004adc:	eb12 0208 	adds.w	r2, r2, r8
 8004ae0:	eb43 0309 	adc.w	r3, r3, r9
 8004ae4:	f04f 0000 	mov.w	r0, #0
 8004ae8:	f04f 0100 	mov.w	r1, #0
 8004aec:	0259      	lsls	r1, r3, #9
 8004aee:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004af2:	0250      	lsls	r0, r2, #9
 8004af4:	4602      	mov	r2, r0
 8004af6:	460b      	mov	r3, r1
 8004af8:	4610      	mov	r0, r2
 8004afa:	4619      	mov	r1, r3
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	461a      	mov	r2, r3
 8004b00:	f04f 0300 	mov.w	r3, #0
 8004b04:	f7fc f8c0 	bl	8000c88 <__aeabi_uldivmod>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	460b      	mov	r3, r1
 8004b0c:	4613      	mov	r3, r2
 8004b0e:	61fb      	str	r3, [r7, #28]
 8004b10:	e04a      	b.n	8004ba8 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b12:	4b30      	ldr	r3, [pc, #192]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x358>)
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	099b      	lsrs	r3, r3, #6
 8004b18:	461a      	mov	r2, r3
 8004b1a:	f04f 0300 	mov.w	r3, #0
 8004b1e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004b22:	f04f 0100 	mov.w	r1, #0
 8004b26:	ea02 0400 	and.w	r4, r2, r0
 8004b2a:	ea03 0501 	and.w	r5, r3, r1
 8004b2e:	4620      	mov	r0, r4
 8004b30:	4629      	mov	r1, r5
 8004b32:	f04f 0200 	mov.w	r2, #0
 8004b36:	f04f 0300 	mov.w	r3, #0
 8004b3a:	014b      	lsls	r3, r1, #5
 8004b3c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004b40:	0142      	lsls	r2, r0, #5
 8004b42:	4610      	mov	r0, r2
 8004b44:	4619      	mov	r1, r3
 8004b46:	1b00      	subs	r0, r0, r4
 8004b48:	eb61 0105 	sbc.w	r1, r1, r5
 8004b4c:	f04f 0200 	mov.w	r2, #0
 8004b50:	f04f 0300 	mov.w	r3, #0
 8004b54:	018b      	lsls	r3, r1, #6
 8004b56:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004b5a:	0182      	lsls	r2, r0, #6
 8004b5c:	1a12      	subs	r2, r2, r0
 8004b5e:	eb63 0301 	sbc.w	r3, r3, r1
 8004b62:	f04f 0000 	mov.w	r0, #0
 8004b66:	f04f 0100 	mov.w	r1, #0
 8004b6a:	00d9      	lsls	r1, r3, #3
 8004b6c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b70:	00d0      	lsls	r0, r2, #3
 8004b72:	4602      	mov	r2, r0
 8004b74:	460b      	mov	r3, r1
 8004b76:	1912      	adds	r2, r2, r4
 8004b78:	eb45 0303 	adc.w	r3, r5, r3
 8004b7c:	f04f 0000 	mov.w	r0, #0
 8004b80:	f04f 0100 	mov.w	r1, #0
 8004b84:	0299      	lsls	r1, r3, #10
 8004b86:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004b8a:	0290      	lsls	r0, r2, #10
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	460b      	mov	r3, r1
 8004b90:	4610      	mov	r0, r2
 8004b92:	4619      	mov	r1, r3
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	461a      	mov	r2, r3
 8004b98:	f04f 0300 	mov.w	r3, #0
 8004b9c:	f7fc f874 	bl	8000c88 <__aeabi_uldivmod>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	460b      	mov	r3, r1
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004ba8:	4b0a      	ldr	r3, [pc, #40]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x358>)
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	0f1b      	lsrs	r3, r3, #28
 8004bae:	f003 0307 	and.w	r3, r3, #7
 8004bb2:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8004bb4:	69fa      	ldr	r2, [r7, #28]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bbc:	61bb      	str	r3, [r7, #24]
      break;
 8004bbe:	e002      	b.n	8004bc6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004bc0:	4b05      	ldr	r3, [pc, #20]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004bc2:	61bb      	str	r3, [r7, #24]
      break;
 8004bc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bc6:	69bb      	ldr	r3, [r7, #24]
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3720      	adds	r7, #32
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bd2:	bf00      	nop
 8004bd4:	40023800 	.word	0x40023800
 8004bd8:	00f42400 	.word	0x00f42400
 8004bdc:	007a1200 	.word	0x007a1200

08004be0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b086      	sub	sp, #24
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d101      	bne.n	8004bf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e28d      	b.n	800510e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0301 	and.w	r3, r3, #1
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	f000 8083 	beq.w	8004d06 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004c00:	4b94      	ldr	r3, [pc, #592]	; (8004e54 <HAL_RCC_OscConfig+0x274>)
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	f003 030c 	and.w	r3, r3, #12
 8004c08:	2b04      	cmp	r3, #4
 8004c0a:	d019      	beq.n	8004c40 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004c0c:	4b91      	ldr	r3, [pc, #580]	; (8004e54 <HAL_RCC_OscConfig+0x274>)
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004c14:	2b08      	cmp	r3, #8
 8004c16:	d106      	bne.n	8004c26 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004c18:	4b8e      	ldr	r3, [pc, #568]	; (8004e54 <HAL_RCC_OscConfig+0x274>)
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c24:	d00c      	beq.n	8004c40 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c26:	4b8b      	ldr	r3, [pc, #556]	; (8004e54 <HAL_RCC_OscConfig+0x274>)
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004c2e:	2b0c      	cmp	r3, #12
 8004c30:	d112      	bne.n	8004c58 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c32:	4b88      	ldr	r3, [pc, #544]	; (8004e54 <HAL_RCC_OscConfig+0x274>)
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c3e:	d10b      	bne.n	8004c58 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c40:	4b84      	ldr	r3, [pc, #528]	; (8004e54 <HAL_RCC_OscConfig+0x274>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d05b      	beq.n	8004d04 <HAL_RCC_OscConfig+0x124>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d157      	bne.n	8004d04 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e25a      	b.n	800510e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c60:	d106      	bne.n	8004c70 <HAL_RCC_OscConfig+0x90>
 8004c62:	4b7c      	ldr	r3, [pc, #496]	; (8004e54 <HAL_RCC_OscConfig+0x274>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a7b      	ldr	r2, [pc, #492]	; (8004e54 <HAL_RCC_OscConfig+0x274>)
 8004c68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c6c:	6013      	str	r3, [r2, #0]
 8004c6e:	e01d      	b.n	8004cac <HAL_RCC_OscConfig+0xcc>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c78:	d10c      	bne.n	8004c94 <HAL_RCC_OscConfig+0xb4>
 8004c7a:	4b76      	ldr	r3, [pc, #472]	; (8004e54 <HAL_RCC_OscConfig+0x274>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a75      	ldr	r2, [pc, #468]	; (8004e54 <HAL_RCC_OscConfig+0x274>)
 8004c80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c84:	6013      	str	r3, [r2, #0]
 8004c86:	4b73      	ldr	r3, [pc, #460]	; (8004e54 <HAL_RCC_OscConfig+0x274>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a72      	ldr	r2, [pc, #456]	; (8004e54 <HAL_RCC_OscConfig+0x274>)
 8004c8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c90:	6013      	str	r3, [r2, #0]
 8004c92:	e00b      	b.n	8004cac <HAL_RCC_OscConfig+0xcc>
 8004c94:	4b6f      	ldr	r3, [pc, #444]	; (8004e54 <HAL_RCC_OscConfig+0x274>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a6e      	ldr	r2, [pc, #440]	; (8004e54 <HAL_RCC_OscConfig+0x274>)
 8004c9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c9e:	6013      	str	r3, [r2, #0]
 8004ca0:	4b6c      	ldr	r3, [pc, #432]	; (8004e54 <HAL_RCC_OscConfig+0x274>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a6b      	ldr	r2, [pc, #428]	; (8004e54 <HAL_RCC_OscConfig+0x274>)
 8004ca6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004caa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d013      	beq.n	8004cdc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cb4:	f7fe f8fe 	bl	8002eb4 <HAL_GetTick>
 8004cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cba:	e008      	b.n	8004cce <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cbc:	f7fe f8fa 	bl	8002eb4 <HAL_GetTick>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	2b64      	cmp	r3, #100	; 0x64
 8004cc8:	d901      	bls.n	8004cce <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e21f      	b.n	800510e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cce:	4b61      	ldr	r3, [pc, #388]	; (8004e54 <HAL_RCC_OscConfig+0x274>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d0f0      	beq.n	8004cbc <HAL_RCC_OscConfig+0xdc>
 8004cda:	e014      	b.n	8004d06 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cdc:	f7fe f8ea 	bl	8002eb4 <HAL_GetTick>
 8004ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ce2:	e008      	b.n	8004cf6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ce4:	f7fe f8e6 	bl	8002eb4 <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	2b64      	cmp	r3, #100	; 0x64
 8004cf0:	d901      	bls.n	8004cf6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e20b      	b.n	800510e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cf6:	4b57      	ldr	r3, [pc, #348]	; (8004e54 <HAL_RCC_OscConfig+0x274>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d1f0      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x104>
 8004d02:	e000      	b.n	8004d06 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0302 	and.w	r3, r3, #2
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d06f      	beq.n	8004df2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004d12:	4b50      	ldr	r3, [pc, #320]	; (8004e54 <HAL_RCC_OscConfig+0x274>)
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	f003 030c 	and.w	r3, r3, #12
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d017      	beq.n	8004d4e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004d1e:	4b4d      	ldr	r3, [pc, #308]	; (8004e54 <HAL_RCC_OscConfig+0x274>)
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004d26:	2b08      	cmp	r3, #8
 8004d28:	d105      	bne.n	8004d36 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004d2a:	4b4a      	ldr	r3, [pc, #296]	; (8004e54 <HAL_RCC_OscConfig+0x274>)
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00b      	beq.n	8004d4e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d36:	4b47      	ldr	r3, [pc, #284]	; (8004e54 <HAL_RCC_OscConfig+0x274>)
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004d3e:	2b0c      	cmp	r3, #12
 8004d40:	d11c      	bne.n	8004d7c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d42:	4b44      	ldr	r3, [pc, #272]	; (8004e54 <HAL_RCC_OscConfig+0x274>)
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d116      	bne.n	8004d7c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d4e:	4b41      	ldr	r3, [pc, #260]	; (8004e54 <HAL_RCC_OscConfig+0x274>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0302 	and.w	r3, r3, #2
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d005      	beq.n	8004d66 <HAL_RCC_OscConfig+0x186>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d001      	beq.n	8004d66 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e1d3      	b.n	800510e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d66:	4b3b      	ldr	r3, [pc, #236]	; (8004e54 <HAL_RCC_OscConfig+0x274>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	00db      	lsls	r3, r3, #3
 8004d74:	4937      	ldr	r1, [pc, #220]	; (8004e54 <HAL_RCC_OscConfig+0x274>)
 8004d76:	4313      	orrs	r3, r2
 8004d78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d7a:	e03a      	b.n	8004df2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d020      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d84:	4b34      	ldr	r3, [pc, #208]	; (8004e58 <HAL_RCC_OscConfig+0x278>)
 8004d86:	2201      	movs	r2, #1
 8004d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d8a:	f7fe f893 	bl	8002eb4 <HAL_GetTick>
 8004d8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d90:	e008      	b.n	8004da4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d92:	f7fe f88f 	bl	8002eb4 <HAL_GetTick>
 8004d96:	4602      	mov	r2, r0
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	d901      	bls.n	8004da4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	e1b4      	b.n	800510e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004da4:	4b2b      	ldr	r3, [pc, #172]	; (8004e54 <HAL_RCC_OscConfig+0x274>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 0302 	and.w	r3, r3, #2
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d0f0      	beq.n	8004d92 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004db0:	4b28      	ldr	r3, [pc, #160]	; (8004e54 <HAL_RCC_OscConfig+0x274>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	00db      	lsls	r3, r3, #3
 8004dbe:	4925      	ldr	r1, [pc, #148]	; (8004e54 <HAL_RCC_OscConfig+0x274>)
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	600b      	str	r3, [r1, #0]
 8004dc4:	e015      	b.n	8004df2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004dc6:	4b24      	ldr	r3, [pc, #144]	; (8004e58 <HAL_RCC_OscConfig+0x278>)
 8004dc8:	2200      	movs	r2, #0
 8004dca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dcc:	f7fe f872 	bl	8002eb4 <HAL_GetTick>
 8004dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dd2:	e008      	b.n	8004de6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004dd4:	f7fe f86e 	bl	8002eb4 <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d901      	bls.n	8004de6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e193      	b.n	800510e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004de6:	4b1b      	ldr	r3, [pc, #108]	; (8004e54 <HAL_RCC_OscConfig+0x274>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0302 	and.w	r3, r3, #2
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d1f0      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0308 	and.w	r3, r3, #8
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d036      	beq.n	8004e6c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d016      	beq.n	8004e34 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e06:	4b15      	ldr	r3, [pc, #84]	; (8004e5c <HAL_RCC_OscConfig+0x27c>)
 8004e08:	2201      	movs	r2, #1
 8004e0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e0c:	f7fe f852 	bl	8002eb4 <HAL_GetTick>
 8004e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e12:	e008      	b.n	8004e26 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e14:	f7fe f84e 	bl	8002eb4 <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d901      	bls.n	8004e26 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e173      	b.n	800510e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e26:	4b0b      	ldr	r3, [pc, #44]	; (8004e54 <HAL_RCC_OscConfig+0x274>)
 8004e28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e2a:	f003 0302 	and.w	r3, r3, #2
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d0f0      	beq.n	8004e14 <HAL_RCC_OscConfig+0x234>
 8004e32:	e01b      	b.n	8004e6c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e34:	4b09      	ldr	r3, [pc, #36]	; (8004e5c <HAL_RCC_OscConfig+0x27c>)
 8004e36:	2200      	movs	r2, #0
 8004e38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e3a:	f7fe f83b 	bl	8002eb4 <HAL_GetTick>
 8004e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e40:	e00e      	b.n	8004e60 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e42:	f7fe f837 	bl	8002eb4 <HAL_GetTick>
 8004e46:	4602      	mov	r2, r0
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d907      	bls.n	8004e60 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004e50:	2303      	movs	r3, #3
 8004e52:	e15c      	b.n	800510e <HAL_RCC_OscConfig+0x52e>
 8004e54:	40023800 	.word	0x40023800
 8004e58:	42470000 	.word	0x42470000
 8004e5c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e60:	4b8a      	ldr	r3, [pc, #552]	; (800508c <HAL_RCC_OscConfig+0x4ac>)
 8004e62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e64:	f003 0302 	and.w	r3, r3, #2
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d1ea      	bne.n	8004e42 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 0304 	and.w	r3, r3, #4
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	f000 8097 	beq.w	8004fa8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e7e:	4b83      	ldr	r3, [pc, #524]	; (800508c <HAL_RCC_OscConfig+0x4ac>)
 8004e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d10f      	bne.n	8004eaa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	60bb      	str	r3, [r7, #8]
 8004e8e:	4b7f      	ldr	r3, [pc, #508]	; (800508c <HAL_RCC_OscConfig+0x4ac>)
 8004e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e92:	4a7e      	ldr	r2, [pc, #504]	; (800508c <HAL_RCC_OscConfig+0x4ac>)
 8004e94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e98:	6413      	str	r3, [r2, #64]	; 0x40
 8004e9a:	4b7c      	ldr	r3, [pc, #496]	; (800508c <HAL_RCC_OscConfig+0x4ac>)
 8004e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ea2:	60bb      	str	r3, [r7, #8]
 8004ea4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eaa:	4b79      	ldr	r3, [pc, #484]	; (8005090 <HAL_RCC_OscConfig+0x4b0>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d118      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004eb6:	4b76      	ldr	r3, [pc, #472]	; (8005090 <HAL_RCC_OscConfig+0x4b0>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a75      	ldr	r2, [pc, #468]	; (8005090 <HAL_RCC_OscConfig+0x4b0>)
 8004ebc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ec0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ec2:	f7fd fff7 	bl	8002eb4 <HAL_GetTick>
 8004ec6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ec8:	e008      	b.n	8004edc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004eca:	f7fd fff3 	bl	8002eb4 <HAL_GetTick>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	2b02      	cmp	r3, #2
 8004ed6:	d901      	bls.n	8004edc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e118      	b.n	800510e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004edc:	4b6c      	ldr	r3, [pc, #432]	; (8005090 <HAL_RCC_OscConfig+0x4b0>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d0f0      	beq.n	8004eca <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d106      	bne.n	8004efe <HAL_RCC_OscConfig+0x31e>
 8004ef0:	4b66      	ldr	r3, [pc, #408]	; (800508c <HAL_RCC_OscConfig+0x4ac>)
 8004ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ef4:	4a65      	ldr	r2, [pc, #404]	; (800508c <HAL_RCC_OscConfig+0x4ac>)
 8004ef6:	f043 0301 	orr.w	r3, r3, #1
 8004efa:	6713      	str	r3, [r2, #112]	; 0x70
 8004efc:	e01c      	b.n	8004f38 <HAL_RCC_OscConfig+0x358>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	2b05      	cmp	r3, #5
 8004f04:	d10c      	bne.n	8004f20 <HAL_RCC_OscConfig+0x340>
 8004f06:	4b61      	ldr	r3, [pc, #388]	; (800508c <HAL_RCC_OscConfig+0x4ac>)
 8004f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f0a:	4a60      	ldr	r2, [pc, #384]	; (800508c <HAL_RCC_OscConfig+0x4ac>)
 8004f0c:	f043 0304 	orr.w	r3, r3, #4
 8004f10:	6713      	str	r3, [r2, #112]	; 0x70
 8004f12:	4b5e      	ldr	r3, [pc, #376]	; (800508c <HAL_RCC_OscConfig+0x4ac>)
 8004f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f16:	4a5d      	ldr	r2, [pc, #372]	; (800508c <HAL_RCC_OscConfig+0x4ac>)
 8004f18:	f043 0301 	orr.w	r3, r3, #1
 8004f1c:	6713      	str	r3, [r2, #112]	; 0x70
 8004f1e:	e00b      	b.n	8004f38 <HAL_RCC_OscConfig+0x358>
 8004f20:	4b5a      	ldr	r3, [pc, #360]	; (800508c <HAL_RCC_OscConfig+0x4ac>)
 8004f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f24:	4a59      	ldr	r2, [pc, #356]	; (800508c <HAL_RCC_OscConfig+0x4ac>)
 8004f26:	f023 0301 	bic.w	r3, r3, #1
 8004f2a:	6713      	str	r3, [r2, #112]	; 0x70
 8004f2c:	4b57      	ldr	r3, [pc, #348]	; (800508c <HAL_RCC_OscConfig+0x4ac>)
 8004f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f30:	4a56      	ldr	r2, [pc, #344]	; (800508c <HAL_RCC_OscConfig+0x4ac>)
 8004f32:	f023 0304 	bic.w	r3, r3, #4
 8004f36:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d015      	beq.n	8004f6c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f40:	f7fd ffb8 	bl	8002eb4 <HAL_GetTick>
 8004f44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f46:	e00a      	b.n	8004f5e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f48:	f7fd ffb4 	bl	8002eb4 <HAL_GetTick>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d901      	bls.n	8004f5e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e0d7      	b.n	800510e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f5e:	4b4b      	ldr	r3, [pc, #300]	; (800508c <HAL_RCC_OscConfig+0x4ac>)
 8004f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f62:	f003 0302 	and.w	r3, r3, #2
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d0ee      	beq.n	8004f48 <HAL_RCC_OscConfig+0x368>
 8004f6a:	e014      	b.n	8004f96 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f6c:	f7fd ffa2 	bl	8002eb4 <HAL_GetTick>
 8004f70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f72:	e00a      	b.n	8004f8a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f74:	f7fd ff9e 	bl	8002eb4 <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d901      	bls.n	8004f8a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	e0c1      	b.n	800510e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f8a:	4b40      	ldr	r3, [pc, #256]	; (800508c <HAL_RCC_OscConfig+0x4ac>)
 8004f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f8e:	f003 0302 	and.w	r3, r3, #2
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d1ee      	bne.n	8004f74 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f96:	7dfb      	ldrb	r3, [r7, #23]
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d105      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f9c:	4b3b      	ldr	r3, [pc, #236]	; (800508c <HAL_RCC_OscConfig+0x4ac>)
 8004f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa0:	4a3a      	ldr	r2, [pc, #232]	; (800508c <HAL_RCC_OscConfig+0x4ac>)
 8004fa2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fa6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	699b      	ldr	r3, [r3, #24]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	f000 80ad 	beq.w	800510c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004fb2:	4b36      	ldr	r3, [pc, #216]	; (800508c <HAL_RCC_OscConfig+0x4ac>)
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f003 030c 	and.w	r3, r3, #12
 8004fba:	2b08      	cmp	r3, #8
 8004fbc:	d060      	beq.n	8005080 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	699b      	ldr	r3, [r3, #24]
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	d145      	bne.n	8005052 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fc6:	4b33      	ldr	r3, [pc, #204]	; (8005094 <HAL_RCC_OscConfig+0x4b4>)
 8004fc8:	2200      	movs	r2, #0
 8004fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fcc:	f7fd ff72 	bl	8002eb4 <HAL_GetTick>
 8004fd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fd2:	e008      	b.n	8004fe6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fd4:	f7fd ff6e 	bl	8002eb4 <HAL_GetTick>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	d901      	bls.n	8004fe6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e093      	b.n	800510e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fe6:	4b29      	ldr	r3, [pc, #164]	; (800508c <HAL_RCC_OscConfig+0x4ac>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1f0      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	69da      	ldr	r2, [r3, #28]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a1b      	ldr	r3, [r3, #32]
 8004ffa:	431a      	orrs	r2, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005000:	019b      	lsls	r3, r3, #6
 8005002:	431a      	orrs	r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005008:	085b      	lsrs	r3, r3, #1
 800500a:	3b01      	subs	r3, #1
 800500c:	041b      	lsls	r3, r3, #16
 800500e:	431a      	orrs	r2, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005014:	061b      	lsls	r3, r3, #24
 8005016:	431a      	orrs	r2, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800501c:	071b      	lsls	r3, r3, #28
 800501e:	491b      	ldr	r1, [pc, #108]	; (800508c <HAL_RCC_OscConfig+0x4ac>)
 8005020:	4313      	orrs	r3, r2
 8005022:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005024:	4b1b      	ldr	r3, [pc, #108]	; (8005094 <HAL_RCC_OscConfig+0x4b4>)
 8005026:	2201      	movs	r2, #1
 8005028:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800502a:	f7fd ff43 	bl	8002eb4 <HAL_GetTick>
 800502e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005030:	e008      	b.n	8005044 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005032:	f7fd ff3f 	bl	8002eb4 <HAL_GetTick>
 8005036:	4602      	mov	r2, r0
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	2b02      	cmp	r3, #2
 800503e:	d901      	bls.n	8005044 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005040:	2303      	movs	r3, #3
 8005042:	e064      	b.n	800510e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005044:	4b11      	ldr	r3, [pc, #68]	; (800508c <HAL_RCC_OscConfig+0x4ac>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800504c:	2b00      	cmp	r3, #0
 800504e:	d0f0      	beq.n	8005032 <HAL_RCC_OscConfig+0x452>
 8005050:	e05c      	b.n	800510c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005052:	4b10      	ldr	r3, [pc, #64]	; (8005094 <HAL_RCC_OscConfig+0x4b4>)
 8005054:	2200      	movs	r2, #0
 8005056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005058:	f7fd ff2c 	bl	8002eb4 <HAL_GetTick>
 800505c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800505e:	e008      	b.n	8005072 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005060:	f7fd ff28 	bl	8002eb4 <HAL_GetTick>
 8005064:	4602      	mov	r2, r0
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	2b02      	cmp	r3, #2
 800506c:	d901      	bls.n	8005072 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e04d      	b.n	800510e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005072:	4b06      	ldr	r3, [pc, #24]	; (800508c <HAL_RCC_OscConfig+0x4ac>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800507a:	2b00      	cmp	r3, #0
 800507c:	d1f0      	bne.n	8005060 <HAL_RCC_OscConfig+0x480>
 800507e:	e045      	b.n	800510c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	699b      	ldr	r3, [r3, #24]
 8005084:	2b01      	cmp	r3, #1
 8005086:	d107      	bne.n	8005098 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e040      	b.n	800510e <HAL_RCC_OscConfig+0x52e>
 800508c:	40023800 	.word	0x40023800
 8005090:	40007000 	.word	0x40007000
 8005094:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005098:	4b1f      	ldr	r3, [pc, #124]	; (8005118 <HAL_RCC_OscConfig+0x538>)
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	699b      	ldr	r3, [r3, #24]
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d030      	beq.n	8005108 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d129      	bne.n	8005108 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050be:	429a      	cmp	r2, r3
 80050c0:	d122      	bne.n	8005108 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80050c8:	4013      	ands	r3, r2
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80050ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d119      	bne.n	8005108 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050de:	085b      	lsrs	r3, r3, #1
 80050e0:	3b01      	subs	r3, #1
 80050e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d10f      	bne.n	8005108 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d107      	bne.n	8005108 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005102:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005104:	429a      	cmp	r2, r3
 8005106:	d001      	beq.n	800510c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e000      	b.n	800510e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800510c:	2300      	movs	r3, #0
}
 800510e:	4618      	mov	r0, r3
 8005110:	3718      	adds	r7, #24
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	40023800 	.word	0x40023800

0800511c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d101      	bne.n	800512e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e03f      	b.n	80051ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005134:	b2db      	uxtb	r3, r3
 8005136:	2b00      	cmp	r3, #0
 8005138:	d106      	bne.n	8005148 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f7fd fcdc 	bl	8002b00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2224      	movs	r2, #36	; 0x24
 800514c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68da      	ldr	r2, [r3, #12]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800515e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 f929 	bl	80053b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	691a      	ldr	r2, [r3, #16]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005174:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	695a      	ldr	r2, [r3, #20]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005184:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68da      	ldr	r2, [r3, #12]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005194:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2220      	movs	r2, #32
 80051a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2220      	movs	r2, #32
 80051a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80051ac:	2300      	movs	r3, #0
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3708      	adds	r7, #8
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}

080051b6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051b6:	b580      	push	{r7, lr}
 80051b8:	b08a      	sub	sp, #40	; 0x28
 80051ba:	af02      	add	r7, sp, #8
 80051bc:	60f8      	str	r0, [r7, #12]
 80051be:	60b9      	str	r1, [r7, #8]
 80051c0:	603b      	str	r3, [r7, #0]
 80051c2:	4613      	mov	r3, r2
 80051c4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80051c6:	2300      	movs	r3, #0
 80051c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	2b20      	cmp	r3, #32
 80051d4:	d17c      	bne.n	80052d0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d002      	beq.n	80051e2 <HAL_UART_Transmit+0x2c>
 80051dc:	88fb      	ldrh	r3, [r7, #6]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d101      	bne.n	80051e6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e075      	b.n	80052d2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d101      	bne.n	80051f4 <HAL_UART_Transmit+0x3e>
 80051f0:	2302      	movs	r3, #2
 80051f2:	e06e      	b.n	80052d2 <HAL_UART_Transmit+0x11c>
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2200      	movs	r2, #0
 8005200:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2221      	movs	r2, #33	; 0x21
 8005206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800520a:	f7fd fe53 	bl	8002eb4 <HAL_GetTick>
 800520e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	88fa      	ldrh	r2, [r7, #6]
 8005214:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	88fa      	ldrh	r2, [r7, #6]
 800521a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005224:	d108      	bne.n	8005238 <HAL_UART_Transmit+0x82>
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d104      	bne.n	8005238 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800522e:	2300      	movs	r3, #0
 8005230:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	61bb      	str	r3, [r7, #24]
 8005236:	e003      	b.n	8005240 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800523c:	2300      	movs	r3, #0
 800523e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2200      	movs	r2, #0
 8005244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005248:	e02a      	b.n	80052a0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	9300      	str	r3, [sp, #0]
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	2200      	movs	r2, #0
 8005252:	2180      	movs	r1, #128	; 0x80
 8005254:	68f8      	ldr	r0, [r7, #12]
 8005256:	f000 f840 	bl	80052da <UART_WaitOnFlagUntilTimeout>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d001      	beq.n	8005264 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	e036      	b.n	80052d2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d10b      	bne.n	8005282 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	881b      	ldrh	r3, [r3, #0]
 800526e:	461a      	mov	r2, r3
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005278:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	3302      	adds	r3, #2
 800527e:	61bb      	str	r3, [r7, #24]
 8005280:	e007      	b.n	8005292 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	781a      	ldrb	r2, [r3, #0]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	3301      	adds	r3, #1
 8005290:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005296:	b29b      	uxth	r3, r3
 8005298:	3b01      	subs	r3, #1
 800529a:	b29a      	uxth	r2, r3
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d1cf      	bne.n	800524a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	9300      	str	r3, [sp, #0]
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	2200      	movs	r2, #0
 80052b2:	2140      	movs	r1, #64	; 0x40
 80052b4:	68f8      	ldr	r0, [r7, #12]
 80052b6:	f000 f810 	bl	80052da <UART_WaitOnFlagUntilTimeout>
 80052ba:	4603      	mov	r3, r0
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d001      	beq.n	80052c4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80052c0:	2303      	movs	r3, #3
 80052c2:	e006      	b.n	80052d2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2220      	movs	r2, #32
 80052c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80052cc:	2300      	movs	r3, #0
 80052ce:	e000      	b.n	80052d2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80052d0:	2302      	movs	r3, #2
  }
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3720      	adds	r7, #32
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}

080052da <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80052da:	b580      	push	{r7, lr}
 80052dc:	b090      	sub	sp, #64	; 0x40
 80052de:	af00      	add	r7, sp, #0
 80052e0:	60f8      	str	r0, [r7, #12]
 80052e2:	60b9      	str	r1, [r7, #8]
 80052e4:	603b      	str	r3, [r7, #0]
 80052e6:	4613      	mov	r3, r2
 80052e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052ea:	e050      	b.n	800538e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052f2:	d04c      	beq.n	800538e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80052f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d007      	beq.n	800530a <UART_WaitOnFlagUntilTimeout+0x30>
 80052fa:	f7fd fddb 	bl	8002eb4 <HAL_GetTick>
 80052fe:	4602      	mov	r2, r0
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005306:	429a      	cmp	r2, r3
 8005308:	d241      	bcs.n	800538e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	330c      	adds	r3, #12
 8005310:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005314:	e853 3f00 	ldrex	r3, [r3]
 8005318:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800531a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005320:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	330c      	adds	r3, #12
 8005328:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800532a:	637a      	str	r2, [r7, #52]	; 0x34
 800532c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005330:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005332:	e841 2300 	strex	r3, r2, [r1]
 8005336:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800533a:	2b00      	cmp	r3, #0
 800533c:	d1e5      	bne.n	800530a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	3314      	adds	r3, #20
 8005344:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	e853 3f00 	ldrex	r3, [r3]
 800534c:	613b      	str	r3, [r7, #16]
   return(result);
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	f023 0301 	bic.w	r3, r3, #1
 8005354:	63bb      	str	r3, [r7, #56]	; 0x38
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	3314      	adds	r3, #20
 800535c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800535e:	623a      	str	r2, [r7, #32]
 8005360:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005362:	69f9      	ldr	r1, [r7, #28]
 8005364:	6a3a      	ldr	r2, [r7, #32]
 8005366:	e841 2300 	strex	r3, r2, [r1]
 800536a:	61bb      	str	r3, [r7, #24]
   return(result);
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d1e5      	bne.n	800533e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2220      	movs	r2, #32
 8005376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2220      	movs	r2, #32
 800537e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2200      	movs	r2, #0
 8005386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800538a:	2303      	movs	r3, #3
 800538c:	e00f      	b.n	80053ae <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	4013      	ands	r3, r2
 8005398:	68ba      	ldr	r2, [r7, #8]
 800539a:	429a      	cmp	r2, r3
 800539c:	bf0c      	ite	eq
 800539e:	2301      	moveq	r3, #1
 80053a0:	2300      	movne	r3, #0
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	461a      	mov	r2, r3
 80053a6:	79fb      	ldrb	r3, [r7, #7]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d09f      	beq.n	80052ec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3740      	adds	r7, #64	; 0x40
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
	...

080053b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053bc:	b09f      	sub	sp, #124	; 0x7c
 80053be:	af00      	add	r7, sp, #0
 80053c0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	691b      	ldr	r3, [r3, #16]
 80053c8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80053cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053ce:	68d9      	ldr	r1, [r3, #12]
 80053d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	ea40 0301 	orr.w	r3, r0, r1
 80053d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80053da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053dc:	689a      	ldr	r2, [r3, #8]
 80053de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	431a      	orrs	r2, r3
 80053e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053e6:	695b      	ldr	r3, [r3, #20]
 80053e8:	431a      	orrs	r2, r3
 80053ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053ec:	69db      	ldr	r3, [r3, #28]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80053f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80053fc:	f021 010c 	bic.w	r1, r1, #12
 8005400:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005406:	430b      	orrs	r3, r1
 8005408:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800540a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	695b      	ldr	r3, [r3, #20]
 8005410:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005414:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005416:	6999      	ldr	r1, [r3, #24]
 8005418:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	ea40 0301 	orr.w	r3, r0, r1
 8005420:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005422:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	4bc5      	ldr	r3, [pc, #788]	; (800573c <UART_SetConfig+0x384>)
 8005428:	429a      	cmp	r2, r3
 800542a:	d004      	beq.n	8005436 <UART_SetConfig+0x7e>
 800542c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	4bc3      	ldr	r3, [pc, #780]	; (8005740 <UART_SetConfig+0x388>)
 8005432:	429a      	cmp	r2, r3
 8005434:	d103      	bne.n	800543e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005436:	f7ff fa0d 	bl	8004854 <HAL_RCC_GetPCLK2Freq>
 800543a:	6778      	str	r0, [r7, #116]	; 0x74
 800543c:	e002      	b.n	8005444 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800543e:	f7ff f9f5 	bl	800482c <HAL_RCC_GetPCLK1Freq>
 8005442:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005444:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005446:	69db      	ldr	r3, [r3, #28]
 8005448:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800544c:	f040 80b6 	bne.w	80055bc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005450:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005452:	461c      	mov	r4, r3
 8005454:	f04f 0500 	mov.w	r5, #0
 8005458:	4622      	mov	r2, r4
 800545a:	462b      	mov	r3, r5
 800545c:	1891      	adds	r1, r2, r2
 800545e:	6439      	str	r1, [r7, #64]	; 0x40
 8005460:	415b      	adcs	r3, r3
 8005462:	647b      	str	r3, [r7, #68]	; 0x44
 8005464:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005468:	1912      	adds	r2, r2, r4
 800546a:	eb45 0303 	adc.w	r3, r5, r3
 800546e:	f04f 0000 	mov.w	r0, #0
 8005472:	f04f 0100 	mov.w	r1, #0
 8005476:	00d9      	lsls	r1, r3, #3
 8005478:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800547c:	00d0      	lsls	r0, r2, #3
 800547e:	4602      	mov	r2, r0
 8005480:	460b      	mov	r3, r1
 8005482:	1911      	adds	r1, r2, r4
 8005484:	6639      	str	r1, [r7, #96]	; 0x60
 8005486:	416b      	adcs	r3, r5
 8005488:	667b      	str	r3, [r7, #100]	; 0x64
 800548a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	461a      	mov	r2, r3
 8005490:	f04f 0300 	mov.w	r3, #0
 8005494:	1891      	adds	r1, r2, r2
 8005496:	63b9      	str	r1, [r7, #56]	; 0x38
 8005498:	415b      	adcs	r3, r3
 800549a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800549c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80054a0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80054a4:	f7fb fbf0 	bl	8000c88 <__aeabi_uldivmod>
 80054a8:	4602      	mov	r2, r0
 80054aa:	460b      	mov	r3, r1
 80054ac:	4ba5      	ldr	r3, [pc, #660]	; (8005744 <UART_SetConfig+0x38c>)
 80054ae:	fba3 2302 	umull	r2, r3, r3, r2
 80054b2:	095b      	lsrs	r3, r3, #5
 80054b4:	011e      	lsls	r6, r3, #4
 80054b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054b8:	461c      	mov	r4, r3
 80054ba:	f04f 0500 	mov.w	r5, #0
 80054be:	4622      	mov	r2, r4
 80054c0:	462b      	mov	r3, r5
 80054c2:	1891      	adds	r1, r2, r2
 80054c4:	6339      	str	r1, [r7, #48]	; 0x30
 80054c6:	415b      	adcs	r3, r3
 80054c8:	637b      	str	r3, [r7, #52]	; 0x34
 80054ca:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80054ce:	1912      	adds	r2, r2, r4
 80054d0:	eb45 0303 	adc.w	r3, r5, r3
 80054d4:	f04f 0000 	mov.w	r0, #0
 80054d8:	f04f 0100 	mov.w	r1, #0
 80054dc:	00d9      	lsls	r1, r3, #3
 80054de:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80054e2:	00d0      	lsls	r0, r2, #3
 80054e4:	4602      	mov	r2, r0
 80054e6:	460b      	mov	r3, r1
 80054e8:	1911      	adds	r1, r2, r4
 80054ea:	65b9      	str	r1, [r7, #88]	; 0x58
 80054ec:	416b      	adcs	r3, r5
 80054ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	461a      	mov	r2, r3
 80054f6:	f04f 0300 	mov.w	r3, #0
 80054fa:	1891      	adds	r1, r2, r2
 80054fc:	62b9      	str	r1, [r7, #40]	; 0x28
 80054fe:	415b      	adcs	r3, r3
 8005500:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005502:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005506:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800550a:	f7fb fbbd 	bl	8000c88 <__aeabi_uldivmod>
 800550e:	4602      	mov	r2, r0
 8005510:	460b      	mov	r3, r1
 8005512:	4b8c      	ldr	r3, [pc, #560]	; (8005744 <UART_SetConfig+0x38c>)
 8005514:	fba3 1302 	umull	r1, r3, r3, r2
 8005518:	095b      	lsrs	r3, r3, #5
 800551a:	2164      	movs	r1, #100	; 0x64
 800551c:	fb01 f303 	mul.w	r3, r1, r3
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	00db      	lsls	r3, r3, #3
 8005524:	3332      	adds	r3, #50	; 0x32
 8005526:	4a87      	ldr	r2, [pc, #540]	; (8005744 <UART_SetConfig+0x38c>)
 8005528:	fba2 2303 	umull	r2, r3, r2, r3
 800552c:	095b      	lsrs	r3, r3, #5
 800552e:	005b      	lsls	r3, r3, #1
 8005530:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005534:	441e      	add	r6, r3
 8005536:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005538:	4618      	mov	r0, r3
 800553a:	f04f 0100 	mov.w	r1, #0
 800553e:	4602      	mov	r2, r0
 8005540:	460b      	mov	r3, r1
 8005542:	1894      	adds	r4, r2, r2
 8005544:	623c      	str	r4, [r7, #32]
 8005546:	415b      	adcs	r3, r3
 8005548:	627b      	str	r3, [r7, #36]	; 0x24
 800554a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800554e:	1812      	adds	r2, r2, r0
 8005550:	eb41 0303 	adc.w	r3, r1, r3
 8005554:	f04f 0400 	mov.w	r4, #0
 8005558:	f04f 0500 	mov.w	r5, #0
 800555c:	00dd      	lsls	r5, r3, #3
 800555e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005562:	00d4      	lsls	r4, r2, #3
 8005564:	4622      	mov	r2, r4
 8005566:	462b      	mov	r3, r5
 8005568:	1814      	adds	r4, r2, r0
 800556a:	653c      	str	r4, [r7, #80]	; 0x50
 800556c:	414b      	adcs	r3, r1
 800556e:	657b      	str	r3, [r7, #84]	; 0x54
 8005570:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	461a      	mov	r2, r3
 8005576:	f04f 0300 	mov.w	r3, #0
 800557a:	1891      	adds	r1, r2, r2
 800557c:	61b9      	str	r1, [r7, #24]
 800557e:	415b      	adcs	r3, r3
 8005580:	61fb      	str	r3, [r7, #28]
 8005582:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005586:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800558a:	f7fb fb7d 	bl	8000c88 <__aeabi_uldivmod>
 800558e:	4602      	mov	r2, r0
 8005590:	460b      	mov	r3, r1
 8005592:	4b6c      	ldr	r3, [pc, #432]	; (8005744 <UART_SetConfig+0x38c>)
 8005594:	fba3 1302 	umull	r1, r3, r3, r2
 8005598:	095b      	lsrs	r3, r3, #5
 800559a:	2164      	movs	r1, #100	; 0x64
 800559c:	fb01 f303 	mul.w	r3, r1, r3
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	00db      	lsls	r3, r3, #3
 80055a4:	3332      	adds	r3, #50	; 0x32
 80055a6:	4a67      	ldr	r2, [pc, #412]	; (8005744 <UART_SetConfig+0x38c>)
 80055a8:	fba2 2303 	umull	r2, r3, r2, r3
 80055ac:	095b      	lsrs	r3, r3, #5
 80055ae:	f003 0207 	and.w	r2, r3, #7
 80055b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4432      	add	r2, r6
 80055b8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80055ba:	e0b9      	b.n	8005730 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055be:	461c      	mov	r4, r3
 80055c0:	f04f 0500 	mov.w	r5, #0
 80055c4:	4622      	mov	r2, r4
 80055c6:	462b      	mov	r3, r5
 80055c8:	1891      	adds	r1, r2, r2
 80055ca:	6139      	str	r1, [r7, #16]
 80055cc:	415b      	adcs	r3, r3
 80055ce:	617b      	str	r3, [r7, #20]
 80055d0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80055d4:	1912      	adds	r2, r2, r4
 80055d6:	eb45 0303 	adc.w	r3, r5, r3
 80055da:	f04f 0000 	mov.w	r0, #0
 80055de:	f04f 0100 	mov.w	r1, #0
 80055e2:	00d9      	lsls	r1, r3, #3
 80055e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80055e8:	00d0      	lsls	r0, r2, #3
 80055ea:	4602      	mov	r2, r0
 80055ec:	460b      	mov	r3, r1
 80055ee:	eb12 0804 	adds.w	r8, r2, r4
 80055f2:	eb43 0905 	adc.w	r9, r3, r5
 80055f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	4618      	mov	r0, r3
 80055fc:	f04f 0100 	mov.w	r1, #0
 8005600:	f04f 0200 	mov.w	r2, #0
 8005604:	f04f 0300 	mov.w	r3, #0
 8005608:	008b      	lsls	r3, r1, #2
 800560a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800560e:	0082      	lsls	r2, r0, #2
 8005610:	4640      	mov	r0, r8
 8005612:	4649      	mov	r1, r9
 8005614:	f7fb fb38 	bl	8000c88 <__aeabi_uldivmod>
 8005618:	4602      	mov	r2, r0
 800561a:	460b      	mov	r3, r1
 800561c:	4b49      	ldr	r3, [pc, #292]	; (8005744 <UART_SetConfig+0x38c>)
 800561e:	fba3 2302 	umull	r2, r3, r3, r2
 8005622:	095b      	lsrs	r3, r3, #5
 8005624:	011e      	lsls	r6, r3, #4
 8005626:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005628:	4618      	mov	r0, r3
 800562a:	f04f 0100 	mov.w	r1, #0
 800562e:	4602      	mov	r2, r0
 8005630:	460b      	mov	r3, r1
 8005632:	1894      	adds	r4, r2, r2
 8005634:	60bc      	str	r4, [r7, #8]
 8005636:	415b      	adcs	r3, r3
 8005638:	60fb      	str	r3, [r7, #12]
 800563a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800563e:	1812      	adds	r2, r2, r0
 8005640:	eb41 0303 	adc.w	r3, r1, r3
 8005644:	f04f 0400 	mov.w	r4, #0
 8005648:	f04f 0500 	mov.w	r5, #0
 800564c:	00dd      	lsls	r5, r3, #3
 800564e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005652:	00d4      	lsls	r4, r2, #3
 8005654:	4622      	mov	r2, r4
 8005656:	462b      	mov	r3, r5
 8005658:	1814      	adds	r4, r2, r0
 800565a:	64bc      	str	r4, [r7, #72]	; 0x48
 800565c:	414b      	adcs	r3, r1
 800565e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005660:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	4618      	mov	r0, r3
 8005666:	f04f 0100 	mov.w	r1, #0
 800566a:	f04f 0200 	mov.w	r2, #0
 800566e:	f04f 0300 	mov.w	r3, #0
 8005672:	008b      	lsls	r3, r1, #2
 8005674:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005678:	0082      	lsls	r2, r0, #2
 800567a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800567e:	f7fb fb03 	bl	8000c88 <__aeabi_uldivmod>
 8005682:	4602      	mov	r2, r0
 8005684:	460b      	mov	r3, r1
 8005686:	4b2f      	ldr	r3, [pc, #188]	; (8005744 <UART_SetConfig+0x38c>)
 8005688:	fba3 1302 	umull	r1, r3, r3, r2
 800568c:	095b      	lsrs	r3, r3, #5
 800568e:	2164      	movs	r1, #100	; 0x64
 8005690:	fb01 f303 	mul.w	r3, r1, r3
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	011b      	lsls	r3, r3, #4
 8005698:	3332      	adds	r3, #50	; 0x32
 800569a:	4a2a      	ldr	r2, [pc, #168]	; (8005744 <UART_SetConfig+0x38c>)
 800569c:	fba2 2303 	umull	r2, r3, r2, r3
 80056a0:	095b      	lsrs	r3, r3, #5
 80056a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056a6:	441e      	add	r6, r3
 80056a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056aa:	4618      	mov	r0, r3
 80056ac:	f04f 0100 	mov.w	r1, #0
 80056b0:	4602      	mov	r2, r0
 80056b2:	460b      	mov	r3, r1
 80056b4:	1894      	adds	r4, r2, r2
 80056b6:	603c      	str	r4, [r7, #0]
 80056b8:	415b      	adcs	r3, r3
 80056ba:	607b      	str	r3, [r7, #4]
 80056bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056c0:	1812      	adds	r2, r2, r0
 80056c2:	eb41 0303 	adc.w	r3, r1, r3
 80056c6:	f04f 0400 	mov.w	r4, #0
 80056ca:	f04f 0500 	mov.w	r5, #0
 80056ce:	00dd      	lsls	r5, r3, #3
 80056d0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80056d4:	00d4      	lsls	r4, r2, #3
 80056d6:	4622      	mov	r2, r4
 80056d8:	462b      	mov	r3, r5
 80056da:	eb12 0a00 	adds.w	sl, r2, r0
 80056de:	eb43 0b01 	adc.w	fp, r3, r1
 80056e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	4618      	mov	r0, r3
 80056e8:	f04f 0100 	mov.w	r1, #0
 80056ec:	f04f 0200 	mov.w	r2, #0
 80056f0:	f04f 0300 	mov.w	r3, #0
 80056f4:	008b      	lsls	r3, r1, #2
 80056f6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80056fa:	0082      	lsls	r2, r0, #2
 80056fc:	4650      	mov	r0, sl
 80056fe:	4659      	mov	r1, fp
 8005700:	f7fb fac2 	bl	8000c88 <__aeabi_uldivmod>
 8005704:	4602      	mov	r2, r0
 8005706:	460b      	mov	r3, r1
 8005708:	4b0e      	ldr	r3, [pc, #56]	; (8005744 <UART_SetConfig+0x38c>)
 800570a:	fba3 1302 	umull	r1, r3, r3, r2
 800570e:	095b      	lsrs	r3, r3, #5
 8005710:	2164      	movs	r1, #100	; 0x64
 8005712:	fb01 f303 	mul.w	r3, r1, r3
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	011b      	lsls	r3, r3, #4
 800571a:	3332      	adds	r3, #50	; 0x32
 800571c:	4a09      	ldr	r2, [pc, #36]	; (8005744 <UART_SetConfig+0x38c>)
 800571e:	fba2 2303 	umull	r2, r3, r2, r3
 8005722:	095b      	lsrs	r3, r3, #5
 8005724:	f003 020f 	and.w	r2, r3, #15
 8005728:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4432      	add	r2, r6
 800572e:	609a      	str	r2, [r3, #8]
}
 8005730:	bf00      	nop
 8005732:	377c      	adds	r7, #124	; 0x7c
 8005734:	46bd      	mov	sp, r7
 8005736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800573a:	bf00      	nop
 800573c:	40011000 	.word	0x40011000
 8005740:	40011400 	.word	0x40011400
 8005744:	51eb851f 	.word	0x51eb851f

08005748 <__errno>:
 8005748:	4b01      	ldr	r3, [pc, #4]	; (8005750 <__errno+0x8>)
 800574a:	6818      	ldr	r0, [r3, #0]
 800574c:	4770      	bx	lr
 800574e:	bf00      	nop
 8005750:	20000014 	.word	0x20000014

08005754 <__libc_init_array>:
 8005754:	b570      	push	{r4, r5, r6, lr}
 8005756:	4d0d      	ldr	r5, [pc, #52]	; (800578c <__libc_init_array+0x38>)
 8005758:	4c0d      	ldr	r4, [pc, #52]	; (8005790 <__libc_init_array+0x3c>)
 800575a:	1b64      	subs	r4, r4, r5
 800575c:	10a4      	asrs	r4, r4, #2
 800575e:	2600      	movs	r6, #0
 8005760:	42a6      	cmp	r6, r4
 8005762:	d109      	bne.n	8005778 <__libc_init_array+0x24>
 8005764:	4d0b      	ldr	r5, [pc, #44]	; (8005794 <__libc_init_array+0x40>)
 8005766:	4c0c      	ldr	r4, [pc, #48]	; (8005798 <__libc_init_array+0x44>)
 8005768:	f004 f8bc 	bl	80098e4 <_init>
 800576c:	1b64      	subs	r4, r4, r5
 800576e:	10a4      	asrs	r4, r4, #2
 8005770:	2600      	movs	r6, #0
 8005772:	42a6      	cmp	r6, r4
 8005774:	d105      	bne.n	8005782 <__libc_init_array+0x2e>
 8005776:	bd70      	pop	{r4, r5, r6, pc}
 8005778:	f855 3b04 	ldr.w	r3, [r5], #4
 800577c:	4798      	blx	r3
 800577e:	3601      	adds	r6, #1
 8005780:	e7ee      	b.n	8005760 <__libc_init_array+0xc>
 8005782:	f855 3b04 	ldr.w	r3, [r5], #4
 8005786:	4798      	blx	r3
 8005788:	3601      	adds	r6, #1
 800578a:	e7f2      	b.n	8005772 <__libc_init_array+0x1e>
 800578c:	0800a130 	.word	0x0800a130
 8005790:	0800a130 	.word	0x0800a130
 8005794:	0800a130 	.word	0x0800a130
 8005798:	0800a134 	.word	0x0800a134

0800579c <memset>:
 800579c:	4402      	add	r2, r0
 800579e:	4603      	mov	r3, r0
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d100      	bne.n	80057a6 <memset+0xa>
 80057a4:	4770      	bx	lr
 80057a6:	f803 1b01 	strb.w	r1, [r3], #1
 80057aa:	e7f9      	b.n	80057a0 <memset+0x4>

080057ac <__cvt>:
 80057ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057b0:	ec55 4b10 	vmov	r4, r5, d0
 80057b4:	2d00      	cmp	r5, #0
 80057b6:	460e      	mov	r6, r1
 80057b8:	4619      	mov	r1, r3
 80057ba:	462b      	mov	r3, r5
 80057bc:	bfbb      	ittet	lt
 80057be:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80057c2:	461d      	movlt	r5, r3
 80057c4:	2300      	movge	r3, #0
 80057c6:	232d      	movlt	r3, #45	; 0x2d
 80057c8:	700b      	strb	r3, [r1, #0]
 80057ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057cc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80057d0:	4691      	mov	r9, r2
 80057d2:	f023 0820 	bic.w	r8, r3, #32
 80057d6:	bfbc      	itt	lt
 80057d8:	4622      	movlt	r2, r4
 80057da:	4614      	movlt	r4, r2
 80057dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80057e0:	d005      	beq.n	80057ee <__cvt+0x42>
 80057e2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80057e6:	d100      	bne.n	80057ea <__cvt+0x3e>
 80057e8:	3601      	adds	r6, #1
 80057ea:	2102      	movs	r1, #2
 80057ec:	e000      	b.n	80057f0 <__cvt+0x44>
 80057ee:	2103      	movs	r1, #3
 80057f0:	ab03      	add	r3, sp, #12
 80057f2:	9301      	str	r3, [sp, #4]
 80057f4:	ab02      	add	r3, sp, #8
 80057f6:	9300      	str	r3, [sp, #0]
 80057f8:	ec45 4b10 	vmov	d0, r4, r5
 80057fc:	4653      	mov	r3, sl
 80057fe:	4632      	mov	r2, r6
 8005800:	f000 fcea 	bl	80061d8 <_dtoa_r>
 8005804:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005808:	4607      	mov	r7, r0
 800580a:	d102      	bne.n	8005812 <__cvt+0x66>
 800580c:	f019 0f01 	tst.w	r9, #1
 8005810:	d022      	beq.n	8005858 <__cvt+0xac>
 8005812:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005816:	eb07 0906 	add.w	r9, r7, r6
 800581a:	d110      	bne.n	800583e <__cvt+0x92>
 800581c:	783b      	ldrb	r3, [r7, #0]
 800581e:	2b30      	cmp	r3, #48	; 0x30
 8005820:	d10a      	bne.n	8005838 <__cvt+0x8c>
 8005822:	2200      	movs	r2, #0
 8005824:	2300      	movs	r3, #0
 8005826:	4620      	mov	r0, r4
 8005828:	4629      	mov	r1, r5
 800582a:	f7fb f96d 	bl	8000b08 <__aeabi_dcmpeq>
 800582e:	b918      	cbnz	r0, 8005838 <__cvt+0x8c>
 8005830:	f1c6 0601 	rsb	r6, r6, #1
 8005834:	f8ca 6000 	str.w	r6, [sl]
 8005838:	f8da 3000 	ldr.w	r3, [sl]
 800583c:	4499      	add	r9, r3
 800583e:	2200      	movs	r2, #0
 8005840:	2300      	movs	r3, #0
 8005842:	4620      	mov	r0, r4
 8005844:	4629      	mov	r1, r5
 8005846:	f7fb f95f 	bl	8000b08 <__aeabi_dcmpeq>
 800584a:	b108      	cbz	r0, 8005850 <__cvt+0xa4>
 800584c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005850:	2230      	movs	r2, #48	; 0x30
 8005852:	9b03      	ldr	r3, [sp, #12]
 8005854:	454b      	cmp	r3, r9
 8005856:	d307      	bcc.n	8005868 <__cvt+0xbc>
 8005858:	9b03      	ldr	r3, [sp, #12]
 800585a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800585c:	1bdb      	subs	r3, r3, r7
 800585e:	4638      	mov	r0, r7
 8005860:	6013      	str	r3, [r2, #0]
 8005862:	b004      	add	sp, #16
 8005864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005868:	1c59      	adds	r1, r3, #1
 800586a:	9103      	str	r1, [sp, #12]
 800586c:	701a      	strb	r2, [r3, #0]
 800586e:	e7f0      	b.n	8005852 <__cvt+0xa6>

08005870 <__exponent>:
 8005870:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005872:	4603      	mov	r3, r0
 8005874:	2900      	cmp	r1, #0
 8005876:	bfb8      	it	lt
 8005878:	4249      	neglt	r1, r1
 800587a:	f803 2b02 	strb.w	r2, [r3], #2
 800587e:	bfb4      	ite	lt
 8005880:	222d      	movlt	r2, #45	; 0x2d
 8005882:	222b      	movge	r2, #43	; 0x2b
 8005884:	2909      	cmp	r1, #9
 8005886:	7042      	strb	r2, [r0, #1]
 8005888:	dd2a      	ble.n	80058e0 <__exponent+0x70>
 800588a:	f10d 0407 	add.w	r4, sp, #7
 800588e:	46a4      	mov	ip, r4
 8005890:	270a      	movs	r7, #10
 8005892:	46a6      	mov	lr, r4
 8005894:	460a      	mov	r2, r1
 8005896:	fb91 f6f7 	sdiv	r6, r1, r7
 800589a:	fb07 1516 	mls	r5, r7, r6, r1
 800589e:	3530      	adds	r5, #48	; 0x30
 80058a0:	2a63      	cmp	r2, #99	; 0x63
 80058a2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80058a6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80058aa:	4631      	mov	r1, r6
 80058ac:	dcf1      	bgt.n	8005892 <__exponent+0x22>
 80058ae:	3130      	adds	r1, #48	; 0x30
 80058b0:	f1ae 0502 	sub.w	r5, lr, #2
 80058b4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80058b8:	1c44      	adds	r4, r0, #1
 80058ba:	4629      	mov	r1, r5
 80058bc:	4561      	cmp	r1, ip
 80058be:	d30a      	bcc.n	80058d6 <__exponent+0x66>
 80058c0:	f10d 0209 	add.w	r2, sp, #9
 80058c4:	eba2 020e 	sub.w	r2, r2, lr
 80058c8:	4565      	cmp	r5, ip
 80058ca:	bf88      	it	hi
 80058cc:	2200      	movhi	r2, #0
 80058ce:	4413      	add	r3, r2
 80058d0:	1a18      	subs	r0, r3, r0
 80058d2:	b003      	add	sp, #12
 80058d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80058da:	f804 2f01 	strb.w	r2, [r4, #1]!
 80058de:	e7ed      	b.n	80058bc <__exponent+0x4c>
 80058e0:	2330      	movs	r3, #48	; 0x30
 80058e2:	3130      	adds	r1, #48	; 0x30
 80058e4:	7083      	strb	r3, [r0, #2]
 80058e6:	70c1      	strb	r1, [r0, #3]
 80058e8:	1d03      	adds	r3, r0, #4
 80058ea:	e7f1      	b.n	80058d0 <__exponent+0x60>

080058ec <_printf_float>:
 80058ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058f0:	ed2d 8b02 	vpush	{d8}
 80058f4:	b08d      	sub	sp, #52	; 0x34
 80058f6:	460c      	mov	r4, r1
 80058f8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80058fc:	4616      	mov	r6, r2
 80058fe:	461f      	mov	r7, r3
 8005900:	4605      	mov	r5, r0
 8005902:	f001 fa55 	bl	8006db0 <_localeconv_r>
 8005906:	f8d0 a000 	ldr.w	sl, [r0]
 800590a:	4650      	mov	r0, sl
 800590c:	f7fa fc80 	bl	8000210 <strlen>
 8005910:	2300      	movs	r3, #0
 8005912:	930a      	str	r3, [sp, #40]	; 0x28
 8005914:	6823      	ldr	r3, [r4, #0]
 8005916:	9305      	str	r3, [sp, #20]
 8005918:	f8d8 3000 	ldr.w	r3, [r8]
 800591c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005920:	3307      	adds	r3, #7
 8005922:	f023 0307 	bic.w	r3, r3, #7
 8005926:	f103 0208 	add.w	r2, r3, #8
 800592a:	f8c8 2000 	str.w	r2, [r8]
 800592e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005932:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005936:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800593a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800593e:	9307      	str	r3, [sp, #28]
 8005940:	f8cd 8018 	str.w	r8, [sp, #24]
 8005944:	ee08 0a10 	vmov	s16, r0
 8005948:	4b9f      	ldr	r3, [pc, #636]	; (8005bc8 <_printf_float+0x2dc>)
 800594a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800594e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005952:	f7fb f90b 	bl	8000b6c <__aeabi_dcmpun>
 8005956:	bb88      	cbnz	r0, 80059bc <_printf_float+0xd0>
 8005958:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800595c:	4b9a      	ldr	r3, [pc, #616]	; (8005bc8 <_printf_float+0x2dc>)
 800595e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005962:	f7fb f8e5 	bl	8000b30 <__aeabi_dcmple>
 8005966:	bb48      	cbnz	r0, 80059bc <_printf_float+0xd0>
 8005968:	2200      	movs	r2, #0
 800596a:	2300      	movs	r3, #0
 800596c:	4640      	mov	r0, r8
 800596e:	4649      	mov	r1, r9
 8005970:	f7fb f8d4 	bl	8000b1c <__aeabi_dcmplt>
 8005974:	b110      	cbz	r0, 800597c <_printf_float+0x90>
 8005976:	232d      	movs	r3, #45	; 0x2d
 8005978:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800597c:	4b93      	ldr	r3, [pc, #588]	; (8005bcc <_printf_float+0x2e0>)
 800597e:	4894      	ldr	r0, [pc, #592]	; (8005bd0 <_printf_float+0x2e4>)
 8005980:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005984:	bf94      	ite	ls
 8005986:	4698      	movls	r8, r3
 8005988:	4680      	movhi	r8, r0
 800598a:	2303      	movs	r3, #3
 800598c:	6123      	str	r3, [r4, #16]
 800598e:	9b05      	ldr	r3, [sp, #20]
 8005990:	f023 0204 	bic.w	r2, r3, #4
 8005994:	6022      	str	r2, [r4, #0]
 8005996:	f04f 0900 	mov.w	r9, #0
 800599a:	9700      	str	r7, [sp, #0]
 800599c:	4633      	mov	r3, r6
 800599e:	aa0b      	add	r2, sp, #44	; 0x2c
 80059a0:	4621      	mov	r1, r4
 80059a2:	4628      	mov	r0, r5
 80059a4:	f000 f9d8 	bl	8005d58 <_printf_common>
 80059a8:	3001      	adds	r0, #1
 80059aa:	f040 8090 	bne.w	8005ace <_printf_float+0x1e2>
 80059ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80059b2:	b00d      	add	sp, #52	; 0x34
 80059b4:	ecbd 8b02 	vpop	{d8}
 80059b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059bc:	4642      	mov	r2, r8
 80059be:	464b      	mov	r3, r9
 80059c0:	4640      	mov	r0, r8
 80059c2:	4649      	mov	r1, r9
 80059c4:	f7fb f8d2 	bl	8000b6c <__aeabi_dcmpun>
 80059c8:	b140      	cbz	r0, 80059dc <_printf_float+0xf0>
 80059ca:	464b      	mov	r3, r9
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	bfbc      	itt	lt
 80059d0:	232d      	movlt	r3, #45	; 0x2d
 80059d2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80059d6:	487f      	ldr	r0, [pc, #508]	; (8005bd4 <_printf_float+0x2e8>)
 80059d8:	4b7f      	ldr	r3, [pc, #508]	; (8005bd8 <_printf_float+0x2ec>)
 80059da:	e7d1      	b.n	8005980 <_printf_float+0x94>
 80059dc:	6863      	ldr	r3, [r4, #4]
 80059de:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80059e2:	9206      	str	r2, [sp, #24]
 80059e4:	1c5a      	adds	r2, r3, #1
 80059e6:	d13f      	bne.n	8005a68 <_printf_float+0x17c>
 80059e8:	2306      	movs	r3, #6
 80059ea:	6063      	str	r3, [r4, #4]
 80059ec:	9b05      	ldr	r3, [sp, #20]
 80059ee:	6861      	ldr	r1, [r4, #4]
 80059f0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80059f4:	2300      	movs	r3, #0
 80059f6:	9303      	str	r3, [sp, #12]
 80059f8:	ab0a      	add	r3, sp, #40	; 0x28
 80059fa:	e9cd b301 	strd	fp, r3, [sp, #4]
 80059fe:	ab09      	add	r3, sp, #36	; 0x24
 8005a00:	ec49 8b10 	vmov	d0, r8, r9
 8005a04:	9300      	str	r3, [sp, #0]
 8005a06:	6022      	str	r2, [r4, #0]
 8005a08:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005a0c:	4628      	mov	r0, r5
 8005a0e:	f7ff fecd 	bl	80057ac <__cvt>
 8005a12:	9b06      	ldr	r3, [sp, #24]
 8005a14:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a16:	2b47      	cmp	r3, #71	; 0x47
 8005a18:	4680      	mov	r8, r0
 8005a1a:	d108      	bne.n	8005a2e <_printf_float+0x142>
 8005a1c:	1cc8      	adds	r0, r1, #3
 8005a1e:	db02      	blt.n	8005a26 <_printf_float+0x13a>
 8005a20:	6863      	ldr	r3, [r4, #4]
 8005a22:	4299      	cmp	r1, r3
 8005a24:	dd41      	ble.n	8005aaa <_printf_float+0x1be>
 8005a26:	f1ab 0b02 	sub.w	fp, fp, #2
 8005a2a:	fa5f fb8b 	uxtb.w	fp, fp
 8005a2e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005a32:	d820      	bhi.n	8005a76 <_printf_float+0x18a>
 8005a34:	3901      	subs	r1, #1
 8005a36:	465a      	mov	r2, fp
 8005a38:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005a3c:	9109      	str	r1, [sp, #36]	; 0x24
 8005a3e:	f7ff ff17 	bl	8005870 <__exponent>
 8005a42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a44:	1813      	adds	r3, r2, r0
 8005a46:	2a01      	cmp	r2, #1
 8005a48:	4681      	mov	r9, r0
 8005a4a:	6123      	str	r3, [r4, #16]
 8005a4c:	dc02      	bgt.n	8005a54 <_printf_float+0x168>
 8005a4e:	6822      	ldr	r2, [r4, #0]
 8005a50:	07d2      	lsls	r2, r2, #31
 8005a52:	d501      	bpl.n	8005a58 <_printf_float+0x16c>
 8005a54:	3301      	adds	r3, #1
 8005a56:	6123      	str	r3, [r4, #16]
 8005a58:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d09c      	beq.n	800599a <_printf_float+0xae>
 8005a60:	232d      	movs	r3, #45	; 0x2d
 8005a62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a66:	e798      	b.n	800599a <_printf_float+0xae>
 8005a68:	9a06      	ldr	r2, [sp, #24]
 8005a6a:	2a47      	cmp	r2, #71	; 0x47
 8005a6c:	d1be      	bne.n	80059ec <_printf_float+0x100>
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d1bc      	bne.n	80059ec <_printf_float+0x100>
 8005a72:	2301      	movs	r3, #1
 8005a74:	e7b9      	b.n	80059ea <_printf_float+0xfe>
 8005a76:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005a7a:	d118      	bne.n	8005aae <_printf_float+0x1c2>
 8005a7c:	2900      	cmp	r1, #0
 8005a7e:	6863      	ldr	r3, [r4, #4]
 8005a80:	dd0b      	ble.n	8005a9a <_printf_float+0x1ae>
 8005a82:	6121      	str	r1, [r4, #16]
 8005a84:	b913      	cbnz	r3, 8005a8c <_printf_float+0x1a0>
 8005a86:	6822      	ldr	r2, [r4, #0]
 8005a88:	07d0      	lsls	r0, r2, #31
 8005a8a:	d502      	bpl.n	8005a92 <_printf_float+0x1a6>
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	440b      	add	r3, r1
 8005a90:	6123      	str	r3, [r4, #16]
 8005a92:	65a1      	str	r1, [r4, #88]	; 0x58
 8005a94:	f04f 0900 	mov.w	r9, #0
 8005a98:	e7de      	b.n	8005a58 <_printf_float+0x16c>
 8005a9a:	b913      	cbnz	r3, 8005aa2 <_printf_float+0x1b6>
 8005a9c:	6822      	ldr	r2, [r4, #0]
 8005a9e:	07d2      	lsls	r2, r2, #31
 8005aa0:	d501      	bpl.n	8005aa6 <_printf_float+0x1ba>
 8005aa2:	3302      	adds	r3, #2
 8005aa4:	e7f4      	b.n	8005a90 <_printf_float+0x1a4>
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e7f2      	b.n	8005a90 <_printf_float+0x1a4>
 8005aaa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005aae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ab0:	4299      	cmp	r1, r3
 8005ab2:	db05      	blt.n	8005ac0 <_printf_float+0x1d4>
 8005ab4:	6823      	ldr	r3, [r4, #0]
 8005ab6:	6121      	str	r1, [r4, #16]
 8005ab8:	07d8      	lsls	r0, r3, #31
 8005aba:	d5ea      	bpl.n	8005a92 <_printf_float+0x1a6>
 8005abc:	1c4b      	adds	r3, r1, #1
 8005abe:	e7e7      	b.n	8005a90 <_printf_float+0x1a4>
 8005ac0:	2900      	cmp	r1, #0
 8005ac2:	bfd4      	ite	le
 8005ac4:	f1c1 0202 	rsble	r2, r1, #2
 8005ac8:	2201      	movgt	r2, #1
 8005aca:	4413      	add	r3, r2
 8005acc:	e7e0      	b.n	8005a90 <_printf_float+0x1a4>
 8005ace:	6823      	ldr	r3, [r4, #0]
 8005ad0:	055a      	lsls	r2, r3, #21
 8005ad2:	d407      	bmi.n	8005ae4 <_printf_float+0x1f8>
 8005ad4:	6923      	ldr	r3, [r4, #16]
 8005ad6:	4642      	mov	r2, r8
 8005ad8:	4631      	mov	r1, r6
 8005ada:	4628      	mov	r0, r5
 8005adc:	47b8      	blx	r7
 8005ade:	3001      	adds	r0, #1
 8005ae0:	d12c      	bne.n	8005b3c <_printf_float+0x250>
 8005ae2:	e764      	b.n	80059ae <_printf_float+0xc2>
 8005ae4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005ae8:	f240 80e0 	bls.w	8005cac <_printf_float+0x3c0>
 8005aec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005af0:	2200      	movs	r2, #0
 8005af2:	2300      	movs	r3, #0
 8005af4:	f7fb f808 	bl	8000b08 <__aeabi_dcmpeq>
 8005af8:	2800      	cmp	r0, #0
 8005afa:	d034      	beq.n	8005b66 <_printf_float+0x27a>
 8005afc:	4a37      	ldr	r2, [pc, #220]	; (8005bdc <_printf_float+0x2f0>)
 8005afe:	2301      	movs	r3, #1
 8005b00:	4631      	mov	r1, r6
 8005b02:	4628      	mov	r0, r5
 8005b04:	47b8      	blx	r7
 8005b06:	3001      	adds	r0, #1
 8005b08:	f43f af51 	beq.w	80059ae <_printf_float+0xc2>
 8005b0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b10:	429a      	cmp	r2, r3
 8005b12:	db02      	blt.n	8005b1a <_printf_float+0x22e>
 8005b14:	6823      	ldr	r3, [r4, #0]
 8005b16:	07d8      	lsls	r0, r3, #31
 8005b18:	d510      	bpl.n	8005b3c <_printf_float+0x250>
 8005b1a:	ee18 3a10 	vmov	r3, s16
 8005b1e:	4652      	mov	r2, sl
 8005b20:	4631      	mov	r1, r6
 8005b22:	4628      	mov	r0, r5
 8005b24:	47b8      	blx	r7
 8005b26:	3001      	adds	r0, #1
 8005b28:	f43f af41 	beq.w	80059ae <_printf_float+0xc2>
 8005b2c:	f04f 0800 	mov.w	r8, #0
 8005b30:	f104 091a 	add.w	r9, r4, #26
 8005b34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b36:	3b01      	subs	r3, #1
 8005b38:	4543      	cmp	r3, r8
 8005b3a:	dc09      	bgt.n	8005b50 <_printf_float+0x264>
 8005b3c:	6823      	ldr	r3, [r4, #0]
 8005b3e:	079b      	lsls	r3, r3, #30
 8005b40:	f100 8105 	bmi.w	8005d4e <_printf_float+0x462>
 8005b44:	68e0      	ldr	r0, [r4, #12]
 8005b46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b48:	4298      	cmp	r0, r3
 8005b4a:	bfb8      	it	lt
 8005b4c:	4618      	movlt	r0, r3
 8005b4e:	e730      	b.n	80059b2 <_printf_float+0xc6>
 8005b50:	2301      	movs	r3, #1
 8005b52:	464a      	mov	r2, r9
 8005b54:	4631      	mov	r1, r6
 8005b56:	4628      	mov	r0, r5
 8005b58:	47b8      	blx	r7
 8005b5a:	3001      	adds	r0, #1
 8005b5c:	f43f af27 	beq.w	80059ae <_printf_float+0xc2>
 8005b60:	f108 0801 	add.w	r8, r8, #1
 8005b64:	e7e6      	b.n	8005b34 <_printf_float+0x248>
 8005b66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	dc39      	bgt.n	8005be0 <_printf_float+0x2f4>
 8005b6c:	4a1b      	ldr	r2, [pc, #108]	; (8005bdc <_printf_float+0x2f0>)
 8005b6e:	2301      	movs	r3, #1
 8005b70:	4631      	mov	r1, r6
 8005b72:	4628      	mov	r0, r5
 8005b74:	47b8      	blx	r7
 8005b76:	3001      	adds	r0, #1
 8005b78:	f43f af19 	beq.w	80059ae <_printf_float+0xc2>
 8005b7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b80:	4313      	orrs	r3, r2
 8005b82:	d102      	bne.n	8005b8a <_printf_float+0x29e>
 8005b84:	6823      	ldr	r3, [r4, #0]
 8005b86:	07d9      	lsls	r1, r3, #31
 8005b88:	d5d8      	bpl.n	8005b3c <_printf_float+0x250>
 8005b8a:	ee18 3a10 	vmov	r3, s16
 8005b8e:	4652      	mov	r2, sl
 8005b90:	4631      	mov	r1, r6
 8005b92:	4628      	mov	r0, r5
 8005b94:	47b8      	blx	r7
 8005b96:	3001      	adds	r0, #1
 8005b98:	f43f af09 	beq.w	80059ae <_printf_float+0xc2>
 8005b9c:	f04f 0900 	mov.w	r9, #0
 8005ba0:	f104 0a1a 	add.w	sl, r4, #26
 8005ba4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ba6:	425b      	negs	r3, r3
 8005ba8:	454b      	cmp	r3, r9
 8005baa:	dc01      	bgt.n	8005bb0 <_printf_float+0x2c4>
 8005bac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bae:	e792      	b.n	8005ad6 <_printf_float+0x1ea>
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	4652      	mov	r2, sl
 8005bb4:	4631      	mov	r1, r6
 8005bb6:	4628      	mov	r0, r5
 8005bb8:	47b8      	blx	r7
 8005bba:	3001      	adds	r0, #1
 8005bbc:	f43f aef7 	beq.w	80059ae <_printf_float+0xc2>
 8005bc0:	f109 0901 	add.w	r9, r9, #1
 8005bc4:	e7ee      	b.n	8005ba4 <_printf_float+0x2b8>
 8005bc6:	bf00      	nop
 8005bc8:	7fefffff 	.word	0x7fefffff
 8005bcc:	08009b38 	.word	0x08009b38
 8005bd0:	08009b3c 	.word	0x08009b3c
 8005bd4:	08009b44 	.word	0x08009b44
 8005bd8:	08009b40 	.word	0x08009b40
 8005bdc:	08009b48 	.word	0x08009b48
 8005be0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005be2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005be4:	429a      	cmp	r2, r3
 8005be6:	bfa8      	it	ge
 8005be8:	461a      	movge	r2, r3
 8005bea:	2a00      	cmp	r2, #0
 8005bec:	4691      	mov	r9, r2
 8005bee:	dc37      	bgt.n	8005c60 <_printf_float+0x374>
 8005bf0:	f04f 0b00 	mov.w	fp, #0
 8005bf4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005bf8:	f104 021a 	add.w	r2, r4, #26
 8005bfc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005bfe:	9305      	str	r3, [sp, #20]
 8005c00:	eba3 0309 	sub.w	r3, r3, r9
 8005c04:	455b      	cmp	r3, fp
 8005c06:	dc33      	bgt.n	8005c70 <_printf_float+0x384>
 8005c08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	db3b      	blt.n	8005c88 <_printf_float+0x39c>
 8005c10:	6823      	ldr	r3, [r4, #0]
 8005c12:	07da      	lsls	r2, r3, #31
 8005c14:	d438      	bmi.n	8005c88 <_printf_float+0x39c>
 8005c16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c18:	9b05      	ldr	r3, [sp, #20]
 8005c1a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	eba2 0901 	sub.w	r9, r2, r1
 8005c22:	4599      	cmp	r9, r3
 8005c24:	bfa8      	it	ge
 8005c26:	4699      	movge	r9, r3
 8005c28:	f1b9 0f00 	cmp.w	r9, #0
 8005c2c:	dc35      	bgt.n	8005c9a <_printf_float+0x3ae>
 8005c2e:	f04f 0800 	mov.w	r8, #0
 8005c32:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c36:	f104 0a1a 	add.w	sl, r4, #26
 8005c3a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c3e:	1a9b      	subs	r3, r3, r2
 8005c40:	eba3 0309 	sub.w	r3, r3, r9
 8005c44:	4543      	cmp	r3, r8
 8005c46:	f77f af79 	ble.w	8005b3c <_printf_float+0x250>
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	4652      	mov	r2, sl
 8005c4e:	4631      	mov	r1, r6
 8005c50:	4628      	mov	r0, r5
 8005c52:	47b8      	blx	r7
 8005c54:	3001      	adds	r0, #1
 8005c56:	f43f aeaa 	beq.w	80059ae <_printf_float+0xc2>
 8005c5a:	f108 0801 	add.w	r8, r8, #1
 8005c5e:	e7ec      	b.n	8005c3a <_printf_float+0x34e>
 8005c60:	4613      	mov	r3, r2
 8005c62:	4631      	mov	r1, r6
 8005c64:	4642      	mov	r2, r8
 8005c66:	4628      	mov	r0, r5
 8005c68:	47b8      	blx	r7
 8005c6a:	3001      	adds	r0, #1
 8005c6c:	d1c0      	bne.n	8005bf0 <_printf_float+0x304>
 8005c6e:	e69e      	b.n	80059ae <_printf_float+0xc2>
 8005c70:	2301      	movs	r3, #1
 8005c72:	4631      	mov	r1, r6
 8005c74:	4628      	mov	r0, r5
 8005c76:	9205      	str	r2, [sp, #20]
 8005c78:	47b8      	blx	r7
 8005c7a:	3001      	adds	r0, #1
 8005c7c:	f43f ae97 	beq.w	80059ae <_printf_float+0xc2>
 8005c80:	9a05      	ldr	r2, [sp, #20]
 8005c82:	f10b 0b01 	add.w	fp, fp, #1
 8005c86:	e7b9      	b.n	8005bfc <_printf_float+0x310>
 8005c88:	ee18 3a10 	vmov	r3, s16
 8005c8c:	4652      	mov	r2, sl
 8005c8e:	4631      	mov	r1, r6
 8005c90:	4628      	mov	r0, r5
 8005c92:	47b8      	blx	r7
 8005c94:	3001      	adds	r0, #1
 8005c96:	d1be      	bne.n	8005c16 <_printf_float+0x32a>
 8005c98:	e689      	b.n	80059ae <_printf_float+0xc2>
 8005c9a:	9a05      	ldr	r2, [sp, #20]
 8005c9c:	464b      	mov	r3, r9
 8005c9e:	4442      	add	r2, r8
 8005ca0:	4631      	mov	r1, r6
 8005ca2:	4628      	mov	r0, r5
 8005ca4:	47b8      	blx	r7
 8005ca6:	3001      	adds	r0, #1
 8005ca8:	d1c1      	bne.n	8005c2e <_printf_float+0x342>
 8005caa:	e680      	b.n	80059ae <_printf_float+0xc2>
 8005cac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005cae:	2a01      	cmp	r2, #1
 8005cb0:	dc01      	bgt.n	8005cb6 <_printf_float+0x3ca>
 8005cb2:	07db      	lsls	r3, r3, #31
 8005cb4:	d538      	bpl.n	8005d28 <_printf_float+0x43c>
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	4642      	mov	r2, r8
 8005cba:	4631      	mov	r1, r6
 8005cbc:	4628      	mov	r0, r5
 8005cbe:	47b8      	blx	r7
 8005cc0:	3001      	adds	r0, #1
 8005cc2:	f43f ae74 	beq.w	80059ae <_printf_float+0xc2>
 8005cc6:	ee18 3a10 	vmov	r3, s16
 8005cca:	4652      	mov	r2, sl
 8005ccc:	4631      	mov	r1, r6
 8005cce:	4628      	mov	r0, r5
 8005cd0:	47b8      	blx	r7
 8005cd2:	3001      	adds	r0, #1
 8005cd4:	f43f ae6b 	beq.w	80059ae <_printf_float+0xc2>
 8005cd8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005cdc:	2200      	movs	r2, #0
 8005cde:	2300      	movs	r3, #0
 8005ce0:	f7fa ff12 	bl	8000b08 <__aeabi_dcmpeq>
 8005ce4:	b9d8      	cbnz	r0, 8005d1e <_printf_float+0x432>
 8005ce6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ce8:	f108 0201 	add.w	r2, r8, #1
 8005cec:	3b01      	subs	r3, #1
 8005cee:	4631      	mov	r1, r6
 8005cf0:	4628      	mov	r0, r5
 8005cf2:	47b8      	blx	r7
 8005cf4:	3001      	adds	r0, #1
 8005cf6:	d10e      	bne.n	8005d16 <_printf_float+0x42a>
 8005cf8:	e659      	b.n	80059ae <_printf_float+0xc2>
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	4652      	mov	r2, sl
 8005cfe:	4631      	mov	r1, r6
 8005d00:	4628      	mov	r0, r5
 8005d02:	47b8      	blx	r7
 8005d04:	3001      	adds	r0, #1
 8005d06:	f43f ae52 	beq.w	80059ae <_printf_float+0xc2>
 8005d0a:	f108 0801 	add.w	r8, r8, #1
 8005d0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d10:	3b01      	subs	r3, #1
 8005d12:	4543      	cmp	r3, r8
 8005d14:	dcf1      	bgt.n	8005cfa <_printf_float+0x40e>
 8005d16:	464b      	mov	r3, r9
 8005d18:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005d1c:	e6dc      	b.n	8005ad8 <_printf_float+0x1ec>
 8005d1e:	f04f 0800 	mov.w	r8, #0
 8005d22:	f104 0a1a 	add.w	sl, r4, #26
 8005d26:	e7f2      	b.n	8005d0e <_printf_float+0x422>
 8005d28:	2301      	movs	r3, #1
 8005d2a:	4642      	mov	r2, r8
 8005d2c:	e7df      	b.n	8005cee <_printf_float+0x402>
 8005d2e:	2301      	movs	r3, #1
 8005d30:	464a      	mov	r2, r9
 8005d32:	4631      	mov	r1, r6
 8005d34:	4628      	mov	r0, r5
 8005d36:	47b8      	blx	r7
 8005d38:	3001      	adds	r0, #1
 8005d3a:	f43f ae38 	beq.w	80059ae <_printf_float+0xc2>
 8005d3e:	f108 0801 	add.w	r8, r8, #1
 8005d42:	68e3      	ldr	r3, [r4, #12]
 8005d44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005d46:	1a5b      	subs	r3, r3, r1
 8005d48:	4543      	cmp	r3, r8
 8005d4a:	dcf0      	bgt.n	8005d2e <_printf_float+0x442>
 8005d4c:	e6fa      	b.n	8005b44 <_printf_float+0x258>
 8005d4e:	f04f 0800 	mov.w	r8, #0
 8005d52:	f104 0919 	add.w	r9, r4, #25
 8005d56:	e7f4      	b.n	8005d42 <_printf_float+0x456>

08005d58 <_printf_common>:
 8005d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d5c:	4616      	mov	r6, r2
 8005d5e:	4699      	mov	r9, r3
 8005d60:	688a      	ldr	r2, [r1, #8]
 8005d62:	690b      	ldr	r3, [r1, #16]
 8005d64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	bfb8      	it	lt
 8005d6c:	4613      	movlt	r3, r2
 8005d6e:	6033      	str	r3, [r6, #0]
 8005d70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d74:	4607      	mov	r7, r0
 8005d76:	460c      	mov	r4, r1
 8005d78:	b10a      	cbz	r2, 8005d7e <_printf_common+0x26>
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	6033      	str	r3, [r6, #0]
 8005d7e:	6823      	ldr	r3, [r4, #0]
 8005d80:	0699      	lsls	r1, r3, #26
 8005d82:	bf42      	ittt	mi
 8005d84:	6833      	ldrmi	r3, [r6, #0]
 8005d86:	3302      	addmi	r3, #2
 8005d88:	6033      	strmi	r3, [r6, #0]
 8005d8a:	6825      	ldr	r5, [r4, #0]
 8005d8c:	f015 0506 	ands.w	r5, r5, #6
 8005d90:	d106      	bne.n	8005da0 <_printf_common+0x48>
 8005d92:	f104 0a19 	add.w	sl, r4, #25
 8005d96:	68e3      	ldr	r3, [r4, #12]
 8005d98:	6832      	ldr	r2, [r6, #0]
 8005d9a:	1a9b      	subs	r3, r3, r2
 8005d9c:	42ab      	cmp	r3, r5
 8005d9e:	dc26      	bgt.n	8005dee <_printf_common+0x96>
 8005da0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005da4:	1e13      	subs	r3, r2, #0
 8005da6:	6822      	ldr	r2, [r4, #0]
 8005da8:	bf18      	it	ne
 8005daa:	2301      	movne	r3, #1
 8005dac:	0692      	lsls	r2, r2, #26
 8005dae:	d42b      	bmi.n	8005e08 <_printf_common+0xb0>
 8005db0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005db4:	4649      	mov	r1, r9
 8005db6:	4638      	mov	r0, r7
 8005db8:	47c0      	blx	r8
 8005dba:	3001      	adds	r0, #1
 8005dbc:	d01e      	beq.n	8005dfc <_printf_common+0xa4>
 8005dbe:	6823      	ldr	r3, [r4, #0]
 8005dc0:	68e5      	ldr	r5, [r4, #12]
 8005dc2:	6832      	ldr	r2, [r6, #0]
 8005dc4:	f003 0306 	and.w	r3, r3, #6
 8005dc8:	2b04      	cmp	r3, #4
 8005dca:	bf08      	it	eq
 8005dcc:	1aad      	subeq	r5, r5, r2
 8005dce:	68a3      	ldr	r3, [r4, #8]
 8005dd0:	6922      	ldr	r2, [r4, #16]
 8005dd2:	bf0c      	ite	eq
 8005dd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005dd8:	2500      	movne	r5, #0
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	bfc4      	itt	gt
 8005dde:	1a9b      	subgt	r3, r3, r2
 8005de0:	18ed      	addgt	r5, r5, r3
 8005de2:	2600      	movs	r6, #0
 8005de4:	341a      	adds	r4, #26
 8005de6:	42b5      	cmp	r5, r6
 8005de8:	d11a      	bne.n	8005e20 <_printf_common+0xc8>
 8005dea:	2000      	movs	r0, #0
 8005dec:	e008      	b.n	8005e00 <_printf_common+0xa8>
 8005dee:	2301      	movs	r3, #1
 8005df0:	4652      	mov	r2, sl
 8005df2:	4649      	mov	r1, r9
 8005df4:	4638      	mov	r0, r7
 8005df6:	47c0      	blx	r8
 8005df8:	3001      	adds	r0, #1
 8005dfa:	d103      	bne.n	8005e04 <_printf_common+0xac>
 8005dfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e04:	3501      	adds	r5, #1
 8005e06:	e7c6      	b.n	8005d96 <_printf_common+0x3e>
 8005e08:	18e1      	adds	r1, r4, r3
 8005e0a:	1c5a      	adds	r2, r3, #1
 8005e0c:	2030      	movs	r0, #48	; 0x30
 8005e0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e12:	4422      	add	r2, r4
 8005e14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e1c:	3302      	adds	r3, #2
 8005e1e:	e7c7      	b.n	8005db0 <_printf_common+0x58>
 8005e20:	2301      	movs	r3, #1
 8005e22:	4622      	mov	r2, r4
 8005e24:	4649      	mov	r1, r9
 8005e26:	4638      	mov	r0, r7
 8005e28:	47c0      	blx	r8
 8005e2a:	3001      	adds	r0, #1
 8005e2c:	d0e6      	beq.n	8005dfc <_printf_common+0xa4>
 8005e2e:	3601      	adds	r6, #1
 8005e30:	e7d9      	b.n	8005de6 <_printf_common+0x8e>
	...

08005e34 <_printf_i>:
 8005e34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e38:	460c      	mov	r4, r1
 8005e3a:	4691      	mov	r9, r2
 8005e3c:	7e27      	ldrb	r7, [r4, #24]
 8005e3e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005e40:	2f78      	cmp	r7, #120	; 0x78
 8005e42:	4680      	mov	r8, r0
 8005e44:	469a      	mov	sl, r3
 8005e46:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e4a:	d807      	bhi.n	8005e5c <_printf_i+0x28>
 8005e4c:	2f62      	cmp	r7, #98	; 0x62
 8005e4e:	d80a      	bhi.n	8005e66 <_printf_i+0x32>
 8005e50:	2f00      	cmp	r7, #0
 8005e52:	f000 80d8 	beq.w	8006006 <_printf_i+0x1d2>
 8005e56:	2f58      	cmp	r7, #88	; 0x58
 8005e58:	f000 80a3 	beq.w	8005fa2 <_printf_i+0x16e>
 8005e5c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005e60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e64:	e03a      	b.n	8005edc <_printf_i+0xa8>
 8005e66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e6a:	2b15      	cmp	r3, #21
 8005e6c:	d8f6      	bhi.n	8005e5c <_printf_i+0x28>
 8005e6e:	a001      	add	r0, pc, #4	; (adr r0, 8005e74 <_printf_i+0x40>)
 8005e70:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005e74:	08005ecd 	.word	0x08005ecd
 8005e78:	08005ee1 	.word	0x08005ee1
 8005e7c:	08005e5d 	.word	0x08005e5d
 8005e80:	08005e5d 	.word	0x08005e5d
 8005e84:	08005e5d 	.word	0x08005e5d
 8005e88:	08005e5d 	.word	0x08005e5d
 8005e8c:	08005ee1 	.word	0x08005ee1
 8005e90:	08005e5d 	.word	0x08005e5d
 8005e94:	08005e5d 	.word	0x08005e5d
 8005e98:	08005e5d 	.word	0x08005e5d
 8005e9c:	08005e5d 	.word	0x08005e5d
 8005ea0:	08005fed 	.word	0x08005fed
 8005ea4:	08005f11 	.word	0x08005f11
 8005ea8:	08005fcf 	.word	0x08005fcf
 8005eac:	08005e5d 	.word	0x08005e5d
 8005eb0:	08005e5d 	.word	0x08005e5d
 8005eb4:	0800600f 	.word	0x0800600f
 8005eb8:	08005e5d 	.word	0x08005e5d
 8005ebc:	08005f11 	.word	0x08005f11
 8005ec0:	08005e5d 	.word	0x08005e5d
 8005ec4:	08005e5d 	.word	0x08005e5d
 8005ec8:	08005fd7 	.word	0x08005fd7
 8005ecc:	680b      	ldr	r3, [r1, #0]
 8005ece:	1d1a      	adds	r2, r3, #4
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	600a      	str	r2, [r1, #0]
 8005ed4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005ed8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005edc:	2301      	movs	r3, #1
 8005ede:	e0a3      	b.n	8006028 <_printf_i+0x1f4>
 8005ee0:	6825      	ldr	r5, [r4, #0]
 8005ee2:	6808      	ldr	r0, [r1, #0]
 8005ee4:	062e      	lsls	r6, r5, #24
 8005ee6:	f100 0304 	add.w	r3, r0, #4
 8005eea:	d50a      	bpl.n	8005f02 <_printf_i+0xce>
 8005eec:	6805      	ldr	r5, [r0, #0]
 8005eee:	600b      	str	r3, [r1, #0]
 8005ef0:	2d00      	cmp	r5, #0
 8005ef2:	da03      	bge.n	8005efc <_printf_i+0xc8>
 8005ef4:	232d      	movs	r3, #45	; 0x2d
 8005ef6:	426d      	negs	r5, r5
 8005ef8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005efc:	485e      	ldr	r0, [pc, #376]	; (8006078 <_printf_i+0x244>)
 8005efe:	230a      	movs	r3, #10
 8005f00:	e019      	b.n	8005f36 <_printf_i+0x102>
 8005f02:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005f06:	6805      	ldr	r5, [r0, #0]
 8005f08:	600b      	str	r3, [r1, #0]
 8005f0a:	bf18      	it	ne
 8005f0c:	b22d      	sxthne	r5, r5
 8005f0e:	e7ef      	b.n	8005ef0 <_printf_i+0xbc>
 8005f10:	680b      	ldr	r3, [r1, #0]
 8005f12:	6825      	ldr	r5, [r4, #0]
 8005f14:	1d18      	adds	r0, r3, #4
 8005f16:	6008      	str	r0, [r1, #0]
 8005f18:	0628      	lsls	r0, r5, #24
 8005f1a:	d501      	bpl.n	8005f20 <_printf_i+0xec>
 8005f1c:	681d      	ldr	r5, [r3, #0]
 8005f1e:	e002      	b.n	8005f26 <_printf_i+0xf2>
 8005f20:	0669      	lsls	r1, r5, #25
 8005f22:	d5fb      	bpl.n	8005f1c <_printf_i+0xe8>
 8005f24:	881d      	ldrh	r5, [r3, #0]
 8005f26:	4854      	ldr	r0, [pc, #336]	; (8006078 <_printf_i+0x244>)
 8005f28:	2f6f      	cmp	r7, #111	; 0x6f
 8005f2a:	bf0c      	ite	eq
 8005f2c:	2308      	moveq	r3, #8
 8005f2e:	230a      	movne	r3, #10
 8005f30:	2100      	movs	r1, #0
 8005f32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f36:	6866      	ldr	r6, [r4, #4]
 8005f38:	60a6      	str	r6, [r4, #8]
 8005f3a:	2e00      	cmp	r6, #0
 8005f3c:	bfa2      	ittt	ge
 8005f3e:	6821      	ldrge	r1, [r4, #0]
 8005f40:	f021 0104 	bicge.w	r1, r1, #4
 8005f44:	6021      	strge	r1, [r4, #0]
 8005f46:	b90d      	cbnz	r5, 8005f4c <_printf_i+0x118>
 8005f48:	2e00      	cmp	r6, #0
 8005f4a:	d04d      	beq.n	8005fe8 <_printf_i+0x1b4>
 8005f4c:	4616      	mov	r6, r2
 8005f4e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005f52:	fb03 5711 	mls	r7, r3, r1, r5
 8005f56:	5dc7      	ldrb	r7, [r0, r7]
 8005f58:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005f5c:	462f      	mov	r7, r5
 8005f5e:	42bb      	cmp	r3, r7
 8005f60:	460d      	mov	r5, r1
 8005f62:	d9f4      	bls.n	8005f4e <_printf_i+0x11a>
 8005f64:	2b08      	cmp	r3, #8
 8005f66:	d10b      	bne.n	8005f80 <_printf_i+0x14c>
 8005f68:	6823      	ldr	r3, [r4, #0]
 8005f6a:	07df      	lsls	r7, r3, #31
 8005f6c:	d508      	bpl.n	8005f80 <_printf_i+0x14c>
 8005f6e:	6923      	ldr	r3, [r4, #16]
 8005f70:	6861      	ldr	r1, [r4, #4]
 8005f72:	4299      	cmp	r1, r3
 8005f74:	bfde      	ittt	le
 8005f76:	2330      	movle	r3, #48	; 0x30
 8005f78:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005f7c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8005f80:	1b92      	subs	r2, r2, r6
 8005f82:	6122      	str	r2, [r4, #16]
 8005f84:	f8cd a000 	str.w	sl, [sp]
 8005f88:	464b      	mov	r3, r9
 8005f8a:	aa03      	add	r2, sp, #12
 8005f8c:	4621      	mov	r1, r4
 8005f8e:	4640      	mov	r0, r8
 8005f90:	f7ff fee2 	bl	8005d58 <_printf_common>
 8005f94:	3001      	adds	r0, #1
 8005f96:	d14c      	bne.n	8006032 <_printf_i+0x1fe>
 8005f98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f9c:	b004      	add	sp, #16
 8005f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fa2:	4835      	ldr	r0, [pc, #212]	; (8006078 <_printf_i+0x244>)
 8005fa4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005fa8:	6823      	ldr	r3, [r4, #0]
 8005faa:	680e      	ldr	r6, [r1, #0]
 8005fac:	061f      	lsls	r7, r3, #24
 8005fae:	f856 5b04 	ldr.w	r5, [r6], #4
 8005fb2:	600e      	str	r6, [r1, #0]
 8005fb4:	d514      	bpl.n	8005fe0 <_printf_i+0x1ac>
 8005fb6:	07d9      	lsls	r1, r3, #31
 8005fb8:	bf44      	itt	mi
 8005fba:	f043 0320 	orrmi.w	r3, r3, #32
 8005fbe:	6023      	strmi	r3, [r4, #0]
 8005fc0:	b91d      	cbnz	r5, 8005fca <_printf_i+0x196>
 8005fc2:	6823      	ldr	r3, [r4, #0]
 8005fc4:	f023 0320 	bic.w	r3, r3, #32
 8005fc8:	6023      	str	r3, [r4, #0]
 8005fca:	2310      	movs	r3, #16
 8005fcc:	e7b0      	b.n	8005f30 <_printf_i+0xfc>
 8005fce:	6823      	ldr	r3, [r4, #0]
 8005fd0:	f043 0320 	orr.w	r3, r3, #32
 8005fd4:	6023      	str	r3, [r4, #0]
 8005fd6:	2378      	movs	r3, #120	; 0x78
 8005fd8:	4828      	ldr	r0, [pc, #160]	; (800607c <_printf_i+0x248>)
 8005fda:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005fde:	e7e3      	b.n	8005fa8 <_printf_i+0x174>
 8005fe0:	065e      	lsls	r6, r3, #25
 8005fe2:	bf48      	it	mi
 8005fe4:	b2ad      	uxthmi	r5, r5
 8005fe6:	e7e6      	b.n	8005fb6 <_printf_i+0x182>
 8005fe8:	4616      	mov	r6, r2
 8005fea:	e7bb      	b.n	8005f64 <_printf_i+0x130>
 8005fec:	680b      	ldr	r3, [r1, #0]
 8005fee:	6826      	ldr	r6, [r4, #0]
 8005ff0:	6960      	ldr	r0, [r4, #20]
 8005ff2:	1d1d      	adds	r5, r3, #4
 8005ff4:	600d      	str	r5, [r1, #0]
 8005ff6:	0635      	lsls	r5, r6, #24
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	d501      	bpl.n	8006000 <_printf_i+0x1cc>
 8005ffc:	6018      	str	r0, [r3, #0]
 8005ffe:	e002      	b.n	8006006 <_printf_i+0x1d2>
 8006000:	0671      	lsls	r1, r6, #25
 8006002:	d5fb      	bpl.n	8005ffc <_printf_i+0x1c8>
 8006004:	8018      	strh	r0, [r3, #0]
 8006006:	2300      	movs	r3, #0
 8006008:	6123      	str	r3, [r4, #16]
 800600a:	4616      	mov	r6, r2
 800600c:	e7ba      	b.n	8005f84 <_printf_i+0x150>
 800600e:	680b      	ldr	r3, [r1, #0]
 8006010:	1d1a      	adds	r2, r3, #4
 8006012:	600a      	str	r2, [r1, #0]
 8006014:	681e      	ldr	r6, [r3, #0]
 8006016:	6862      	ldr	r2, [r4, #4]
 8006018:	2100      	movs	r1, #0
 800601a:	4630      	mov	r0, r6
 800601c:	f7fa f900 	bl	8000220 <memchr>
 8006020:	b108      	cbz	r0, 8006026 <_printf_i+0x1f2>
 8006022:	1b80      	subs	r0, r0, r6
 8006024:	6060      	str	r0, [r4, #4]
 8006026:	6863      	ldr	r3, [r4, #4]
 8006028:	6123      	str	r3, [r4, #16]
 800602a:	2300      	movs	r3, #0
 800602c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006030:	e7a8      	b.n	8005f84 <_printf_i+0x150>
 8006032:	6923      	ldr	r3, [r4, #16]
 8006034:	4632      	mov	r2, r6
 8006036:	4649      	mov	r1, r9
 8006038:	4640      	mov	r0, r8
 800603a:	47d0      	blx	sl
 800603c:	3001      	adds	r0, #1
 800603e:	d0ab      	beq.n	8005f98 <_printf_i+0x164>
 8006040:	6823      	ldr	r3, [r4, #0]
 8006042:	079b      	lsls	r3, r3, #30
 8006044:	d413      	bmi.n	800606e <_printf_i+0x23a>
 8006046:	68e0      	ldr	r0, [r4, #12]
 8006048:	9b03      	ldr	r3, [sp, #12]
 800604a:	4298      	cmp	r0, r3
 800604c:	bfb8      	it	lt
 800604e:	4618      	movlt	r0, r3
 8006050:	e7a4      	b.n	8005f9c <_printf_i+0x168>
 8006052:	2301      	movs	r3, #1
 8006054:	4632      	mov	r2, r6
 8006056:	4649      	mov	r1, r9
 8006058:	4640      	mov	r0, r8
 800605a:	47d0      	blx	sl
 800605c:	3001      	adds	r0, #1
 800605e:	d09b      	beq.n	8005f98 <_printf_i+0x164>
 8006060:	3501      	adds	r5, #1
 8006062:	68e3      	ldr	r3, [r4, #12]
 8006064:	9903      	ldr	r1, [sp, #12]
 8006066:	1a5b      	subs	r3, r3, r1
 8006068:	42ab      	cmp	r3, r5
 800606a:	dcf2      	bgt.n	8006052 <_printf_i+0x21e>
 800606c:	e7eb      	b.n	8006046 <_printf_i+0x212>
 800606e:	2500      	movs	r5, #0
 8006070:	f104 0619 	add.w	r6, r4, #25
 8006074:	e7f5      	b.n	8006062 <_printf_i+0x22e>
 8006076:	bf00      	nop
 8006078:	08009b4a 	.word	0x08009b4a
 800607c:	08009b5b 	.word	0x08009b5b

08006080 <siprintf>:
 8006080:	b40e      	push	{r1, r2, r3}
 8006082:	b500      	push	{lr}
 8006084:	b09c      	sub	sp, #112	; 0x70
 8006086:	ab1d      	add	r3, sp, #116	; 0x74
 8006088:	9002      	str	r0, [sp, #8]
 800608a:	9006      	str	r0, [sp, #24]
 800608c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006090:	4809      	ldr	r0, [pc, #36]	; (80060b8 <siprintf+0x38>)
 8006092:	9107      	str	r1, [sp, #28]
 8006094:	9104      	str	r1, [sp, #16]
 8006096:	4909      	ldr	r1, [pc, #36]	; (80060bc <siprintf+0x3c>)
 8006098:	f853 2b04 	ldr.w	r2, [r3], #4
 800609c:	9105      	str	r1, [sp, #20]
 800609e:	6800      	ldr	r0, [r0, #0]
 80060a0:	9301      	str	r3, [sp, #4]
 80060a2:	a902      	add	r1, sp, #8
 80060a4:	f001 fb32 	bl	800770c <_svfiprintf_r>
 80060a8:	9b02      	ldr	r3, [sp, #8]
 80060aa:	2200      	movs	r2, #0
 80060ac:	701a      	strb	r2, [r3, #0]
 80060ae:	b01c      	add	sp, #112	; 0x70
 80060b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80060b4:	b003      	add	sp, #12
 80060b6:	4770      	bx	lr
 80060b8:	20000014 	.word	0x20000014
 80060bc:	ffff0208 	.word	0xffff0208

080060c0 <quorem>:
 80060c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060c4:	6903      	ldr	r3, [r0, #16]
 80060c6:	690c      	ldr	r4, [r1, #16]
 80060c8:	42a3      	cmp	r3, r4
 80060ca:	4607      	mov	r7, r0
 80060cc:	f2c0 8081 	blt.w	80061d2 <quorem+0x112>
 80060d0:	3c01      	subs	r4, #1
 80060d2:	f101 0814 	add.w	r8, r1, #20
 80060d6:	f100 0514 	add.w	r5, r0, #20
 80060da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80060de:	9301      	str	r3, [sp, #4]
 80060e0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80060e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80060e8:	3301      	adds	r3, #1
 80060ea:	429a      	cmp	r2, r3
 80060ec:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80060f0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80060f4:	fbb2 f6f3 	udiv	r6, r2, r3
 80060f8:	d331      	bcc.n	800615e <quorem+0x9e>
 80060fa:	f04f 0e00 	mov.w	lr, #0
 80060fe:	4640      	mov	r0, r8
 8006100:	46ac      	mov	ip, r5
 8006102:	46f2      	mov	sl, lr
 8006104:	f850 2b04 	ldr.w	r2, [r0], #4
 8006108:	b293      	uxth	r3, r2
 800610a:	fb06 e303 	mla	r3, r6, r3, lr
 800610e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006112:	b29b      	uxth	r3, r3
 8006114:	ebaa 0303 	sub.w	r3, sl, r3
 8006118:	0c12      	lsrs	r2, r2, #16
 800611a:	f8dc a000 	ldr.w	sl, [ip]
 800611e:	fb06 e202 	mla	r2, r6, r2, lr
 8006122:	fa13 f38a 	uxtah	r3, r3, sl
 8006126:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800612a:	fa1f fa82 	uxth.w	sl, r2
 800612e:	f8dc 2000 	ldr.w	r2, [ip]
 8006132:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006136:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800613a:	b29b      	uxth	r3, r3
 800613c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006140:	4581      	cmp	r9, r0
 8006142:	f84c 3b04 	str.w	r3, [ip], #4
 8006146:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800614a:	d2db      	bcs.n	8006104 <quorem+0x44>
 800614c:	f855 300b 	ldr.w	r3, [r5, fp]
 8006150:	b92b      	cbnz	r3, 800615e <quorem+0x9e>
 8006152:	9b01      	ldr	r3, [sp, #4]
 8006154:	3b04      	subs	r3, #4
 8006156:	429d      	cmp	r5, r3
 8006158:	461a      	mov	r2, r3
 800615a:	d32e      	bcc.n	80061ba <quorem+0xfa>
 800615c:	613c      	str	r4, [r7, #16]
 800615e:	4638      	mov	r0, r7
 8006160:	f001 f8be 	bl	80072e0 <__mcmp>
 8006164:	2800      	cmp	r0, #0
 8006166:	db24      	blt.n	80061b2 <quorem+0xf2>
 8006168:	3601      	adds	r6, #1
 800616a:	4628      	mov	r0, r5
 800616c:	f04f 0c00 	mov.w	ip, #0
 8006170:	f858 2b04 	ldr.w	r2, [r8], #4
 8006174:	f8d0 e000 	ldr.w	lr, [r0]
 8006178:	b293      	uxth	r3, r2
 800617a:	ebac 0303 	sub.w	r3, ip, r3
 800617e:	0c12      	lsrs	r2, r2, #16
 8006180:	fa13 f38e 	uxtah	r3, r3, lr
 8006184:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006188:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800618c:	b29b      	uxth	r3, r3
 800618e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006192:	45c1      	cmp	r9, r8
 8006194:	f840 3b04 	str.w	r3, [r0], #4
 8006198:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800619c:	d2e8      	bcs.n	8006170 <quorem+0xb0>
 800619e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80061a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80061a6:	b922      	cbnz	r2, 80061b2 <quorem+0xf2>
 80061a8:	3b04      	subs	r3, #4
 80061aa:	429d      	cmp	r5, r3
 80061ac:	461a      	mov	r2, r3
 80061ae:	d30a      	bcc.n	80061c6 <quorem+0x106>
 80061b0:	613c      	str	r4, [r7, #16]
 80061b2:	4630      	mov	r0, r6
 80061b4:	b003      	add	sp, #12
 80061b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061ba:	6812      	ldr	r2, [r2, #0]
 80061bc:	3b04      	subs	r3, #4
 80061be:	2a00      	cmp	r2, #0
 80061c0:	d1cc      	bne.n	800615c <quorem+0x9c>
 80061c2:	3c01      	subs	r4, #1
 80061c4:	e7c7      	b.n	8006156 <quorem+0x96>
 80061c6:	6812      	ldr	r2, [r2, #0]
 80061c8:	3b04      	subs	r3, #4
 80061ca:	2a00      	cmp	r2, #0
 80061cc:	d1f0      	bne.n	80061b0 <quorem+0xf0>
 80061ce:	3c01      	subs	r4, #1
 80061d0:	e7eb      	b.n	80061aa <quorem+0xea>
 80061d2:	2000      	movs	r0, #0
 80061d4:	e7ee      	b.n	80061b4 <quorem+0xf4>
	...

080061d8 <_dtoa_r>:
 80061d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061dc:	ed2d 8b02 	vpush	{d8}
 80061e0:	ec57 6b10 	vmov	r6, r7, d0
 80061e4:	b095      	sub	sp, #84	; 0x54
 80061e6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80061e8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80061ec:	9105      	str	r1, [sp, #20]
 80061ee:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80061f2:	4604      	mov	r4, r0
 80061f4:	9209      	str	r2, [sp, #36]	; 0x24
 80061f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80061f8:	b975      	cbnz	r5, 8006218 <_dtoa_r+0x40>
 80061fa:	2010      	movs	r0, #16
 80061fc:	f000 fddc 	bl	8006db8 <malloc>
 8006200:	4602      	mov	r2, r0
 8006202:	6260      	str	r0, [r4, #36]	; 0x24
 8006204:	b920      	cbnz	r0, 8006210 <_dtoa_r+0x38>
 8006206:	4bb2      	ldr	r3, [pc, #712]	; (80064d0 <_dtoa_r+0x2f8>)
 8006208:	21ea      	movs	r1, #234	; 0xea
 800620a:	48b2      	ldr	r0, [pc, #712]	; (80064d4 <_dtoa_r+0x2fc>)
 800620c:	f001 fb8e 	bl	800792c <__assert_func>
 8006210:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006214:	6005      	str	r5, [r0, #0]
 8006216:	60c5      	str	r5, [r0, #12]
 8006218:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800621a:	6819      	ldr	r1, [r3, #0]
 800621c:	b151      	cbz	r1, 8006234 <_dtoa_r+0x5c>
 800621e:	685a      	ldr	r2, [r3, #4]
 8006220:	604a      	str	r2, [r1, #4]
 8006222:	2301      	movs	r3, #1
 8006224:	4093      	lsls	r3, r2
 8006226:	608b      	str	r3, [r1, #8]
 8006228:	4620      	mov	r0, r4
 800622a:	f000 fe1b 	bl	8006e64 <_Bfree>
 800622e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006230:	2200      	movs	r2, #0
 8006232:	601a      	str	r2, [r3, #0]
 8006234:	1e3b      	subs	r3, r7, #0
 8006236:	bfb9      	ittee	lt
 8006238:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800623c:	9303      	strlt	r3, [sp, #12]
 800623e:	2300      	movge	r3, #0
 8006240:	f8c8 3000 	strge.w	r3, [r8]
 8006244:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006248:	4ba3      	ldr	r3, [pc, #652]	; (80064d8 <_dtoa_r+0x300>)
 800624a:	bfbc      	itt	lt
 800624c:	2201      	movlt	r2, #1
 800624e:	f8c8 2000 	strlt.w	r2, [r8]
 8006252:	ea33 0309 	bics.w	r3, r3, r9
 8006256:	d11b      	bne.n	8006290 <_dtoa_r+0xb8>
 8006258:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800625a:	f242 730f 	movw	r3, #9999	; 0x270f
 800625e:	6013      	str	r3, [r2, #0]
 8006260:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006264:	4333      	orrs	r3, r6
 8006266:	f000 857a 	beq.w	8006d5e <_dtoa_r+0xb86>
 800626a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800626c:	b963      	cbnz	r3, 8006288 <_dtoa_r+0xb0>
 800626e:	4b9b      	ldr	r3, [pc, #620]	; (80064dc <_dtoa_r+0x304>)
 8006270:	e024      	b.n	80062bc <_dtoa_r+0xe4>
 8006272:	4b9b      	ldr	r3, [pc, #620]	; (80064e0 <_dtoa_r+0x308>)
 8006274:	9300      	str	r3, [sp, #0]
 8006276:	3308      	adds	r3, #8
 8006278:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800627a:	6013      	str	r3, [r2, #0]
 800627c:	9800      	ldr	r0, [sp, #0]
 800627e:	b015      	add	sp, #84	; 0x54
 8006280:	ecbd 8b02 	vpop	{d8}
 8006284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006288:	4b94      	ldr	r3, [pc, #592]	; (80064dc <_dtoa_r+0x304>)
 800628a:	9300      	str	r3, [sp, #0]
 800628c:	3303      	adds	r3, #3
 800628e:	e7f3      	b.n	8006278 <_dtoa_r+0xa0>
 8006290:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006294:	2200      	movs	r2, #0
 8006296:	ec51 0b17 	vmov	r0, r1, d7
 800629a:	2300      	movs	r3, #0
 800629c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80062a0:	f7fa fc32 	bl	8000b08 <__aeabi_dcmpeq>
 80062a4:	4680      	mov	r8, r0
 80062a6:	b158      	cbz	r0, 80062c0 <_dtoa_r+0xe8>
 80062a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80062aa:	2301      	movs	r3, #1
 80062ac:	6013      	str	r3, [r2, #0]
 80062ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	f000 8551 	beq.w	8006d58 <_dtoa_r+0xb80>
 80062b6:	488b      	ldr	r0, [pc, #556]	; (80064e4 <_dtoa_r+0x30c>)
 80062b8:	6018      	str	r0, [r3, #0]
 80062ba:	1e43      	subs	r3, r0, #1
 80062bc:	9300      	str	r3, [sp, #0]
 80062be:	e7dd      	b.n	800627c <_dtoa_r+0xa4>
 80062c0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80062c4:	aa12      	add	r2, sp, #72	; 0x48
 80062c6:	a913      	add	r1, sp, #76	; 0x4c
 80062c8:	4620      	mov	r0, r4
 80062ca:	f001 f8ad 	bl	8007428 <__d2b>
 80062ce:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80062d2:	4683      	mov	fp, r0
 80062d4:	2d00      	cmp	r5, #0
 80062d6:	d07c      	beq.n	80063d2 <_dtoa_r+0x1fa>
 80062d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062da:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80062de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80062e2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80062e6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80062ea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80062ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80062f2:	4b7d      	ldr	r3, [pc, #500]	; (80064e8 <_dtoa_r+0x310>)
 80062f4:	2200      	movs	r2, #0
 80062f6:	4630      	mov	r0, r6
 80062f8:	4639      	mov	r1, r7
 80062fa:	f7f9 ffe5 	bl	80002c8 <__aeabi_dsub>
 80062fe:	a36e      	add	r3, pc, #440	; (adr r3, 80064b8 <_dtoa_r+0x2e0>)
 8006300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006304:	f7fa f998 	bl	8000638 <__aeabi_dmul>
 8006308:	a36d      	add	r3, pc, #436	; (adr r3, 80064c0 <_dtoa_r+0x2e8>)
 800630a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800630e:	f7f9 ffdd 	bl	80002cc <__adddf3>
 8006312:	4606      	mov	r6, r0
 8006314:	4628      	mov	r0, r5
 8006316:	460f      	mov	r7, r1
 8006318:	f7fa f924 	bl	8000564 <__aeabi_i2d>
 800631c:	a36a      	add	r3, pc, #424	; (adr r3, 80064c8 <_dtoa_r+0x2f0>)
 800631e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006322:	f7fa f989 	bl	8000638 <__aeabi_dmul>
 8006326:	4602      	mov	r2, r0
 8006328:	460b      	mov	r3, r1
 800632a:	4630      	mov	r0, r6
 800632c:	4639      	mov	r1, r7
 800632e:	f7f9 ffcd 	bl	80002cc <__adddf3>
 8006332:	4606      	mov	r6, r0
 8006334:	460f      	mov	r7, r1
 8006336:	f7fa fc2f 	bl	8000b98 <__aeabi_d2iz>
 800633a:	2200      	movs	r2, #0
 800633c:	4682      	mov	sl, r0
 800633e:	2300      	movs	r3, #0
 8006340:	4630      	mov	r0, r6
 8006342:	4639      	mov	r1, r7
 8006344:	f7fa fbea 	bl	8000b1c <__aeabi_dcmplt>
 8006348:	b148      	cbz	r0, 800635e <_dtoa_r+0x186>
 800634a:	4650      	mov	r0, sl
 800634c:	f7fa f90a 	bl	8000564 <__aeabi_i2d>
 8006350:	4632      	mov	r2, r6
 8006352:	463b      	mov	r3, r7
 8006354:	f7fa fbd8 	bl	8000b08 <__aeabi_dcmpeq>
 8006358:	b908      	cbnz	r0, 800635e <_dtoa_r+0x186>
 800635a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800635e:	f1ba 0f16 	cmp.w	sl, #22
 8006362:	d854      	bhi.n	800640e <_dtoa_r+0x236>
 8006364:	4b61      	ldr	r3, [pc, #388]	; (80064ec <_dtoa_r+0x314>)
 8006366:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800636a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800636e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006372:	f7fa fbd3 	bl	8000b1c <__aeabi_dcmplt>
 8006376:	2800      	cmp	r0, #0
 8006378:	d04b      	beq.n	8006412 <_dtoa_r+0x23a>
 800637a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800637e:	2300      	movs	r3, #0
 8006380:	930e      	str	r3, [sp, #56]	; 0x38
 8006382:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006384:	1b5d      	subs	r5, r3, r5
 8006386:	1e6b      	subs	r3, r5, #1
 8006388:	9304      	str	r3, [sp, #16]
 800638a:	bf43      	ittte	mi
 800638c:	2300      	movmi	r3, #0
 800638e:	f1c5 0801 	rsbmi	r8, r5, #1
 8006392:	9304      	strmi	r3, [sp, #16]
 8006394:	f04f 0800 	movpl.w	r8, #0
 8006398:	f1ba 0f00 	cmp.w	sl, #0
 800639c:	db3b      	blt.n	8006416 <_dtoa_r+0x23e>
 800639e:	9b04      	ldr	r3, [sp, #16]
 80063a0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80063a4:	4453      	add	r3, sl
 80063a6:	9304      	str	r3, [sp, #16]
 80063a8:	2300      	movs	r3, #0
 80063aa:	9306      	str	r3, [sp, #24]
 80063ac:	9b05      	ldr	r3, [sp, #20]
 80063ae:	2b09      	cmp	r3, #9
 80063b0:	d869      	bhi.n	8006486 <_dtoa_r+0x2ae>
 80063b2:	2b05      	cmp	r3, #5
 80063b4:	bfc4      	itt	gt
 80063b6:	3b04      	subgt	r3, #4
 80063b8:	9305      	strgt	r3, [sp, #20]
 80063ba:	9b05      	ldr	r3, [sp, #20]
 80063bc:	f1a3 0302 	sub.w	r3, r3, #2
 80063c0:	bfcc      	ite	gt
 80063c2:	2500      	movgt	r5, #0
 80063c4:	2501      	movle	r5, #1
 80063c6:	2b03      	cmp	r3, #3
 80063c8:	d869      	bhi.n	800649e <_dtoa_r+0x2c6>
 80063ca:	e8df f003 	tbb	[pc, r3]
 80063ce:	4e2c      	.short	0x4e2c
 80063d0:	5a4c      	.short	0x5a4c
 80063d2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80063d6:	441d      	add	r5, r3
 80063d8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80063dc:	2b20      	cmp	r3, #32
 80063de:	bfc1      	itttt	gt
 80063e0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80063e4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80063e8:	fa09 f303 	lslgt.w	r3, r9, r3
 80063ec:	fa26 f000 	lsrgt.w	r0, r6, r0
 80063f0:	bfda      	itte	le
 80063f2:	f1c3 0320 	rsble	r3, r3, #32
 80063f6:	fa06 f003 	lslle.w	r0, r6, r3
 80063fa:	4318      	orrgt	r0, r3
 80063fc:	f7fa f8a2 	bl	8000544 <__aeabi_ui2d>
 8006400:	2301      	movs	r3, #1
 8006402:	4606      	mov	r6, r0
 8006404:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006408:	3d01      	subs	r5, #1
 800640a:	9310      	str	r3, [sp, #64]	; 0x40
 800640c:	e771      	b.n	80062f2 <_dtoa_r+0x11a>
 800640e:	2301      	movs	r3, #1
 8006410:	e7b6      	b.n	8006380 <_dtoa_r+0x1a8>
 8006412:	900e      	str	r0, [sp, #56]	; 0x38
 8006414:	e7b5      	b.n	8006382 <_dtoa_r+0x1aa>
 8006416:	f1ca 0300 	rsb	r3, sl, #0
 800641a:	9306      	str	r3, [sp, #24]
 800641c:	2300      	movs	r3, #0
 800641e:	eba8 080a 	sub.w	r8, r8, sl
 8006422:	930d      	str	r3, [sp, #52]	; 0x34
 8006424:	e7c2      	b.n	80063ac <_dtoa_r+0x1d4>
 8006426:	2300      	movs	r3, #0
 8006428:	9308      	str	r3, [sp, #32]
 800642a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800642c:	2b00      	cmp	r3, #0
 800642e:	dc39      	bgt.n	80064a4 <_dtoa_r+0x2cc>
 8006430:	f04f 0901 	mov.w	r9, #1
 8006434:	f8cd 9004 	str.w	r9, [sp, #4]
 8006438:	464b      	mov	r3, r9
 800643a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800643e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006440:	2200      	movs	r2, #0
 8006442:	6042      	str	r2, [r0, #4]
 8006444:	2204      	movs	r2, #4
 8006446:	f102 0614 	add.w	r6, r2, #20
 800644a:	429e      	cmp	r6, r3
 800644c:	6841      	ldr	r1, [r0, #4]
 800644e:	d92f      	bls.n	80064b0 <_dtoa_r+0x2d8>
 8006450:	4620      	mov	r0, r4
 8006452:	f000 fcc7 	bl	8006de4 <_Balloc>
 8006456:	9000      	str	r0, [sp, #0]
 8006458:	2800      	cmp	r0, #0
 800645a:	d14b      	bne.n	80064f4 <_dtoa_r+0x31c>
 800645c:	4b24      	ldr	r3, [pc, #144]	; (80064f0 <_dtoa_r+0x318>)
 800645e:	4602      	mov	r2, r0
 8006460:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006464:	e6d1      	b.n	800620a <_dtoa_r+0x32>
 8006466:	2301      	movs	r3, #1
 8006468:	e7de      	b.n	8006428 <_dtoa_r+0x250>
 800646a:	2300      	movs	r3, #0
 800646c:	9308      	str	r3, [sp, #32]
 800646e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006470:	eb0a 0903 	add.w	r9, sl, r3
 8006474:	f109 0301 	add.w	r3, r9, #1
 8006478:	2b01      	cmp	r3, #1
 800647a:	9301      	str	r3, [sp, #4]
 800647c:	bfb8      	it	lt
 800647e:	2301      	movlt	r3, #1
 8006480:	e7dd      	b.n	800643e <_dtoa_r+0x266>
 8006482:	2301      	movs	r3, #1
 8006484:	e7f2      	b.n	800646c <_dtoa_r+0x294>
 8006486:	2501      	movs	r5, #1
 8006488:	2300      	movs	r3, #0
 800648a:	9305      	str	r3, [sp, #20]
 800648c:	9508      	str	r5, [sp, #32]
 800648e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8006492:	2200      	movs	r2, #0
 8006494:	f8cd 9004 	str.w	r9, [sp, #4]
 8006498:	2312      	movs	r3, #18
 800649a:	9209      	str	r2, [sp, #36]	; 0x24
 800649c:	e7cf      	b.n	800643e <_dtoa_r+0x266>
 800649e:	2301      	movs	r3, #1
 80064a0:	9308      	str	r3, [sp, #32]
 80064a2:	e7f4      	b.n	800648e <_dtoa_r+0x2b6>
 80064a4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80064a8:	f8cd 9004 	str.w	r9, [sp, #4]
 80064ac:	464b      	mov	r3, r9
 80064ae:	e7c6      	b.n	800643e <_dtoa_r+0x266>
 80064b0:	3101      	adds	r1, #1
 80064b2:	6041      	str	r1, [r0, #4]
 80064b4:	0052      	lsls	r2, r2, #1
 80064b6:	e7c6      	b.n	8006446 <_dtoa_r+0x26e>
 80064b8:	636f4361 	.word	0x636f4361
 80064bc:	3fd287a7 	.word	0x3fd287a7
 80064c0:	8b60c8b3 	.word	0x8b60c8b3
 80064c4:	3fc68a28 	.word	0x3fc68a28
 80064c8:	509f79fb 	.word	0x509f79fb
 80064cc:	3fd34413 	.word	0x3fd34413
 80064d0:	08009b79 	.word	0x08009b79
 80064d4:	08009b90 	.word	0x08009b90
 80064d8:	7ff00000 	.word	0x7ff00000
 80064dc:	08009b75 	.word	0x08009b75
 80064e0:	08009b6c 	.word	0x08009b6c
 80064e4:	08009b49 	.word	0x08009b49
 80064e8:	3ff80000 	.word	0x3ff80000
 80064ec:	08009c88 	.word	0x08009c88
 80064f0:	08009bef 	.word	0x08009bef
 80064f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064f6:	9a00      	ldr	r2, [sp, #0]
 80064f8:	601a      	str	r2, [r3, #0]
 80064fa:	9b01      	ldr	r3, [sp, #4]
 80064fc:	2b0e      	cmp	r3, #14
 80064fe:	f200 80ad 	bhi.w	800665c <_dtoa_r+0x484>
 8006502:	2d00      	cmp	r5, #0
 8006504:	f000 80aa 	beq.w	800665c <_dtoa_r+0x484>
 8006508:	f1ba 0f00 	cmp.w	sl, #0
 800650c:	dd36      	ble.n	800657c <_dtoa_r+0x3a4>
 800650e:	4ac3      	ldr	r2, [pc, #780]	; (800681c <_dtoa_r+0x644>)
 8006510:	f00a 030f 	and.w	r3, sl, #15
 8006514:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006518:	ed93 7b00 	vldr	d7, [r3]
 800651c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006520:	ea4f 172a 	mov.w	r7, sl, asr #4
 8006524:	eeb0 8a47 	vmov.f32	s16, s14
 8006528:	eef0 8a67 	vmov.f32	s17, s15
 800652c:	d016      	beq.n	800655c <_dtoa_r+0x384>
 800652e:	4bbc      	ldr	r3, [pc, #752]	; (8006820 <_dtoa_r+0x648>)
 8006530:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006534:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006538:	f7fa f9a8 	bl	800088c <__aeabi_ddiv>
 800653c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006540:	f007 070f 	and.w	r7, r7, #15
 8006544:	2503      	movs	r5, #3
 8006546:	4eb6      	ldr	r6, [pc, #728]	; (8006820 <_dtoa_r+0x648>)
 8006548:	b957      	cbnz	r7, 8006560 <_dtoa_r+0x388>
 800654a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800654e:	ec53 2b18 	vmov	r2, r3, d8
 8006552:	f7fa f99b 	bl	800088c <__aeabi_ddiv>
 8006556:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800655a:	e029      	b.n	80065b0 <_dtoa_r+0x3d8>
 800655c:	2502      	movs	r5, #2
 800655e:	e7f2      	b.n	8006546 <_dtoa_r+0x36e>
 8006560:	07f9      	lsls	r1, r7, #31
 8006562:	d508      	bpl.n	8006576 <_dtoa_r+0x39e>
 8006564:	ec51 0b18 	vmov	r0, r1, d8
 8006568:	e9d6 2300 	ldrd	r2, r3, [r6]
 800656c:	f7fa f864 	bl	8000638 <__aeabi_dmul>
 8006570:	ec41 0b18 	vmov	d8, r0, r1
 8006574:	3501      	adds	r5, #1
 8006576:	107f      	asrs	r7, r7, #1
 8006578:	3608      	adds	r6, #8
 800657a:	e7e5      	b.n	8006548 <_dtoa_r+0x370>
 800657c:	f000 80a6 	beq.w	80066cc <_dtoa_r+0x4f4>
 8006580:	f1ca 0600 	rsb	r6, sl, #0
 8006584:	4ba5      	ldr	r3, [pc, #660]	; (800681c <_dtoa_r+0x644>)
 8006586:	4fa6      	ldr	r7, [pc, #664]	; (8006820 <_dtoa_r+0x648>)
 8006588:	f006 020f 	and.w	r2, r6, #15
 800658c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006594:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006598:	f7fa f84e 	bl	8000638 <__aeabi_dmul>
 800659c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065a0:	1136      	asrs	r6, r6, #4
 80065a2:	2300      	movs	r3, #0
 80065a4:	2502      	movs	r5, #2
 80065a6:	2e00      	cmp	r6, #0
 80065a8:	f040 8085 	bne.w	80066b6 <_dtoa_r+0x4de>
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d1d2      	bne.n	8006556 <_dtoa_r+0x37e>
 80065b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	f000 808c 	beq.w	80066d0 <_dtoa_r+0x4f8>
 80065b8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80065bc:	4b99      	ldr	r3, [pc, #612]	; (8006824 <_dtoa_r+0x64c>)
 80065be:	2200      	movs	r2, #0
 80065c0:	4630      	mov	r0, r6
 80065c2:	4639      	mov	r1, r7
 80065c4:	f7fa faaa 	bl	8000b1c <__aeabi_dcmplt>
 80065c8:	2800      	cmp	r0, #0
 80065ca:	f000 8081 	beq.w	80066d0 <_dtoa_r+0x4f8>
 80065ce:	9b01      	ldr	r3, [sp, #4]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d07d      	beq.n	80066d0 <_dtoa_r+0x4f8>
 80065d4:	f1b9 0f00 	cmp.w	r9, #0
 80065d8:	dd3c      	ble.n	8006654 <_dtoa_r+0x47c>
 80065da:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80065de:	9307      	str	r3, [sp, #28]
 80065e0:	2200      	movs	r2, #0
 80065e2:	4b91      	ldr	r3, [pc, #580]	; (8006828 <_dtoa_r+0x650>)
 80065e4:	4630      	mov	r0, r6
 80065e6:	4639      	mov	r1, r7
 80065e8:	f7fa f826 	bl	8000638 <__aeabi_dmul>
 80065ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065f0:	3501      	adds	r5, #1
 80065f2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80065f6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80065fa:	4628      	mov	r0, r5
 80065fc:	f7f9 ffb2 	bl	8000564 <__aeabi_i2d>
 8006600:	4632      	mov	r2, r6
 8006602:	463b      	mov	r3, r7
 8006604:	f7fa f818 	bl	8000638 <__aeabi_dmul>
 8006608:	4b88      	ldr	r3, [pc, #544]	; (800682c <_dtoa_r+0x654>)
 800660a:	2200      	movs	r2, #0
 800660c:	f7f9 fe5e 	bl	80002cc <__adddf3>
 8006610:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006614:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006618:	9303      	str	r3, [sp, #12]
 800661a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800661c:	2b00      	cmp	r3, #0
 800661e:	d15c      	bne.n	80066da <_dtoa_r+0x502>
 8006620:	4b83      	ldr	r3, [pc, #524]	; (8006830 <_dtoa_r+0x658>)
 8006622:	2200      	movs	r2, #0
 8006624:	4630      	mov	r0, r6
 8006626:	4639      	mov	r1, r7
 8006628:	f7f9 fe4e 	bl	80002c8 <__aeabi_dsub>
 800662c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006630:	4606      	mov	r6, r0
 8006632:	460f      	mov	r7, r1
 8006634:	f7fa fa90 	bl	8000b58 <__aeabi_dcmpgt>
 8006638:	2800      	cmp	r0, #0
 800663a:	f040 8296 	bne.w	8006b6a <_dtoa_r+0x992>
 800663e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006642:	4630      	mov	r0, r6
 8006644:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006648:	4639      	mov	r1, r7
 800664a:	f7fa fa67 	bl	8000b1c <__aeabi_dcmplt>
 800664e:	2800      	cmp	r0, #0
 8006650:	f040 8288 	bne.w	8006b64 <_dtoa_r+0x98c>
 8006654:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006658:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800665c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800665e:	2b00      	cmp	r3, #0
 8006660:	f2c0 8158 	blt.w	8006914 <_dtoa_r+0x73c>
 8006664:	f1ba 0f0e 	cmp.w	sl, #14
 8006668:	f300 8154 	bgt.w	8006914 <_dtoa_r+0x73c>
 800666c:	4b6b      	ldr	r3, [pc, #428]	; (800681c <_dtoa_r+0x644>)
 800666e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006672:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006676:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006678:	2b00      	cmp	r3, #0
 800667a:	f280 80e3 	bge.w	8006844 <_dtoa_r+0x66c>
 800667e:	9b01      	ldr	r3, [sp, #4]
 8006680:	2b00      	cmp	r3, #0
 8006682:	f300 80df 	bgt.w	8006844 <_dtoa_r+0x66c>
 8006686:	f040 826d 	bne.w	8006b64 <_dtoa_r+0x98c>
 800668a:	4b69      	ldr	r3, [pc, #420]	; (8006830 <_dtoa_r+0x658>)
 800668c:	2200      	movs	r2, #0
 800668e:	4640      	mov	r0, r8
 8006690:	4649      	mov	r1, r9
 8006692:	f7f9 ffd1 	bl	8000638 <__aeabi_dmul>
 8006696:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800669a:	f7fa fa53 	bl	8000b44 <__aeabi_dcmpge>
 800669e:	9e01      	ldr	r6, [sp, #4]
 80066a0:	4637      	mov	r7, r6
 80066a2:	2800      	cmp	r0, #0
 80066a4:	f040 8243 	bne.w	8006b2e <_dtoa_r+0x956>
 80066a8:	9d00      	ldr	r5, [sp, #0]
 80066aa:	2331      	movs	r3, #49	; 0x31
 80066ac:	f805 3b01 	strb.w	r3, [r5], #1
 80066b0:	f10a 0a01 	add.w	sl, sl, #1
 80066b4:	e23f      	b.n	8006b36 <_dtoa_r+0x95e>
 80066b6:	07f2      	lsls	r2, r6, #31
 80066b8:	d505      	bpl.n	80066c6 <_dtoa_r+0x4ee>
 80066ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066be:	f7f9 ffbb 	bl	8000638 <__aeabi_dmul>
 80066c2:	3501      	adds	r5, #1
 80066c4:	2301      	movs	r3, #1
 80066c6:	1076      	asrs	r6, r6, #1
 80066c8:	3708      	adds	r7, #8
 80066ca:	e76c      	b.n	80065a6 <_dtoa_r+0x3ce>
 80066cc:	2502      	movs	r5, #2
 80066ce:	e76f      	b.n	80065b0 <_dtoa_r+0x3d8>
 80066d0:	9b01      	ldr	r3, [sp, #4]
 80066d2:	f8cd a01c 	str.w	sl, [sp, #28]
 80066d6:	930c      	str	r3, [sp, #48]	; 0x30
 80066d8:	e78d      	b.n	80065f6 <_dtoa_r+0x41e>
 80066da:	9900      	ldr	r1, [sp, #0]
 80066dc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80066de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80066e0:	4b4e      	ldr	r3, [pc, #312]	; (800681c <_dtoa_r+0x644>)
 80066e2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80066e6:	4401      	add	r1, r0
 80066e8:	9102      	str	r1, [sp, #8]
 80066ea:	9908      	ldr	r1, [sp, #32]
 80066ec:	eeb0 8a47 	vmov.f32	s16, s14
 80066f0:	eef0 8a67 	vmov.f32	s17, s15
 80066f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80066f8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80066fc:	2900      	cmp	r1, #0
 80066fe:	d045      	beq.n	800678c <_dtoa_r+0x5b4>
 8006700:	494c      	ldr	r1, [pc, #304]	; (8006834 <_dtoa_r+0x65c>)
 8006702:	2000      	movs	r0, #0
 8006704:	f7fa f8c2 	bl	800088c <__aeabi_ddiv>
 8006708:	ec53 2b18 	vmov	r2, r3, d8
 800670c:	f7f9 fddc 	bl	80002c8 <__aeabi_dsub>
 8006710:	9d00      	ldr	r5, [sp, #0]
 8006712:	ec41 0b18 	vmov	d8, r0, r1
 8006716:	4639      	mov	r1, r7
 8006718:	4630      	mov	r0, r6
 800671a:	f7fa fa3d 	bl	8000b98 <__aeabi_d2iz>
 800671e:	900c      	str	r0, [sp, #48]	; 0x30
 8006720:	f7f9 ff20 	bl	8000564 <__aeabi_i2d>
 8006724:	4602      	mov	r2, r0
 8006726:	460b      	mov	r3, r1
 8006728:	4630      	mov	r0, r6
 800672a:	4639      	mov	r1, r7
 800672c:	f7f9 fdcc 	bl	80002c8 <__aeabi_dsub>
 8006730:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006732:	3330      	adds	r3, #48	; 0x30
 8006734:	f805 3b01 	strb.w	r3, [r5], #1
 8006738:	ec53 2b18 	vmov	r2, r3, d8
 800673c:	4606      	mov	r6, r0
 800673e:	460f      	mov	r7, r1
 8006740:	f7fa f9ec 	bl	8000b1c <__aeabi_dcmplt>
 8006744:	2800      	cmp	r0, #0
 8006746:	d165      	bne.n	8006814 <_dtoa_r+0x63c>
 8006748:	4632      	mov	r2, r6
 800674a:	463b      	mov	r3, r7
 800674c:	4935      	ldr	r1, [pc, #212]	; (8006824 <_dtoa_r+0x64c>)
 800674e:	2000      	movs	r0, #0
 8006750:	f7f9 fdba 	bl	80002c8 <__aeabi_dsub>
 8006754:	ec53 2b18 	vmov	r2, r3, d8
 8006758:	f7fa f9e0 	bl	8000b1c <__aeabi_dcmplt>
 800675c:	2800      	cmp	r0, #0
 800675e:	f040 80b9 	bne.w	80068d4 <_dtoa_r+0x6fc>
 8006762:	9b02      	ldr	r3, [sp, #8]
 8006764:	429d      	cmp	r5, r3
 8006766:	f43f af75 	beq.w	8006654 <_dtoa_r+0x47c>
 800676a:	4b2f      	ldr	r3, [pc, #188]	; (8006828 <_dtoa_r+0x650>)
 800676c:	ec51 0b18 	vmov	r0, r1, d8
 8006770:	2200      	movs	r2, #0
 8006772:	f7f9 ff61 	bl	8000638 <__aeabi_dmul>
 8006776:	4b2c      	ldr	r3, [pc, #176]	; (8006828 <_dtoa_r+0x650>)
 8006778:	ec41 0b18 	vmov	d8, r0, r1
 800677c:	2200      	movs	r2, #0
 800677e:	4630      	mov	r0, r6
 8006780:	4639      	mov	r1, r7
 8006782:	f7f9 ff59 	bl	8000638 <__aeabi_dmul>
 8006786:	4606      	mov	r6, r0
 8006788:	460f      	mov	r7, r1
 800678a:	e7c4      	b.n	8006716 <_dtoa_r+0x53e>
 800678c:	ec51 0b17 	vmov	r0, r1, d7
 8006790:	f7f9 ff52 	bl	8000638 <__aeabi_dmul>
 8006794:	9b02      	ldr	r3, [sp, #8]
 8006796:	9d00      	ldr	r5, [sp, #0]
 8006798:	930c      	str	r3, [sp, #48]	; 0x30
 800679a:	ec41 0b18 	vmov	d8, r0, r1
 800679e:	4639      	mov	r1, r7
 80067a0:	4630      	mov	r0, r6
 80067a2:	f7fa f9f9 	bl	8000b98 <__aeabi_d2iz>
 80067a6:	9011      	str	r0, [sp, #68]	; 0x44
 80067a8:	f7f9 fedc 	bl	8000564 <__aeabi_i2d>
 80067ac:	4602      	mov	r2, r0
 80067ae:	460b      	mov	r3, r1
 80067b0:	4630      	mov	r0, r6
 80067b2:	4639      	mov	r1, r7
 80067b4:	f7f9 fd88 	bl	80002c8 <__aeabi_dsub>
 80067b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80067ba:	3330      	adds	r3, #48	; 0x30
 80067bc:	f805 3b01 	strb.w	r3, [r5], #1
 80067c0:	9b02      	ldr	r3, [sp, #8]
 80067c2:	429d      	cmp	r5, r3
 80067c4:	4606      	mov	r6, r0
 80067c6:	460f      	mov	r7, r1
 80067c8:	f04f 0200 	mov.w	r2, #0
 80067cc:	d134      	bne.n	8006838 <_dtoa_r+0x660>
 80067ce:	4b19      	ldr	r3, [pc, #100]	; (8006834 <_dtoa_r+0x65c>)
 80067d0:	ec51 0b18 	vmov	r0, r1, d8
 80067d4:	f7f9 fd7a 	bl	80002cc <__adddf3>
 80067d8:	4602      	mov	r2, r0
 80067da:	460b      	mov	r3, r1
 80067dc:	4630      	mov	r0, r6
 80067de:	4639      	mov	r1, r7
 80067e0:	f7fa f9ba 	bl	8000b58 <__aeabi_dcmpgt>
 80067e4:	2800      	cmp	r0, #0
 80067e6:	d175      	bne.n	80068d4 <_dtoa_r+0x6fc>
 80067e8:	ec53 2b18 	vmov	r2, r3, d8
 80067ec:	4911      	ldr	r1, [pc, #68]	; (8006834 <_dtoa_r+0x65c>)
 80067ee:	2000      	movs	r0, #0
 80067f0:	f7f9 fd6a 	bl	80002c8 <__aeabi_dsub>
 80067f4:	4602      	mov	r2, r0
 80067f6:	460b      	mov	r3, r1
 80067f8:	4630      	mov	r0, r6
 80067fa:	4639      	mov	r1, r7
 80067fc:	f7fa f98e 	bl	8000b1c <__aeabi_dcmplt>
 8006800:	2800      	cmp	r0, #0
 8006802:	f43f af27 	beq.w	8006654 <_dtoa_r+0x47c>
 8006806:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006808:	1e6b      	subs	r3, r5, #1
 800680a:	930c      	str	r3, [sp, #48]	; 0x30
 800680c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006810:	2b30      	cmp	r3, #48	; 0x30
 8006812:	d0f8      	beq.n	8006806 <_dtoa_r+0x62e>
 8006814:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006818:	e04a      	b.n	80068b0 <_dtoa_r+0x6d8>
 800681a:	bf00      	nop
 800681c:	08009c88 	.word	0x08009c88
 8006820:	08009c60 	.word	0x08009c60
 8006824:	3ff00000 	.word	0x3ff00000
 8006828:	40240000 	.word	0x40240000
 800682c:	401c0000 	.word	0x401c0000
 8006830:	40140000 	.word	0x40140000
 8006834:	3fe00000 	.word	0x3fe00000
 8006838:	4baf      	ldr	r3, [pc, #700]	; (8006af8 <_dtoa_r+0x920>)
 800683a:	f7f9 fefd 	bl	8000638 <__aeabi_dmul>
 800683e:	4606      	mov	r6, r0
 8006840:	460f      	mov	r7, r1
 8006842:	e7ac      	b.n	800679e <_dtoa_r+0x5c6>
 8006844:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006848:	9d00      	ldr	r5, [sp, #0]
 800684a:	4642      	mov	r2, r8
 800684c:	464b      	mov	r3, r9
 800684e:	4630      	mov	r0, r6
 8006850:	4639      	mov	r1, r7
 8006852:	f7fa f81b 	bl	800088c <__aeabi_ddiv>
 8006856:	f7fa f99f 	bl	8000b98 <__aeabi_d2iz>
 800685a:	9002      	str	r0, [sp, #8]
 800685c:	f7f9 fe82 	bl	8000564 <__aeabi_i2d>
 8006860:	4642      	mov	r2, r8
 8006862:	464b      	mov	r3, r9
 8006864:	f7f9 fee8 	bl	8000638 <__aeabi_dmul>
 8006868:	4602      	mov	r2, r0
 800686a:	460b      	mov	r3, r1
 800686c:	4630      	mov	r0, r6
 800686e:	4639      	mov	r1, r7
 8006870:	f7f9 fd2a 	bl	80002c8 <__aeabi_dsub>
 8006874:	9e02      	ldr	r6, [sp, #8]
 8006876:	9f01      	ldr	r7, [sp, #4]
 8006878:	3630      	adds	r6, #48	; 0x30
 800687a:	f805 6b01 	strb.w	r6, [r5], #1
 800687e:	9e00      	ldr	r6, [sp, #0]
 8006880:	1bae      	subs	r6, r5, r6
 8006882:	42b7      	cmp	r7, r6
 8006884:	4602      	mov	r2, r0
 8006886:	460b      	mov	r3, r1
 8006888:	d137      	bne.n	80068fa <_dtoa_r+0x722>
 800688a:	f7f9 fd1f 	bl	80002cc <__adddf3>
 800688e:	4642      	mov	r2, r8
 8006890:	464b      	mov	r3, r9
 8006892:	4606      	mov	r6, r0
 8006894:	460f      	mov	r7, r1
 8006896:	f7fa f95f 	bl	8000b58 <__aeabi_dcmpgt>
 800689a:	b9c8      	cbnz	r0, 80068d0 <_dtoa_r+0x6f8>
 800689c:	4642      	mov	r2, r8
 800689e:	464b      	mov	r3, r9
 80068a0:	4630      	mov	r0, r6
 80068a2:	4639      	mov	r1, r7
 80068a4:	f7fa f930 	bl	8000b08 <__aeabi_dcmpeq>
 80068a8:	b110      	cbz	r0, 80068b0 <_dtoa_r+0x6d8>
 80068aa:	9b02      	ldr	r3, [sp, #8]
 80068ac:	07d9      	lsls	r1, r3, #31
 80068ae:	d40f      	bmi.n	80068d0 <_dtoa_r+0x6f8>
 80068b0:	4620      	mov	r0, r4
 80068b2:	4659      	mov	r1, fp
 80068b4:	f000 fad6 	bl	8006e64 <_Bfree>
 80068b8:	2300      	movs	r3, #0
 80068ba:	702b      	strb	r3, [r5, #0]
 80068bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80068be:	f10a 0001 	add.w	r0, sl, #1
 80068c2:	6018      	str	r0, [r3, #0]
 80068c4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	f43f acd8 	beq.w	800627c <_dtoa_r+0xa4>
 80068cc:	601d      	str	r5, [r3, #0]
 80068ce:	e4d5      	b.n	800627c <_dtoa_r+0xa4>
 80068d0:	f8cd a01c 	str.w	sl, [sp, #28]
 80068d4:	462b      	mov	r3, r5
 80068d6:	461d      	mov	r5, r3
 80068d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80068dc:	2a39      	cmp	r2, #57	; 0x39
 80068de:	d108      	bne.n	80068f2 <_dtoa_r+0x71a>
 80068e0:	9a00      	ldr	r2, [sp, #0]
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d1f7      	bne.n	80068d6 <_dtoa_r+0x6fe>
 80068e6:	9a07      	ldr	r2, [sp, #28]
 80068e8:	9900      	ldr	r1, [sp, #0]
 80068ea:	3201      	adds	r2, #1
 80068ec:	9207      	str	r2, [sp, #28]
 80068ee:	2230      	movs	r2, #48	; 0x30
 80068f0:	700a      	strb	r2, [r1, #0]
 80068f2:	781a      	ldrb	r2, [r3, #0]
 80068f4:	3201      	adds	r2, #1
 80068f6:	701a      	strb	r2, [r3, #0]
 80068f8:	e78c      	b.n	8006814 <_dtoa_r+0x63c>
 80068fa:	4b7f      	ldr	r3, [pc, #508]	; (8006af8 <_dtoa_r+0x920>)
 80068fc:	2200      	movs	r2, #0
 80068fe:	f7f9 fe9b 	bl	8000638 <__aeabi_dmul>
 8006902:	2200      	movs	r2, #0
 8006904:	2300      	movs	r3, #0
 8006906:	4606      	mov	r6, r0
 8006908:	460f      	mov	r7, r1
 800690a:	f7fa f8fd 	bl	8000b08 <__aeabi_dcmpeq>
 800690e:	2800      	cmp	r0, #0
 8006910:	d09b      	beq.n	800684a <_dtoa_r+0x672>
 8006912:	e7cd      	b.n	80068b0 <_dtoa_r+0x6d8>
 8006914:	9a08      	ldr	r2, [sp, #32]
 8006916:	2a00      	cmp	r2, #0
 8006918:	f000 80c4 	beq.w	8006aa4 <_dtoa_r+0x8cc>
 800691c:	9a05      	ldr	r2, [sp, #20]
 800691e:	2a01      	cmp	r2, #1
 8006920:	f300 80a8 	bgt.w	8006a74 <_dtoa_r+0x89c>
 8006924:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006926:	2a00      	cmp	r2, #0
 8006928:	f000 80a0 	beq.w	8006a6c <_dtoa_r+0x894>
 800692c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006930:	9e06      	ldr	r6, [sp, #24]
 8006932:	4645      	mov	r5, r8
 8006934:	9a04      	ldr	r2, [sp, #16]
 8006936:	2101      	movs	r1, #1
 8006938:	441a      	add	r2, r3
 800693a:	4620      	mov	r0, r4
 800693c:	4498      	add	r8, r3
 800693e:	9204      	str	r2, [sp, #16]
 8006940:	f000 fb4c 	bl	8006fdc <__i2b>
 8006944:	4607      	mov	r7, r0
 8006946:	2d00      	cmp	r5, #0
 8006948:	dd0b      	ble.n	8006962 <_dtoa_r+0x78a>
 800694a:	9b04      	ldr	r3, [sp, #16]
 800694c:	2b00      	cmp	r3, #0
 800694e:	dd08      	ble.n	8006962 <_dtoa_r+0x78a>
 8006950:	42ab      	cmp	r3, r5
 8006952:	9a04      	ldr	r2, [sp, #16]
 8006954:	bfa8      	it	ge
 8006956:	462b      	movge	r3, r5
 8006958:	eba8 0803 	sub.w	r8, r8, r3
 800695c:	1aed      	subs	r5, r5, r3
 800695e:	1ad3      	subs	r3, r2, r3
 8006960:	9304      	str	r3, [sp, #16]
 8006962:	9b06      	ldr	r3, [sp, #24]
 8006964:	b1fb      	cbz	r3, 80069a6 <_dtoa_r+0x7ce>
 8006966:	9b08      	ldr	r3, [sp, #32]
 8006968:	2b00      	cmp	r3, #0
 800696a:	f000 809f 	beq.w	8006aac <_dtoa_r+0x8d4>
 800696e:	2e00      	cmp	r6, #0
 8006970:	dd11      	ble.n	8006996 <_dtoa_r+0x7be>
 8006972:	4639      	mov	r1, r7
 8006974:	4632      	mov	r2, r6
 8006976:	4620      	mov	r0, r4
 8006978:	f000 fbec 	bl	8007154 <__pow5mult>
 800697c:	465a      	mov	r2, fp
 800697e:	4601      	mov	r1, r0
 8006980:	4607      	mov	r7, r0
 8006982:	4620      	mov	r0, r4
 8006984:	f000 fb40 	bl	8007008 <__multiply>
 8006988:	4659      	mov	r1, fp
 800698a:	9007      	str	r0, [sp, #28]
 800698c:	4620      	mov	r0, r4
 800698e:	f000 fa69 	bl	8006e64 <_Bfree>
 8006992:	9b07      	ldr	r3, [sp, #28]
 8006994:	469b      	mov	fp, r3
 8006996:	9b06      	ldr	r3, [sp, #24]
 8006998:	1b9a      	subs	r2, r3, r6
 800699a:	d004      	beq.n	80069a6 <_dtoa_r+0x7ce>
 800699c:	4659      	mov	r1, fp
 800699e:	4620      	mov	r0, r4
 80069a0:	f000 fbd8 	bl	8007154 <__pow5mult>
 80069a4:	4683      	mov	fp, r0
 80069a6:	2101      	movs	r1, #1
 80069a8:	4620      	mov	r0, r4
 80069aa:	f000 fb17 	bl	8006fdc <__i2b>
 80069ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	4606      	mov	r6, r0
 80069b4:	dd7c      	ble.n	8006ab0 <_dtoa_r+0x8d8>
 80069b6:	461a      	mov	r2, r3
 80069b8:	4601      	mov	r1, r0
 80069ba:	4620      	mov	r0, r4
 80069bc:	f000 fbca 	bl	8007154 <__pow5mult>
 80069c0:	9b05      	ldr	r3, [sp, #20]
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	4606      	mov	r6, r0
 80069c6:	dd76      	ble.n	8006ab6 <_dtoa_r+0x8de>
 80069c8:	2300      	movs	r3, #0
 80069ca:	9306      	str	r3, [sp, #24]
 80069cc:	6933      	ldr	r3, [r6, #16]
 80069ce:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80069d2:	6918      	ldr	r0, [r3, #16]
 80069d4:	f000 fab2 	bl	8006f3c <__hi0bits>
 80069d8:	f1c0 0020 	rsb	r0, r0, #32
 80069dc:	9b04      	ldr	r3, [sp, #16]
 80069de:	4418      	add	r0, r3
 80069e0:	f010 001f 	ands.w	r0, r0, #31
 80069e4:	f000 8086 	beq.w	8006af4 <_dtoa_r+0x91c>
 80069e8:	f1c0 0320 	rsb	r3, r0, #32
 80069ec:	2b04      	cmp	r3, #4
 80069ee:	dd7f      	ble.n	8006af0 <_dtoa_r+0x918>
 80069f0:	f1c0 001c 	rsb	r0, r0, #28
 80069f4:	9b04      	ldr	r3, [sp, #16]
 80069f6:	4403      	add	r3, r0
 80069f8:	4480      	add	r8, r0
 80069fa:	4405      	add	r5, r0
 80069fc:	9304      	str	r3, [sp, #16]
 80069fe:	f1b8 0f00 	cmp.w	r8, #0
 8006a02:	dd05      	ble.n	8006a10 <_dtoa_r+0x838>
 8006a04:	4659      	mov	r1, fp
 8006a06:	4642      	mov	r2, r8
 8006a08:	4620      	mov	r0, r4
 8006a0a:	f000 fbfd 	bl	8007208 <__lshift>
 8006a0e:	4683      	mov	fp, r0
 8006a10:	9b04      	ldr	r3, [sp, #16]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	dd05      	ble.n	8006a22 <_dtoa_r+0x84a>
 8006a16:	4631      	mov	r1, r6
 8006a18:	461a      	mov	r2, r3
 8006a1a:	4620      	mov	r0, r4
 8006a1c:	f000 fbf4 	bl	8007208 <__lshift>
 8006a20:	4606      	mov	r6, r0
 8006a22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d069      	beq.n	8006afc <_dtoa_r+0x924>
 8006a28:	4631      	mov	r1, r6
 8006a2a:	4658      	mov	r0, fp
 8006a2c:	f000 fc58 	bl	80072e0 <__mcmp>
 8006a30:	2800      	cmp	r0, #0
 8006a32:	da63      	bge.n	8006afc <_dtoa_r+0x924>
 8006a34:	2300      	movs	r3, #0
 8006a36:	4659      	mov	r1, fp
 8006a38:	220a      	movs	r2, #10
 8006a3a:	4620      	mov	r0, r4
 8006a3c:	f000 fa34 	bl	8006ea8 <__multadd>
 8006a40:	9b08      	ldr	r3, [sp, #32]
 8006a42:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006a46:	4683      	mov	fp, r0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	f000 818f 	beq.w	8006d6c <_dtoa_r+0xb94>
 8006a4e:	4639      	mov	r1, r7
 8006a50:	2300      	movs	r3, #0
 8006a52:	220a      	movs	r2, #10
 8006a54:	4620      	mov	r0, r4
 8006a56:	f000 fa27 	bl	8006ea8 <__multadd>
 8006a5a:	f1b9 0f00 	cmp.w	r9, #0
 8006a5e:	4607      	mov	r7, r0
 8006a60:	f300 808e 	bgt.w	8006b80 <_dtoa_r+0x9a8>
 8006a64:	9b05      	ldr	r3, [sp, #20]
 8006a66:	2b02      	cmp	r3, #2
 8006a68:	dc50      	bgt.n	8006b0c <_dtoa_r+0x934>
 8006a6a:	e089      	b.n	8006b80 <_dtoa_r+0x9a8>
 8006a6c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a6e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006a72:	e75d      	b.n	8006930 <_dtoa_r+0x758>
 8006a74:	9b01      	ldr	r3, [sp, #4]
 8006a76:	1e5e      	subs	r6, r3, #1
 8006a78:	9b06      	ldr	r3, [sp, #24]
 8006a7a:	42b3      	cmp	r3, r6
 8006a7c:	bfbf      	itttt	lt
 8006a7e:	9b06      	ldrlt	r3, [sp, #24]
 8006a80:	9606      	strlt	r6, [sp, #24]
 8006a82:	1af2      	sublt	r2, r6, r3
 8006a84:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8006a86:	bfb6      	itet	lt
 8006a88:	189b      	addlt	r3, r3, r2
 8006a8a:	1b9e      	subge	r6, r3, r6
 8006a8c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8006a8e:	9b01      	ldr	r3, [sp, #4]
 8006a90:	bfb8      	it	lt
 8006a92:	2600      	movlt	r6, #0
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	bfb5      	itete	lt
 8006a98:	eba8 0503 	sublt.w	r5, r8, r3
 8006a9c:	9b01      	ldrge	r3, [sp, #4]
 8006a9e:	2300      	movlt	r3, #0
 8006aa0:	4645      	movge	r5, r8
 8006aa2:	e747      	b.n	8006934 <_dtoa_r+0x75c>
 8006aa4:	9e06      	ldr	r6, [sp, #24]
 8006aa6:	9f08      	ldr	r7, [sp, #32]
 8006aa8:	4645      	mov	r5, r8
 8006aaa:	e74c      	b.n	8006946 <_dtoa_r+0x76e>
 8006aac:	9a06      	ldr	r2, [sp, #24]
 8006aae:	e775      	b.n	800699c <_dtoa_r+0x7c4>
 8006ab0:	9b05      	ldr	r3, [sp, #20]
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	dc18      	bgt.n	8006ae8 <_dtoa_r+0x910>
 8006ab6:	9b02      	ldr	r3, [sp, #8]
 8006ab8:	b9b3      	cbnz	r3, 8006ae8 <_dtoa_r+0x910>
 8006aba:	9b03      	ldr	r3, [sp, #12]
 8006abc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ac0:	b9a3      	cbnz	r3, 8006aec <_dtoa_r+0x914>
 8006ac2:	9b03      	ldr	r3, [sp, #12]
 8006ac4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ac8:	0d1b      	lsrs	r3, r3, #20
 8006aca:	051b      	lsls	r3, r3, #20
 8006acc:	b12b      	cbz	r3, 8006ada <_dtoa_r+0x902>
 8006ace:	9b04      	ldr	r3, [sp, #16]
 8006ad0:	3301      	adds	r3, #1
 8006ad2:	9304      	str	r3, [sp, #16]
 8006ad4:	f108 0801 	add.w	r8, r8, #1
 8006ad8:	2301      	movs	r3, #1
 8006ada:	9306      	str	r3, [sp, #24]
 8006adc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	f47f af74 	bne.w	80069cc <_dtoa_r+0x7f4>
 8006ae4:	2001      	movs	r0, #1
 8006ae6:	e779      	b.n	80069dc <_dtoa_r+0x804>
 8006ae8:	2300      	movs	r3, #0
 8006aea:	e7f6      	b.n	8006ada <_dtoa_r+0x902>
 8006aec:	9b02      	ldr	r3, [sp, #8]
 8006aee:	e7f4      	b.n	8006ada <_dtoa_r+0x902>
 8006af0:	d085      	beq.n	80069fe <_dtoa_r+0x826>
 8006af2:	4618      	mov	r0, r3
 8006af4:	301c      	adds	r0, #28
 8006af6:	e77d      	b.n	80069f4 <_dtoa_r+0x81c>
 8006af8:	40240000 	.word	0x40240000
 8006afc:	9b01      	ldr	r3, [sp, #4]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	dc38      	bgt.n	8006b74 <_dtoa_r+0x99c>
 8006b02:	9b05      	ldr	r3, [sp, #20]
 8006b04:	2b02      	cmp	r3, #2
 8006b06:	dd35      	ble.n	8006b74 <_dtoa_r+0x99c>
 8006b08:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006b0c:	f1b9 0f00 	cmp.w	r9, #0
 8006b10:	d10d      	bne.n	8006b2e <_dtoa_r+0x956>
 8006b12:	4631      	mov	r1, r6
 8006b14:	464b      	mov	r3, r9
 8006b16:	2205      	movs	r2, #5
 8006b18:	4620      	mov	r0, r4
 8006b1a:	f000 f9c5 	bl	8006ea8 <__multadd>
 8006b1e:	4601      	mov	r1, r0
 8006b20:	4606      	mov	r6, r0
 8006b22:	4658      	mov	r0, fp
 8006b24:	f000 fbdc 	bl	80072e0 <__mcmp>
 8006b28:	2800      	cmp	r0, #0
 8006b2a:	f73f adbd 	bgt.w	80066a8 <_dtoa_r+0x4d0>
 8006b2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b30:	9d00      	ldr	r5, [sp, #0]
 8006b32:	ea6f 0a03 	mvn.w	sl, r3
 8006b36:	f04f 0800 	mov.w	r8, #0
 8006b3a:	4631      	mov	r1, r6
 8006b3c:	4620      	mov	r0, r4
 8006b3e:	f000 f991 	bl	8006e64 <_Bfree>
 8006b42:	2f00      	cmp	r7, #0
 8006b44:	f43f aeb4 	beq.w	80068b0 <_dtoa_r+0x6d8>
 8006b48:	f1b8 0f00 	cmp.w	r8, #0
 8006b4c:	d005      	beq.n	8006b5a <_dtoa_r+0x982>
 8006b4e:	45b8      	cmp	r8, r7
 8006b50:	d003      	beq.n	8006b5a <_dtoa_r+0x982>
 8006b52:	4641      	mov	r1, r8
 8006b54:	4620      	mov	r0, r4
 8006b56:	f000 f985 	bl	8006e64 <_Bfree>
 8006b5a:	4639      	mov	r1, r7
 8006b5c:	4620      	mov	r0, r4
 8006b5e:	f000 f981 	bl	8006e64 <_Bfree>
 8006b62:	e6a5      	b.n	80068b0 <_dtoa_r+0x6d8>
 8006b64:	2600      	movs	r6, #0
 8006b66:	4637      	mov	r7, r6
 8006b68:	e7e1      	b.n	8006b2e <_dtoa_r+0x956>
 8006b6a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006b6c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006b70:	4637      	mov	r7, r6
 8006b72:	e599      	b.n	80066a8 <_dtoa_r+0x4d0>
 8006b74:	9b08      	ldr	r3, [sp, #32]
 8006b76:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	f000 80fd 	beq.w	8006d7a <_dtoa_r+0xba2>
 8006b80:	2d00      	cmp	r5, #0
 8006b82:	dd05      	ble.n	8006b90 <_dtoa_r+0x9b8>
 8006b84:	4639      	mov	r1, r7
 8006b86:	462a      	mov	r2, r5
 8006b88:	4620      	mov	r0, r4
 8006b8a:	f000 fb3d 	bl	8007208 <__lshift>
 8006b8e:	4607      	mov	r7, r0
 8006b90:	9b06      	ldr	r3, [sp, #24]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d05c      	beq.n	8006c50 <_dtoa_r+0xa78>
 8006b96:	6879      	ldr	r1, [r7, #4]
 8006b98:	4620      	mov	r0, r4
 8006b9a:	f000 f923 	bl	8006de4 <_Balloc>
 8006b9e:	4605      	mov	r5, r0
 8006ba0:	b928      	cbnz	r0, 8006bae <_dtoa_r+0x9d6>
 8006ba2:	4b80      	ldr	r3, [pc, #512]	; (8006da4 <_dtoa_r+0xbcc>)
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006baa:	f7ff bb2e 	b.w	800620a <_dtoa_r+0x32>
 8006bae:	693a      	ldr	r2, [r7, #16]
 8006bb0:	3202      	adds	r2, #2
 8006bb2:	0092      	lsls	r2, r2, #2
 8006bb4:	f107 010c 	add.w	r1, r7, #12
 8006bb8:	300c      	adds	r0, #12
 8006bba:	f000 f905 	bl	8006dc8 <memcpy>
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	4629      	mov	r1, r5
 8006bc2:	4620      	mov	r0, r4
 8006bc4:	f000 fb20 	bl	8007208 <__lshift>
 8006bc8:	9b00      	ldr	r3, [sp, #0]
 8006bca:	3301      	adds	r3, #1
 8006bcc:	9301      	str	r3, [sp, #4]
 8006bce:	9b00      	ldr	r3, [sp, #0]
 8006bd0:	444b      	add	r3, r9
 8006bd2:	9307      	str	r3, [sp, #28]
 8006bd4:	9b02      	ldr	r3, [sp, #8]
 8006bd6:	f003 0301 	and.w	r3, r3, #1
 8006bda:	46b8      	mov	r8, r7
 8006bdc:	9306      	str	r3, [sp, #24]
 8006bde:	4607      	mov	r7, r0
 8006be0:	9b01      	ldr	r3, [sp, #4]
 8006be2:	4631      	mov	r1, r6
 8006be4:	3b01      	subs	r3, #1
 8006be6:	4658      	mov	r0, fp
 8006be8:	9302      	str	r3, [sp, #8]
 8006bea:	f7ff fa69 	bl	80060c0 <quorem>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	3330      	adds	r3, #48	; 0x30
 8006bf2:	9004      	str	r0, [sp, #16]
 8006bf4:	4641      	mov	r1, r8
 8006bf6:	4658      	mov	r0, fp
 8006bf8:	9308      	str	r3, [sp, #32]
 8006bfa:	f000 fb71 	bl	80072e0 <__mcmp>
 8006bfe:	463a      	mov	r2, r7
 8006c00:	4681      	mov	r9, r0
 8006c02:	4631      	mov	r1, r6
 8006c04:	4620      	mov	r0, r4
 8006c06:	f000 fb87 	bl	8007318 <__mdiff>
 8006c0a:	68c2      	ldr	r2, [r0, #12]
 8006c0c:	9b08      	ldr	r3, [sp, #32]
 8006c0e:	4605      	mov	r5, r0
 8006c10:	bb02      	cbnz	r2, 8006c54 <_dtoa_r+0xa7c>
 8006c12:	4601      	mov	r1, r0
 8006c14:	4658      	mov	r0, fp
 8006c16:	f000 fb63 	bl	80072e0 <__mcmp>
 8006c1a:	9b08      	ldr	r3, [sp, #32]
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	4629      	mov	r1, r5
 8006c20:	4620      	mov	r0, r4
 8006c22:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8006c26:	f000 f91d 	bl	8006e64 <_Bfree>
 8006c2a:	9b05      	ldr	r3, [sp, #20]
 8006c2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c2e:	9d01      	ldr	r5, [sp, #4]
 8006c30:	ea43 0102 	orr.w	r1, r3, r2
 8006c34:	9b06      	ldr	r3, [sp, #24]
 8006c36:	430b      	orrs	r3, r1
 8006c38:	9b08      	ldr	r3, [sp, #32]
 8006c3a:	d10d      	bne.n	8006c58 <_dtoa_r+0xa80>
 8006c3c:	2b39      	cmp	r3, #57	; 0x39
 8006c3e:	d029      	beq.n	8006c94 <_dtoa_r+0xabc>
 8006c40:	f1b9 0f00 	cmp.w	r9, #0
 8006c44:	dd01      	ble.n	8006c4a <_dtoa_r+0xa72>
 8006c46:	9b04      	ldr	r3, [sp, #16]
 8006c48:	3331      	adds	r3, #49	; 0x31
 8006c4a:	9a02      	ldr	r2, [sp, #8]
 8006c4c:	7013      	strb	r3, [r2, #0]
 8006c4e:	e774      	b.n	8006b3a <_dtoa_r+0x962>
 8006c50:	4638      	mov	r0, r7
 8006c52:	e7b9      	b.n	8006bc8 <_dtoa_r+0x9f0>
 8006c54:	2201      	movs	r2, #1
 8006c56:	e7e2      	b.n	8006c1e <_dtoa_r+0xa46>
 8006c58:	f1b9 0f00 	cmp.w	r9, #0
 8006c5c:	db06      	blt.n	8006c6c <_dtoa_r+0xa94>
 8006c5e:	9905      	ldr	r1, [sp, #20]
 8006c60:	ea41 0909 	orr.w	r9, r1, r9
 8006c64:	9906      	ldr	r1, [sp, #24]
 8006c66:	ea59 0101 	orrs.w	r1, r9, r1
 8006c6a:	d120      	bne.n	8006cae <_dtoa_r+0xad6>
 8006c6c:	2a00      	cmp	r2, #0
 8006c6e:	ddec      	ble.n	8006c4a <_dtoa_r+0xa72>
 8006c70:	4659      	mov	r1, fp
 8006c72:	2201      	movs	r2, #1
 8006c74:	4620      	mov	r0, r4
 8006c76:	9301      	str	r3, [sp, #4]
 8006c78:	f000 fac6 	bl	8007208 <__lshift>
 8006c7c:	4631      	mov	r1, r6
 8006c7e:	4683      	mov	fp, r0
 8006c80:	f000 fb2e 	bl	80072e0 <__mcmp>
 8006c84:	2800      	cmp	r0, #0
 8006c86:	9b01      	ldr	r3, [sp, #4]
 8006c88:	dc02      	bgt.n	8006c90 <_dtoa_r+0xab8>
 8006c8a:	d1de      	bne.n	8006c4a <_dtoa_r+0xa72>
 8006c8c:	07da      	lsls	r2, r3, #31
 8006c8e:	d5dc      	bpl.n	8006c4a <_dtoa_r+0xa72>
 8006c90:	2b39      	cmp	r3, #57	; 0x39
 8006c92:	d1d8      	bne.n	8006c46 <_dtoa_r+0xa6e>
 8006c94:	9a02      	ldr	r2, [sp, #8]
 8006c96:	2339      	movs	r3, #57	; 0x39
 8006c98:	7013      	strb	r3, [r2, #0]
 8006c9a:	462b      	mov	r3, r5
 8006c9c:	461d      	mov	r5, r3
 8006c9e:	3b01      	subs	r3, #1
 8006ca0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006ca4:	2a39      	cmp	r2, #57	; 0x39
 8006ca6:	d050      	beq.n	8006d4a <_dtoa_r+0xb72>
 8006ca8:	3201      	adds	r2, #1
 8006caa:	701a      	strb	r2, [r3, #0]
 8006cac:	e745      	b.n	8006b3a <_dtoa_r+0x962>
 8006cae:	2a00      	cmp	r2, #0
 8006cb0:	dd03      	ble.n	8006cba <_dtoa_r+0xae2>
 8006cb2:	2b39      	cmp	r3, #57	; 0x39
 8006cb4:	d0ee      	beq.n	8006c94 <_dtoa_r+0xabc>
 8006cb6:	3301      	adds	r3, #1
 8006cb8:	e7c7      	b.n	8006c4a <_dtoa_r+0xa72>
 8006cba:	9a01      	ldr	r2, [sp, #4]
 8006cbc:	9907      	ldr	r1, [sp, #28]
 8006cbe:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006cc2:	428a      	cmp	r2, r1
 8006cc4:	d02a      	beq.n	8006d1c <_dtoa_r+0xb44>
 8006cc6:	4659      	mov	r1, fp
 8006cc8:	2300      	movs	r3, #0
 8006cca:	220a      	movs	r2, #10
 8006ccc:	4620      	mov	r0, r4
 8006cce:	f000 f8eb 	bl	8006ea8 <__multadd>
 8006cd2:	45b8      	cmp	r8, r7
 8006cd4:	4683      	mov	fp, r0
 8006cd6:	f04f 0300 	mov.w	r3, #0
 8006cda:	f04f 020a 	mov.w	r2, #10
 8006cde:	4641      	mov	r1, r8
 8006ce0:	4620      	mov	r0, r4
 8006ce2:	d107      	bne.n	8006cf4 <_dtoa_r+0xb1c>
 8006ce4:	f000 f8e0 	bl	8006ea8 <__multadd>
 8006ce8:	4680      	mov	r8, r0
 8006cea:	4607      	mov	r7, r0
 8006cec:	9b01      	ldr	r3, [sp, #4]
 8006cee:	3301      	adds	r3, #1
 8006cf0:	9301      	str	r3, [sp, #4]
 8006cf2:	e775      	b.n	8006be0 <_dtoa_r+0xa08>
 8006cf4:	f000 f8d8 	bl	8006ea8 <__multadd>
 8006cf8:	4639      	mov	r1, r7
 8006cfa:	4680      	mov	r8, r0
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	220a      	movs	r2, #10
 8006d00:	4620      	mov	r0, r4
 8006d02:	f000 f8d1 	bl	8006ea8 <__multadd>
 8006d06:	4607      	mov	r7, r0
 8006d08:	e7f0      	b.n	8006cec <_dtoa_r+0xb14>
 8006d0a:	f1b9 0f00 	cmp.w	r9, #0
 8006d0e:	9a00      	ldr	r2, [sp, #0]
 8006d10:	bfcc      	ite	gt
 8006d12:	464d      	movgt	r5, r9
 8006d14:	2501      	movle	r5, #1
 8006d16:	4415      	add	r5, r2
 8006d18:	f04f 0800 	mov.w	r8, #0
 8006d1c:	4659      	mov	r1, fp
 8006d1e:	2201      	movs	r2, #1
 8006d20:	4620      	mov	r0, r4
 8006d22:	9301      	str	r3, [sp, #4]
 8006d24:	f000 fa70 	bl	8007208 <__lshift>
 8006d28:	4631      	mov	r1, r6
 8006d2a:	4683      	mov	fp, r0
 8006d2c:	f000 fad8 	bl	80072e0 <__mcmp>
 8006d30:	2800      	cmp	r0, #0
 8006d32:	dcb2      	bgt.n	8006c9a <_dtoa_r+0xac2>
 8006d34:	d102      	bne.n	8006d3c <_dtoa_r+0xb64>
 8006d36:	9b01      	ldr	r3, [sp, #4]
 8006d38:	07db      	lsls	r3, r3, #31
 8006d3a:	d4ae      	bmi.n	8006c9a <_dtoa_r+0xac2>
 8006d3c:	462b      	mov	r3, r5
 8006d3e:	461d      	mov	r5, r3
 8006d40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006d44:	2a30      	cmp	r2, #48	; 0x30
 8006d46:	d0fa      	beq.n	8006d3e <_dtoa_r+0xb66>
 8006d48:	e6f7      	b.n	8006b3a <_dtoa_r+0x962>
 8006d4a:	9a00      	ldr	r2, [sp, #0]
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d1a5      	bne.n	8006c9c <_dtoa_r+0xac4>
 8006d50:	f10a 0a01 	add.w	sl, sl, #1
 8006d54:	2331      	movs	r3, #49	; 0x31
 8006d56:	e779      	b.n	8006c4c <_dtoa_r+0xa74>
 8006d58:	4b13      	ldr	r3, [pc, #76]	; (8006da8 <_dtoa_r+0xbd0>)
 8006d5a:	f7ff baaf 	b.w	80062bc <_dtoa_r+0xe4>
 8006d5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	f47f aa86 	bne.w	8006272 <_dtoa_r+0x9a>
 8006d66:	4b11      	ldr	r3, [pc, #68]	; (8006dac <_dtoa_r+0xbd4>)
 8006d68:	f7ff baa8 	b.w	80062bc <_dtoa_r+0xe4>
 8006d6c:	f1b9 0f00 	cmp.w	r9, #0
 8006d70:	dc03      	bgt.n	8006d7a <_dtoa_r+0xba2>
 8006d72:	9b05      	ldr	r3, [sp, #20]
 8006d74:	2b02      	cmp	r3, #2
 8006d76:	f73f aec9 	bgt.w	8006b0c <_dtoa_r+0x934>
 8006d7a:	9d00      	ldr	r5, [sp, #0]
 8006d7c:	4631      	mov	r1, r6
 8006d7e:	4658      	mov	r0, fp
 8006d80:	f7ff f99e 	bl	80060c0 <quorem>
 8006d84:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006d88:	f805 3b01 	strb.w	r3, [r5], #1
 8006d8c:	9a00      	ldr	r2, [sp, #0]
 8006d8e:	1aaa      	subs	r2, r5, r2
 8006d90:	4591      	cmp	r9, r2
 8006d92:	ddba      	ble.n	8006d0a <_dtoa_r+0xb32>
 8006d94:	4659      	mov	r1, fp
 8006d96:	2300      	movs	r3, #0
 8006d98:	220a      	movs	r2, #10
 8006d9a:	4620      	mov	r0, r4
 8006d9c:	f000 f884 	bl	8006ea8 <__multadd>
 8006da0:	4683      	mov	fp, r0
 8006da2:	e7eb      	b.n	8006d7c <_dtoa_r+0xba4>
 8006da4:	08009bef 	.word	0x08009bef
 8006da8:	08009b48 	.word	0x08009b48
 8006dac:	08009b6c 	.word	0x08009b6c

08006db0 <_localeconv_r>:
 8006db0:	4800      	ldr	r0, [pc, #0]	; (8006db4 <_localeconv_r+0x4>)
 8006db2:	4770      	bx	lr
 8006db4:	20000168 	.word	0x20000168

08006db8 <malloc>:
 8006db8:	4b02      	ldr	r3, [pc, #8]	; (8006dc4 <malloc+0xc>)
 8006dba:	4601      	mov	r1, r0
 8006dbc:	6818      	ldr	r0, [r3, #0]
 8006dbe:	f000 bbef 	b.w	80075a0 <_malloc_r>
 8006dc2:	bf00      	nop
 8006dc4:	20000014 	.word	0x20000014

08006dc8 <memcpy>:
 8006dc8:	440a      	add	r2, r1
 8006dca:	4291      	cmp	r1, r2
 8006dcc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006dd0:	d100      	bne.n	8006dd4 <memcpy+0xc>
 8006dd2:	4770      	bx	lr
 8006dd4:	b510      	push	{r4, lr}
 8006dd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006dda:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006dde:	4291      	cmp	r1, r2
 8006de0:	d1f9      	bne.n	8006dd6 <memcpy+0xe>
 8006de2:	bd10      	pop	{r4, pc}

08006de4 <_Balloc>:
 8006de4:	b570      	push	{r4, r5, r6, lr}
 8006de6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006de8:	4604      	mov	r4, r0
 8006dea:	460d      	mov	r5, r1
 8006dec:	b976      	cbnz	r6, 8006e0c <_Balloc+0x28>
 8006dee:	2010      	movs	r0, #16
 8006df0:	f7ff ffe2 	bl	8006db8 <malloc>
 8006df4:	4602      	mov	r2, r0
 8006df6:	6260      	str	r0, [r4, #36]	; 0x24
 8006df8:	b920      	cbnz	r0, 8006e04 <_Balloc+0x20>
 8006dfa:	4b18      	ldr	r3, [pc, #96]	; (8006e5c <_Balloc+0x78>)
 8006dfc:	4818      	ldr	r0, [pc, #96]	; (8006e60 <_Balloc+0x7c>)
 8006dfe:	2166      	movs	r1, #102	; 0x66
 8006e00:	f000 fd94 	bl	800792c <__assert_func>
 8006e04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e08:	6006      	str	r6, [r0, #0]
 8006e0a:	60c6      	str	r6, [r0, #12]
 8006e0c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006e0e:	68f3      	ldr	r3, [r6, #12]
 8006e10:	b183      	cbz	r3, 8006e34 <_Balloc+0x50>
 8006e12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e14:	68db      	ldr	r3, [r3, #12]
 8006e16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006e1a:	b9b8      	cbnz	r0, 8006e4c <_Balloc+0x68>
 8006e1c:	2101      	movs	r1, #1
 8006e1e:	fa01 f605 	lsl.w	r6, r1, r5
 8006e22:	1d72      	adds	r2, r6, #5
 8006e24:	0092      	lsls	r2, r2, #2
 8006e26:	4620      	mov	r0, r4
 8006e28:	f000 fb5a 	bl	80074e0 <_calloc_r>
 8006e2c:	b160      	cbz	r0, 8006e48 <_Balloc+0x64>
 8006e2e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006e32:	e00e      	b.n	8006e52 <_Balloc+0x6e>
 8006e34:	2221      	movs	r2, #33	; 0x21
 8006e36:	2104      	movs	r1, #4
 8006e38:	4620      	mov	r0, r4
 8006e3a:	f000 fb51 	bl	80074e0 <_calloc_r>
 8006e3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e40:	60f0      	str	r0, [r6, #12]
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d1e4      	bne.n	8006e12 <_Balloc+0x2e>
 8006e48:	2000      	movs	r0, #0
 8006e4a:	bd70      	pop	{r4, r5, r6, pc}
 8006e4c:	6802      	ldr	r2, [r0, #0]
 8006e4e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006e52:	2300      	movs	r3, #0
 8006e54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006e58:	e7f7      	b.n	8006e4a <_Balloc+0x66>
 8006e5a:	bf00      	nop
 8006e5c:	08009b79 	.word	0x08009b79
 8006e60:	08009c00 	.word	0x08009c00

08006e64 <_Bfree>:
 8006e64:	b570      	push	{r4, r5, r6, lr}
 8006e66:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006e68:	4605      	mov	r5, r0
 8006e6a:	460c      	mov	r4, r1
 8006e6c:	b976      	cbnz	r6, 8006e8c <_Bfree+0x28>
 8006e6e:	2010      	movs	r0, #16
 8006e70:	f7ff ffa2 	bl	8006db8 <malloc>
 8006e74:	4602      	mov	r2, r0
 8006e76:	6268      	str	r0, [r5, #36]	; 0x24
 8006e78:	b920      	cbnz	r0, 8006e84 <_Bfree+0x20>
 8006e7a:	4b09      	ldr	r3, [pc, #36]	; (8006ea0 <_Bfree+0x3c>)
 8006e7c:	4809      	ldr	r0, [pc, #36]	; (8006ea4 <_Bfree+0x40>)
 8006e7e:	218a      	movs	r1, #138	; 0x8a
 8006e80:	f000 fd54 	bl	800792c <__assert_func>
 8006e84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e88:	6006      	str	r6, [r0, #0]
 8006e8a:	60c6      	str	r6, [r0, #12]
 8006e8c:	b13c      	cbz	r4, 8006e9e <_Bfree+0x3a>
 8006e8e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006e90:	6862      	ldr	r2, [r4, #4]
 8006e92:	68db      	ldr	r3, [r3, #12]
 8006e94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006e98:	6021      	str	r1, [r4, #0]
 8006e9a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006e9e:	bd70      	pop	{r4, r5, r6, pc}
 8006ea0:	08009b79 	.word	0x08009b79
 8006ea4:	08009c00 	.word	0x08009c00

08006ea8 <__multadd>:
 8006ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006eac:	690e      	ldr	r6, [r1, #16]
 8006eae:	4607      	mov	r7, r0
 8006eb0:	4698      	mov	r8, r3
 8006eb2:	460c      	mov	r4, r1
 8006eb4:	f101 0014 	add.w	r0, r1, #20
 8006eb8:	2300      	movs	r3, #0
 8006eba:	6805      	ldr	r5, [r0, #0]
 8006ebc:	b2a9      	uxth	r1, r5
 8006ebe:	fb02 8101 	mla	r1, r2, r1, r8
 8006ec2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006ec6:	0c2d      	lsrs	r5, r5, #16
 8006ec8:	fb02 c505 	mla	r5, r2, r5, ip
 8006ecc:	b289      	uxth	r1, r1
 8006ece:	3301      	adds	r3, #1
 8006ed0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006ed4:	429e      	cmp	r6, r3
 8006ed6:	f840 1b04 	str.w	r1, [r0], #4
 8006eda:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006ede:	dcec      	bgt.n	8006eba <__multadd+0x12>
 8006ee0:	f1b8 0f00 	cmp.w	r8, #0
 8006ee4:	d022      	beq.n	8006f2c <__multadd+0x84>
 8006ee6:	68a3      	ldr	r3, [r4, #8]
 8006ee8:	42b3      	cmp	r3, r6
 8006eea:	dc19      	bgt.n	8006f20 <__multadd+0x78>
 8006eec:	6861      	ldr	r1, [r4, #4]
 8006eee:	4638      	mov	r0, r7
 8006ef0:	3101      	adds	r1, #1
 8006ef2:	f7ff ff77 	bl	8006de4 <_Balloc>
 8006ef6:	4605      	mov	r5, r0
 8006ef8:	b928      	cbnz	r0, 8006f06 <__multadd+0x5e>
 8006efa:	4602      	mov	r2, r0
 8006efc:	4b0d      	ldr	r3, [pc, #52]	; (8006f34 <__multadd+0x8c>)
 8006efe:	480e      	ldr	r0, [pc, #56]	; (8006f38 <__multadd+0x90>)
 8006f00:	21b5      	movs	r1, #181	; 0xb5
 8006f02:	f000 fd13 	bl	800792c <__assert_func>
 8006f06:	6922      	ldr	r2, [r4, #16]
 8006f08:	3202      	adds	r2, #2
 8006f0a:	f104 010c 	add.w	r1, r4, #12
 8006f0e:	0092      	lsls	r2, r2, #2
 8006f10:	300c      	adds	r0, #12
 8006f12:	f7ff ff59 	bl	8006dc8 <memcpy>
 8006f16:	4621      	mov	r1, r4
 8006f18:	4638      	mov	r0, r7
 8006f1a:	f7ff ffa3 	bl	8006e64 <_Bfree>
 8006f1e:	462c      	mov	r4, r5
 8006f20:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006f24:	3601      	adds	r6, #1
 8006f26:	f8c3 8014 	str.w	r8, [r3, #20]
 8006f2a:	6126      	str	r6, [r4, #16]
 8006f2c:	4620      	mov	r0, r4
 8006f2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f32:	bf00      	nop
 8006f34:	08009bef 	.word	0x08009bef
 8006f38:	08009c00 	.word	0x08009c00

08006f3c <__hi0bits>:
 8006f3c:	0c03      	lsrs	r3, r0, #16
 8006f3e:	041b      	lsls	r3, r3, #16
 8006f40:	b9d3      	cbnz	r3, 8006f78 <__hi0bits+0x3c>
 8006f42:	0400      	lsls	r0, r0, #16
 8006f44:	2310      	movs	r3, #16
 8006f46:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006f4a:	bf04      	itt	eq
 8006f4c:	0200      	lsleq	r0, r0, #8
 8006f4e:	3308      	addeq	r3, #8
 8006f50:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006f54:	bf04      	itt	eq
 8006f56:	0100      	lsleq	r0, r0, #4
 8006f58:	3304      	addeq	r3, #4
 8006f5a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006f5e:	bf04      	itt	eq
 8006f60:	0080      	lsleq	r0, r0, #2
 8006f62:	3302      	addeq	r3, #2
 8006f64:	2800      	cmp	r0, #0
 8006f66:	db05      	blt.n	8006f74 <__hi0bits+0x38>
 8006f68:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006f6c:	f103 0301 	add.w	r3, r3, #1
 8006f70:	bf08      	it	eq
 8006f72:	2320      	moveq	r3, #32
 8006f74:	4618      	mov	r0, r3
 8006f76:	4770      	bx	lr
 8006f78:	2300      	movs	r3, #0
 8006f7a:	e7e4      	b.n	8006f46 <__hi0bits+0xa>

08006f7c <__lo0bits>:
 8006f7c:	6803      	ldr	r3, [r0, #0]
 8006f7e:	f013 0207 	ands.w	r2, r3, #7
 8006f82:	4601      	mov	r1, r0
 8006f84:	d00b      	beq.n	8006f9e <__lo0bits+0x22>
 8006f86:	07da      	lsls	r2, r3, #31
 8006f88:	d424      	bmi.n	8006fd4 <__lo0bits+0x58>
 8006f8a:	0798      	lsls	r0, r3, #30
 8006f8c:	bf49      	itett	mi
 8006f8e:	085b      	lsrmi	r3, r3, #1
 8006f90:	089b      	lsrpl	r3, r3, #2
 8006f92:	2001      	movmi	r0, #1
 8006f94:	600b      	strmi	r3, [r1, #0]
 8006f96:	bf5c      	itt	pl
 8006f98:	600b      	strpl	r3, [r1, #0]
 8006f9a:	2002      	movpl	r0, #2
 8006f9c:	4770      	bx	lr
 8006f9e:	b298      	uxth	r0, r3
 8006fa0:	b9b0      	cbnz	r0, 8006fd0 <__lo0bits+0x54>
 8006fa2:	0c1b      	lsrs	r3, r3, #16
 8006fa4:	2010      	movs	r0, #16
 8006fa6:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006faa:	bf04      	itt	eq
 8006fac:	0a1b      	lsreq	r3, r3, #8
 8006fae:	3008      	addeq	r0, #8
 8006fb0:	071a      	lsls	r2, r3, #28
 8006fb2:	bf04      	itt	eq
 8006fb4:	091b      	lsreq	r3, r3, #4
 8006fb6:	3004      	addeq	r0, #4
 8006fb8:	079a      	lsls	r2, r3, #30
 8006fba:	bf04      	itt	eq
 8006fbc:	089b      	lsreq	r3, r3, #2
 8006fbe:	3002      	addeq	r0, #2
 8006fc0:	07da      	lsls	r2, r3, #31
 8006fc2:	d403      	bmi.n	8006fcc <__lo0bits+0x50>
 8006fc4:	085b      	lsrs	r3, r3, #1
 8006fc6:	f100 0001 	add.w	r0, r0, #1
 8006fca:	d005      	beq.n	8006fd8 <__lo0bits+0x5c>
 8006fcc:	600b      	str	r3, [r1, #0]
 8006fce:	4770      	bx	lr
 8006fd0:	4610      	mov	r0, r2
 8006fd2:	e7e8      	b.n	8006fa6 <__lo0bits+0x2a>
 8006fd4:	2000      	movs	r0, #0
 8006fd6:	4770      	bx	lr
 8006fd8:	2020      	movs	r0, #32
 8006fda:	4770      	bx	lr

08006fdc <__i2b>:
 8006fdc:	b510      	push	{r4, lr}
 8006fde:	460c      	mov	r4, r1
 8006fe0:	2101      	movs	r1, #1
 8006fe2:	f7ff feff 	bl	8006de4 <_Balloc>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	b928      	cbnz	r0, 8006ff6 <__i2b+0x1a>
 8006fea:	4b05      	ldr	r3, [pc, #20]	; (8007000 <__i2b+0x24>)
 8006fec:	4805      	ldr	r0, [pc, #20]	; (8007004 <__i2b+0x28>)
 8006fee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006ff2:	f000 fc9b 	bl	800792c <__assert_func>
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	6144      	str	r4, [r0, #20]
 8006ffa:	6103      	str	r3, [r0, #16]
 8006ffc:	bd10      	pop	{r4, pc}
 8006ffe:	bf00      	nop
 8007000:	08009bef 	.word	0x08009bef
 8007004:	08009c00 	.word	0x08009c00

08007008 <__multiply>:
 8007008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800700c:	4614      	mov	r4, r2
 800700e:	690a      	ldr	r2, [r1, #16]
 8007010:	6923      	ldr	r3, [r4, #16]
 8007012:	429a      	cmp	r2, r3
 8007014:	bfb8      	it	lt
 8007016:	460b      	movlt	r3, r1
 8007018:	460d      	mov	r5, r1
 800701a:	bfbc      	itt	lt
 800701c:	4625      	movlt	r5, r4
 800701e:	461c      	movlt	r4, r3
 8007020:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007024:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007028:	68ab      	ldr	r3, [r5, #8]
 800702a:	6869      	ldr	r1, [r5, #4]
 800702c:	eb0a 0709 	add.w	r7, sl, r9
 8007030:	42bb      	cmp	r3, r7
 8007032:	b085      	sub	sp, #20
 8007034:	bfb8      	it	lt
 8007036:	3101      	addlt	r1, #1
 8007038:	f7ff fed4 	bl	8006de4 <_Balloc>
 800703c:	b930      	cbnz	r0, 800704c <__multiply+0x44>
 800703e:	4602      	mov	r2, r0
 8007040:	4b42      	ldr	r3, [pc, #264]	; (800714c <__multiply+0x144>)
 8007042:	4843      	ldr	r0, [pc, #268]	; (8007150 <__multiply+0x148>)
 8007044:	f240 115d 	movw	r1, #349	; 0x15d
 8007048:	f000 fc70 	bl	800792c <__assert_func>
 800704c:	f100 0614 	add.w	r6, r0, #20
 8007050:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007054:	4633      	mov	r3, r6
 8007056:	2200      	movs	r2, #0
 8007058:	4543      	cmp	r3, r8
 800705a:	d31e      	bcc.n	800709a <__multiply+0x92>
 800705c:	f105 0c14 	add.w	ip, r5, #20
 8007060:	f104 0314 	add.w	r3, r4, #20
 8007064:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007068:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800706c:	9202      	str	r2, [sp, #8]
 800706e:	ebac 0205 	sub.w	r2, ip, r5
 8007072:	3a15      	subs	r2, #21
 8007074:	f022 0203 	bic.w	r2, r2, #3
 8007078:	3204      	adds	r2, #4
 800707a:	f105 0115 	add.w	r1, r5, #21
 800707e:	458c      	cmp	ip, r1
 8007080:	bf38      	it	cc
 8007082:	2204      	movcc	r2, #4
 8007084:	9201      	str	r2, [sp, #4]
 8007086:	9a02      	ldr	r2, [sp, #8]
 8007088:	9303      	str	r3, [sp, #12]
 800708a:	429a      	cmp	r2, r3
 800708c:	d808      	bhi.n	80070a0 <__multiply+0x98>
 800708e:	2f00      	cmp	r7, #0
 8007090:	dc55      	bgt.n	800713e <__multiply+0x136>
 8007092:	6107      	str	r7, [r0, #16]
 8007094:	b005      	add	sp, #20
 8007096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800709a:	f843 2b04 	str.w	r2, [r3], #4
 800709e:	e7db      	b.n	8007058 <__multiply+0x50>
 80070a0:	f8b3 a000 	ldrh.w	sl, [r3]
 80070a4:	f1ba 0f00 	cmp.w	sl, #0
 80070a8:	d020      	beq.n	80070ec <__multiply+0xe4>
 80070aa:	f105 0e14 	add.w	lr, r5, #20
 80070ae:	46b1      	mov	r9, r6
 80070b0:	2200      	movs	r2, #0
 80070b2:	f85e 4b04 	ldr.w	r4, [lr], #4
 80070b6:	f8d9 b000 	ldr.w	fp, [r9]
 80070ba:	b2a1      	uxth	r1, r4
 80070bc:	fa1f fb8b 	uxth.w	fp, fp
 80070c0:	fb0a b101 	mla	r1, sl, r1, fp
 80070c4:	4411      	add	r1, r2
 80070c6:	f8d9 2000 	ldr.w	r2, [r9]
 80070ca:	0c24      	lsrs	r4, r4, #16
 80070cc:	0c12      	lsrs	r2, r2, #16
 80070ce:	fb0a 2404 	mla	r4, sl, r4, r2
 80070d2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80070d6:	b289      	uxth	r1, r1
 80070d8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80070dc:	45f4      	cmp	ip, lr
 80070de:	f849 1b04 	str.w	r1, [r9], #4
 80070e2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80070e6:	d8e4      	bhi.n	80070b2 <__multiply+0xaa>
 80070e8:	9901      	ldr	r1, [sp, #4]
 80070ea:	5072      	str	r2, [r6, r1]
 80070ec:	9a03      	ldr	r2, [sp, #12]
 80070ee:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80070f2:	3304      	adds	r3, #4
 80070f4:	f1b9 0f00 	cmp.w	r9, #0
 80070f8:	d01f      	beq.n	800713a <__multiply+0x132>
 80070fa:	6834      	ldr	r4, [r6, #0]
 80070fc:	f105 0114 	add.w	r1, r5, #20
 8007100:	46b6      	mov	lr, r6
 8007102:	f04f 0a00 	mov.w	sl, #0
 8007106:	880a      	ldrh	r2, [r1, #0]
 8007108:	f8be b002 	ldrh.w	fp, [lr, #2]
 800710c:	fb09 b202 	mla	r2, r9, r2, fp
 8007110:	4492      	add	sl, r2
 8007112:	b2a4      	uxth	r4, r4
 8007114:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007118:	f84e 4b04 	str.w	r4, [lr], #4
 800711c:	f851 4b04 	ldr.w	r4, [r1], #4
 8007120:	f8be 2000 	ldrh.w	r2, [lr]
 8007124:	0c24      	lsrs	r4, r4, #16
 8007126:	fb09 2404 	mla	r4, r9, r4, r2
 800712a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800712e:	458c      	cmp	ip, r1
 8007130:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007134:	d8e7      	bhi.n	8007106 <__multiply+0xfe>
 8007136:	9a01      	ldr	r2, [sp, #4]
 8007138:	50b4      	str	r4, [r6, r2]
 800713a:	3604      	adds	r6, #4
 800713c:	e7a3      	b.n	8007086 <__multiply+0x7e>
 800713e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007142:	2b00      	cmp	r3, #0
 8007144:	d1a5      	bne.n	8007092 <__multiply+0x8a>
 8007146:	3f01      	subs	r7, #1
 8007148:	e7a1      	b.n	800708e <__multiply+0x86>
 800714a:	bf00      	nop
 800714c:	08009bef 	.word	0x08009bef
 8007150:	08009c00 	.word	0x08009c00

08007154 <__pow5mult>:
 8007154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007158:	4615      	mov	r5, r2
 800715a:	f012 0203 	ands.w	r2, r2, #3
 800715e:	4606      	mov	r6, r0
 8007160:	460f      	mov	r7, r1
 8007162:	d007      	beq.n	8007174 <__pow5mult+0x20>
 8007164:	4c25      	ldr	r4, [pc, #148]	; (80071fc <__pow5mult+0xa8>)
 8007166:	3a01      	subs	r2, #1
 8007168:	2300      	movs	r3, #0
 800716a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800716e:	f7ff fe9b 	bl	8006ea8 <__multadd>
 8007172:	4607      	mov	r7, r0
 8007174:	10ad      	asrs	r5, r5, #2
 8007176:	d03d      	beq.n	80071f4 <__pow5mult+0xa0>
 8007178:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800717a:	b97c      	cbnz	r4, 800719c <__pow5mult+0x48>
 800717c:	2010      	movs	r0, #16
 800717e:	f7ff fe1b 	bl	8006db8 <malloc>
 8007182:	4602      	mov	r2, r0
 8007184:	6270      	str	r0, [r6, #36]	; 0x24
 8007186:	b928      	cbnz	r0, 8007194 <__pow5mult+0x40>
 8007188:	4b1d      	ldr	r3, [pc, #116]	; (8007200 <__pow5mult+0xac>)
 800718a:	481e      	ldr	r0, [pc, #120]	; (8007204 <__pow5mult+0xb0>)
 800718c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007190:	f000 fbcc 	bl	800792c <__assert_func>
 8007194:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007198:	6004      	str	r4, [r0, #0]
 800719a:	60c4      	str	r4, [r0, #12]
 800719c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80071a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80071a4:	b94c      	cbnz	r4, 80071ba <__pow5mult+0x66>
 80071a6:	f240 2171 	movw	r1, #625	; 0x271
 80071aa:	4630      	mov	r0, r6
 80071ac:	f7ff ff16 	bl	8006fdc <__i2b>
 80071b0:	2300      	movs	r3, #0
 80071b2:	f8c8 0008 	str.w	r0, [r8, #8]
 80071b6:	4604      	mov	r4, r0
 80071b8:	6003      	str	r3, [r0, #0]
 80071ba:	f04f 0900 	mov.w	r9, #0
 80071be:	07eb      	lsls	r3, r5, #31
 80071c0:	d50a      	bpl.n	80071d8 <__pow5mult+0x84>
 80071c2:	4639      	mov	r1, r7
 80071c4:	4622      	mov	r2, r4
 80071c6:	4630      	mov	r0, r6
 80071c8:	f7ff ff1e 	bl	8007008 <__multiply>
 80071cc:	4639      	mov	r1, r7
 80071ce:	4680      	mov	r8, r0
 80071d0:	4630      	mov	r0, r6
 80071d2:	f7ff fe47 	bl	8006e64 <_Bfree>
 80071d6:	4647      	mov	r7, r8
 80071d8:	106d      	asrs	r5, r5, #1
 80071da:	d00b      	beq.n	80071f4 <__pow5mult+0xa0>
 80071dc:	6820      	ldr	r0, [r4, #0]
 80071de:	b938      	cbnz	r0, 80071f0 <__pow5mult+0x9c>
 80071e0:	4622      	mov	r2, r4
 80071e2:	4621      	mov	r1, r4
 80071e4:	4630      	mov	r0, r6
 80071e6:	f7ff ff0f 	bl	8007008 <__multiply>
 80071ea:	6020      	str	r0, [r4, #0]
 80071ec:	f8c0 9000 	str.w	r9, [r0]
 80071f0:	4604      	mov	r4, r0
 80071f2:	e7e4      	b.n	80071be <__pow5mult+0x6a>
 80071f4:	4638      	mov	r0, r7
 80071f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071fa:	bf00      	nop
 80071fc:	08009d50 	.word	0x08009d50
 8007200:	08009b79 	.word	0x08009b79
 8007204:	08009c00 	.word	0x08009c00

08007208 <__lshift>:
 8007208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800720c:	460c      	mov	r4, r1
 800720e:	6849      	ldr	r1, [r1, #4]
 8007210:	6923      	ldr	r3, [r4, #16]
 8007212:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007216:	68a3      	ldr	r3, [r4, #8]
 8007218:	4607      	mov	r7, r0
 800721a:	4691      	mov	r9, r2
 800721c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007220:	f108 0601 	add.w	r6, r8, #1
 8007224:	42b3      	cmp	r3, r6
 8007226:	db0b      	blt.n	8007240 <__lshift+0x38>
 8007228:	4638      	mov	r0, r7
 800722a:	f7ff fddb 	bl	8006de4 <_Balloc>
 800722e:	4605      	mov	r5, r0
 8007230:	b948      	cbnz	r0, 8007246 <__lshift+0x3e>
 8007232:	4602      	mov	r2, r0
 8007234:	4b28      	ldr	r3, [pc, #160]	; (80072d8 <__lshift+0xd0>)
 8007236:	4829      	ldr	r0, [pc, #164]	; (80072dc <__lshift+0xd4>)
 8007238:	f240 11d9 	movw	r1, #473	; 0x1d9
 800723c:	f000 fb76 	bl	800792c <__assert_func>
 8007240:	3101      	adds	r1, #1
 8007242:	005b      	lsls	r3, r3, #1
 8007244:	e7ee      	b.n	8007224 <__lshift+0x1c>
 8007246:	2300      	movs	r3, #0
 8007248:	f100 0114 	add.w	r1, r0, #20
 800724c:	f100 0210 	add.w	r2, r0, #16
 8007250:	4618      	mov	r0, r3
 8007252:	4553      	cmp	r3, sl
 8007254:	db33      	blt.n	80072be <__lshift+0xb6>
 8007256:	6920      	ldr	r0, [r4, #16]
 8007258:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800725c:	f104 0314 	add.w	r3, r4, #20
 8007260:	f019 091f 	ands.w	r9, r9, #31
 8007264:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007268:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800726c:	d02b      	beq.n	80072c6 <__lshift+0xbe>
 800726e:	f1c9 0e20 	rsb	lr, r9, #32
 8007272:	468a      	mov	sl, r1
 8007274:	2200      	movs	r2, #0
 8007276:	6818      	ldr	r0, [r3, #0]
 8007278:	fa00 f009 	lsl.w	r0, r0, r9
 800727c:	4302      	orrs	r2, r0
 800727e:	f84a 2b04 	str.w	r2, [sl], #4
 8007282:	f853 2b04 	ldr.w	r2, [r3], #4
 8007286:	459c      	cmp	ip, r3
 8007288:	fa22 f20e 	lsr.w	r2, r2, lr
 800728c:	d8f3      	bhi.n	8007276 <__lshift+0x6e>
 800728e:	ebac 0304 	sub.w	r3, ip, r4
 8007292:	3b15      	subs	r3, #21
 8007294:	f023 0303 	bic.w	r3, r3, #3
 8007298:	3304      	adds	r3, #4
 800729a:	f104 0015 	add.w	r0, r4, #21
 800729e:	4584      	cmp	ip, r0
 80072a0:	bf38      	it	cc
 80072a2:	2304      	movcc	r3, #4
 80072a4:	50ca      	str	r2, [r1, r3]
 80072a6:	b10a      	cbz	r2, 80072ac <__lshift+0xa4>
 80072a8:	f108 0602 	add.w	r6, r8, #2
 80072ac:	3e01      	subs	r6, #1
 80072ae:	4638      	mov	r0, r7
 80072b0:	612e      	str	r6, [r5, #16]
 80072b2:	4621      	mov	r1, r4
 80072b4:	f7ff fdd6 	bl	8006e64 <_Bfree>
 80072b8:	4628      	mov	r0, r5
 80072ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072be:	f842 0f04 	str.w	r0, [r2, #4]!
 80072c2:	3301      	adds	r3, #1
 80072c4:	e7c5      	b.n	8007252 <__lshift+0x4a>
 80072c6:	3904      	subs	r1, #4
 80072c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80072cc:	f841 2f04 	str.w	r2, [r1, #4]!
 80072d0:	459c      	cmp	ip, r3
 80072d2:	d8f9      	bhi.n	80072c8 <__lshift+0xc0>
 80072d4:	e7ea      	b.n	80072ac <__lshift+0xa4>
 80072d6:	bf00      	nop
 80072d8:	08009bef 	.word	0x08009bef
 80072dc:	08009c00 	.word	0x08009c00

080072e0 <__mcmp>:
 80072e0:	b530      	push	{r4, r5, lr}
 80072e2:	6902      	ldr	r2, [r0, #16]
 80072e4:	690c      	ldr	r4, [r1, #16]
 80072e6:	1b12      	subs	r2, r2, r4
 80072e8:	d10e      	bne.n	8007308 <__mcmp+0x28>
 80072ea:	f100 0314 	add.w	r3, r0, #20
 80072ee:	3114      	adds	r1, #20
 80072f0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80072f4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80072f8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80072fc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007300:	42a5      	cmp	r5, r4
 8007302:	d003      	beq.n	800730c <__mcmp+0x2c>
 8007304:	d305      	bcc.n	8007312 <__mcmp+0x32>
 8007306:	2201      	movs	r2, #1
 8007308:	4610      	mov	r0, r2
 800730a:	bd30      	pop	{r4, r5, pc}
 800730c:	4283      	cmp	r3, r0
 800730e:	d3f3      	bcc.n	80072f8 <__mcmp+0x18>
 8007310:	e7fa      	b.n	8007308 <__mcmp+0x28>
 8007312:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007316:	e7f7      	b.n	8007308 <__mcmp+0x28>

08007318 <__mdiff>:
 8007318:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800731c:	460c      	mov	r4, r1
 800731e:	4606      	mov	r6, r0
 8007320:	4611      	mov	r1, r2
 8007322:	4620      	mov	r0, r4
 8007324:	4617      	mov	r7, r2
 8007326:	f7ff ffdb 	bl	80072e0 <__mcmp>
 800732a:	1e05      	subs	r5, r0, #0
 800732c:	d110      	bne.n	8007350 <__mdiff+0x38>
 800732e:	4629      	mov	r1, r5
 8007330:	4630      	mov	r0, r6
 8007332:	f7ff fd57 	bl	8006de4 <_Balloc>
 8007336:	b930      	cbnz	r0, 8007346 <__mdiff+0x2e>
 8007338:	4b39      	ldr	r3, [pc, #228]	; (8007420 <__mdiff+0x108>)
 800733a:	4602      	mov	r2, r0
 800733c:	f240 2132 	movw	r1, #562	; 0x232
 8007340:	4838      	ldr	r0, [pc, #224]	; (8007424 <__mdiff+0x10c>)
 8007342:	f000 faf3 	bl	800792c <__assert_func>
 8007346:	2301      	movs	r3, #1
 8007348:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800734c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007350:	bfa4      	itt	ge
 8007352:	463b      	movge	r3, r7
 8007354:	4627      	movge	r7, r4
 8007356:	4630      	mov	r0, r6
 8007358:	6879      	ldr	r1, [r7, #4]
 800735a:	bfa6      	itte	ge
 800735c:	461c      	movge	r4, r3
 800735e:	2500      	movge	r5, #0
 8007360:	2501      	movlt	r5, #1
 8007362:	f7ff fd3f 	bl	8006de4 <_Balloc>
 8007366:	b920      	cbnz	r0, 8007372 <__mdiff+0x5a>
 8007368:	4b2d      	ldr	r3, [pc, #180]	; (8007420 <__mdiff+0x108>)
 800736a:	4602      	mov	r2, r0
 800736c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007370:	e7e6      	b.n	8007340 <__mdiff+0x28>
 8007372:	693e      	ldr	r6, [r7, #16]
 8007374:	60c5      	str	r5, [r0, #12]
 8007376:	6925      	ldr	r5, [r4, #16]
 8007378:	f107 0114 	add.w	r1, r7, #20
 800737c:	f104 0914 	add.w	r9, r4, #20
 8007380:	f100 0e14 	add.w	lr, r0, #20
 8007384:	f107 0210 	add.w	r2, r7, #16
 8007388:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800738c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007390:	46f2      	mov	sl, lr
 8007392:	2700      	movs	r7, #0
 8007394:	f859 3b04 	ldr.w	r3, [r9], #4
 8007398:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800739c:	fa1f f883 	uxth.w	r8, r3
 80073a0:	fa17 f78b 	uxtah	r7, r7, fp
 80073a4:	0c1b      	lsrs	r3, r3, #16
 80073a6:	eba7 0808 	sub.w	r8, r7, r8
 80073aa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80073ae:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80073b2:	fa1f f888 	uxth.w	r8, r8
 80073b6:	141f      	asrs	r7, r3, #16
 80073b8:	454d      	cmp	r5, r9
 80073ba:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80073be:	f84a 3b04 	str.w	r3, [sl], #4
 80073c2:	d8e7      	bhi.n	8007394 <__mdiff+0x7c>
 80073c4:	1b2b      	subs	r3, r5, r4
 80073c6:	3b15      	subs	r3, #21
 80073c8:	f023 0303 	bic.w	r3, r3, #3
 80073cc:	3304      	adds	r3, #4
 80073ce:	3415      	adds	r4, #21
 80073d0:	42a5      	cmp	r5, r4
 80073d2:	bf38      	it	cc
 80073d4:	2304      	movcc	r3, #4
 80073d6:	4419      	add	r1, r3
 80073d8:	4473      	add	r3, lr
 80073da:	469e      	mov	lr, r3
 80073dc:	460d      	mov	r5, r1
 80073de:	4565      	cmp	r5, ip
 80073e0:	d30e      	bcc.n	8007400 <__mdiff+0xe8>
 80073e2:	f10c 0203 	add.w	r2, ip, #3
 80073e6:	1a52      	subs	r2, r2, r1
 80073e8:	f022 0203 	bic.w	r2, r2, #3
 80073ec:	3903      	subs	r1, #3
 80073ee:	458c      	cmp	ip, r1
 80073f0:	bf38      	it	cc
 80073f2:	2200      	movcc	r2, #0
 80073f4:	441a      	add	r2, r3
 80073f6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80073fa:	b17b      	cbz	r3, 800741c <__mdiff+0x104>
 80073fc:	6106      	str	r6, [r0, #16]
 80073fe:	e7a5      	b.n	800734c <__mdiff+0x34>
 8007400:	f855 8b04 	ldr.w	r8, [r5], #4
 8007404:	fa17 f488 	uxtah	r4, r7, r8
 8007408:	1422      	asrs	r2, r4, #16
 800740a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800740e:	b2a4      	uxth	r4, r4
 8007410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007414:	f84e 4b04 	str.w	r4, [lr], #4
 8007418:	1417      	asrs	r7, r2, #16
 800741a:	e7e0      	b.n	80073de <__mdiff+0xc6>
 800741c:	3e01      	subs	r6, #1
 800741e:	e7ea      	b.n	80073f6 <__mdiff+0xde>
 8007420:	08009bef 	.word	0x08009bef
 8007424:	08009c00 	.word	0x08009c00

08007428 <__d2b>:
 8007428:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800742c:	4689      	mov	r9, r1
 800742e:	2101      	movs	r1, #1
 8007430:	ec57 6b10 	vmov	r6, r7, d0
 8007434:	4690      	mov	r8, r2
 8007436:	f7ff fcd5 	bl	8006de4 <_Balloc>
 800743a:	4604      	mov	r4, r0
 800743c:	b930      	cbnz	r0, 800744c <__d2b+0x24>
 800743e:	4602      	mov	r2, r0
 8007440:	4b25      	ldr	r3, [pc, #148]	; (80074d8 <__d2b+0xb0>)
 8007442:	4826      	ldr	r0, [pc, #152]	; (80074dc <__d2b+0xb4>)
 8007444:	f240 310a 	movw	r1, #778	; 0x30a
 8007448:	f000 fa70 	bl	800792c <__assert_func>
 800744c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007450:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007454:	bb35      	cbnz	r5, 80074a4 <__d2b+0x7c>
 8007456:	2e00      	cmp	r6, #0
 8007458:	9301      	str	r3, [sp, #4]
 800745a:	d028      	beq.n	80074ae <__d2b+0x86>
 800745c:	4668      	mov	r0, sp
 800745e:	9600      	str	r6, [sp, #0]
 8007460:	f7ff fd8c 	bl	8006f7c <__lo0bits>
 8007464:	9900      	ldr	r1, [sp, #0]
 8007466:	b300      	cbz	r0, 80074aa <__d2b+0x82>
 8007468:	9a01      	ldr	r2, [sp, #4]
 800746a:	f1c0 0320 	rsb	r3, r0, #32
 800746e:	fa02 f303 	lsl.w	r3, r2, r3
 8007472:	430b      	orrs	r3, r1
 8007474:	40c2      	lsrs	r2, r0
 8007476:	6163      	str	r3, [r4, #20]
 8007478:	9201      	str	r2, [sp, #4]
 800747a:	9b01      	ldr	r3, [sp, #4]
 800747c:	61a3      	str	r3, [r4, #24]
 800747e:	2b00      	cmp	r3, #0
 8007480:	bf14      	ite	ne
 8007482:	2202      	movne	r2, #2
 8007484:	2201      	moveq	r2, #1
 8007486:	6122      	str	r2, [r4, #16]
 8007488:	b1d5      	cbz	r5, 80074c0 <__d2b+0x98>
 800748a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800748e:	4405      	add	r5, r0
 8007490:	f8c9 5000 	str.w	r5, [r9]
 8007494:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007498:	f8c8 0000 	str.w	r0, [r8]
 800749c:	4620      	mov	r0, r4
 800749e:	b003      	add	sp, #12
 80074a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80074a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80074a8:	e7d5      	b.n	8007456 <__d2b+0x2e>
 80074aa:	6161      	str	r1, [r4, #20]
 80074ac:	e7e5      	b.n	800747a <__d2b+0x52>
 80074ae:	a801      	add	r0, sp, #4
 80074b0:	f7ff fd64 	bl	8006f7c <__lo0bits>
 80074b4:	9b01      	ldr	r3, [sp, #4]
 80074b6:	6163      	str	r3, [r4, #20]
 80074b8:	2201      	movs	r2, #1
 80074ba:	6122      	str	r2, [r4, #16]
 80074bc:	3020      	adds	r0, #32
 80074be:	e7e3      	b.n	8007488 <__d2b+0x60>
 80074c0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80074c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80074c8:	f8c9 0000 	str.w	r0, [r9]
 80074cc:	6918      	ldr	r0, [r3, #16]
 80074ce:	f7ff fd35 	bl	8006f3c <__hi0bits>
 80074d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80074d6:	e7df      	b.n	8007498 <__d2b+0x70>
 80074d8:	08009bef 	.word	0x08009bef
 80074dc:	08009c00 	.word	0x08009c00

080074e0 <_calloc_r>:
 80074e0:	b513      	push	{r0, r1, r4, lr}
 80074e2:	434a      	muls	r2, r1
 80074e4:	4611      	mov	r1, r2
 80074e6:	9201      	str	r2, [sp, #4]
 80074e8:	f000 f85a 	bl	80075a0 <_malloc_r>
 80074ec:	4604      	mov	r4, r0
 80074ee:	b118      	cbz	r0, 80074f8 <_calloc_r+0x18>
 80074f0:	9a01      	ldr	r2, [sp, #4]
 80074f2:	2100      	movs	r1, #0
 80074f4:	f7fe f952 	bl	800579c <memset>
 80074f8:	4620      	mov	r0, r4
 80074fa:	b002      	add	sp, #8
 80074fc:	bd10      	pop	{r4, pc}
	...

08007500 <_free_r>:
 8007500:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007502:	2900      	cmp	r1, #0
 8007504:	d048      	beq.n	8007598 <_free_r+0x98>
 8007506:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800750a:	9001      	str	r0, [sp, #4]
 800750c:	2b00      	cmp	r3, #0
 800750e:	f1a1 0404 	sub.w	r4, r1, #4
 8007512:	bfb8      	it	lt
 8007514:	18e4      	addlt	r4, r4, r3
 8007516:	f000 fa65 	bl	80079e4 <__malloc_lock>
 800751a:	4a20      	ldr	r2, [pc, #128]	; (800759c <_free_r+0x9c>)
 800751c:	9801      	ldr	r0, [sp, #4]
 800751e:	6813      	ldr	r3, [r2, #0]
 8007520:	4615      	mov	r5, r2
 8007522:	b933      	cbnz	r3, 8007532 <_free_r+0x32>
 8007524:	6063      	str	r3, [r4, #4]
 8007526:	6014      	str	r4, [r2, #0]
 8007528:	b003      	add	sp, #12
 800752a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800752e:	f000 ba5f 	b.w	80079f0 <__malloc_unlock>
 8007532:	42a3      	cmp	r3, r4
 8007534:	d90b      	bls.n	800754e <_free_r+0x4e>
 8007536:	6821      	ldr	r1, [r4, #0]
 8007538:	1862      	adds	r2, r4, r1
 800753a:	4293      	cmp	r3, r2
 800753c:	bf04      	itt	eq
 800753e:	681a      	ldreq	r2, [r3, #0]
 8007540:	685b      	ldreq	r3, [r3, #4]
 8007542:	6063      	str	r3, [r4, #4]
 8007544:	bf04      	itt	eq
 8007546:	1852      	addeq	r2, r2, r1
 8007548:	6022      	streq	r2, [r4, #0]
 800754a:	602c      	str	r4, [r5, #0]
 800754c:	e7ec      	b.n	8007528 <_free_r+0x28>
 800754e:	461a      	mov	r2, r3
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	b10b      	cbz	r3, 8007558 <_free_r+0x58>
 8007554:	42a3      	cmp	r3, r4
 8007556:	d9fa      	bls.n	800754e <_free_r+0x4e>
 8007558:	6811      	ldr	r1, [r2, #0]
 800755a:	1855      	adds	r5, r2, r1
 800755c:	42a5      	cmp	r5, r4
 800755e:	d10b      	bne.n	8007578 <_free_r+0x78>
 8007560:	6824      	ldr	r4, [r4, #0]
 8007562:	4421      	add	r1, r4
 8007564:	1854      	adds	r4, r2, r1
 8007566:	42a3      	cmp	r3, r4
 8007568:	6011      	str	r1, [r2, #0]
 800756a:	d1dd      	bne.n	8007528 <_free_r+0x28>
 800756c:	681c      	ldr	r4, [r3, #0]
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	6053      	str	r3, [r2, #4]
 8007572:	4421      	add	r1, r4
 8007574:	6011      	str	r1, [r2, #0]
 8007576:	e7d7      	b.n	8007528 <_free_r+0x28>
 8007578:	d902      	bls.n	8007580 <_free_r+0x80>
 800757a:	230c      	movs	r3, #12
 800757c:	6003      	str	r3, [r0, #0]
 800757e:	e7d3      	b.n	8007528 <_free_r+0x28>
 8007580:	6825      	ldr	r5, [r4, #0]
 8007582:	1961      	adds	r1, r4, r5
 8007584:	428b      	cmp	r3, r1
 8007586:	bf04      	itt	eq
 8007588:	6819      	ldreq	r1, [r3, #0]
 800758a:	685b      	ldreq	r3, [r3, #4]
 800758c:	6063      	str	r3, [r4, #4]
 800758e:	bf04      	itt	eq
 8007590:	1949      	addeq	r1, r1, r5
 8007592:	6021      	streq	r1, [r4, #0]
 8007594:	6054      	str	r4, [r2, #4]
 8007596:	e7c7      	b.n	8007528 <_free_r+0x28>
 8007598:	b003      	add	sp, #12
 800759a:	bd30      	pop	{r4, r5, pc}
 800759c:	20000228 	.word	0x20000228

080075a0 <_malloc_r>:
 80075a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075a2:	1ccd      	adds	r5, r1, #3
 80075a4:	f025 0503 	bic.w	r5, r5, #3
 80075a8:	3508      	adds	r5, #8
 80075aa:	2d0c      	cmp	r5, #12
 80075ac:	bf38      	it	cc
 80075ae:	250c      	movcc	r5, #12
 80075b0:	2d00      	cmp	r5, #0
 80075b2:	4606      	mov	r6, r0
 80075b4:	db01      	blt.n	80075ba <_malloc_r+0x1a>
 80075b6:	42a9      	cmp	r1, r5
 80075b8:	d903      	bls.n	80075c2 <_malloc_r+0x22>
 80075ba:	230c      	movs	r3, #12
 80075bc:	6033      	str	r3, [r6, #0]
 80075be:	2000      	movs	r0, #0
 80075c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075c2:	f000 fa0f 	bl	80079e4 <__malloc_lock>
 80075c6:	4921      	ldr	r1, [pc, #132]	; (800764c <_malloc_r+0xac>)
 80075c8:	680a      	ldr	r2, [r1, #0]
 80075ca:	4614      	mov	r4, r2
 80075cc:	b99c      	cbnz	r4, 80075f6 <_malloc_r+0x56>
 80075ce:	4f20      	ldr	r7, [pc, #128]	; (8007650 <_malloc_r+0xb0>)
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	b923      	cbnz	r3, 80075de <_malloc_r+0x3e>
 80075d4:	4621      	mov	r1, r4
 80075d6:	4630      	mov	r0, r6
 80075d8:	f000 f998 	bl	800790c <_sbrk_r>
 80075dc:	6038      	str	r0, [r7, #0]
 80075de:	4629      	mov	r1, r5
 80075e0:	4630      	mov	r0, r6
 80075e2:	f000 f993 	bl	800790c <_sbrk_r>
 80075e6:	1c43      	adds	r3, r0, #1
 80075e8:	d123      	bne.n	8007632 <_malloc_r+0x92>
 80075ea:	230c      	movs	r3, #12
 80075ec:	6033      	str	r3, [r6, #0]
 80075ee:	4630      	mov	r0, r6
 80075f0:	f000 f9fe 	bl	80079f0 <__malloc_unlock>
 80075f4:	e7e3      	b.n	80075be <_malloc_r+0x1e>
 80075f6:	6823      	ldr	r3, [r4, #0]
 80075f8:	1b5b      	subs	r3, r3, r5
 80075fa:	d417      	bmi.n	800762c <_malloc_r+0x8c>
 80075fc:	2b0b      	cmp	r3, #11
 80075fe:	d903      	bls.n	8007608 <_malloc_r+0x68>
 8007600:	6023      	str	r3, [r4, #0]
 8007602:	441c      	add	r4, r3
 8007604:	6025      	str	r5, [r4, #0]
 8007606:	e004      	b.n	8007612 <_malloc_r+0x72>
 8007608:	6863      	ldr	r3, [r4, #4]
 800760a:	42a2      	cmp	r2, r4
 800760c:	bf0c      	ite	eq
 800760e:	600b      	streq	r3, [r1, #0]
 8007610:	6053      	strne	r3, [r2, #4]
 8007612:	4630      	mov	r0, r6
 8007614:	f000 f9ec 	bl	80079f0 <__malloc_unlock>
 8007618:	f104 000b 	add.w	r0, r4, #11
 800761c:	1d23      	adds	r3, r4, #4
 800761e:	f020 0007 	bic.w	r0, r0, #7
 8007622:	1ac2      	subs	r2, r0, r3
 8007624:	d0cc      	beq.n	80075c0 <_malloc_r+0x20>
 8007626:	1a1b      	subs	r3, r3, r0
 8007628:	50a3      	str	r3, [r4, r2]
 800762a:	e7c9      	b.n	80075c0 <_malloc_r+0x20>
 800762c:	4622      	mov	r2, r4
 800762e:	6864      	ldr	r4, [r4, #4]
 8007630:	e7cc      	b.n	80075cc <_malloc_r+0x2c>
 8007632:	1cc4      	adds	r4, r0, #3
 8007634:	f024 0403 	bic.w	r4, r4, #3
 8007638:	42a0      	cmp	r0, r4
 800763a:	d0e3      	beq.n	8007604 <_malloc_r+0x64>
 800763c:	1a21      	subs	r1, r4, r0
 800763e:	4630      	mov	r0, r6
 8007640:	f000 f964 	bl	800790c <_sbrk_r>
 8007644:	3001      	adds	r0, #1
 8007646:	d1dd      	bne.n	8007604 <_malloc_r+0x64>
 8007648:	e7cf      	b.n	80075ea <_malloc_r+0x4a>
 800764a:	bf00      	nop
 800764c:	20000228 	.word	0x20000228
 8007650:	2000022c 	.word	0x2000022c

08007654 <__ssputs_r>:
 8007654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007658:	688e      	ldr	r6, [r1, #8]
 800765a:	429e      	cmp	r6, r3
 800765c:	4682      	mov	sl, r0
 800765e:	460c      	mov	r4, r1
 8007660:	4690      	mov	r8, r2
 8007662:	461f      	mov	r7, r3
 8007664:	d838      	bhi.n	80076d8 <__ssputs_r+0x84>
 8007666:	898a      	ldrh	r2, [r1, #12]
 8007668:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800766c:	d032      	beq.n	80076d4 <__ssputs_r+0x80>
 800766e:	6825      	ldr	r5, [r4, #0]
 8007670:	6909      	ldr	r1, [r1, #16]
 8007672:	eba5 0901 	sub.w	r9, r5, r1
 8007676:	6965      	ldr	r5, [r4, #20]
 8007678:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800767c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007680:	3301      	adds	r3, #1
 8007682:	444b      	add	r3, r9
 8007684:	106d      	asrs	r5, r5, #1
 8007686:	429d      	cmp	r5, r3
 8007688:	bf38      	it	cc
 800768a:	461d      	movcc	r5, r3
 800768c:	0553      	lsls	r3, r2, #21
 800768e:	d531      	bpl.n	80076f4 <__ssputs_r+0xa0>
 8007690:	4629      	mov	r1, r5
 8007692:	f7ff ff85 	bl	80075a0 <_malloc_r>
 8007696:	4606      	mov	r6, r0
 8007698:	b950      	cbnz	r0, 80076b0 <__ssputs_r+0x5c>
 800769a:	230c      	movs	r3, #12
 800769c:	f8ca 3000 	str.w	r3, [sl]
 80076a0:	89a3      	ldrh	r3, [r4, #12]
 80076a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076a6:	81a3      	strh	r3, [r4, #12]
 80076a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076b0:	6921      	ldr	r1, [r4, #16]
 80076b2:	464a      	mov	r2, r9
 80076b4:	f7ff fb88 	bl	8006dc8 <memcpy>
 80076b8:	89a3      	ldrh	r3, [r4, #12]
 80076ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80076be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076c2:	81a3      	strh	r3, [r4, #12]
 80076c4:	6126      	str	r6, [r4, #16]
 80076c6:	6165      	str	r5, [r4, #20]
 80076c8:	444e      	add	r6, r9
 80076ca:	eba5 0509 	sub.w	r5, r5, r9
 80076ce:	6026      	str	r6, [r4, #0]
 80076d0:	60a5      	str	r5, [r4, #8]
 80076d2:	463e      	mov	r6, r7
 80076d4:	42be      	cmp	r6, r7
 80076d6:	d900      	bls.n	80076da <__ssputs_r+0x86>
 80076d8:	463e      	mov	r6, r7
 80076da:	4632      	mov	r2, r6
 80076dc:	6820      	ldr	r0, [r4, #0]
 80076de:	4641      	mov	r1, r8
 80076e0:	f000 f966 	bl	80079b0 <memmove>
 80076e4:	68a3      	ldr	r3, [r4, #8]
 80076e6:	6822      	ldr	r2, [r4, #0]
 80076e8:	1b9b      	subs	r3, r3, r6
 80076ea:	4432      	add	r2, r6
 80076ec:	60a3      	str	r3, [r4, #8]
 80076ee:	6022      	str	r2, [r4, #0]
 80076f0:	2000      	movs	r0, #0
 80076f2:	e7db      	b.n	80076ac <__ssputs_r+0x58>
 80076f4:	462a      	mov	r2, r5
 80076f6:	f000 f981 	bl	80079fc <_realloc_r>
 80076fa:	4606      	mov	r6, r0
 80076fc:	2800      	cmp	r0, #0
 80076fe:	d1e1      	bne.n	80076c4 <__ssputs_r+0x70>
 8007700:	6921      	ldr	r1, [r4, #16]
 8007702:	4650      	mov	r0, sl
 8007704:	f7ff fefc 	bl	8007500 <_free_r>
 8007708:	e7c7      	b.n	800769a <__ssputs_r+0x46>
	...

0800770c <_svfiprintf_r>:
 800770c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007710:	4698      	mov	r8, r3
 8007712:	898b      	ldrh	r3, [r1, #12]
 8007714:	061b      	lsls	r3, r3, #24
 8007716:	b09d      	sub	sp, #116	; 0x74
 8007718:	4607      	mov	r7, r0
 800771a:	460d      	mov	r5, r1
 800771c:	4614      	mov	r4, r2
 800771e:	d50e      	bpl.n	800773e <_svfiprintf_r+0x32>
 8007720:	690b      	ldr	r3, [r1, #16]
 8007722:	b963      	cbnz	r3, 800773e <_svfiprintf_r+0x32>
 8007724:	2140      	movs	r1, #64	; 0x40
 8007726:	f7ff ff3b 	bl	80075a0 <_malloc_r>
 800772a:	6028      	str	r0, [r5, #0]
 800772c:	6128      	str	r0, [r5, #16]
 800772e:	b920      	cbnz	r0, 800773a <_svfiprintf_r+0x2e>
 8007730:	230c      	movs	r3, #12
 8007732:	603b      	str	r3, [r7, #0]
 8007734:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007738:	e0d1      	b.n	80078de <_svfiprintf_r+0x1d2>
 800773a:	2340      	movs	r3, #64	; 0x40
 800773c:	616b      	str	r3, [r5, #20]
 800773e:	2300      	movs	r3, #0
 8007740:	9309      	str	r3, [sp, #36]	; 0x24
 8007742:	2320      	movs	r3, #32
 8007744:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007748:	f8cd 800c 	str.w	r8, [sp, #12]
 800774c:	2330      	movs	r3, #48	; 0x30
 800774e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80078f8 <_svfiprintf_r+0x1ec>
 8007752:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007756:	f04f 0901 	mov.w	r9, #1
 800775a:	4623      	mov	r3, r4
 800775c:	469a      	mov	sl, r3
 800775e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007762:	b10a      	cbz	r2, 8007768 <_svfiprintf_r+0x5c>
 8007764:	2a25      	cmp	r2, #37	; 0x25
 8007766:	d1f9      	bne.n	800775c <_svfiprintf_r+0x50>
 8007768:	ebba 0b04 	subs.w	fp, sl, r4
 800776c:	d00b      	beq.n	8007786 <_svfiprintf_r+0x7a>
 800776e:	465b      	mov	r3, fp
 8007770:	4622      	mov	r2, r4
 8007772:	4629      	mov	r1, r5
 8007774:	4638      	mov	r0, r7
 8007776:	f7ff ff6d 	bl	8007654 <__ssputs_r>
 800777a:	3001      	adds	r0, #1
 800777c:	f000 80aa 	beq.w	80078d4 <_svfiprintf_r+0x1c8>
 8007780:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007782:	445a      	add	r2, fp
 8007784:	9209      	str	r2, [sp, #36]	; 0x24
 8007786:	f89a 3000 	ldrb.w	r3, [sl]
 800778a:	2b00      	cmp	r3, #0
 800778c:	f000 80a2 	beq.w	80078d4 <_svfiprintf_r+0x1c8>
 8007790:	2300      	movs	r3, #0
 8007792:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007796:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800779a:	f10a 0a01 	add.w	sl, sl, #1
 800779e:	9304      	str	r3, [sp, #16]
 80077a0:	9307      	str	r3, [sp, #28]
 80077a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80077a6:	931a      	str	r3, [sp, #104]	; 0x68
 80077a8:	4654      	mov	r4, sl
 80077aa:	2205      	movs	r2, #5
 80077ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077b0:	4851      	ldr	r0, [pc, #324]	; (80078f8 <_svfiprintf_r+0x1ec>)
 80077b2:	f7f8 fd35 	bl	8000220 <memchr>
 80077b6:	9a04      	ldr	r2, [sp, #16]
 80077b8:	b9d8      	cbnz	r0, 80077f2 <_svfiprintf_r+0xe6>
 80077ba:	06d0      	lsls	r0, r2, #27
 80077bc:	bf44      	itt	mi
 80077be:	2320      	movmi	r3, #32
 80077c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077c4:	0711      	lsls	r1, r2, #28
 80077c6:	bf44      	itt	mi
 80077c8:	232b      	movmi	r3, #43	; 0x2b
 80077ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077ce:	f89a 3000 	ldrb.w	r3, [sl]
 80077d2:	2b2a      	cmp	r3, #42	; 0x2a
 80077d4:	d015      	beq.n	8007802 <_svfiprintf_r+0xf6>
 80077d6:	9a07      	ldr	r2, [sp, #28]
 80077d8:	4654      	mov	r4, sl
 80077da:	2000      	movs	r0, #0
 80077dc:	f04f 0c0a 	mov.w	ip, #10
 80077e0:	4621      	mov	r1, r4
 80077e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077e6:	3b30      	subs	r3, #48	; 0x30
 80077e8:	2b09      	cmp	r3, #9
 80077ea:	d94e      	bls.n	800788a <_svfiprintf_r+0x17e>
 80077ec:	b1b0      	cbz	r0, 800781c <_svfiprintf_r+0x110>
 80077ee:	9207      	str	r2, [sp, #28]
 80077f0:	e014      	b.n	800781c <_svfiprintf_r+0x110>
 80077f2:	eba0 0308 	sub.w	r3, r0, r8
 80077f6:	fa09 f303 	lsl.w	r3, r9, r3
 80077fa:	4313      	orrs	r3, r2
 80077fc:	9304      	str	r3, [sp, #16]
 80077fe:	46a2      	mov	sl, r4
 8007800:	e7d2      	b.n	80077a8 <_svfiprintf_r+0x9c>
 8007802:	9b03      	ldr	r3, [sp, #12]
 8007804:	1d19      	adds	r1, r3, #4
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	9103      	str	r1, [sp, #12]
 800780a:	2b00      	cmp	r3, #0
 800780c:	bfbb      	ittet	lt
 800780e:	425b      	neglt	r3, r3
 8007810:	f042 0202 	orrlt.w	r2, r2, #2
 8007814:	9307      	strge	r3, [sp, #28]
 8007816:	9307      	strlt	r3, [sp, #28]
 8007818:	bfb8      	it	lt
 800781a:	9204      	strlt	r2, [sp, #16]
 800781c:	7823      	ldrb	r3, [r4, #0]
 800781e:	2b2e      	cmp	r3, #46	; 0x2e
 8007820:	d10c      	bne.n	800783c <_svfiprintf_r+0x130>
 8007822:	7863      	ldrb	r3, [r4, #1]
 8007824:	2b2a      	cmp	r3, #42	; 0x2a
 8007826:	d135      	bne.n	8007894 <_svfiprintf_r+0x188>
 8007828:	9b03      	ldr	r3, [sp, #12]
 800782a:	1d1a      	adds	r2, r3, #4
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	9203      	str	r2, [sp, #12]
 8007830:	2b00      	cmp	r3, #0
 8007832:	bfb8      	it	lt
 8007834:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007838:	3402      	adds	r4, #2
 800783a:	9305      	str	r3, [sp, #20]
 800783c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007908 <_svfiprintf_r+0x1fc>
 8007840:	7821      	ldrb	r1, [r4, #0]
 8007842:	2203      	movs	r2, #3
 8007844:	4650      	mov	r0, sl
 8007846:	f7f8 fceb 	bl	8000220 <memchr>
 800784a:	b140      	cbz	r0, 800785e <_svfiprintf_r+0x152>
 800784c:	2340      	movs	r3, #64	; 0x40
 800784e:	eba0 000a 	sub.w	r0, r0, sl
 8007852:	fa03 f000 	lsl.w	r0, r3, r0
 8007856:	9b04      	ldr	r3, [sp, #16]
 8007858:	4303      	orrs	r3, r0
 800785a:	3401      	adds	r4, #1
 800785c:	9304      	str	r3, [sp, #16]
 800785e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007862:	4826      	ldr	r0, [pc, #152]	; (80078fc <_svfiprintf_r+0x1f0>)
 8007864:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007868:	2206      	movs	r2, #6
 800786a:	f7f8 fcd9 	bl	8000220 <memchr>
 800786e:	2800      	cmp	r0, #0
 8007870:	d038      	beq.n	80078e4 <_svfiprintf_r+0x1d8>
 8007872:	4b23      	ldr	r3, [pc, #140]	; (8007900 <_svfiprintf_r+0x1f4>)
 8007874:	bb1b      	cbnz	r3, 80078be <_svfiprintf_r+0x1b2>
 8007876:	9b03      	ldr	r3, [sp, #12]
 8007878:	3307      	adds	r3, #7
 800787a:	f023 0307 	bic.w	r3, r3, #7
 800787e:	3308      	adds	r3, #8
 8007880:	9303      	str	r3, [sp, #12]
 8007882:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007884:	4433      	add	r3, r6
 8007886:	9309      	str	r3, [sp, #36]	; 0x24
 8007888:	e767      	b.n	800775a <_svfiprintf_r+0x4e>
 800788a:	fb0c 3202 	mla	r2, ip, r2, r3
 800788e:	460c      	mov	r4, r1
 8007890:	2001      	movs	r0, #1
 8007892:	e7a5      	b.n	80077e0 <_svfiprintf_r+0xd4>
 8007894:	2300      	movs	r3, #0
 8007896:	3401      	adds	r4, #1
 8007898:	9305      	str	r3, [sp, #20]
 800789a:	4619      	mov	r1, r3
 800789c:	f04f 0c0a 	mov.w	ip, #10
 80078a0:	4620      	mov	r0, r4
 80078a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078a6:	3a30      	subs	r2, #48	; 0x30
 80078a8:	2a09      	cmp	r2, #9
 80078aa:	d903      	bls.n	80078b4 <_svfiprintf_r+0x1a8>
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d0c5      	beq.n	800783c <_svfiprintf_r+0x130>
 80078b0:	9105      	str	r1, [sp, #20]
 80078b2:	e7c3      	b.n	800783c <_svfiprintf_r+0x130>
 80078b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80078b8:	4604      	mov	r4, r0
 80078ba:	2301      	movs	r3, #1
 80078bc:	e7f0      	b.n	80078a0 <_svfiprintf_r+0x194>
 80078be:	ab03      	add	r3, sp, #12
 80078c0:	9300      	str	r3, [sp, #0]
 80078c2:	462a      	mov	r2, r5
 80078c4:	4b0f      	ldr	r3, [pc, #60]	; (8007904 <_svfiprintf_r+0x1f8>)
 80078c6:	a904      	add	r1, sp, #16
 80078c8:	4638      	mov	r0, r7
 80078ca:	f7fe f80f 	bl	80058ec <_printf_float>
 80078ce:	1c42      	adds	r2, r0, #1
 80078d0:	4606      	mov	r6, r0
 80078d2:	d1d6      	bne.n	8007882 <_svfiprintf_r+0x176>
 80078d4:	89ab      	ldrh	r3, [r5, #12]
 80078d6:	065b      	lsls	r3, r3, #25
 80078d8:	f53f af2c 	bmi.w	8007734 <_svfiprintf_r+0x28>
 80078dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80078de:	b01d      	add	sp, #116	; 0x74
 80078e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078e4:	ab03      	add	r3, sp, #12
 80078e6:	9300      	str	r3, [sp, #0]
 80078e8:	462a      	mov	r2, r5
 80078ea:	4b06      	ldr	r3, [pc, #24]	; (8007904 <_svfiprintf_r+0x1f8>)
 80078ec:	a904      	add	r1, sp, #16
 80078ee:	4638      	mov	r0, r7
 80078f0:	f7fe faa0 	bl	8005e34 <_printf_i>
 80078f4:	e7eb      	b.n	80078ce <_svfiprintf_r+0x1c2>
 80078f6:	bf00      	nop
 80078f8:	08009d5c 	.word	0x08009d5c
 80078fc:	08009d66 	.word	0x08009d66
 8007900:	080058ed 	.word	0x080058ed
 8007904:	08007655 	.word	0x08007655
 8007908:	08009d62 	.word	0x08009d62

0800790c <_sbrk_r>:
 800790c:	b538      	push	{r3, r4, r5, lr}
 800790e:	4d06      	ldr	r5, [pc, #24]	; (8007928 <_sbrk_r+0x1c>)
 8007910:	2300      	movs	r3, #0
 8007912:	4604      	mov	r4, r0
 8007914:	4608      	mov	r0, r1
 8007916:	602b      	str	r3, [r5, #0]
 8007918:	f7fb f9f4 	bl	8002d04 <_sbrk>
 800791c:	1c43      	adds	r3, r0, #1
 800791e:	d102      	bne.n	8007926 <_sbrk_r+0x1a>
 8007920:	682b      	ldr	r3, [r5, #0]
 8007922:	b103      	cbz	r3, 8007926 <_sbrk_r+0x1a>
 8007924:	6023      	str	r3, [r4, #0]
 8007926:	bd38      	pop	{r3, r4, r5, pc}
 8007928:	200002cc 	.word	0x200002cc

0800792c <__assert_func>:
 800792c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800792e:	4614      	mov	r4, r2
 8007930:	461a      	mov	r2, r3
 8007932:	4b09      	ldr	r3, [pc, #36]	; (8007958 <__assert_func+0x2c>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4605      	mov	r5, r0
 8007938:	68d8      	ldr	r0, [r3, #12]
 800793a:	b14c      	cbz	r4, 8007950 <__assert_func+0x24>
 800793c:	4b07      	ldr	r3, [pc, #28]	; (800795c <__assert_func+0x30>)
 800793e:	9100      	str	r1, [sp, #0]
 8007940:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007944:	4906      	ldr	r1, [pc, #24]	; (8007960 <__assert_func+0x34>)
 8007946:	462b      	mov	r3, r5
 8007948:	f000 f80e 	bl	8007968 <fiprintf>
 800794c:	f000 faa4 	bl	8007e98 <abort>
 8007950:	4b04      	ldr	r3, [pc, #16]	; (8007964 <__assert_func+0x38>)
 8007952:	461c      	mov	r4, r3
 8007954:	e7f3      	b.n	800793e <__assert_func+0x12>
 8007956:	bf00      	nop
 8007958:	20000014 	.word	0x20000014
 800795c:	08009d6d 	.word	0x08009d6d
 8007960:	08009d7a 	.word	0x08009d7a
 8007964:	08009da8 	.word	0x08009da8

08007968 <fiprintf>:
 8007968:	b40e      	push	{r1, r2, r3}
 800796a:	b503      	push	{r0, r1, lr}
 800796c:	4601      	mov	r1, r0
 800796e:	ab03      	add	r3, sp, #12
 8007970:	4805      	ldr	r0, [pc, #20]	; (8007988 <fiprintf+0x20>)
 8007972:	f853 2b04 	ldr.w	r2, [r3], #4
 8007976:	6800      	ldr	r0, [r0, #0]
 8007978:	9301      	str	r3, [sp, #4]
 800797a:	f000 f88f 	bl	8007a9c <_vfiprintf_r>
 800797e:	b002      	add	sp, #8
 8007980:	f85d eb04 	ldr.w	lr, [sp], #4
 8007984:	b003      	add	sp, #12
 8007986:	4770      	bx	lr
 8007988:	20000014 	.word	0x20000014

0800798c <__ascii_mbtowc>:
 800798c:	b082      	sub	sp, #8
 800798e:	b901      	cbnz	r1, 8007992 <__ascii_mbtowc+0x6>
 8007990:	a901      	add	r1, sp, #4
 8007992:	b142      	cbz	r2, 80079a6 <__ascii_mbtowc+0x1a>
 8007994:	b14b      	cbz	r3, 80079aa <__ascii_mbtowc+0x1e>
 8007996:	7813      	ldrb	r3, [r2, #0]
 8007998:	600b      	str	r3, [r1, #0]
 800799a:	7812      	ldrb	r2, [r2, #0]
 800799c:	1e10      	subs	r0, r2, #0
 800799e:	bf18      	it	ne
 80079a0:	2001      	movne	r0, #1
 80079a2:	b002      	add	sp, #8
 80079a4:	4770      	bx	lr
 80079a6:	4610      	mov	r0, r2
 80079a8:	e7fb      	b.n	80079a2 <__ascii_mbtowc+0x16>
 80079aa:	f06f 0001 	mvn.w	r0, #1
 80079ae:	e7f8      	b.n	80079a2 <__ascii_mbtowc+0x16>

080079b0 <memmove>:
 80079b0:	4288      	cmp	r0, r1
 80079b2:	b510      	push	{r4, lr}
 80079b4:	eb01 0402 	add.w	r4, r1, r2
 80079b8:	d902      	bls.n	80079c0 <memmove+0x10>
 80079ba:	4284      	cmp	r4, r0
 80079bc:	4623      	mov	r3, r4
 80079be:	d807      	bhi.n	80079d0 <memmove+0x20>
 80079c0:	1e43      	subs	r3, r0, #1
 80079c2:	42a1      	cmp	r1, r4
 80079c4:	d008      	beq.n	80079d8 <memmove+0x28>
 80079c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80079ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80079ce:	e7f8      	b.n	80079c2 <memmove+0x12>
 80079d0:	4402      	add	r2, r0
 80079d2:	4601      	mov	r1, r0
 80079d4:	428a      	cmp	r2, r1
 80079d6:	d100      	bne.n	80079da <memmove+0x2a>
 80079d8:	bd10      	pop	{r4, pc}
 80079da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80079de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80079e2:	e7f7      	b.n	80079d4 <memmove+0x24>

080079e4 <__malloc_lock>:
 80079e4:	4801      	ldr	r0, [pc, #4]	; (80079ec <__malloc_lock+0x8>)
 80079e6:	f000 bc17 	b.w	8008218 <__retarget_lock_acquire_recursive>
 80079ea:	bf00      	nop
 80079ec:	200002d4 	.word	0x200002d4

080079f0 <__malloc_unlock>:
 80079f0:	4801      	ldr	r0, [pc, #4]	; (80079f8 <__malloc_unlock+0x8>)
 80079f2:	f000 bc12 	b.w	800821a <__retarget_lock_release_recursive>
 80079f6:	bf00      	nop
 80079f8:	200002d4 	.word	0x200002d4

080079fc <_realloc_r>:
 80079fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079fe:	4607      	mov	r7, r0
 8007a00:	4614      	mov	r4, r2
 8007a02:	460e      	mov	r6, r1
 8007a04:	b921      	cbnz	r1, 8007a10 <_realloc_r+0x14>
 8007a06:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007a0a:	4611      	mov	r1, r2
 8007a0c:	f7ff bdc8 	b.w	80075a0 <_malloc_r>
 8007a10:	b922      	cbnz	r2, 8007a1c <_realloc_r+0x20>
 8007a12:	f7ff fd75 	bl	8007500 <_free_r>
 8007a16:	4625      	mov	r5, r4
 8007a18:	4628      	mov	r0, r5
 8007a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a1c:	f000 fc62 	bl	80082e4 <_malloc_usable_size_r>
 8007a20:	42a0      	cmp	r0, r4
 8007a22:	d20f      	bcs.n	8007a44 <_realloc_r+0x48>
 8007a24:	4621      	mov	r1, r4
 8007a26:	4638      	mov	r0, r7
 8007a28:	f7ff fdba 	bl	80075a0 <_malloc_r>
 8007a2c:	4605      	mov	r5, r0
 8007a2e:	2800      	cmp	r0, #0
 8007a30:	d0f2      	beq.n	8007a18 <_realloc_r+0x1c>
 8007a32:	4631      	mov	r1, r6
 8007a34:	4622      	mov	r2, r4
 8007a36:	f7ff f9c7 	bl	8006dc8 <memcpy>
 8007a3a:	4631      	mov	r1, r6
 8007a3c:	4638      	mov	r0, r7
 8007a3e:	f7ff fd5f 	bl	8007500 <_free_r>
 8007a42:	e7e9      	b.n	8007a18 <_realloc_r+0x1c>
 8007a44:	4635      	mov	r5, r6
 8007a46:	e7e7      	b.n	8007a18 <_realloc_r+0x1c>

08007a48 <__sfputc_r>:
 8007a48:	6893      	ldr	r3, [r2, #8]
 8007a4a:	3b01      	subs	r3, #1
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	b410      	push	{r4}
 8007a50:	6093      	str	r3, [r2, #8]
 8007a52:	da08      	bge.n	8007a66 <__sfputc_r+0x1e>
 8007a54:	6994      	ldr	r4, [r2, #24]
 8007a56:	42a3      	cmp	r3, r4
 8007a58:	db01      	blt.n	8007a5e <__sfputc_r+0x16>
 8007a5a:	290a      	cmp	r1, #10
 8007a5c:	d103      	bne.n	8007a66 <__sfputc_r+0x1e>
 8007a5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a62:	f000 b94b 	b.w	8007cfc <__swbuf_r>
 8007a66:	6813      	ldr	r3, [r2, #0]
 8007a68:	1c58      	adds	r0, r3, #1
 8007a6a:	6010      	str	r0, [r2, #0]
 8007a6c:	7019      	strb	r1, [r3, #0]
 8007a6e:	4608      	mov	r0, r1
 8007a70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a74:	4770      	bx	lr

08007a76 <__sfputs_r>:
 8007a76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a78:	4606      	mov	r6, r0
 8007a7a:	460f      	mov	r7, r1
 8007a7c:	4614      	mov	r4, r2
 8007a7e:	18d5      	adds	r5, r2, r3
 8007a80:	42ac      	cmp	r4, r5
 8007a82:	d101      	bne.n	8007a88 <__sfputs_r+0x12>
 8007a84:	2000      	movs	r0, #0
 8007a86:	e007      	b.n	8007a98 <__sfputs_r+0x22>
 8007a88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a8c:	463a      	mov	r2, r7
 8007a8e:	4630      	mov	r0, r6
 8007a90:	f7ff ffda 	bl	8007a48 <__sfputc_r>
 8007a94:	1c43      	adds	r3, r0, #1
 8007a96:	d1f3      	bne.n	8007a80 <__sfputs_r+0xa>
 8007a98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007a9c <_vfiprintf_r>:
 8007a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aa0:	460d      	mov	r5, r1
 8007aa2:	b09d      	sub	sp, #116	; 0x74
 8007aa4:	4614      	mov	r4, r2
 8007aa6:	4698      	mov	r8, r3
 8007aa8:	4606      	mov	r6, r0
 8007aaa:	b118      	cbz	r0, 8007ab4 <_vfiprintf_r+0x18>
 8007aac:	6983      	ldr	r3, [r0, #24]
 8007aae:	b90b      	cbnz	r3, 8007ab4 <_vfiprintf_r+0x18>
 8007ab0:	f000 fb14 	bl	80080dc <__sinit>
 8007ab4:	4b89      	ldr	r3, [pc, #548]	; (8007cdc <_vfiprintf_r+0x240>)
 8007ab6:	429d      	cmp	r5, r3
 8007ab8:	d11b      	bne.n	8007af2 <_vfiprintf_r+0x56>
 8007aba:	6875      	ldr	r5, [r6, #4]
 8007abc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007abe:	07d9      	lsls	r1, r3, #31
 8007ac0:	d405      	bmi.n	8007ace <_vfiprintf_r+0x32>
 8007ac2:	89ab      	ldrh	r3, [r5, #12]
 8007ac4:	059a      	lsls	r2, r3, #22
 8007ac6:	d402      	bmi.n	8007ace <_vfiprintf_r+0x32>
 8007ac8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007aca:	f000 fba5 	bl	8008218 <__retarget_lock_acquire_recursive>
 8007ace:	89ab      	ldrh	r3, [r5, #12]
 8007ad0:	071b      	lsls	r3, r3, #28
 8007ad2:	d501      	bpl.n	8007ad8 <_vfiprintf_r+0x3c>
 8007ad4:	692b      	ldr	r3, [r5, #16]
 8007ad6:	b9eb      	cbnz	r3, 8007b14 <_vfiprintf_r+0x78>
 8007ad8:	4629      	mov	r1, r5
 8007ada:	4630      	mov	r0, r6
 8007adc:	f000 f96e 	bl	8007dbc <__swsetup_r>
 8007ae0:	b1c0      	cbz	r0, 8007b14 <_vfiprintf_r+0x78>
 8007ae2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ae4:	07dc      	lsls	r4, r3, #31
 8007ae6:	d50e      	bpl.n	8007b06 <_vfiprintf_r+0x6a>
 8007ae8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007aec:	b01d      	add	sp, #116	; 0x74
 8007aee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007af2:	4b7b      	ldr	r3, [pc, #492]	; (8007ce0 <_vfiprintf_r+0x244>)
 8007af4:	429d      	cmp	r5, r3
 8007af6:	d101      	bne.n	8007afc <_vfiprintf_r+0x60>
 8007af8:	68b5      	ldr	r5, [r6, #8]
 8007afa:	e7df      	b.n	8007abc <_vfiprintf_r+0x20>
 8007afc:	4b79      	ldr	r3, [pc, #484]	; (8007ce4 <_vfiprintf_r+0x248>)
 8007afe:	429d      	cmp	r5, r3
 8007b00:	bf08      	it	eq
 8007b02:	68f5      	ldreq	r5, [r6, #12]
 8007b04:	e7da      	b.n	8007abc <_vfiprintf_r+0x20>
 8007b06:	89ab      	ldrh	r3, [r5, #12]
 8007b08:	0598      	lsls	r0, r3, #22
 8007b0a:	d4ed      	bmi.n	8007ae8 <_vfiprintf_r+0x4c>
 8007b0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b0e:	f000 fb84 	bl	800821a <__retarget_lock_release_recursive>
 8007b12:	e7e9      	b.n	8007ae8 <_vfiprintf_r+0x4c>
 8007b14:	2300      	movs	r3, #0
 8007b16:	9309      	str	r3, [sp, #36]	; 0x24
 8007b18:	2320      	movs	r3, #32
 8007b1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b22:	2330      	movs	r3, #48	; 0x30
 8007b24:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007ce8 <_vfiprintf_r+0x24c>
 8007b28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b2c:	f04f 0901 	mov.w	r9, #1
 8007b30:	4623      	mov	r3, r4
 8007b32:	469a      	mov	sl, r3
 8007b34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b38:	b10a      	cbz	r2, 8007b3e <_vfiprintf_r+0xa2>
 8007b3a:	2a25      	cmp	r2, #37	; 0x25
 8007b3c:	d1f9      	bne.n	8007b32 <_vfiprintf_r+0x96>
 8007b3e:	ebba 0b04 	subs.w	fp, sl, r4
 8007b42:	d00b      	beq.n	8007b5c <_vfiprintf_r+0xc0>
 8007b44:	465b      	mov	r3, fp
 8007b46:	4622      	mov	r2, r4
 8007b48:	4629      	mov	r1, r5
 8007b4a:	4630      	mov	r0, r6
 8007b4c:	f7ff ff93 	bl	8007a76 <__sfputs_r>
 8007b50:	3001      	adds	r0, #1
 8007b52:	f000 80aa 	beq.w	8007caa <_vfiprintf_r+0x20e>
 8007b56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b58:	445a      	add	r2, fp
 8007b5a:	9209      	str	r2, [sp, #36]	; 0x24
 8007b5c:	f89a 3000 	ldrb.w	r3, [sl]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	f000 80a2 	beq.w	8007caa <_vfiprintf_r+0x20e>
 8007b66:	2300      	movs	r3, #0
 8007b68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b70:	f10a 0a01 	add.w	sl, sl, #1
 8007b74:	9304      	str	r3, [sp, #16]
 8007b76:	9307      	str	r3, [sp, #28]
 8007b78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b7c:	931a      	str	r3, [sp, #104]	; 0x68
 8007b7e:	4654      	mov	r4, sl
 8007b80:	2205      	movs	r2, #5
 8007b82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b86:	4858      	ldr	r0, [pc, #352]	; (8007ce8 <_vfiprintf_r+0x24c>)
 8007b88:	f7f8 fb4a 	bl	8000220 <memchr>
 8007b8c:	9a04      	ldr	r2, [sp, #16]
 8007b8e:	b9d8      	cbnz	r0, 8007bc8 <_vfiprintf_r+0x12c>
 8007b90:	06d1      	lsls	r1, r2, #27
 8007b92:	bf44      	itt	mi
 8007b94:	2320      	movmi	r3, #32
 8007b96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b9a:	0713      	lsls	r3, r2, #28
 8007b9c:	bf44      	itt	mi
 8007b9e:	232b      	movmi	r3, #43	; 0x2b
 8007ba0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ba4:	f89a 3000 	ldrb.w	r3, [sl]
 8007ba8:	2b2a      	cmp	r3, #42	; 0x2a
 8007baa:	d015      	beq.n	8007bd8 <_vfiprintf_r+0x13c>
 8007bac:	9a07      	ldr	r2, [sp, #28]
 8007bae:	4654      	mov	r4, sl
 8007bb0:	2000      	movs	r0, #0
 8007bb2:	f04f 0c0a 	mov.w	ip, #10
 8007bb6:	4621      	mov	r1, r4
 8007bb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007bbc:	3b30      	subs	r3, #48	; 0x30
 8007bbe:	2b09      	cmp	r3, #9
 8007bc0:	d94e      	bls.n	8007c60 <_vfiprintf_r+0x1c4>
 8007bc2:	b1b0      	cbz	r0, 8007bf2 <_vfiprintf_r+0x156>
 8007bc4:	9207      	str	r2, [sp, #28]
 8007bc6:	e014      	b.n	8007bf2 <_vfiprintf_r+0x156>
 8007bc8:	eba0 0308 	sub.w	r3, r0, r8
 8007bcc:	fa09 f303 	lsl.w	r3, r9, r3
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	9304      	str	r3, [sp, #16]
 8007bd4:	46a2      	mov	sl, r4
 8007bd6:	e7d2      	b.n	8007b7e <_vfiprintf_r+0xe2>
 8007bd8:	9b03      	ldr	r3, [sp, #12]
 8007bda:	1d19      	adds	r1, r3, #4
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	9103      	str	r1, [sp, #12]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	bfbb      	ittet	lt
 8007be4:	425b      	neglt	r3, r3
 8007be6:	f042 0202 	orrlt.w	r2, r2, #2
 8007bea:	9307      	strge	r3, [sp, #28]
 8007bec:	9307      	strlt	r3, [sp, #28]
 8007bee:	bfb8      	it	lt
 8007bf0:	9204      	strlt	r2, [sp, #16]
 8007bf2:	7823      	ldrb	r3, [r4, #0]
 8007bf4:	2b2e      	cmp	r3, #46	; 0x2e
 8007bf6:	d10c      	bne.n	8007c12 <_vfiprintf_r+0x176>
 8007bf8:	7863      	ldrb	r3, [r4, #1]
 8007bfa:	2b2a      	cmp	r3, #42	; 0x2a
 8007bfc:	d135      	bne.n	8007c6a <_vfiprintf_r+0x1ce>
 8007bfe:	9b03      	ldr	r3, [sp, #12]
 8007c00:	1d1a      	adds	r2, r3, #4
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	9203      	str	r2, [sp, #12]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	bfb8      	it	lt
 8007c0a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007c0e:	3402      	adds	r4, #2
 8007c10:	9305      	str	r3, [sp, #20]
 8007c12:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007cf8 <_vfiprintf_r+0x25c>
 8007c16:	7821      	ldrb	r1, [r4, #0]
 8007c18:	2203      	movs	r2, #3
 8007c1a:	4650      	mov	r0, sl
 8007c1c:	f7f8 fb00 	bl	8000220 <memchr>
 8007c20:	b140      	cbz	r0, 8007c34 <_vfiprintf_r+0x198>
 8007c22:	2340      	movs	r3, #64	; 0x40
 8007c24:	eba0 000a 	sub.w	r0, r0, sl
 8007c28:	fa03 f000 	lsl.w	r0, r3, r0
 8007c2c:	9b04      	ldr	r3, [sp, #16]
 8007c2e:	4303      	orrs	r3, r0
 8007c30:	3401      	adds	r4, #1
 8007c32:	9304      	str	r3, [sp, #16]
 8007c34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c38:	482c      	ldr	r0, [pc, #176]	; (8007cec <_vfiprintf_r+0x250>)
 8007c3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c3e:	2206      	movs	r2, #6
 8007c40:	f7f8 faee 	bl	8000220 <memchr>
 8007c44:	2800      	cmp	r0, #0
 8007c46:	d03f      	beq.n	8007cc8 <_vfiprintf_r+0x22c>
 8007c48:	4b29      	ldr	r3, [pc, #164]	; (8007cf0 <_vfiprintf_r+0x254>)
 8007c4a:	bb1b      	cbnz	r3, 8007c94 <_vfiprintf_r+0x1f8>
 8007c4c:	9b03      	ldr	r3, [sp, #12]
 8007c4e:	3307      	adds	r3, #7
 8007c50:	f023 0307 	bic.w	r3, r3, #7
 8007c54:	3308      	adds	r3, #8
 8007c56:	9303      	str	r3, [sp, #12]
 8007c58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c5a:	443b      	add	r3, r7
 8007c5c:	9309      	str	r3, [sp, #36]	; 0x24
 8007c5e:	e767      	b.n	8007b30 <_vfiprintf_r+0x94>
 8007c60:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c64:	460c      	mov	r4, r1
 8007c66:	2001      	movs	r0, #1
 8007c68:	e7a5      	b.n	8007bb6 <_vfiprintf_r+0x11a>
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	3401      	adds	r4, #1
 8007c6e:	9305      	str	r3, [sp, #20]
 8007c70:	4619      	mov	r1, r3
 8007c72:	f04f 0c0a 	mov.w	ip, #10
 8007c76:	4620      	mov	r0, r4
 8007c78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c7c:	3a30      	subs	r2, #48	; 0x30
 8007c7e:	2a09      	cmp	r2, #9
 8007c80:	d903      	bls.n	8007c8a <_vfiprintf_r+0x1ee>
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d0c5      	beq.n	8007c12 <_vfiprintf_r+0x176>
 8007c86:	9105      	str	r1, [sp, #20]
 8007c88:	e7c3      	b.n	8007c12 <_vfiprintf_r+0x176>
 8007c8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c8e:	4604      	mov	r4, r0
 8007c90:	2301      	movs	r3, #1
 8007c92:	e7f0      	b.n	8007c76 <_vfiprintf_r+0x1da>
 8007c94:	ab03      	add	r3, sp, #12
 8007c96:	9300      	str	r3, [sp, #0]
 8007c98:	462a      	mov	r2, r5
 8007c9a:	4b16      	ldr	r3, [pc, #88]	; (8007cf4 <_vfiprintf_r+0x258>)
 8007c9c:	a904      	add	r1, sp, #16
 8007c9e:	4630      	mov	r0, r6
 8007ca0:	f7fd fe24 	bl	80058ec <_printf_float>
 8007ca4:	4607      	mov	r7, r0
 8007ca6:	1c78      	adds	r0, r7, #1
 8007ca8:	d1d6      	bne.n	8007c58 <_vfiprintf_r+0x1bc>
 8007caa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007cac:	07d9      	lsls	r1, r3, #31
 8007cae:	d405      	bmi.n	8007cbc <_vfiprintf_r+0x220>
 8007cb0:	89ab      	ldrh	r3, [r5, #12]
 8007cb2:	059a      	lsls	r2, r3, #22
 8007cb4:	d402      	bmi.n	8007cbc <_vfiprintf_r+0x220>
 8007cb6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007cb8:	f000 faaf 	bl	800821a <__retarget_lock_release_recursive>
 8007cbc:	89ab      	ldrh	r3, [r5, #12]
 8007cbe:	065b      	lsls	r3, r3, #25
 8007cc0:	f53f af12 	bmi.w	8007ae8 <_vfiprintf_r+0x4c>
 8007cc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007cc6:	e711      	b.n	8007aec <_vfiprintf_r+0x50>
 8007cc8:	ab03      	add	r3, sp, #12
 8007cca:	9300      	str	r3, [sp, #0]
 8007ccc:	462a      	mov	r2, r5
 8007cce:	4b09      	ldr	r3, [pc, #36]	; (8007cf4 <_vfiprintf_r+0x258>)
 8007cd0:	a904      	add	r1, sp, #16
 8007cd2:	4630      	mov	r0, r6
 8007cd4:	f7fe f8ae 	bl	8005e34 <_printf_i>
 8007cd8:	e7e4      	b.n	8007ca4 <_vfiprintf_r+0x208>
 8007cda:	bf00      	nop
 8007cdc:	08009ed4 	.word	0x08009ed4
 8007ce0:	08009ef4 	.word	0x08009ef4
 8007ce4:	08009eb4 	.word	0x08009eb4
 8007ce8:	08009d5c 	.word	0x08009d5c
 8007cec:	08009d66 	.word	0x08009d66
 8007cf0:	080058ed 	.word	0x080058ed
 8007cf4:	08007a77 	.word	0x08007a77
 8007cf8:	08009d62 	.word	0x08009d62

08007cfc <__swbuf_r>:
 8007cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cfe:	460e      	mov	r6, r1
 8007d00:	4614      	mov	r4, r2
 8007d02:	4605      	mov	r5, r0
 8007d04:	b118      	cbz	r0, 8007d0e <__swbuf_r+0x12>
 8007d06:	6983      	ldr	r3, [r0, #24]
 8007d08:	b90b      	cbnz	r3, 8007d0e <__swbuf_r+0x12>
 8007d0a:	f000 f9e7 	bl	80080dc <__sinit>
 8007d0e:	4b21      	ldr	r3, [pc, #132]	; (8007d94 <__swbuf_r+0x98>)
 8007d10:	429c      	cmp	r4, r3
 8007d12:	d12b      	bne.n	8007d6c <__swbuf_r+0x70>
 8007d14:	686c      	ldr	r4, [r5, #4]
 8007d16:	69a3      	ldr	r3, [r4, #24]
 8007d18:	60a3      	str	r3, [r4, #8]
 8007d1a:	89a3      	ldrh	r3, [r4, #12]
 8007d1c:	071a      	lsls	r2, r3, #28
 8007d1e:	d52f      	bpl.n	8007d80 <__swbuf_r+0x84>
 8007d20:	6923      	ldr	r3, [r4, #16]
 8007d22:	b36b      	cbz	r3, 8007d80 <__swbuf_r+0x84>
 8007d24:	6923      	ldr	r3, [r4, #16]
 8007d26:	6820      	ldr	r0, [r4, #0]
 8007d28:	1ac0      	subs	r0, r0, r3
 8007d2a:	6963      	ldr	r3, [r4, #20]
 8007d2c:	b2f6      	uxtb	r6, r6
 8007d2e:	4283      	cmp	r3, r0
 8007d30:	4637      	mov	r7, r6
 8007d32:	dc04      	bgt.n	8007d3e <__swbuf_r+0x42>
 8007d34:	4621      	mov	r1, r4
 8007d36:	4628      	mov	r0, r5
 8007d38:	f000 f93c 	bl	8007fb4 <_fflush_r>
 8007d3c:	bb30      	cbnz	r0, 8007d8c <__swbuf_r+0x90>
 8007d3e:	68a3      	ldr	r3, [r4, #8]
 8007d40:	3b01      	subs	r3, #1
 8007d42:	60a3      	str	r3, [r4, #8]
 8007d44:	6823      	ldr	r3, [r4, #0]
 8007d46:	1c5a      	adds	r2, r3, #1
 8007d48:	6022      	str	r2, [r4, #0]
 8007d4a:	701e      	strb	r6, [r3, #0]
 8007d4c:	6963      	ldr	r3, [r4, #20]
 8007d4e:	3001      	adds	r0, #1
 8007d50:	4283      	cmp	r3, r0
 8007d52:	d004      	beq.n	8007d5e <__swbuf_r+0x62>
 8007d54:	89a3      	ldrh	r3, [r4, #12]
 8007d56:	07db      	lsls	r3, r3, #31
 8007d58:	d506      	bpl.n	8007d68 <__swbuf_r+0x6c>
 8007d5a:	2e0a      	cmp	r6, #10
 8007d5c:	d104      	bne.n	8007d68 <__swbuf_r+0x6c>
 8007d5e:	4621      	mov	r1, r4
 8007d60:	4628      	mov	r0, r5
 8007d62:	f000 f927 	bl	8007fb4 <_fflush_r>
 8007d66:	b988      	cbnz	r0, 8007d8c <__swbuf_r+0x90>
 8007d68:	4638      	mov	r0, r7
 8007d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d6c:	4b0a      	ldr	r3, [pc, #40]	; (8007d98 <__swbuf_r+0x9c>)
 8007d6e:	429c      	cmp	r4, r3
 8007d70:	d101      	bne.n	8007d76 <__swbuf_r+0x7a>
 8007d72:	68ac      	ldr	r4, [r5, #8]
 8007d74:	e7cf      	b.n	8007d16 <__swbuf_r+0x1a>
 8007d76:	4b09      	ldr	r3, [pc, #36]	; (8007d9c <__swbuf_r+0xa0>)
 8007d78:	429c      	cmp	r4, r3
 8007d7a:	bf08      	it	eq
 8007d7c:	68ec      	ldreq	r4, [r5, #12]
 8007d7e:	e7ca      	b.n	8007d16 <__swbuf_r+0x1a>
 8007d80:	4621      	mov	r1, r4
 8007d82:	4628      	mov	r0, r5
 8007d84:	f000 f81a 	bl	8007dbc <__swsetup_r>
 8007d88:	2800      	cmp	r0, #0
 8007d8a:	d0cb      	beq.n	8007d24 <__swbuf_r+0x28>
 8007d8c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007d90:	e7ea      	b.n	8007d68 <__swbuf_r+0x6c>
 8007d92:	bf00      	nop
 8007d94:	08009ed4 	.word	0x08009ed4
 8007d98:	08009ef4 	.word	0x08009ef4
 8007d9c:	08009eb4 	.word	0x08009eb4

08007da0 <__ascii_wctomb>:
 8007da0:	b149      	cbz	r1, 8007db6 <__ascii_wctomb+0x16>
 8007da2:	2aff      	cmp	r2, #255	; 0xff
 8007da4:	bf85      	ittet	hi
 8007da6:	238a      	movhi	r3, #138	; 0x8a
 8007da8:	6003      	strhi	r3, [r0, #0]
 8007daa:	700a      	strbls	r2, [r1, #0]
 8007dac:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8007db0:	bf98      	it	ls
 8007db2:	2001      	movls	r0, #1
 8007db4:	4770      	bx	lr
 8007db6:	4608      	mov	r0, r1
 8007db8:	4770      	bx	lr
	...

08007dbc <__swsetup_r>:
 8007dbc:	4b32      	ldr	r3, [pc, #200]	; (8007e88 <__swsetup_r+0xcc>)
 8007dbe:	b570      	push	{r4, r5, r6, lr}
 8007dc0:	681d      	ldr	r5, [r3, #0]
 8007dc2:	4606      	mov	r6, r0
 8007dc4:	460c      	mov	r4, r1
 8007dc6:	b125      	cbz	r5, 8007dd2 <__swsetup_r+0x16>
 8007dc8:	69ab      	ldr	r3, [r5, #24]
 8007dca:	b913      	cbnz	r3, 8007dd2 <__swsetup_r+0x16>
 8007dcc:	4628      	mov	r0, r5
 8007dce:	f000 f985 	bl	80080dc <__sinit>
 8007dd2:	4b2e      	ldr	r3, [pc, #184]	; (8007e8c <__swsetup_r+0xd0>)
 8007dd4:	429c      	cmp	r4, r3
 8007dd6:	d10f      	bne.n	8007df8 <__swsetup_r+0x3c>
 8007dd8:	686c      	ldr	r4, [r5, #4]
 8007dda:	89a3      	ldrh	r3, [r4, #12]
 8007ddc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007de0:	0719      	lsls	r1, r3, #28
 8007de2:	d42c      	bmi.n	8007e3e <__swsetup_r+0x82>
 8007de4:	06dd      	lsls	r5, r3, #27
 8007de6:	d411      	bmi.n	8007e0c <__swsetup_r+0x50>
 8007de8:	2309      	movs	r3, #9
 8007dea:	6033      	str	r3, [r6, #0]
 8007dec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007df0:	81a3      	strh	r3, [r4, #12]
 8007df2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007df6:	e03e      	b.n	8007e76 <__swsetup_r+0xba>
 8007df8:	4b25      	ldr	r3, [pc, #148]	; (8007e90 <__swsetup_r+0xd4>)
 8007dfa:	429c      	cmp	r4, r3
 8007dfc:	d101      	bne.n	8007e02 <__swsetup_r+0x46>
 8007dfe:	68ac      	ldr	r4, [r5, #8]
 8007e00:	e7eb      	b.n	8007dda <__swsetup_r+0x1e>
 8007e02:	4b24      	ldr	r3, [pc, #144]	; (8007e94 <__swsetup_r+0xd8>)
 8007e04:	429c      	cmp	r4, r3
 8007e06:	bf08      	it	eq
 8007e08:	68ec      	ldreq	r4, [r5, #12]
 8007e0a:	e7e6      	b.n	8007dda <__swsetup_r+0x1e>
 8007e0c:	0758      	lsls	r0, r3, #29
 8007e0e:	d512      	bpl.n	8007e36 <__swsetup_r+0x7a>
 8007e10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e12:	b141      	cbz	r1, 8007e26 <__swsetup_r+0x6a>
 8007e14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e18:	4299      	cmp	r1, r3
 8007e1a:	d002      	beq.n	8007e22 <__swsetup_r+0x66>
 8007e1c:	4630      	mov	r0, r6
 8007e1e:	f7ff fb6f 	bl	8007500 <_free_r>
 8007e22:	2300      	movs	r3, #0
 8007e24:	6363      	str	r3, [r4, #52]	; 0x34
 8007e26:	89a3      	ldrh	r3, [r4, #12]
 8007e28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007e2c:	81a3      	strh	r3, [r4, #12]
 8007e2e:	2300      	movs	r3, #0
 8007e30:	6063      	str	r3, [r4, #4]
 8007e32:	6923      	ldr	r3, [r4, #16]
 8007e34:	6023      	str	r3, [r4, #0]
 8007e36:	89a3      	ldrh	r3, [r4, #12]
 8007e38:	f043 0308 	orr.w	r3, r3, #8
 8007e3c:	81a3      	strh	r3, [r4, #12]
 8007e3e:	6923      	ldr	r3, [r4, #16]
 8007e40:	b94b      	cbnz	r3, 8007e56 <__swsetup_r+0x9a>
 8007e42:	89a3      	ldrh	r3, [r4, #12]
 8007e44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007e48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e4c:	d003      	beq.n	8007e56 <__swsetup_r+0x9a>
 8007e4e:	4621      	mov	r1, r4
 8007e50:	4630      	mov	r0, r6
 8007e52:	f000 fa07 	bl	8008264 <__smakebuf_r>
 8007e56:	89a0      	ldrh	r0, [r4, #12]
 8007e58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e5c:	f010 0301 	ands.w	r3, r0, #1
 8007e60:	d00a      	beq.n	8007e78 <__swsetup_r+0xbc>
 8007e62:	2300      	movs	r3, #0
 8007e64:	60a3      	str	r3, [r4, #8]
 8007e66:	6963      	ldr	r3, [r4, #20]
 8007e68:	425b      	negs	r3, r3
 8007e6a:	61a3      	str	r3, [r4, #24]
 8007e6c:	6923      	ldr	r3, [r4, #16]
 8007e6e:	b943      	cbnz	r3, 8007e82 <__swsetup_r+0xc6>
 8007e70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007e74:	d1ba      	bne.n	8007dec <__swsetup_r+0x30>
 8007e76:	bd70      	pop	{r4, r5, r6, pc}
 8007e78:	0781      	lsls	r1, r0, #30
 8007e7a:	bf58      	it	pl
 8007e7c:	6963      	ldrpl	r3, [r4, #20]
 8007e7e:	60a3      	str	r3, [r4, #8]
 8007e80:	e7f4      	b.n	8007e6c <__swsetup_r+0xb0>
 8007e82:	2000      	movs	r0, #0
 8007e84:	e7f7      	b.n	8007e76 <__swsetup_r+0xba>
 8007e86:	bf00      	nop
 8007e88:	20000014 	.word	0x20000014
 8007e8c:	08009ed4 	.word	0x08009ed4
 8007e90:	08009ef4 	.word	0x08009ef4
 8007e94:	08009eb4 	.word	0x08009eb4

08007e98 <abort>:
 8007e98:	b508      	push	{r3, lr}
 8007e9a:	2006      	movs	r0, #6
 8007e9c:	f000 fa52 	bl	8008344 <raise>
 8007ea0:	2001      	movs	r0, #1
 8007ea2:	f7fa feb7 	bl	8002c14 <_exit>
	...

08007ea8 <__sflush_r>:
 8007ea8:	898a      	ldrh	r2, [r1, #12]
 8007eaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007eae:	4605      	mov	r5, r0
 8007eb0:	0710      	lsls	r0, r2, #28
 8007eb2:	460c      	mov	r4, r1
 8007eb4:	d458      	bmi.n	8007f68 <__sflush_r+0xc0>
 8007eb6:	684b      	ldr	r3, [r1, #4]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	dc05      	bgt.n	8007ec8 <__sflush_r+0x20>
 8007ebc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	dc02      	bgt.n	8007ec8 <__sflush_r+0x20>
 8007ec2:	2000      	movs	r0, #0
 8007ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ec8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007eca:	2e00      	cmp	r6, #0
 8007ecc:	d0f9      	beq.n	8007ec2 <__sflush_r+0x1a>
 8007ece:	2300      	movs	r3, #0
 8007ed0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007ed4:	682f      	ldr	r7, [r5, #0]
 8007ed6:	602b      	str	r3, [r5, #0]
 8007ed8:	d032      	beq.n	8007f40 <__sflush_r+0x98>
 8007eda:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007edc:	89a3      	ldrh	r3, [r4, #12]
 8007ede:	075a      	lsls	r2, r3, #29
 8007ee0:	d505      	bpl.n	8007eee <__sflush_r+0x46>
 8007ee2:	6863      	ldr	r3, [r4, #4]
 8007ee4:	1ac0      	subs	r0, r0, r3
 8007ee6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007ee8:	b10b      	cbz	r3, 8007eee <__sflush_r+0x46>
 8007eea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007eec:	1ac0      	subs	r0, r0, r3
 8007eee:	2300      	movs	r3, #0
 8007ef0:	4602      	mov	r2, r0
 8007ef2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ef4:	6a21      	ldr	r1, [r4, #32]
 8007ef6:	4628      	mov	r0, r5
 8007ef8:	47b0      	blx	r6
 8007efa:	1c43      	adds	r3, r0, #1
 8007efc:	89a3      	ldrh	r3, [r4, #12]
 8007efe:	d106      	bne.n	8007f0e <__sflush_r+0x66>
 8007f00:	6829      	ldr	r1, [r5, #0]
 8007f02:	291d      	cmp	r1, #29
 8007f04:	d82c      	bhi.n	8007f60 <__sflush_r+0xb8>
 8007f06:	4a2a      	ldr	r2, [pc, #168]	; (8007fb0 <__sflush_r+0x108>)
 8007f08:	40ca      	lsrs	r2, r1
 8007f0a:	07d6      	lsls	r6, r2, #31
 8007f0c:	d528      	bpl.n	8007f60 <__sflush_r+0xb8>
 8007f0e:	2200      	movs	r2, #0
 8007f10:	6062      	str	r2, [r4, #4]
 8007f12:	04d9      	lsls	r1, r3, #19
 8007f14:	6922      	ldr	r2, [r4, #16]
 8007f16:	6022      	str	r2, [r4, #0]
 8007f18:	d504      	bpl.n	8007f24 <__sflush_r+0x7c>
 8007f1a:	1c42      	adds	r2, r0, #1
 8007f1c:	d101      	bne.n	8007f22 <__sflush_r+0x7a>
 8007f1e:	682b      	ldr	r3, [r5, #0]
 8007f20:	b903      	cbnz	r3, 8007f24 <__sflush_r+0x7c>
 8007f22:	6560      	str	r0, [r4, #84]	; 0x54
 8007f24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f26:	602f      	str	r7, [r5, #0]
 8007f28:	2900      	cmp	r1, #0
 8007f2a:	d0ca      	beq.n	8007ec2 <__sflush_r+0x1a>
 8007f2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f30:	4299      	cmp	r1, r3
 8007f32:	d002      	beq.n	8007f3a <__sflush_r+0x92>
 8007f34:	4628      	mov	r0, r5
 8007f36:	f7ff fae3 	bl	8007500 <_free_r>
 8007f3a:	2000      	movs	r0, #0
 8007f3c:	6360      	str	r0, [r4, #52]	; 0x34
 8007f3e:	e7c1      	b.n	8007ec4 <__sflush_r+0x1c>
 8007f40:	6a21      	ldr	r1, [r4, #32]
 8007f42:	2301      	movs	r3, #1
 8007f44:	4628      	mov	r0, r5
 8007f46:	47b0      	blx	r6
 8007f48:	1c41      	adds	r1, r0, #1
 8007f4a:	d1c7      	bne.n	8007edc <__sflush_r+0x34>
 8007f4c:	682b      	ldr	r3, [r5, #0]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d0c4      	beq.n	8007edc <__sflush_r+0x34>
 8007f52:	2b1d      	cmp	r3, #29
 8007f54:	d001      	beq.n	8007f5a <__sflush_r+0xb2>
 8007f56:	2b16      	cmp	r3, #22
 8007f58:	d101      	bne.n	8007f5e <__sflush_r+0xb6>
 8007f5a:	602f      	str	r7, [r5, #0]
 8007f5c:	e7b1      	b.n	8007ec2 <__sflush_r+0x1a>
 8007f5e:	89a3      	ldrh	r3, [r4, #12]
 8007f60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f64:	81a3      	strh	r3, [r4, #12]
 8007f66:	e7ad      	b.n	8007ec4 <__sflush_r+0x1c>
 8007f68:	690f      	ldr	r7, [r1, #16]
 8007f6a:	2f00      	cmp	r7, #0
 8007f6c:	d0a9      	beq.n	8007ec2 <__sflush_r+0x1a>
 8007f6e:	0793      	lsls	r3, r2, #30
 8007f70:	680e      	ldr	r6, [r1, #0]
 8007f72:	bf08      	it	eq
 8007f74:	694b      	ldreq	r3, [r1, #20]
 8007f76:	600f      	str	r7, [r1, #0]
 8007f78:	bf18      	it	ne
 8007f7a:	2300      	movne	r3, #0
 8007f7c:	eba6 0807 	sub.w	r8, r6, r7
 8007f80:	608b      	str	r3, [r1, #8]
 8007f82:	f1b8 0f00 	cmp.w	r8, #0
 8007f86:	dd9c      	ble.n	8007ec2 <__sflush_r+0x1a>
 8007f88:	6a21      	ldr	r1, [r4, #32]
 8007f8a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007f8c:	4643      	mov	r3, r8
 8007f8e:	463a      	mov	r2, r7
 8007f90:	4628      	mov	r0, r5
 8007f92:	47b0      	blx	r6
 8007f94:	2800      	cmp	r0, #0
 8007f96:	dc06      	bgt.n	8007fa6 <__sflush_r+0xfe>
 8007f98:	89a3      	ldrh	r3, [r4, #12]
 8007f9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f9e:	81a3      	strh	r3, [r4, #12]
 8007fa0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007fa4:	e78e      	b.n	8007ec4 <__sflush_r+0x1c>
 8007fa6:	4407      	add	r7, r0
 8007fa8:	eba8 0800 	sub.w	r8, r8, r0
 8007fac:	e7e9      	b.n	8007f82 <__sflush_r+0xda>
 8007fae:	bf00      	nop
 8007fb0:	20400001 	.word	0x20400001

08007fb4 <_fflush_r>:
 8007fb4:	b538      	push	{r3, r4, r5, lr}
 8007fb6:	690b      	ldr	r3, [r1, #16]
 8007fb8:	4605      	mov	r5, r0
 8007fba:	460c      	mov	r4, r1
 8007fbc:	b913      	cbnz	r3, 8007fc4 <_fflush_r+0x10>
 8007fbe:	2500      	movs	r5, #0
 8007fc0:	4628      	mov	r0, r5
 8007fc2:	bd38      	pop	{r3, r4, r5, pc}
 8007fc4:	b118      	cbz	r0, 8007fce <_fflush_r+0x1a>
 8007fc6:	6983      	ldr	r3, [r0, #24]
 8007fc8:	b90b      	cbnz	r3, 8007fce <_fflush_r+0x1a>
 8007fca:	f000 f887 	bl	80080dc <__sinit>
 8007fce:	4b14      	ldr	r3, [pc, #80]	; (8008020 <_fflush_r+0x6c>)
 8007fd0:	429c      	cmp	r4, r3
 8007fd2:	d11b      	bne.n	800800c <_fflush_r+0x58>
 8007fd4:	686c      	ldr	r4, [r5, #4]
 8007fd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d0ef      	beq.n	8007fbe <_fflush_r+0xa>
 8007fde:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007fe0:	07d0      	lsls	r0, r2, #31
 8007fe2:	d404      	bmi.n	8007fee <_fflush_r+0x3a>
 8007fe4:	0599      	lsls	r1, r3, #22
 8007fe6:	d402      	bmi.n	8007fee <_fflush_r+0x3a>
 8007fe8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007fea:	f000 f915 	bl	8008218 <__retarget_lock_acquire_recursive>
 8007fee:	4628      	mov	r0, r5
 8007ff0:	4621      	mov	r1, r4
 8007ff2:	f7ff ff59 	bl	8007ea8 <__sflush_r>
 8007ff6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ff8:	07da      	lsls	r2, r3, #31
 8007ffa:	4605      	mov	r5, r0
 8007ffc:	d4e0      	bmi.n	8007fc0 <_fflush_r+0xc>
 8007ffe:	89a3      	ldrh	r3, [r4, #12]
 8008000:	059b      	lsls	r3, r3, #22
 8008002:	d4dd      	bmi.n	8007fc0 <_fflush_r+0xc>
 8008004:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008006:	f000 f908 	bl	800821a <__retarget_lock_release_recursive>
 800800a:	e7d9      	b.n	8007fc0 <_fflush_r+0xc>
 800800c:	4b05      	ldr	r3, [pc, #20]	; (8008024 <_fflush_r+0x70>)
 800800e:	429c      	cmp	r4, r3
 8008010:	d101      	bne.n	8008016 <_fflush_r+0x62>
 8008012:	68ac      	ldr	r4, [r5, #8]
 8008014:	e7df      	b.n	8007fd6 <_fflush_r+0x22>
 8008016:	4b04      	ldr	r3, [pc, #16]	; (8008028 <_fflush_r+0x74>)
 8008018:	429c      	cmp	r4, r3
 800801a:	bf08      	it	eq
 800801c:	68ec      	ldreq	r4, [r5, #12]
 800801e:	e7da      	b.n	8007fd6 <_fflush_r+0x22>
 8008020:	08009ed4 	.word	0x08009ed4
 8008024:	08009ef4 	.word	0x08009ef4
 8008028:	08009eb4 	.word	0x08009eb4

0800802c <std>:
 800802c:	2300      	movs	r3, #0
 800802e:	b510      	push	{r4, lr}
 8008030:	4604      	mov	r4, r0
 8008032:	e9c0 3300 	strd	r3, r3, [r0]
 8008036:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800803a:	6083      	str	r3, [r0, #8]
 800803c:	8181      	strh	r1, [r0, #12]
 800803e:	6643      	str	r3, [r0, #100]	; 0x64
 8008040:	81c2      	strh	r2, [r0, #14]
 8008042:	6183      	str	r3, [r0, #24]
 8008044:	4619      	mov	r1, r3
 8008046:	2208      	movs	r2, #8
 8008048:	305c      	adds	r0, #92	; 0x5c
 800804a:	f7fd fba7 	bl	800579c <memset>
 800804e:	4b05      	ldr	r3, [pc, #20]	; (8008064 <std+0x38>)
 8008050:	6263      	str	r3, [r4, #36]	; 0x24
 8008052:	4b05      	ldr	r3, [pc, #20]	; (8008068 <std+0x3c>)
 8008054:	62a3      	str	r3, [r4, #40]	; 0x28
 8008056:	4b05      	ldr	r3, [pc, #20]	; (800806c <std+0x40>)
 8008058:	62e3      	str	r3, [r4, #44]	; 0x2c
 800805a:	4b05      	ldr	r3, [pc, #20]	; (8008070 <std+0x44>)
 800805c:	6224      	str	r4, [r4, #32]
 800805e:	6323      	str	r3, [r4, #48]	; 0x30
 8008060:	bd10      	pop	{r4, pc}
 8008062:	bf00      	nop
 8008064:	0800837d 	.word	0x0800837d
 8008068:	0800839f 	.word	0x0800839f
 800806c:	080083d7 	.word	0x080083d7
 8008070:	080083fb 	.word	0x080083fb

08008074 <_cleanup_r>:
 8008074:	4901      	ldr	r1, [pc, #4]	; (800807c <_cleanup_r+0x8>)
 8008076:	f000 b8af 	b.w	80081d8 <_fwalk_reent>
 800807a:	bf00      	nop
 800807c:	08007fb5 	.word	0x08007fb5

08008080 <__sfmoreglue>:
 8008080:	b570      	push	{r4, r5, r6, lr}
 8008082:	1e4a      	subs	r2, r1, #1
 8008084:	2568      	movs	r5, #104	; 0x68
 8008086:	4355      	muls	r5, r2
 8008088:	460e      	mov	r6, r1
 800808a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800808e:	f7ff fa87 	bl	80075a0 <_malloc_r>
 8008092:	4604      	mov	r4, r0
 8008094:	b140      	cbz	r0, 80080a8 <__sfmoreglue+0x28>
 8008096:	2100      	movs	r1, #0
 8008098:	e9c0 1600 	strd	r1, r6, [r0]
 800809c:	300c      	adds	r0, #12
 800809e:	60a0      	str	r0, [r4, #8]
 80080a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80080a4:	f7fd fb7a 	bl	800579c <memset>
 80080a8:	4620      	mov	r0, r4
 80080aa:	bd70      	pop	{r4, r5, r6, pc}

080080ac <__sfp_lock_acquire>:
 80080ac:	4801      	ldr	r0, [pc, #4]	; (80080b4 <__sfp_lock_acquire+0x8>)
 80080ae:	f000 b8b3 	b.w	8008218 <__retarget_lock_acquire_recursive>
 80080b2:	bf00      	nop
 80080b4:	200002d8 	.word	0x200002d8

080080b8 <__sfp_lock_release>:
 80080b8:	4801      	ldr	r0, [pc, #4]	; (80080c0 <__sfp_lock_release+0x8>)
 80080ba:	f000 b8ae 	b.w	800821a <__retarget_lock_release_recursive>
 80080be:	bf00      	nop
 80080c0:	200002d8 	.word	0x200002d8

080080c4 <__sinit_lock_acquire>:
 80080c4:	4801      	ldr	r0, [pc, #4]	; (80080cc <__sinit_lock_acquire+0x8>)
 80080c6:	f000 b8a7 	b.w	8008218 <__retarget_lock_acquire_recursive>
 80080ca:	bf00      	nop
 80080cc:	200002d3 	.word	0x200002d3

080080d0 <__sinit_lock_release>:
 80080d0:	4801      	ldr	r0, [pc, #4]	; (80080d8 <__sinit_lock_release+0x8>)
 80080d2:	f000 b8a2 	b.w	800821a <__retarget_lock_release_recursive>
 80080d6:	bf00      	nop
 80080d8:	200002d3 	.word	0x200002d3

080080dc <__sinit>:
 80080dc:	b510      	push	{r4, lr}
 80080de:	4604      	mov	r4, r0
 80080e0:	f7ff fff0 	bl	80080c4 <__sinit_lock_acquire>
 80080e4:	69a3      	ldr	r3, [r4, #24]
 80080e6:	b11b      	cbz	r3, 80080f0 <__sinit+0x14>
 80080e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080ec:	f7ff bff0 	b.w	80080d0 <__sinit_lock_release>
 80080f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80080f4:	6523      	str	r3, [r4, #80]	; 0x50
 80080f6:	4b13      	ldr	r3, [pc, #76]	; (8008144 <__sinit+0x68>)
 80080f8:	4a13      	ldr	r2, [pc, #76]	; (8008148 <__sinit+0x6c>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80080fe:	42a3      	cmp	r3, r4
 8008100:	bf04      	itt	eq
 8008102:	2301      	moveq	r3, #1
 8008104:	61a3      	streq	r3, [r4, #24]
 8008106:	4620      	mov	r0, r4
 8008108:	f000 f820 	bl	800814c <__sfp>
 800810c:	6060      	str	r0, [r4, #4]
 800810e:	4620      	mov	r0, r4
 8008110:	f000 f81c 	bl	800814c <__sfp>
 8008114:	60a0      	str	r0, [r4, #8]
 8008116:	4620      	mov	r0, r4
 8008118:	f000 f818 	bl	800814c <__sfp>
 800811c:	2200      	movs	r2, #0
 800811e:	60e0      	str	r0, [r4, #12]
 8008120:	2104      	movs	r1, #4
 8008122:	6860      	ldr	r0, [r4, #4]
 8008124:	f7ff ff82 	bl	800802c <std>
 8008128:	68a0      	ldr	r0, [r4, #8]
 800812a:	2201      	movs	r2, #1
 800812c:	2109      	movs	r1, #9
 800812e:	f7ff ff7d 	bl	800802c <std>
 8008132:	68e0      	ldr	r0, [r4, #12]
 8008134:	2202      	movs	r2, #2
 8008136:	2112      	movs	r1, #18
 8008138:	f7ff ff78 	bl	800802c <std>
 800813c:	2301      	movs	r3, #1
 800813e:	61a3      	str	r3, [r4, #24]
 8008140:	e7d2      	b.n	80080e8 <__sinit+0xc>
 8008142:	bf00      	nop
 8008144:	08009b34 	.word	0x08009b34
 8008148:	08008075 	.word	0x08008075

0800814c <__sfp>:
 800814c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800814e:	4607      	mov	r7, r0
 8008150:	f7ff ffac 	bl	80080ac <__sfp_lock_acquire>
 8008154:	4b1e      	ldr	r3, [pc, #120]	; (80081d0 <__sfp+0x84>)
 8008156:	681e      	ldr	r6, [r3, #0]
 8008158:	69b3      	ldr	r3, [r6, #24]
 800815a:	b913      	cbnz	r3, 8008162 <__sfp+0x16>
 800815c:	4630      	mov	r0, r6
 800815e:	f7ff ffbd 	bl	80080dc <__sinit>
 8008162:	3648      	adds	r6, #72	; 0x48
 8008164:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008168:	3b01      	subs	r3, #1
 800816a:	d503      	bpl.n	8008174 <__sfp+0x28>
 800816c:	6833      	ldr	r3, [r6, #0]
 800816e:	b30b      	cbz	r3, 80081b4 <__sfp+0x68>
 8008170:	6836      	ldr	r6, [r6, #0]
 8008172:	e7f7      	b.n	8008164 <__sfp+0x18>
 8008174:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008178:	b9d5      	cbnz	r5, 80081b0 <__sfp+0x64>
 800817a:	4b16      	ldr	r3, [pc, #88]	; (80081d4 <__sfp+0x88>)
 800817c:	60e3      	str	r3, [r4, #12]
 800817e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008182:	6665      	str	r5, [r4, #100]	; 0x64
 8008184:	f000 f847 	bl	8008216 <__retarget_lock_init_recursive>
 8008188:	f7ff ff96 	bl	80080b8 <__sfp_lock_release>
 800818c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008190:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008194:	6025      	str	r5, [r4, #0]
 8008196:	61a5      	str	r5, [r4, #24]
 8008198:	2208      	movs	r2, #8
 800819a:	4629      	mov	r1, r5
 800819c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80081a0:	f7fd fafc 	bl	800579c <memset>
 80081a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80081a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80081ac:	4620      	mov	r0, r4
 80081ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081b0:	3468      	adds	r4, #104	; 0x68
 80081b2:	e7d9      	b.n	8008168 <__sfp+0x1c>
 80081b4:	2104      	movs	r1, #4
 80081b6:	4638      	mov	r0, r7
 80081b8:	f7ff ff62 	bl	8008080 <__sfmoreglue>
 80081bc:	4604      	mov	r4, r0
 80081be:	6030      	str	r0, [r6, #0]
 80081c0:	2800      	cmp	r0, #0
 80081c2:	d1d5      	bne.n	8008170 <__sfp+0x24>
 80081c4:	f7ff ff78 	bl	80080b8 <__sfp_lock_release>
 80081c8:	230c      	movs	r3, #12
 80081ca:	603b      	str	r3, [r7, #0]
 80081cc:	e7ee      	b.n	80081ac <__sfp+0x60>
 80081ce:	bf00      	nop
 80081d0:	08009b34 	.word	0x08009b34
 80081d4:	ffff0001 	.word	0xffff0001

080081d8 <_fwalk_reent>:
 80081d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081dc:	4606      	mov	r6, r0
 80081de:	4688      	mov	r8, r1
 80081e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80081e4:	2700      	movs	r7, #0
 80081e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80081ea:	f1b9 0901 	subs.w	r9, r9, #1
 80081ee:	d505      	bpl.n	80081fc <_fwalk_reent+0x24>
 80081f0:	6824      	ldr	r4, [r4, #0]
 80081f2:	2c00      	cmp	r4, #0
 80081f4:	d1f7      	bne.n	80081e6 <_fwalk_reent+0xe>
 80081f6:	4638      	mov	r0, r7
 80081f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081fc:	89ab      	ldrh	r3, [r5, #12]
 80081fe:	2b01      	cmp	r3, #1
 8008200:	d907      	bls.n	8008212 <_fwalk_reent+0x3a>
 8008202:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008206:	3301      	adds	r3, #1
 8008208:	d003      	beq.n	8008212 <_fwalk_reent+0x3a>
 800820a:	4629      	mov	r1, r5
 800820c:	4630      	mov	r0, r6
 800820e:	47c0      	blx	r8
 8008210:	4307      	orrs	r7, r0
 8008212:	3568      	adds	r5, #104	; 0x68
 8008214:	e7e9      	b.n	80081ea <_fwalk_reent+0x12>

08008216 <__retarget_lock_init_recursive>:
 8008216:	4770      	bx	lr

08008218 <__retarget_lock_acquire_recursive>:
 8008218:	4770      	bx	lr

0800821a <__retarget_lock_release_recursive>:
 800821a:	4770      	bx	lr

0800821c <__swhatbuf_r>:
 800821c:	b570      	push	{r4, r5, r6, lr}
 800821e:	460e      	mov	r6, r1
 8008220:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008224:	2900      	cmp	r1, #0
 8008226:	b096      	sub	sp, #88	; 0x58
 8008228:	4614      	mov	r4, r2
 800822a:	461d      	mov	r5, r3
 800822c:	da07      	bge.n	800823e <__swhatbuf_r+0x22>
 800822e:	2300      	movs	r3, #0
 8008230:	602b      	str	r3, [r5, #0]
 8008232:	89b3      	ldrh	r3, [r6, #12]
 8008234:	061a      	lsls	r2, r3, #24
 8008236:	d410      	bmi.n	800825a <__swhatbuf_r+0x3e>
 8008238:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800823c:	e00e      	b.n	800825c <__swhatbuf_r+0x40>
 800823e:	466a      	mov	r2, sp
 8008240:	f000 f902 	bl	8008448 <_fstat_r>
 8008244:	2800      	cmp	r0, #0
 8008246:	dbf2      	blt.n	800822e <__swhatbuf_r+0x12>
 8008248:	9a01      	ldr	r2, [sp, #4]
 800824a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800824e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008252:	425a      	negs	r2, r3
 8008254:	415a      	adcs	r2, r3
 8008256:	602a      	str	r2, [r5, #0]
 8008258:	e7ee      	b.n	8008238 <__swhatbuf_r+0x1c>
 800825a:	2340      	movs	r3, #64	; 0x40
 800825c:	2000      	movs	r0, #0
 800825e:	6023      	str	r3, [r4, #0]
 8008260:	b016      	add	sp, #88	; 0x58
 8008262:	bd70      	pop	{r4, r5, r6, pc}

08008264 <__smakebuf_r>:
 8008264:	898b      	ldrh	r3, [r1, #12]
 8008266:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008268:	079d      	lsls	r5, r3, #30
 800826a:	4606      	mov	r6, r0
 800826c:	460c      	mov	r4, r1
 800826e:	d507      	bpl.n	8008280 <__smakebuf_r+0x1c>
 8008270:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008274:	6023      	str	r3, [r4, #0]
 8008276:	6123      	str	r3, [r4, #16]
 8008278:	2301      	movs	r3, #1
 800827a:	6163      	str	r3, [r4, #20]
 800827c:	b002      	add	sp, #8
 800827e:	bd70      	pop	{r4, r5, r6, pc}
 8008280:	ab01      	add	r3, sp, #4
 8008282:	466a      	mov	r2, sp
 8008284:	f7ff ffca 	bl	800821c <__swhatbuf_r>
 8008288:	9900      	ldr	r1, [sp, #0]
 800828a:	4605      	mov	r5, r0
 800828c:	4630      	mov	r0, r6
 800828e:	f7ff f987 	bl	80075a0 <_malloc_r>
 8008292:	b948      	cbnz	r0, 80082a8 <__smakebuf_r+0x44>
 8008294:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008298:	059a      	lsls	r2, r3, #22
 800829a:	d4ef      	bmi.n	800827c <__smakebuf_r+0x18>
 800829c:	f023 0303 	bic.w	r3, r3, #3
 80082a0:	f043 0302 	orr.w	r3, r3, #2
 80082a4:	81a3      	strh	r3, [r4, #12]
 80082a6:	e7e3      	b.n	8008270 <__smakebuf_r+0xc>
 80082a8:	4b0d      	ldr	r3, [pc, #52]	; (80082e0 <__smakebuf_r+0x7c>)
 80082aa:	62b3      	str	r3, [r6, #40]	; 0x28
 80082ac:	89a3      	ldrh	r3, [r4, #12]
 80082ae:	6020      	str	r0, [r4, #0]
 80082b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082b4:	81a3      	strh	r3, [r4, #12]
 80082b6:	9b00      	ldr	r3, [sp, #0]
 80082b8:	6163      	str	r3, [r4, #20]
 80082ba:	9b01      	ldr	r3, [sp, #4]
 80082bc:	6120      	str	r0, [r4, #16]
 80082be:	b15b      	cbz	r3, 80082d8 <__smakebuf_r+0x74>
 80082c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082c4:	4630      	mov	r0, r6
 80082c6:	f000 f8d1 	bl	800846c <_isatty_r>
 80082ca:	b128      	cbz	r0, 80082d8 <__smakebuf_r+0x74>
 80082cc:	89a3      	ldrh	r3, [r4, #12]
 80082ce:	f023 0303 	bic.w	r3, r3, #3
 80082d2:	f043 0301 	orr.w	r3, r3, #1
 80082d6:	81a3      	strh	r3, [r4, #12]
 80082d8:	89a0      	ldrh	r0, [r4, #12]
 80082da:	4305      	orrs	r5, r0
 80082dc:	81a5      	strh	r5, [r4, #12]
 80082de:	e7cd      	b.n	800827c <__smakebuf_r+0x18>
 80082e0:	08008075 	.word	0x08008075

080082e4 <_malloc_usable_size_r>:
 80082e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082e8:	1f18      	subs	r0, r3, #4
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	bfbc      	itt	lt
 80082ee:	580b      	ldrlt	r3, [r1, r0]
 80082f0:	18c0      	addlt	r0, r0, r3
 80082f2:	4770      	bx	lr

080082f4 <_raise_r>:
 80082f4:	291f      	cmp	r1, #31
 80082f6:	b538      	push	{r3, r4, r5, lr}
 80082f8:	4604      	mov	r4, r0
 80082fa:	460d      	mov	r5, r1
 80082fc:	d904      	bls.n	8008308 <_raise_r+0x14>
 80082fe:	2316      	movs	r3, #22
 8008300:	6003      	str	r3, [r0, #0]
 8008302:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008306:	bd38      	pop	{r3, r4, r5, pc}
 8008308:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800830a:	b112      	cbz	r2, 8008312 <_raise_r+0x1e>
 800830c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008310:	b94b      	cbnz	r3, 8008326 <_raise_r+0x32>
 8008312:	4620      	mov	r0, r4
 8008314:	f000 f830 	bl	8008378 <_getpid_r>
 8008318:	462a      	mov	r2, r5
 800831a:	4601      	mov	r1, r0
 800831c:	4620      	mov	r0, r4
 800831e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008322:	f000 b817 	b.w	8008354 <_kill_r>
 8008326:	2b01      	cmp	r3, #1
 8008328:	d00a      	beq.n	8008340 <_raise_r+0x4c>
 800832a:	1c59      	adds	r1, r3, #1
 800832c:	d103      	bne.n	8008336 <_raise_r+0x42>
 800832e:	2316      	movs	r3, #22
 8008330:	6003      	str	r3, [r0, #0]
 8008332:	2001      	movs	r0, #1
 8008334:	e7e7      	b.n	8008306 <_raise_r+0x12>
 8008336:	2400      	movs	r4, #0
 8008338:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800833c:	4628      	mov	r0, r5
 800833e:	4798      	blx	r3
 8008340:	2000      	movs	r0, #0
 8008342:	e7e0      	b.n	8008306 <_raise_r+0x12>

08008344 <raise>:
 8008344:	4b02      	ldr	r3, [pc, #8]	; (8008350 <raise+0xc>)
 8008346:	4601      	mov	r1, r0
 8008348:	6818      	ldr	r0, [r3, #0]
 800834a:	f7ff bfd3 	b.w	80082f4 <_raise_r>
 800834e:	bf00      	nop
 8008350:	20000014 	.word	0x20000014

08008354 <_kill_r>:
 8008354:	b538      	push	{r3, r4, r5, lr}
 8008356:	4d07      	ldr	r5, [pc, #28]	; (8008374 <_kill_r+0x20>)
 8008358:	2300      	movs	r3, #0
 800835a:	4604      	mov	r4, r0
 800835c:	4608      	mov	r0, r1
 800835e:	4611      	mov	r1, r2
 8008360:	602b      	str	r3, [r5, #0]
 8008362:	f7fa fc47 	bl	8002bf4 <_kill>
 8008366:	1c43      	adds	r3, r0, #1
 8008368:	d102      	bne.n	8008370 <_kill_r+0x1c>
 800836a:	682b      	ldr	r3, [r5, #0]
 800836c:	b103      	cbz	r3, 8008370 <_kill_r+0x1c>
 800836e:	6023      	str	r3, [r4, #0]
 8008370:	bd38      	pop	{r3, r4, r5, pc}
 8008372:	bf00      	nop
 8008374:	200002cc 	.word	0x200002cc

08008378 <_getpid_r>:
 8008378:	f7fa bc34 	b.w	8002be4 <_getpid>

0800837c <__sread>:
 800837c:	b510      	push	{r4, lr}
 800837e:	460c      	mov	r4, r1
 8008380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008384:	f000 f894 	bl	80084b0 <_read_r>
 8008388:	2800      	cmp	r0, #0
 800838a:	bfab      	itete	ge
 800838c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800838e:	89a3      	ldrhlt	r3, [r4, #12]
 8008390:	181b      	addge	r3, r3, r0
 8008392:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008396:	bfac      	ite	ge
 8008398:	6563      	strge	r3, [r4, #84]	; 0x54
 800839a:	81a3      	strhlt	r3, [r4, #12]
 800839c:	bd10      	pop	{r4, pc}

0800839e <__swrite>:
 800839e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083a2:	461f      	mov	r7, r3
 80083a4:	898b      	ldrh	r3, [r1, #12]
 80083a6:	05db      	lsls	r3, r3, #23
 80083a8:	4605      	mov	r5, r0
 80083aa:	460c      	mov	r4, r1
 80083ac:	4616      	mov	r6, r2
 80083ae:	d505      	bpl.n	80083bc <__swrite+0x1e>
 80083b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083b4:	2302      	movs	r3, #2
 80083b6:	2200      	movs	r2, #0
 80083b8:	f000 f868 	bl	800848c <_lseek_r>
 80083bc:	89a3      	ldrh	r3, [r4, #12]
 80083be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80083c6:	81a3      	strh	r3, [r4, #12]
 80083c8:	4632      	mov	r2, r6
 80083ca:	463b      	mov	r3, r7
 80083cc:	4628      	mov	r0, r5
 80083ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083d2:	f000 b817 	b.w	8008404 <_write_r>

080083d6 <__sseek>:
 80083d6:	b510      	push	{r4, lr}
 80083d8:	460c      	mov	r4, r1
 80083da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083de:	f000 f855 	bl	800848c <_lseek_r>
 80083e2:	1c43      	adds	r3, r0, #1
 80083e4:	89a3      	ldrh	r3, [r4, #12]
 80083e6:	bf15      	itete	ne
 80083e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80083ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80083ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80083f2:	81a3      	strheq	r3, [r4, #12]
 80083f4:	bf18      	it	ne
 80083f6:	81a3      	strhne	r3, [r4, #12]
 80083f8:	bd10      	pop	{r4, pc}

080083fa <__sclose>:
 80083fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083fe:	f000 b813 	b.w	8008428 <_close_r>
	...

08008404 <_write_r>:
 8008404:	b538      	push	{r3, r4, r5, lr}
 8008406:	4d07      	ldr	r5, [pc, #28]	; (8008424 <_write_r+0x20>)
 8008408:	4604      	mov	r4, r0
 800840a:	4608      	mov	r0, r1
 800840c:	4611      	mov	r1, r2
 800840e:	2200      	movs	r2, #0
 8008410:	602a      	str	r2, [r5, #0]
 8008412:	461a      	mov	r2, r3
 8008414:	f7fa fc25 	bl	8002c62 <_write>
 8008418:	1c43      	adds	r3, r0, #1
 800841a:	d102      	bne.n	8008422 <_write_r+0x1e>
 800841c:	682b      	ldr	r3, [r5, #0]
 800841e:	b103      	cbz	r3, 8008422 <_write_r+0x1e>
 8008420:	6023      	str	r3, [r4, #0]
 8008422:	bd38      	pop	{r3, r4, r5, pc}
 8008424:	200002cc 	.word	0x200002cc

08008428 <_close_r>:
 8008428:	b538      	push	{r3, r4, r5, lr}
 800842a:	4d06      	ldr	r5, [pc, #24]	; (8008444 <_close_r+0x1c>)
 800842c:	2300      	movs	r3, #0
 800842e:	4604      	mov	r4, r0
 8008430:	4608      	mov	r0, r1
 8008432:	602b      	str	r3, [r5, #0]
 8008434:	f7fa fc31 	bl	8002c9a <_close>
 8008438:	1c43      	adds	r3, r0, #1
 800843a:	d102      	bne.n	8008442 <_close_r+0x1a>
 800843c:	682b      	ldr	r3, [r5, #0]
 800843e:	b103      	cbz	r3, 8008442 <_close_r+0x1a>
 8008440:	6023      	str	r3, [r4, #0]
 8008442:	bd38      	pop	{r3, r4, r5, pc}
 8008444:	200002cc 	.word	0x200002cc

08008448 <_fstat_r>:
 8008448:	b538      	push	{r3, r4, r5, lr}
 800844a:	4d07      	ldr	r5, [pc, #28]	; (8008468 <_fstat_r+0x20>)
 800844c:	2300      	movs	r3, #0
 800844e:	4604      	mov	r4, r0
 8008450:	4608      	mov	r0, r1
 8008452:	4611      	mov	r1, r2
 8008454:	602b      	str	r3, [r5, #0]
 8008456:	f7fa fc2c 	bl	8002cb2 <_fstat>
 800845a:	1c43      	adds	r3, r0, #1
 800845c:	d102      	bne.n	8008464 <_fstat_r+0x1c>
 800845e:	682b      	ldr	r3, [r5, #0]
 8008460:	b103      	cbz	r3, 8008464 <_fstat_r+0x1c>
 8008462:	6023      	str	r3, [r4, #0]
 8008464:	bd38      	pop	{r3, r4, r5, pc}
 8008466:	bf00      	nop
 8008468:	200002cc 	.word	0x200002cc

0800846c <_isatty_r>:
 800846c:	b538      	push	{r3, r4, r5, lr}
 800846e:	4d06      	ldr	r5, [pc, #24]	; (8008488 <_isatty_r+0x1c>)
 8008470:	2300      	movs	r3, #0
 8008472:	4604      	mov	r4, r0
 8008474:	4608      	mov	r0, r1
 8008476:	602b      	str	r3, [r5, #0]
 8008478:	f7fa fc2b 	bl	8002cd2 <_isatty>
 800847c:	1c43      	adds	r3, r0, #1
 800847e:	d102      	bne.n	8008486 <_isatty_r+0x1a>
 8008480:	682b      	ldr	r3, [r5, #0]
 8008482:	b103      	cbz	r3, 8008486 <_isatty_r+0x1a>
 8008484:	6023      	str	r3, [r4, #0]
 8008486:	bd38      	pop	{r3, r4, r5, pc}
 8008488:	200002cc 	.word	0x200002cc

0800848c <_lseek_r>:
 800848c:	b538      	push	{r3, r4, r5, lr}
 800848e:	4d07      	ldr	r5, [pc, #28]	; (80084ac <_lseek_r+0x20>)
 8008490:	4604      	mov	r4, r0
 8008492:	4608      	mov	r0, r1
 8008494:	4611      	mov	r1, r2
 8008496:	2200      	movs	r2, #0
 8008498:	602a      	str	r2, [r5, #0]
 800849a:	461a      	mov	r2, r3
 800849c:	f7fa fc24 	bl	8002ce8 <_lseek>
 80084a0:	1c43      	adds	r3, r0, #1
 80084a2:	d102      	bne.n	80084aa <_lseek_r+0x1e>
 80084a4:	682b      	ldr	r3, [r5, #0]
 80084a6:	b103      	cbz	r3, 80084aa <_lseek_r+0x1e>
 80084a8:	6023      	str	r3, [r4, #0]
 80084aa:	bd38      	pop	{r3, r4, r5, pc}
 80084ac:	200002cc 	.word	0x200002cc

080084b0 <_read_r>:
 80084b0:	b538      	push	{r3, r4, r5, lr}
 80084b2:	4d07      	ldr	r5, [pc, #28]	; (80084d0 <_read_r+0x20>)
 80084b4:	4604      	mov	r4, r0
 80084b6:	4608      	mov	r0, r1
 80084b8:	4611      	mov	r1, r2
 80084ba:	2200      	movs	r2, #0
 80084bc:	602a      	str	r2, [r5, #0]
 80084be:	461a      	mov	r2, r3
 80084c0:	f7fa fbb2 	bl	8002c28 <_read>
 80084c4:	1c43      	adds	r3, r0, #1
 80084c6:	d102      	bne.n	80084ce <_read_r+0x1e>
 80084c8:	682b      	ldr	r3, [r5, #0]
 80084ca:	b103      	cbz	r3, 80084ce <_read_r+0x1e>
 80084cc:	6023      	str	r3, [r4, #0]
 80084ce:	bd38      	pop	{r3, r4, r5, pc}
 80084d0:	200002cc 	.word	0x200002cc
 80084d4:	00000000 	.word	0x00000000

080084d8 <cos>:
 80084d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80084da:	ec53 2b10 	vmov	r2, r3, d0
 80084de:	4824      	ldr	r0, [pc, #144]	; (8008570 <cos+0x98>)
 80084e0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80084e4:	4281      	cmp	r1, r0
 80084e6:	dc06      	bgt.n	80084f6 <cos+0x1e>
 80084e8:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8008568 <cos+0x90>
 80084ec:	f000 fb48 	bl	8008b80 <__kernel_cos>
 80084f0:	ec51 0b10 	vmov	r0, r1, d0
 80084f4:	e007      	b.n	8008506 <cos+0x2e>
 80084f6:	481f      	ldr	r0, [pc, #124]	; (8008574 <cos+0x9c>)
 80084f8:	4281      	cmp	r1, r0
 80084fa:	dd09      	ble.n	8008510 <cos+0x38>
 80084fc:	ee10 0a10 	vmov	r0, s0
 8008500:	4619      	mov	r1, r3
 8008502:	f7f7 fee1 	bl	80002c8 <__aeabi_dsub>
 8008506:	ec41 0b10 	vmov	d0, r0, r1
 800850a:	b005      	add	sp, #20
 800850c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008510:	4668      	mov	r0, sp
 8008512:	f000 f889 	bl	8008628 <__ieee754_rem_pio2>
 8008516:	f000 0003 	and.w	r0, r0, #3
 800851a:	2801      	cmp	r0, #1
 800851c:	d007      	beq.n	800852e <cos+0x56>
 800851e:	2802      	cmp	r0, #2
 8008520:	d012      	beq.n	8008548 <cos+0x70>
 8008522:	b9c0      	cbnz	r0, 8008556 <cos+0x7e>
 8008524:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008528:	ed9d 0b00 	vldr	d0, [sp]
 800852c:	e7de      	b.n	80084ec <cos+0x14>
 800852e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008532:	ed9d 0b00 	vldr	d0, [sp]
 8008536:	f000 ff2b 	bl	8009390 <__kernel_sin>
 800853a:	ec53 2b10 	vmov	r2, r3, d0
 800853e:	ee10 0a10 	vmov	r0, s0
 8008542:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008546:	e7de      	b.n	8008506 <cos+0x2e>
 8008548:	ed9d 1b02 	vldr	d1, [sp, #8]
 800854c:	ed9d 0b00 	vldr	d0, [sp]
 8008550:	f000 fb16 	bl	8008b80 <__kernel_cos>
 8008554:	e7f1      	b.n	800853a <cos+0x62>
 8008556:	ed9d 1b02 	vldr	d1, [sp, #8]
 800855a:	ed9d 0b00 	vldr	d0, [sp]
 800855e:	2001      	movs	r0, #1
 8008560:	f000 ff16 	bl	8009390 <__kernel_sin>
 8008564:	e7c4      	b.n	80084f0 <cos+0x18>
 8008566:	bf00      	nop
	...
 8008570:	3fe921fb 	.word	0x3fe921fb
 8008574:	7fefffff 	.word	0x7fefffff

08008578 <sin>:
 8008578:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800857a:	ec53 2b10 	vmov	r2, r3, d0
 800857e:	4826      	ldr	r0, [pc, #152]	; (8008618 <sin+0xa0>)
 8008580:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008584:	4281      	cmp	r1, r0
 8008586:	dc07      	bgt.n	8008598 <sin+0x20>
 8008588:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8008610 <sin+0x98>
 800858c:	2000      	movs	r0, #0
 800858e:	f000 feff 	bl	8009390 <__kernel_sin>
 8008592:	ec51 0b10 	vmov	r0, r1, d0
 8008596:	e007      	b.n	80085a8 <sin+0x30>
 8008598:	4820      	ldr	r0, [pc, #128]	; (800861c <sin+0xa4>)
 800859a:	4281      	cmp	r1, r0
 800859c:	dd09      	ble.n	80085b2 <sin+0x3a>
 800859e:	ee10 0a10 	vmov	r0, s0
 80085a2:	4619      	mov	r1, r3
 80085a4:	f7f7 fe90 	bl	80002c8 <__aeabi_dsub>
 80085a8:	ec41 0b10 	vmov	d0, r0, r1
 80085ac:	b005      	add	sp, #20
 80085ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80085b2:	4668      	mov	r0, sp
 80085b4:	f000 f838 	bl	8008628 <__ieee754_rem_pio2>
 80085b8:	f000 0003 	and.w	r0, r0, #3
 80085bc:	2801      	cmp	r0, #1
 80085be:	d008      	beq.n	80085d2 <sin+0x5a>
 80085c0:	2802      	cmp	r0, #2
 80085c2:	d00d      	beq.n	80085e0 <sin+0x68>
 80085c4:	b9d0      	cbnz	r0, 80085fc <sin+0x84>
 80085c6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80085ca:	ed9d 0b00 	vldr	d0, [sp]
 80085ce:	2001      	movs	r0, #1
 80085d0:	e7dd      	b.n	800858e <sin+0x16>
 80085d2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80085d6:	ed9d 0b00 	vldr	d0, [sp]
 80085da:	f000 fad1 	bl	8008b80 <__kernel_cos>
 80085de:	e7d8      	b.n	8008592 <sin+0x1a>
 80085e0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80085e4:	ed9d 0b00 	vldr	d0, [sp]
 80085e8:	2001      	movs	r0, #1
 80085ea:	f000 fed1 	bl	8009390 <__kernel_sin>
 80085ee:	ec53 2b10 	vmov	r2, r3, d0
 80085f2:	ee10 0a10 	vmov	r0, s0
 80085f6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80085fa:	e7d5      	b.n	80085a8 <sin+0x30>
 80085fc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008600:	ed9d 0b00 	vldr	d0, [sp]
 8008604:	f000 fabc 	bl	8008b80 <__kernel_cos>
 8008608:	e7f1      	b.n	80085ee <sin+0x76>
 800860a:	bf00      	nop
 800860c:	f3af 8000 	nop.w
	...
 8008618:	3fe921fb 	.word	0x3fe921fb
 800861c:	7fefffff 	.word	0x7fefffff

08008620 <atan2f>:
 8008620:	f000 ba0c 	b.w	8008a3c <__ieee754_atan2f>
 8008624:	0000      	movs	r0, r0
	...

08008628 <__ieee754_rem_pio2>:
 8008628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800862c:	ed2d 8b02 	vpush	{d8}
 8008630:	ec55 4b10 	vmov	r4, r5, d0
 8008634:	4bca      	ldr	r3, [pc, #808]	; (8008960 <__ieee754_rem_pio2+0x338>)
 8008636:	b08b      	sub	sp, #44	; 0x2c
 8008638:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800863c:	4598      	cmp	r8, r3
 800863e:	4682      	mov	sl, r0
 8008640:	9502      	str	r5, [sp, #8]
 8008642:	dc08      	bgt.n	8008656 <__ieee754_rem_pio2+0x2e>
 8008644:	2200      	movs	r2, #0
 8008646:	2300      	movs	r3, #0
 8008648:	ed80 0b00 	vstr	d0, [r0]
 800864c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008650:	f04f 0b00 	mov.w	fp, #0
 8008654:	e028      	b.n	80086a8 <__ieee754_rem_pio2+0x80>
 8008656:	4bc3      	ldr	r3, [pc, #780]	; (8008964 <__ieee754_rem_pio2+0x33c>)
 8008658:	4598      	cmp	r8, r3
 800865a:	dc78      	bgt.n	800874e <__ieee754_rem_pio2+0x126>
 800865c:	9b02      	ldr	r3, [sp, #8]
 800865e:	4ec2      	ldr	r6, [pc, #776]	; (8008968 <__ieee754_rem_pio2+0x340>)
 8008660:	2b00      	cmp	r3, #0
 8008662:	ee10 0a10 	vmov	r0, s0
 8008666:	a3b0      	add	r3, pc, #704	; (adr r3, 8008928 <__ieee754_rem_pio2+0x300>)
 8008668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800866c:	4629      	mov	r1, r5
 800866e:	dd39      	ble.n	80086e4 <__ieee754_rem_pio2+0xbc>
 8008670:	f7f7 fe2a 	bl	80002c8 <__aeabi_dsub>
 8008674:	45b0      	cmp	r8, r6
 8008676:	4604      	mov	r4, r0
 8008678:	460d      	mov	r5, r1
 800867a:	d01b      	beq.n	80086b4 <__ieee754_rem_pio2+0x8c>
 800867c:	a3ac      	add	r3, pc, #688	; (adr r3, 8008930 <__ieee754_rem_pio2+0x308>)
 800867e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008682:	f7f7 fe21 	bl	80002c8 <__aeabi_dsub>
 8008686:	4602      	mov	r2, r0
 8008688:	460b      	mov	r3, r1
 800868a:	e9ca 2300 	strd	r2, r3, [sl]
 800868e:	4620      	mov	r0, r4
 8008690:	4629      	mov	r1, r5
 8008692:	f7f7 fe19 	bl	80002c8 <__aeabi_dsub>
 8008696:	a3a6      	add	r3, pc, #664	; (adr r3, 8008930 <__ieee754_rem_pio2+0x308>)
 8008698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800869c:	f7f7 fe14 	bl	80002c8 <__aeabi_dsub>
 80086a0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80086a4:	f04f 0b01 	mov.w	fp, #1
 80086a8:	4658      	mov	r0, fp
 80086aa:	b00b      	add	sp, #44	; 0x2c
 80086ac:	ecbd 8b02 	vpop	{d8}
 80086b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086b4:	a3a0      	add	r3, pc, #640	; (adr r3, 8008938 <__ieee754_rem_pio2+0x310>)
 80086b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ba:	f7f7 fe05 	bl	80002c8 <__aeabi_dsub>
 80086be:	a3a0      	add	r3, pc, #640	; (adr r3, 8008940 <__ieee754_rem_pio2+0x318>)
 80086c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086c4:	4604      	mov	r4, r0
 80086c6:	460d      	mov	r5, r1
 80086c8:	f7f7 fdfe 	bl	80002c8 <__aeabi_dsub>
 80086cc:	4602      	mov	r2, r0
 80086ce:	460b      	mov	r3, r1
 80086d0:	e9ca 2300 	strd	r2, r3, [sl]
 80086d4:	4620      	mov	r0, r4
 80086d6:	4629      	mov	r1, r5
 80086d8:	f7f7 fdf6 	bl	80002c8 <__aeabi_dsub>
 80086dc:	a398      	add	r3, pc, #608	; (adr r3, 8008940 <__ieee754_rem_pio2+0x318>)
 80086de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e2:	e7db      	b.n	800869c <__ieee754_rem_pio2+0x74>
 80086e4:	f7f7 fdf2 	bl	80002cc <__adddf3>
 80086e8:	45b0      	cmp	r8, r6
 80086ea:	4604      	mov	r4, r0
 80086ec:	460d      	mov	r5, r1
 80086ee:	d016      	beq.n	800871e <__ieee754_rem_pio2+0xf6>
 80086f0:	a38f      	add	r3, pc, #572	; (adr r3, 8008930 <__ieee754_rem_pio2+0x308>)
 80086f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f6:	f7f7 fde9 	bl	80002cc <__adddf3>
 80086fa:	4602      	mov	r2, r0
 80086fc:	460b      	mov	r3, r1
 80086fe:	e9ca 2300 	strd	r2, r3, [sl]
 8008702:	4620      	mov	r0, r4
 8008704:	4629      	mov	r1, r5
 8008706:	f7f7 fddf 	bl	80002c8 <__aeabi_dsub>
 800870a:	a389      	add	r3, pc, #548	; (adr r3, 8008930 <__ieee754_rem_pio2+0x308>)
 800870c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008710:	f7f7 fddc 	bl	80002cc <__adddf3>
 8008714:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8008718:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800871c:	e7c4      	b.n	80086a8 <__ieee754_rem_pio2+0x80>
 800871e:	a386      	add	r3, pc, #536	; (adr r3, 8008938 <__ieee754_rem_pio2+0x310>)
 8008720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008724:	f7f7 fdd2 	bl	80002cc <__adddf3>
 8008728:	a385      	add	r3, pc, #532	; (adr r3, 8008940 <__ieee754_rem_pio2+0x318>)
 800872a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800872e:	4604      	mov	r4, r0
 8008730:	460d      	mov	r5, r1
 8008732:	f7f7 fdcb 	bl	80002cc <__adddf3>
 8008736:	4602      	mov	r2, r0
 8008738:	460b      	mov	r3, r1
 800873a:	e9ca 2300 	strd	r2, r3, [sl]
 800873e:	4620      	mov	r0, r4
 8008740:	4629      	mov	r1, r5
 8008742:	f7f7 fdc1 	bl	80002c8 <__aeabi_dsub>
 8008746:	a37e      	add	r3, pc, #504	; (adr r3, 8008940 <__ieee754_rem_pio2+0x318>)
 8008748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800874c:	e7e0      	b.n	8008710 <__ieee754_rem_pio2+0xe8>
 800874e:	4b87      	ldr	r3, [pc, #540]	; (800896c <__ieee754_rem_pio2+0x344>)
 8008750:	4598      	cmp	r8, r3
 8008752:	f300 80d9 	bgt.w	8008908 <__ieee754_rem_pio2+0x2e0>
 8008756:	f000 fed9 	bl	800950c <fabs>
 800875a:	ec55 4b10 	vmov	r4, r5, d0
 800875e:	ee10 0a10 	vmov	r0, s0
 8008762:	a379      	add	r3, pc, #484	; (adr r3, 8008948 <__ieee754_rem_pio2+0x320>)
 8008764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008768:	4629      	mov	r1, r5
 800876a:	f7f7 ff65 	bl	8000638 <__aeabi_dmul>
 800876e:	4b80      	ldr	r3, [pc, #512]	; (8008970 <__ieee754_rem_pio2+0x348>)
 8008770:	2200      	movs	r2, #0
 8008772:	f7f7 fdab 	bl	80002cc <__adddf3>
 8008776:	f7f8 fa0f 	bl	8000b98 <__aeabi_d2iz>
 800877a:	4683      	mov	fp, r0
 800877c:	f7f7 fef2 	bl	8000564 <__aeabi_i2d>
 8008780:	4602      	mov	r2, r0
 8008782:	460b      	mov	r3, r1
 8008784:	ec43 2b18 	vmov	d8, r2, r3
 8008788:	a367      	add	r3, pc, #412	; (adr r3, 8008928 <__ieee754_rem_pio2+0x300>)
 800878a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800878e:	f7f7 ff53 	bl	8000638 <__aeabi_dmul>
 8008792:	4602      	mov	r2, r0
 8008794:	460b      	mov	r3, r1
 8008796:	4620      	mov	r0, r4
 8008798:	4629      	mov	r1, r5
 800879a:	f7f7 fd95 	bl	80002c8 <__aeabi_dsub>
 800879e:	a364      	add	r3, pc, #400	; (adr r3, 8008930 <__ieee754_rem_pio2+0x308>)
 80087a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087a4:	4606      	mov	r6, r0
 80087a6:	460f      	mov	r7, r1
 80087a8:	ec51 0b18 	vmov	r0, r1, d8
 80087ac:	f7f7 ff44 	bl	8000638 <__aeabi_dmul>
 80087b0:	f1bb 0f1f 	cmp.w	fp, #31
 80087b4:	4604      	mov	r4, r0
 80087b6:	460d      	mov	r5, r1
 80087b8:	dc0d      	bgt.n	80087d6 <__ieee754_rem_pio2+0x1ae>
 80087ba:	4b6e      	ldr	r3, [pc, #440]	; (8008974 <__ieee754_rem_pio2+0x34c>)
 80087bc:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 80087c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087c4:	4543      	cmp	r3, r8
 80087c6:	d006      	beq.n	80087d6 <__ieee754_rem_pio2+0x1ae>
 80087c8:	4622      	mov	r2, r4
 80087ca:	462b      	mov	r3, r5
 80087cc:	4630      	mov	r0, r6
 80087ce:	4639      	mov	r1, r7
 80087d0:	f7f7 fd7a 	bl	80002c8 <__aeabi_dsub>
 80087d4:	e00f      	b.n	80087f6 <__ieee754_rem_pio2+0x1ce>
 80087d6:	462b      	mov	r3, r5
 80087d8:	4622      	mov	r2, r4
 80087da:	4630      	mov	r0, r6
 80087dc:	4639      	mov	r1, r7
 80087de:	f7f7 fd73 	bl	80002c8 <__aeabi_dsub>
 80087e2:	ea4f 5328 	mov.w	r3, r8, asr #20
 80087e6:	9303      	str	r3, [sp, #12]
 80087e8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80087ec:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80087f0:	f1b8 0f10 	cmp.w	r8, #16
 80087f4:	dc02      	bgt.n	80087fc <__ieee754_rem_pio2+0x1d4>
 80087f6:	e9ca 0100 	strd	r0, r1, [sl]
 80087fa:	e039      	b.n	8008870 <__ieee754_rem_pio2+0x248>
 80087fc:	a34e      	add	r3, pc, #312	; (adr r3, 8008938 <__ieee754_rem_pio2+0x310>)
 80087fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008802:	ec51 0b18 	vmov	r0, r1, d8
 8008806:	f7f7 ff17 	bl	8000638 <__aeabi_dmul>
 800880a:	4604      	mov	r4, r0
 800880c:	460d      	mov	r5, r1
 800880e:	4602      	mov	r2, r0
 8008810:	460b      	mov	r3, r1
 8008812:	4630      	mov	r0, r6
 8008814:	4639      	mov	r1, r7
 8008816:	f7f7 fd57 	bl	80002c8 <__aeabi_dsub>
 800881a:	4602      	mov	r2, r0
 800881c:	460b      	mov	r3, r1
 800881e:	4680      	mov	r8, r0
 8008820:	4689      	mov	r9, r1
 8008822:	4630      	mov	r0, r6
 8008824:	4639      	mov	r1, r7
 8008826:	f7f7 fd4f 	bl	80002c8 <__aeabi_dsub>
 800882a:	4622      	mov	r2, r4
 800882c:	462b      	mov	r3, r5
 800882e:	f7f7 fd4b 	bl	80002c8 <__aeabi_dsub>
 8008832:	a343      	add	r3, pc, #268	; (adr r3, 8008940 <__ieee754_rem_pio2+0x318>)
 8008834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008838:	4604      	mov	r4, r0
 800883a:	460d      	mov	r5, r1
 800883c:	ec51 0b18 	vmov	r0, r1, d8
 8008840:	f7f7 fefa 	bl	8000638 <__aeabi_dmul>
 8008844:	4622      	mov	r2, r4
 8008846:	462b      	mov	r3, r5
 8008848:	f7f7 fd3e 	bl	80002c8 <__aeabi_dsub>
 800884c:	4602      	mov	r2, r0
 800884e:	460b      	mov	r3, r1
 8008850:	4604      	mov	r4, r0
 8008852:	460d      	mov	r5, r1
 8008854:	4640      	mov	r0, r8
 8008856:	4649      	mov	r1, r9
 8008858:	f7f7 fd36 	bl	80002c8 <__aeabi_dsub>
 800885c:	9a03      	ldr	r2, [sp, #12]
 800885e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008862:	1ad3      	subs	r3, r2, r3
 8008864:	2b31      	cmp	r3, #49	; 0x31
 8008866:	dc24      	bgt.n	80088b2 <__ieee754_rem_pio2+0x28a>
 8008868:	e9ca 0100 	strd	r0, r1, [sl]
 800886c:	4646      	mov	r6, r8
 800886e:	464f      	mov	r7, r9
 8008870:	e9da 8900 	ldrd	r8, r9, [sl]
 8008874:	4630      	mov	r0, r6
 8008876:	4642      	mov	r2, r8
 8008878:	464b      	mov	r3, r9
 800887a:	4639      	mov	r1, r7
 800887c:	f7f7 fd24 	bl	80002c8 <__aeabi_dsub>
 8008880:	462b      	mov	r3, r5
 8008882:	4622      	mov	r2, r4
 8008884:	f7f7 fd20 	bl	80002c8 <__aeabi_dsub>
 8008888:	9b02      	ldr	r3, [sp, #8]
 800888a:	2b00      	cmp	r3, #0
 800888c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008890:	f6bf af0a 	bge.w	80086a8 <__ieee754_rem_pio2+0x80>
 8008894:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008898:	f8ca 3004 	str.w	r3, [sl, #4]
 800889c:	f8ca 8000 	str.w	r8, [sl]
 80088a0:	f8ca 0008 	str.w	r0, [sl, #8]
 80088a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80088a8:	f8ca 300c 	str.w	r3, [sl, #12]
 80088ac:	f1cb 0b00 	rsb	fp, fp, #0
 80088b0:	e6fa      	b.n	80086a8 <__ieee754_rem_pio2+0x80>
 80088b2:	a327      	add	r3, pc, #156	; (adr r3, 8008950 <__ieee754_rem_pio2+0x328>)
 80088b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b8:	ec51 0b18 	vmov	r0, r1, d8
 80088bc:	f7f7 febc 	bl	8000638 <__aeabi_dmul>
 80088c0:	4604      	mov	r4, r0
 80088c2:	460d      	mov	r5, r1
 80088c4:	4602      	mov	r2, r0
 80088c6:	460b      	mov	r3, r1
 80088c8:	4640      	mov	r0, r8
 80088ca:	4649      	mov	r1, r9
 80088cc:	f7f7 fcfc 	bl	80002c8 <__aeabi_dsub>
 80088d0:	4602      	mov	r2, r0
 80088d2:	460b      	mov	r3, r1
 80088d4:	4606      	mov	r6, r0
 80088d6:	460f      	mov	r7, r1
 80088d8:	4640      	mov	r0, r8
 80088da:	4649      	mov	r1, r9
 80088dc:	f7f7 fcf4 	bl	80002c8 <__aeabi_dsub>
 80088e0:	4622      	mov	r2, r4
 80088e2:	462b      	mov	r3, r5
 80088e4:	f7f7 fcf0 	bl	80002c8 <__aeabi_dsub>
 80088e8:	a31b      	add	r3, pc, #108	; (adr r3, 8008958 <__ieee754_rem_pio2+0x330>)
 80088ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ee:	4604      	mov	r4, r0
 80088f0:	460d      	mov	r5, r1
 80088f2:	ec51 0b18 	vmov	r0, r1, d8
 80088f6:	f7f7 fe9f 	bl	8000638 <__aeabi_dmul>
 80088fa:	4622      	mov	r2, r4
 80088fc:	462b      	mov	r3, r5
 80088fe:	f7f7 fce3 	bl	80002c8 <__aeabi_dsub>
 8008902:	4604      	mov	r4, r0
 8008904:	460d      	mov	r5, r1
 8008906:	e75f      	b.n	80087c8 <__ieee754_rem_pio2+0x1a0>
 8008908:	4b1b      	ldr	r3, [pc, #108]	; (8008978 <__ieee754_rem_pio2+0x350>)
 800890a:	4598      	cmp	r8, r3
 800890c:	dd36      	ble.n	800897c <__ieee754_rem_pio2+0x354>
 800890e:	ee10 2a10 	vmov	r2, s0
 8008912:	462b      	mov	r3, r5
 8008914:	4620      	mov	r0, r4
 8008916:	4629      	mov	r1, r5
 8008918:	f7f7 fcd6 	bl	80002c8 <__aeabi_dsub>
 800891c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008920:	e9ca 0100 	strd	r0, r1, [sl]
 8008924:	e694      	b.n	8008650 <__ieee754_rem_pio2+0x28>
 8008926:	bf00      	nop
 8008928:	54400000 	.word	0x54400000
 800892c:	3ff921fb 	.word	0x3ff921fb
 8008930:	1a626331 	.word	0x1a626331
 8008934:	3dd0b461 	.word	0x3dd0b461
 8008938:	1a600000 	.word	0x1a600000
 800893c:	3dd0b461 	.word	0x3dd0b461
 8008940:	2e037073 	.word	0x2e037073
 8008944:	3ba3198a 	.word	0x3ba3198a
 8008948:	6dc9c883 	.word	0x6dc9c883
 800894c:	3fe45f30 	.word	0x3fe45f30
 8008950:	2e000000 	.word	0x2e000000
 8008954:	3ba3198a 	.word	0x3ba3198a
 8008958:	252049c1 	.word	0x252049c1
 800895c:	397b839a 	.word	0x397b839a
 8008960:	3fe921fb 	.word	0x3fe921fb
 8008964:	4002d97b 	.word	0x4002d97b
 8008968:	3ff921fb 	.word	0x3ff921fb
 800896c:	413921fb 	.word	0x413921fb
 8008970:	3fe00000 	.word	0x3fe00000
 8008974:	08009f14 	.word	0x08009f14
 8008978:	7fefffff 	.word	0x7fefffff
 800897c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8008980:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8008984:	ee10 0a10 	vmov	r0, s0
 8008988:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800898c:	ee10 6a10 	vmov	r6, s0
 8008990:	460f      	mov	r7, r1
 8008992:	f7f8 f901 	bl	8000b98 <__aeabi_d2iz>
 8008996:	f7f7 fde5 	bl	8000564 <__aeabi_i2d>
 800899a:	4602      	mov	r2, r0
 800899c:	460b      	mov	r3, r1
 800899e:	4630      	mov	r0, r6
 80089a0:	4639      	mov	r1, r7
 80089a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80089a6:	f7f7 fc8f 	bl	80002c8 <__aeabi_dsub>
 80089aa:	4b22      	ldr	r3, [pc, #136]	; (8008a34 <__ieee754_rem_pio2+0x40c>)
 80089ac:	2200      	movs	r2, #0
 80089ae:	f7f7 fe43 	bl	8000638 <__aeabi_dmul>
 80089b2:	460f      	mov	r7, r1
 80089b4:	4606      	mov	r6, r0
 80089b6:	f7f8 f8ef 	bl	8000b98 <__aeabi_d2iz>
 80089ba:	f7f7 fdd3 	bl	8000564 <__aeabi_i2d>
 80089be:	4602      	mov	r2, r0
 80089c0:	460b      	mov	r3, r1
 80089c2:	4630      	mov	r0, r6
 80089c4:	4639      	mov	r1, r7
 80089c6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80089ca:	f7f7 fc7d 	bl	80002c8 <__aeabi_dsub>
 80089ce:	4b19      	ldr	r3, [pc, #100]	; (8008a34 <__ieee754_rem_pio2+0x40c>)
 80089d0:	2200      	movs	r2, #0
 80089d2:	f7f7 fe31 	bl	8000638 <__aeabi_dmul>
 80089d6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80089da:	ad04      	add	r5, sp, #16
 80089dc:	f04f 0803 	mov.w	r8, #3
 80089e0:	46a9      	mov	r9, r5
 80089e2:	2600      	movs	r6, #0
 80089e4:	2700      	movs	r7, #0
 80089e6:	4632      	mov	r2, r6
 80089e8:	463b      	mov	r3, r7
 80089ea:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80089ee:	46c3      	mov	fp, r8
 80089f0:	3d08      	subs	r5, #8
 80089f2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80089f6:	f7f8 f887 	bl	8000b08 <__aeabi_dcmpeq>
 80089fa:	2800      	cmp	r0, #0
 80089fc:	d1f3      	bne.n	80089e6 <__ieee754_rem_pio2+0x3be>
 80089fe:	4b0e      	ldr	r3, [pc, #56]	; (8008a38 <__ieee754_rem_pio2+0x410>)
 8008a00:	9301      	str	r3, [sp, #4]
 8008a02:	2302      	movs	r3, #2
 8008a04:	9300      	str	r3, [sp, #0]
 8008a06:	4622      	mov	r2, r4
 8008a08:	465b      	mov	r3, fp
 8008a0a:	4651      	mov	r1, sl
 8008a0c:	4648      	mov	r0, r9
 8008a0e:	f000 f97f 	bl	8008d10 <__kernel_rem_pio2>
 8008a12:	9b02      	ldr	r3, [sp, #8]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	4683      	mov	fp, r0
 8008a18:	f6bf ae46 	bge.w	80086a8 <__ieee754_rem_pio2+0x80>
 8008a1c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8008a20:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008a24:	f8ca 3004 	str.w	r3, [sl, #4]
 8008a28:	f8da 300c 	ldr.w	r3, [sl, #12]
 8008a2c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008a30:	e73a      	b.n	80088a8 <__ieee754_rem_pio2+0x280>
 8008a32:	bf00      	nop
 8008a34:	41700000 	.word	0x41700000
 8008a38:	08009f94 	.word	0x08009f94

08008a3c <__ieee754_atan2f>:
 8008a3c:	ee10 2a90 	vmov	r2, s1
 8008a40:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8008a44:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8008a48:	b510      	push	{r4, lr}
 8008a4a:	eef0 7a40 	vmov.f32	s15, s0
 8008a4e:	dc06      	bgt.n	8008a5e <__ieee754_atan2f+0x22>
 8008a50:	ee10 0a10 	vmov	r0, s0
 8008a54:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8008a58:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008a5c:	dd04      	ble.n	8008a68 <__ieee754_atan2f+0x2c>
 8008a5e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8008a62:	eeb0 0a67 	vmov.f32	s0, s15
 8008a66:	bd10      	pop	{r4, pc}
 8008a68:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8008a6c:	d103      	bne.n	8008a76 <__ieee754_atan2f+0x3a>
 8008a6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a72:	f000 be5b 	b.w	800972c <atanf>
 8008a76:	1794      	asrs	r4, r2, #30
 8008a78:	f004 0402 	and.w	r4, r4, #2
 8008a7c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8008a80:	b943      	cbnz	r3, 8008a94 <__ieee754_atan2f+0x58>
 8008a82:	2c02      	cmp	r4, #2
 8008a84:	d05e      	beq.n	8008b44 <__ieee754_atan2f+0x108>
 8008a86:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8008b58 <__ieee754_atan2f+0x11c>
 8008a8a:	2c03      	cmp	r4, #3
 8008a8c:	bf08      	it	eq
 8008a8e:	eef0 7a47 	vmoveq.f32	s15, s14
 8008a92:	e7e6      	b.n	8008a62 <__ieee754_atan2f+0x26>
 8008a94:	b941      	cbnz	r1, 8008aa8 <__ieee754_atan2f+0x6c>
 8008a96:	eddf 7a31 	vldr	s15, [pc, #196]	; 8008b5c <__ieee754_atan2f+0x120>
 8008a9a:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8008b60 <__ieee754_atan2f+0x124>
 8008a9e:	2800      	cmp	r0, #0
 8008aa0:	bfb8      	it	lt
 8008aa2:	eef0 7a40 	vmovlt.f32	s15, s0
 8008aa6:	e7dc      	b.n	8008a62 <__ieee754_atan2f+0x26>
 8008aa8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8008aac:	d110      	bne.n	8008ad0 <__ieee754_atan2f+0x94>
 8008aae:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008ab2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8008ab6:	d107      	bne.n	8008ac8 <__ieee754_atan2f+0x8c>
 8008ab8:	2c02      	cmp	r4, #2
 8008aba:	d846      	bhi.n	8008b4a <__ieee754_atan2f+0x10e>
 8008abc:	4b29      	ldr	r3, [pc, #164]	; (8008b64 <__ieee754_atan2f+0x128>)
 8008abe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008ac2:	edd4 7a00 	vldr	s15, [r4]
 8008ac6:	e7cc      	b.n	8008a62 <__ieee754_atan2f+0x26>
 8008ac8:	2c02      	cmp	r4, #2
 8008aca:	d841      	bhi.n	8008b50 <__ieee754_atan2f+0x114>
 8008acc:	4b26      	ldr	r3, [pc, #152]	; (8008b68 <__ieee754_atan2f+0x12c>)
 8008ace:	e7f6      	b.n	8008abe <__ieee754_atan2f+0x82>
 8008ad0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008ad4:	d0df      	beq.n	8008a96 <__ieee754_atan2f+0x5a>
 8008ad6:	1a5b      	subs	r3, r3, r1
 8008ad8:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8008adc:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8008ae0:	da1a      	bge.n	8008b18 <__ieee754_atan2f+0xdc>
 8008ae2:	2a00      	cmp	r2, #0
 8008ae4:	da01      	bge.n	8008aea <__ieee754_atan2f+0xae>
 8008ae6:	313c      	adds	r1, #60	; 0x3c
 8008ae8:	db19      	blt.n	8008b1e <__ieee754_atan2f+0xe2>
 8008aea:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8008aee:	f000 fef1 	bl	80098d4 <fabsf>
 8008af2:	f000 fe1b 	bl	800972c <atanf>
 8008af6:	eef0 7a40 	vmov.f32	s15, s0
 8008afa:	2c01      	cmp	r4, #1
 8008afc:	d012      	beq.n	8008b24 <__ieee754_atan2f+0xe8>
 8008afe:	2c02      	cmp	r4, #2
 8008b00:	d017      	beq.n	8008b32 <__ieee754_atan2f+0xf6>
 8008b02:	2c00      	cmp	r4, #0
 8008b04:	d0ad      	beq.n	8008a62 <__ieee754_atan2f+0x26>
 8008b06:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8008b6c <__ieee754_atan2f+0x130>
 8008b0a:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008b0e:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8008b70 <__ieee754_atan2f+0x134>
 8008b12:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008b16:	e7a4      	b.n	8008a62 <__ieee754_atan2f+0x26>
 8008b18:	eddf 7a10 	vldr	s15, [pc, #64]	; 8008b5c <__ieee754_atan2f+0x120>
 8008b1c:	e7ed      	b.n	8008afa <__ieee754_atan2f+0xbe>
 8008b1e:	eddf 7a15 	vldr	s15, [pc, #84]	; 8008b74 <__ieee754_atan2f+0x138>
 8008b22:	e7ea      	b.n	8008afa <__ieee754_atan2f+0xbe>
 8008b24:	ee17 3a90 	vmov	r3, s15
 8008b28:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008b2c:	ee07 3a90 	vmov	s15, r3
 8008b30:	e797      	b.n	8008a62 <__ieee754_atan2f+0x26>
 8008b32:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8008b6c <__ieee754_atan2f+0x130>
 8008b36:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008b3a:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8008b70 <__ieee754_atan2f+0x134>
 8008b3e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8008b42:	e78e      	b.n	8008a62 <__ieee754_atan2f+0x26>
 8008b44:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8008b70 <__ieee754_atan2f+0x134>
 8008b48:	e78b      	b.n	8008a62 <__ieee754_atan2f+0x26>
 8008b4a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8008b78 <__ieee754_atan2f+0x13c>
 8008b4e:	e788      	b.n	8008a62 <__ieee754_atan2f+0x26>
 8008b50:	eddf 7a08 	vldr	s15, [pc, #32]	; 8008b74 <__ieee754_atan2f+0x138>
 8008b54:	e785      	b.n	8008a62 <__ieee754_atan2f+0x26>
 8008b56:	bf00      	nop
 8008b58:	c0490fdb 	.word	0xc0490fdb
 8008b5c:	3fc90fdb 	.word	0x3fc90fdb
 8008b60:	bfc90fdb 	.word	0xbfc90fdb
 8008b64:	0800a09c 	.word	0x0800a09c
 8008b68:	0800a0a8 	.word	0x0800a0a8
 8008b6c:	33bbbd2e 	.word	0x33bbbd2e
 8008b70:	40490fdb 	.word	0x40490fdb
 8008b74:	00000000 	.word	0x00000000
 8008b78:	3f490fdb 	.word	0x3f490fdb
 8008b7c:	00000000 	.word	0x00000000

08008b80 <__kernel_cos>:
 8008b80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b84:	ec57 6b10 	vmov	r6, r7, d0
 8008b88:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8008b8c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8008b90:	ed8d 1b00 	vstr	d1, [sp]
 8008b94:	da07      	bge.n	8008ba6 <__kernel_cos+0x26>
 8008b96:	ee10 0a10 	vmov	r0, s0
 8008b9a:	4639      	mov	r1, r7
 8008b9c:	f7f7 fffc 	bl	8000b98 <__aeabi_d2iz>
 8008ba0:	2800      	cmp	r0, #0
 8008ba2:	f000 8088 	beq.w	8008cb6 <__kernel_cos+0x136>
 8008ba6:	4632      	mov	r2, r6
 8008ba8:	463b      	mov	r3, r7
 8008baa:	4630      	mov	r0, r6
 8008bac:	4639      	mov	r1, r7
 8008bae:	f7f7 fd43 	bl	8000638 <__aeabi_dmul>
 8008bb2:	4b51      	ldr	r3, [pc, #324]	; (8008cf8 <__kernel_cos+0x178>)
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	4604      	mov	r4, r0
 8008bb8:	460d      	mov	r5, r1
 8008bba:	f7f7 fd3d 	bl	8000638 <__aeabi_dmul>
 8008bbe:	a340      	add	r3, pc, #256	; (adr r3, 8008cc0 <__kernel_cos+0x140>)
 8008bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc4:	4682      	mov	sl, r0
 8008bc6:	468b      	mov	fp, r1
 8008bc8:	4620      	mov	r0, r4
 8008bca:	4629      	mov	r1, r5
 8008bcc:	f7f7 fd34 	bl	8000638 <__aeabi_dmul>
 8008bd0:	a33d      	add	r3, pc, #244	; (adr r3, 8008cc8 <__kernel_cos+0x148>)
 8008bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd6:	f7f7 fb79 	bl	80002cc <__adddf3>
 8008bda:	4622      	mov	r2, r4
 8008bdc:	462b      	mov	r3, r5
 8008bde:	f7f7 fd2b 	bl	8000638 <__aeabi_dmul>
 8008be2:	a33b      	add	r3, pc, #236	; (adr r3, 8008cd0 <__kernel_cos+0x150>)
 8008be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be8:	f7f7 fb6e 	bl	80002c8 <__aeabi_dsub>
 8008bec:	4622      	mov	r2, r4
 8008bee:	462b      	mov	r3, r5
 8008bf0:	f7f7 fd22 	bl	8000638 <__aeabi_dmul>
 8008bf4:	a338      	add	r3, pc, #224	; (adr r3, 8008cd8 <__kernel_cos+0x158>)
 8008bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bfa:	f7f7 fb67 	bl	80002cc <__adddf3>
 8008bfe:	4622      	mov	r2, r4
 8008c00:	462b      	mov	r3, r5
 8008c02:	f7f7 fd19 	bl	8000638 <__aeabi_dmul>
 8008c06:	a336      	add	r3, pc, #216	; (adr r3, 8008ce0 <__kernel_cos+0x160>)
 8008c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c0c:	f7f7 fb5c 	bl	80002c8 <__aeabi_dsub>
 8008c10:	4622      	mov	r2, r4
 8008c12:	462b      	mov	r3, r5
 8008c14:	f7f7 fd10 	bl	8000638 <__aeabi_dmul>
 8008c18:	a333      	add	r3, pc, #204	; (adr r3, 8008ce8 <__kernel_cos+0x168>)
 8008c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c1e:	f7f7 fb55 	bl	80002cc <__adddf3>
 8008c22:	4622      	mov	r2, r4
 8008c24:	462b      	mov	r3, r5
 8008c26:	f7f7 fd07 	bl	8000638 <__aeabi_dmul>
 8008c2a:	4622      	mov	r2, r4
 8008c2c:	462b      	mov	r3, r5
 8008c2e:	f7f7 fd03 	bl	8000638 <__aeabi_dmul>
 8008c32:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c36:	4604      	mov	r4, r0
 8008c38:	460d      	mov	r5, r1
 8008c3a:	4630      	mov	r0, r6
 8008c3c:	4639      	mov	r1, r7
 8008c3e:	f7f7 fcfb 	bl	8000638 <__aeabi_dmul>
 8008c42:	460b      	mov	r3, r1
 8008c44:	4602      	mov	r2, r0
 8008c46:	4629      	mov	r1, r5
 8008c48:	4620      	mov	r0, r4
 8008c4a:	f7f7 fb3d 	bl	80002c8 <__aeabi_dsub>
 8008c4e:	4b2b      	ldr	r3, [pc, #172]	; (8008cfc <__kernel_cos+0x17c>)
 8008c50:	4598      	cmp	r8, r3
 8008c52:	4606      	mov	r6, r0
 8008c54:	460f      	mov	r7, r1
 8008c56:	dc10      	bgt.n	8008c7a <__kernel_cos+0xfa>
 8008c58:	4602      	mov	r2, r0
 8008c5a:	460b      	mov	r3, r1
 8008c5c:	4650      	mov	r0, sl
 8008c5e:	4659      	mov	r1, fp
 8008c60:	f7f7 fb32 	bl	80002c8 <__aeabi_dsub>
 8008c64:	460b      	mov	r3, r1
 8008c66:	4926      	ldr	r1, [pc, #152]	; (8008d00 <__kernel_cos+0x180>)
 8008c68:	4602      	mov	r2, r0
 8008c6a:	2000      	movs	r0, #0
 8008c6c:	f7f7 fb2c 	bl	80002c8 <__aeabi_dsub>
 8008c70:	ec41 0b10 	vmov	d0, r0, r1
 8008c74:	b003      	add	sp, #12
 8008c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c7a:	4b22      	ldr	r3, [pc, #136]	; (8008d04 <__kernel_cos+0x184>)
 8008c7c:	4920      	ldr	r1, [pc, #128]	; (8008d00 <__kernel_cos+0x180>)
 8008c7e:	4598      	cmp	r8, r3
 8008c80:	bfcc      	ite	gt
 8008c82:	4d21      	ldrgt	r5, [pc, #132]	; (8008d08 <__kernel_cos+0x188>)
 8008c84:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8008c88:	2400      	movs	r4, #0
 8008c8a:	4622      	mov	r2, r4
 8008c8c:	462b      	mov	r3, r5
 8008c8e:	2000      	movs	r0, #0
 8008c90:	f7f7 fb1a 	bl	80002c8 <__aeabi_dsub>
 8008c94:	4622      	mov	r2, r4
 8008c96:	4680      	mov	r8, r0
 8008c98:	4689      	mov	r9, r1
 8008c9a:	462b      	mov	r3, r5
 8008c9c:	4650      	mov	r0, sl
 8008c9e:	4659      	mov	r1, fp
 8008ca0:	f7f7 fb12 	bl	80002c8 <__aeabi_dsub>
 8008ca4:	4632      	mov	r2, r6
 8008ca6:	463b      	mov	r3, r7
 8008ca8:	f7f7 fb0e 	bl	80002c8 <__aeabi_dsub>
 8008cac:	4602      	mov	r2, r0
 8008cae:	460b      	mov	r3, r1
 8008cb0:	4640      	mov	r0, r8
 8008cb2:	4649      	mov	r1, r9
 8008cb4:	e7da      	b.n	8008c6c <__kernel_cos+0xec>
 8008cb6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8008cf0 <__kernel_cos+0x170>
 8008cba:	e7db      	b.n	8008c74 <__kernel_cos+0xf4>
 8008cbc:	f3af 8000 	nop.w
 8008cc0:	be8838d4 	.word	0xbe8838d4
 8008cc4:	bda8fae9 	.word	0xbda8fae9
 8008cc8:	bdb4b1c4 	.word	0xbdb4b1c4
 8008ccc:	3e21ee9e 	.word	0x3e21ee9e
 8008cd0:	809c52ad 	.word	0x809c52ad
 8008cd4:	3e927e4f 	.word	0x3e927e4f
 8008cd8:	19cb1590 	.word	0x19cb1590
 8008cdc:	3efa01a0 	.word	0x3efa01a0
 8008ce0:	16c15177 	.word	0x16c15177
 8008ce4:	3f56c16c 	.word	0x3f56c16c
 8008ce8:	5555554c 	.word	0x5555554c
 8008cec:	3fa55555 	.word	0x3fa55555
 8008cf0:	00000000 	.word	0x00000000
 8008cf4:	3ff00000 	.word	0x3ff00000
 8008cf8:	3fe00000 	.word	0x3fe00000
 8008cfc:	3fd33332 	.word	0x3fd33332
 8008d00:	3ff00000 	.word	0x3ff00000
 8008d04:	3fe90000 	.word	0x3fe90000
 8008d08:	3fd20000 	.word	0x3fd20000
 8008d0c:	00000000 	.word	0x00000000

08008d10 <__kernel_rem_pio2>:
 8008d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d14:	ed2d 8b02 	vpush	{d8}
 8008d18:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8008d1c:	f112 0f14 	cmn.w	r2, #20
 8008d20:	9308      	str	r3, [sp, #32]
 8008d22:	9101      	str	r1, [sp, #4]
 8008d24:	4bc6      	ldr	r3, [pc, #792]	; (8009040 <__kernel_rem_pio2+0x330>)
 8008d26:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8008d28:	9009      	str	r0, [sp, #36]	; 0x24
 8008d2a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008d2e:	9304      	str	r3, [sp, #16]
 8008d30:	9b08      	ldr	r3, [sp, #32]
 8008d32:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8008d36:	bfa8      	it	ge
 8008d38:	1ed4      	subge	r4, r2, #3
 8008d3a:	9306      	str	r3, [sp, #24]
 8008d3c:	bfb2      	itee	lt
 8008d3e:	2400      	movlt	r4, #0
 8008d40:	2318      	movge	r3, #24
 8008d42:	fb94 f4f3 	sdivge	r4, r4, r3
 8008d46:	f06f 0317 	mvn.w	r3, #23
 8008d4a:	fb04 3303 	mla	r3, r4, r3, r3
 8008d4e:	eb03 0a02 	add.w	sl, r3, r2
 8008d52:	9b04      	ldr	r3, [sp, #16]
 8008d54:	9a06      	ldr	r2, [sp, #24]
 8008d56:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8009030 <__kernel_rem_pio2+0x320>
 8008d5a:	eb03 0802 	add.w	r8, r3, r2
 8008d5e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8008d60:	1aa7      	subs	r7, r4, r2
 8008d62:	ae20      	add	r6, sp, #128	; 0x80
 8008d64:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008d68:	2500      	movs	r5, #0
 8008d6a:	4545      	cmp	r5, r8
 8008d6c:	dd18      	ble.n	8008da0 <__kernel_rem_pio2+0x90>
 8008d6e:	9b08      	ldr	r3, [sp, #32]
 8008d70:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8008d74:	aa20      	add	r2, sp, #128	; 0x80
 8008d76:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8009030 <__kernel_rem_pio2+0x320>
 8008d7a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8008d7e:	f1c3 0301 	rsb	r3, r3, #1
 8008d82:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8008d86:	9307      	str	r3, [sp, #28]
 8008d88:	9b07      	ldr	r3, [sp, #28]
 8008d8a:	9a04      	ldr	r2, [sp, #16]
 8008d8c:	4443      	add	r3, r8
 8008d8e:	429a      	cmp	r2, r3
 8008d90:	db2f      	blt.n	8008df2 <__kernel_rem_pio2+0xe2>
 8008d92:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008d96:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008d9a:	462f      	mov	r7, r5
 8008d9c:	2600      	movs	r6, #0
 8008d9e:	e01b      	b.n	8008dd8 <__kernel_rem_pio2+0xc8>
 8008da0:	42ef      	cmn	r7, r5
 8008da2:	d407      	bmi.n	8008db4 <__kernel_rem_pio2+0xa4>
 8008da4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008da8:	f7f7 fbdc 	bl	8000564 <__aeabi_i2d>
 8008dac:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008db0:	3501      	adds	r5, #1
 8008db2:	e7da      	b.n	8008d6a <__kernel_rem_pio2+0x5a>
 8008db4:	ec51 0b18 	vmov	r0, r1, d8
 8008db8:	e7f8      	b.n	8008dac <__kernel_rem_pio2+0x9c>
 8008dba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008dbe:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008dc2:	f7f7 fc39 	bl	8000638 <__aeabi_dmul>
 8008dc6:	4602      	mov	r2, r0
 8008dc8:	460b      	mov	r3, r1
 8008dca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008dce:	f7f7 fa7d 	bl	80002cc <__adddf3>
 8008dd2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008dd6:	3601      	adds	r6, #1
 8008dd8:	9b06      	ldr	r3, [sp, #24]
 8008dda:	429e      	cmp	r6, r3
 8008ddc:	f1a7 0708 	sub.w	r7, r7, #8
 8008de0:	ddeb      	ble.n	8008dba <__kernel_rem_pio2+0xaa>
 8008de2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008de6:	3508      	adds	r5, #8
 8008de8:	ecab 7b02 	vstmia	fp!, {d7}
 8008dec:	f108 0801 	add.w	r8, r8, #1
 8008df0:	e7ca      	b.n	8008d88 <__kernel_rem_pio2+0x78>
 8008df2:	9b04      	ldr	r3, [sp, #16]
 8008df4:	aa0c      	add	r2, sp, #48	; 0x30
 8008df6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008dfa:	930b      	str	r3, [sp, #44]	; 0x2c
 8008dfc:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8008dfe:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008e02:	9c04      	ldr	r4, [sp, #16]
 8008e04:	930a      	str	r3, [sp, #40]	; 0x28
 8008e06:	ab98      	add	r3, sp, #608	; 0x260
 8008e08:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008e0c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8008e10:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8008e14:	f8cd b008 	str.w	fp, [sp, #8]
 8008e18:	4625      	mov	r5, r4
 8008e1a:	2d00      	cmp	r5, #0
 8008e1c:	dc78      	bgt.n	8008f10 <__kernel_rem_pio2+0x200>
 8008e1e:	ec47 6b10 	vmov	d0, r6, r7
 8008e22:	4650      	mov	r0, sl
 8008e24:	f000 fbfc 	bl	8009620 <scalbn>
 8008e28:	ec57 6b10 	vmov	r6, r7, d0
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008e32:	ee10 0a10 	vmov	r0, s0
 8008e36:	4639      	mov	r1, r7
 8008e38:	f7f7 fbfe 	bl	8000638 <__aeabi_dmul>
 8008e3c:	ec41 0b10 	vmov	d0, r0, r1
 8008e40:	f000 fb6e 	bl	8009520 <floor>
 8008e44:	4b7f      	ldr	r3, [pc, #508]	; (8009044 <__kernel_rem_pio2+0x334>)
 8008e46:	ec51 0b10 	vmov	r0, r1, d0
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	f7f7 fbf4 	bl	8000638 <__aeabi_dmul>
 8008e50:	4602      	mov	r2, r0
 8008e52:	460b      	mov	r3, r1
 8008e54:	4630      	mov	r0, r6
 8008e56:	4639      	mov	r1, r7
 8008e58:	f7f7 fa36 	bl	80002c8 <__aeabi_dsub>
 8008e5c:	460f      	mov	r7, r1
 8008e5e:	4606      	mov	r6, r0
 8008e60:	f7f7 fe9a 	bl	8000b98 <__aeabi_d2iz>
 8008e64:	9007      	str	r0, [sp, #28]
 8008e66:	f7f7 fb7d 	bl	8000564 <__aeabi_i2d>
 8008e6a:	4602      	mov	r2, r0
 8008e6c:	460b      	mov	r3, r1
 8008e6e:	4630      	mov	r0, r6
 8008e70:	4639      	mov	r1, r7
 8008e72:	f7f7 fa29 	bl	80002c8 <__aeabi_dsub>
 8008e76:	f1ba 0f00 	cmp.w	sl, #0
 8008e7a:	4606      	mov	r6, r0
 8008e7c:	460f      	mov	r7, r1
 8008e7e:	dd70      	ble.n	8008f62 <__kernel_rem_pio2+0x252>
 8008e80:	1e62      	subs	r2, r4, #1
 8008e82:	ab0c      	add	r3, sp, #48	; 0x30
 8008e84:	9d07      	ldr	r5, [sp, #28]
 8008e86:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008e8a:	f1ca 0118 	rsb	r1, sl, #24
 8008e8e:	fa40 f301 	asr.w	r3, r0, r1
 8008e92:	441d      	add	r5, r3
 8008e94:	408b      	lsls	r3, r1
 8008e96:	1ac0      	subs	r0, r0, r3
 8008e98:	ab0c      	add	r3, sp, #48	; 0x30
 8008e9a:	9507      	str	r5, [sp, #28]
 8008e9c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8008ea0:	f1ca 0317 	rsb	r3, sl, #23
 8008ea4:	fa40 f303 	asr.w	r3, r0, r3
 8008ea8:	9302      	str	r3, [sp, #8]
 8008eaa:	9b02      	ldr	r3, [sp, #8]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	dd66      	ble.n	8008f7e <__kernel_rem_pio2+0x26e>
 8008eb0:	9b07      	ldr	r3, [sp, #28]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	3301      	adds	r3, #1
 8008eb6:	9307      	str	r3, [sp, #28]
 8008eb8:	4615      	mov	r5, r2
 8008eba:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8008ebe:	4294      	cmp	r4, r2
 8008ec0:	f300 8099 	bgt.w	8008ff6 <__kernel_rem_pio2+0x2e6>
 8008ec4:	f1ba 0f00 	cmp.w	sl, #0
 8008ec8:	dd07      	ble.n	8008eda <__kernel_rem_pio2+0x1ca>
 8008eca:	f1ba 0f01 	cmp.w	sl, #1
 8008ece:	f000 80a5 	beq.w	800901c <__kernel_rem_pio2+0x30c>
 8008ed2:	f1ba 0f02 	cmp.w	sl, #2
 8008ed6:	f000 80c1 	beq.w	800905c <__kernel_rem_pio2+0x34c>
 8008eda:	9b02      	ldr	r3, [sp, #8]
 8008edc:	2b02      	cmp	r3, #2
 8008ede:	d14e      	bne.n	8008f7e <__kernel_rem_pio2+0x26e>
 8008ee0:	4632      	mov	r2, r6
 8008ee2:	463b      	mov	r3, r7
 8008ee4:	4958      	ldr	r1, [pc, #352]	; (8009048 <__kernel_rem_pio2+0x338>)
 8008ee6:	2000      	movs	r0, #0
 8008ee8:	f7f7 f9ee 	bl	80002c8 <__aeabi_dsub>
 8008eec:	4606      	mov	r6, r0
 8008eee:	460f      	mov	r7, r1
 8008ef0:	2d00      	cmp	r5, #0
 8008ef2:	d044      	beq.n	8008f7e <__kernel_rem_pio2+0x26e>
 8008ef4:	4650      	mov	r0, sl
 8008ef6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8009038 <__kernel_rem_pio2+0x328>
 8008efa:	f000 fb91 	bl	8009620 <scalbn>
 8008efe:	4630      	mov	r0, r6
 8008f00:	4639      	mov	r1, r7
 8008f02:	ec53 2b10 	vmov	r2, r3, d0
 8008f06:	f7f7 f9df 	bl	80002c8 <__aeabi_dsub>
 8008f0a:	4606      	mov	r6, r0
 8008f0c:	460f      	mov	r7, r1
 8008f0e:	e036      	b.n	8008f7e <__kernel_rem_pio2+0x26e>
 8008f10:	4b4e      	ldr	r3, [pc, #312]	; (800904c <__kernel_rem_pio2+0x33c>)
 8008f12:	2200      	movs	r2, #0
 8008f14:	4630      	mov	r0, r6
 8008f16:	4639      	mov	r1, r7
 8008f18:	f7f7 fb8e 	bl	8000638 <__aeabi_dmul>
 8008f1c:	f7f7 fe3c 	bl	8000b98 <__aeabi_d2iz>
 8008f20:	f7f7 fb20 	bl	8000564 <__aeabi_i2d>
 8008f24:	4b4a      	ldr	r3, [pc, #296]	; (8009050 <__kernel_rem_pio2+0x340>)
 8008f26:	2200      	movs	r2, #0
 8008f28:	4680      	mov	r8, r0
 8008f2a:	4689      	mov	r9, r1
 8008f2c:	f7f7 fb84 	bl	8000638 <__aeabi_dmul>
 8008f30:	4602      	mov	r2, r0
 8008f32:	460b      	mov	r3, r1
 8008f34:	4630      	mov	r0, r6
 8008f36:	4639      	mov	r1, r7
 8008f38:	f7f7 f9c6 	bl	80002c8 <__aeabi_dsub>
 8008f3c:	f7f7 fe2c 	bl	8000b98 <__aeabi_d2iz>
 8008f40:	9b02      	ldr	r3, [sp, #8]
 8008f42:	f843 0b04 	str.w	r0, [r3], #4
 8008f46:	3d01      	subs	r5, #1
 8008f48:	9302      	str	r3, [sp, #8]
 8008f4a:	ab70      	add	r3, sp, #448	; 0x1c0
 8008f4c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f54:	4640      	mov	r0, r8
 8008f56:	4649      	mov	r1, r9
 8008f58:	f7f7 f9b8 	bl	80002cc <__adddf3>
 8008f5c:	4606      	mov	r6, r0
 8008f5e:	460f      	mov	r7, r1
 8008f60:	e75b      	b.n	8008e1a <__kernel_rem_pio2+0x10a>
 8008f62:	d105      	bne.n	8008f70 <__kernel_rem_pio2+0x260>
 8008f64:	1e63      	subs	r3, r4, #1
 8008f66:	aa0c      	add	r2, sp, #48	; 0x30
 8008f68:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008f6c:	15c3      	asrs	r3, r0, #23
 8008f6e:	e79b      	b.n	8008ea8 <__kernel_rem_pio2+0x198>
 8008f70:	4b38      	ldr	r3, [pc, #224]	; (8009054 <__kernel_rem_pio2+0x344>)
 8008f72:	2200      	movs	r2, #0
 8008f74:	f7f7 fde6 	bl	8000b44 <__aeabi_dcmpge>
 8008f78:	2800      	cmp	r0, #0
 8008f7a:	d139      	bne.n	8008ff0 <__kernel_rem_pio2+0x2e0>
 8008f7c:	9002      	str	r0, [sp, #8]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	2300      	movs	r3, #0
 8008f82:	4630      	mov	r0, r6
 8008f84:	4639      	mov	r1, r7
 8008f86:	f7f7 fdbf 	bl	8000b08 <__aeabi_dcmpeq>
 8008f8a:	2800      	cmp	r0, #0
 8008f8c:	f000 80b4 	beq.w	80090f8 <__kernel_rem_pio2+0x3e8>
 8008f90:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 8008f94:	465b      	mov	r3, fp
 8008f96:	2200      	movs	r2, #0
 8008f98:	9904      	ldr	r1, [sp, #16]
 8008f9a:	428b      	cmp	r3, r1
 8008f9c:	da65      	bge.n	800906a <__kernel_rem_pio2+0x35a>
 8008f9e:	2a00      	cmp	r2, #0
 8008fa0:	d07b      	beq.n	800909a <__kernel_rem_pio2+0x38a>
 8008fa2:	ab0c      	add	r3, sp, #48	; 0x30
 8008fa4:	f1aa 0a18 	sub.w	sl, sl, #24
 8008fa8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	f000 80a0 	beq.w	80090f2 <__kernel_rem_pio2+0x3e2>
 8008fb2:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8009038 <__kernel_rem_pio2+0x328>
 8008fb6:	4650      	mov	r0, sl
 8008fb8:	f000 fb32 	bl	8009620 <scalbn>
 8008fbc:	4f23      	ldr	r7, [pc, #140]	; (800904c <__kernel_rem_pio2+0x33c>)
 8008fbe:	ec55 4b10 	vmov	r4, r5, d0
 8008fc2:	46d8      	mov	r8, fp
 8008fc4:	2600      	movs	r6, #0
 8008fc6:	f1b8 0f00 	cmp.w	r8, #0
 8008fca:	f280 80cf 	bge.w	800916c <__kernel_rem_pio2+0x45c>
 8008fce:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8009030 <__kernel_rem_pio2+0x320>
 8008fd2:	465f      	mov	r7, fp
 8008fd4:	f04f 0800 	mov.w	r8, #0
 8008fd8:	2f00      	cmp	r7, #0
 8008fda:	f2c0 80fd 	blt.w	80091d8 <__kernel_rem_pio2+0x4c8>
 8008fde:	ab70      	add	r3, sp, #448	; 0x1c0
 8008fe0:	f8df a074 	ldr.w	sl, [pc, #116]	; 8009058 <__kernel_rem_pio2+0x348>
 8008fe4:	ec55 4b18 	vmov	r4, r5, d8
 8008fe8:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8008fec:	2600      	movs	r6, #0
 8008fee:	e0e5      	b.n	80091bc <__kernel_rem_pio2+0x4ac>
 8008ff0:	2302      	movs	r3, #2
 8008ff2:	9302      	str	r3, [sp, #8]
 8008ff4:	e75c      	b.n	8008eb0 <__kernel_rem_pio2+0x1a0>
 8008ff6:	f8db 3000 	ldr.w	r3, [fp]
 8008ffa:	b955      	cbnz	r5, 8009012 <__kernel_rem_pio2+0x302>
 8008ffc:	b123      	cbz	r3, 8009008 <__kernel_rem_pio2+0x2f8>
 8008ffe:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8009002:	f8cb 3000 	str.w	r3, [fp]
 8009006:	2301      	movs	r3, #1
 8009008:	3201      	adds	r2, #1
 800900a:	f10b 0b04 	add.w	fp, fp, #4
 800900e:	461d      	mov	r5, r3
 8009010:	e755      	b.n	8008ebe <__kernel_rem_pio2+0x1ae>
 8009012:	1acb      	subs	r3, r1, r3
 8009014:	f8cb 3000 	str.w	r3, [fp]
 8009018:	462b      	mov	r3, r5
 800901a:	e7f5      	b.n	8009008 <__kernel_rem_pio2+0x2f8>
 800901c:	1e62      	subs	r2, r4, #1
 800901e:	ab0c      	add	r3, sp, #48	; 0x30
 8009020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009024:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009028:	a90c      	add	r1, sp, #48	; 0x30
 800902a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800902e:	e754      	b.n	8008eda <__kernel_rem_pio2+0x1ca>
	...
 800903c:	3ff00000 	.word	0x3ff00000
 8009040:	0800a0f8 	.word	0x0800a0f8
 8009044:	40200000 	.word	0x40200000
 8009048:	3ff00000 	.word	0x3ff00000
 800904c:	3e700000 	.word	0x3e700000
 8009050:	41700000 	.word	0x41700000
 8009054:	3fe00000 	.word	0x3fe00000
 8009058:	0800a0b8 	.word	0x0800a0b8
 800905c:	1e62      	subs	r2, r4, #1
 800905e:	ab0c      	add	r3, sp, #48	; 0x30
 8009060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009064:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009068:	e7de      	b.n	8009028 <__kernel_rem_pio2+0x318>
 800906a:	a90c      	add	r1, sp, #48	; 0x30
 800906c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009070:	3b01      	subs	r3, #1
 8009072:	430a      	orrs	r2, r1
 8009074:	e790      	b.n	8008f98 <__kernel_rem_pio2+0x288>
 8009076:	3301      	adds	r3, #1
 8009078:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800907c:	2900      	cmp	r1, #0
 800907e:	d0fa      	beq.n	8009076 <__kernel_rem_pio2+0x366>
 8009080:	9a08      	ldr	r2, [sp, #32]
 8009082:	18e3      	adds	r3, r4, r3
 8009084:	18a6      	adds	r6, r4, r2
 8009086:	aa20      	add	r2, sp, #128	; 0x80
 8009088:	1c65      	adds	r5, r4, #1
 800908a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800908e:	9302      	str	r3, [sp, #8]
 8009090:	9b02      	ldr	r3, [sp, #8]
 8009092:	42ab      	cmp	r3, r5
 8009094:	da04      	bge.n	80090a0 <__kernel_rem_pio2+0x390>
 8009096:	461c      	mov	r4, r3
 8009098:	e6b5      	b.n	8008e06 <__kernel_rem_pio2+0xf6>
 800909a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800909c:	2301      	movs	r3, #1
 800909e:	e7eb      	b.n	8009078 <__kernel_rem_pio2+0x368>
 80090a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80090a6:	f7f7 fa5d 	bl	8000564 <__aeabi_i2d>
 80090aa:	e8e6 0102 	strd	r0, r1, [r6], #8
 80090ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090b0:	46b3      	mov	fp, r6
 80090b2:	461c      	mov	r4, r3
 80090b4:	2700      	movs	r7, #0
 80090b6:	f04f 0800 	mov.w	r8, #0
 80090ba:	f04f 0900 	mov.w	r9, #0
 80090be:	9b06      	ldr	r3, [sp, #24]
 80090c0:	429f      	cmp	r7, r3
 80090c2:	dd06      	ble.n	80090d2 <__kernel_rem_pio2+0x3c2>
 80090c4:	ab70      	add	r3, sp, #448	; 0x1c0
 80090c6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80090ca:	e9c3 8900 	strd	r8, r9, [r3]
 80090ce:	3501      	adds	r5, #1
 80090d0:	e7de      	b.n	8009090 <__kernel_rem_pio2+0x380>
 80090d2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80090d6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80090da:	f7f7 faad 	bl	8000638 <__aeabi_dmul>
 80090de:	4602      	mov	r2, r0
 80090e0:	460b      	mov	r3, r1
 80090e2:	4640      	mov	r0, r8
 80090e4:	4649      	mov	r1, r9
 80090e6:	f7f7 f8f1 	bl	80002cc <__adddf3>
 80090ea:	3701      	adds	r7, #1
 80090ec:	4680      	mov	r8, r0
 80090ee:	4689      	mov	r9, r1
 80090f0:	e7e5      	b.n	80090be <__kernel_rem_pio2+0x3ae>
 80090f2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80090f6:	e754      	b.n	8008fa2 <__kernel_rem_pio2+0x292>
 80090f8:	ec47 6b10 	vmov	d0, r6, r7
 80090fc:	f1ca 0000 	rsb	r0, sl, #0
 8009100:	f000 fa8e 	bl	8009620 <scalbn>
 8009104:	ec57 6b10 	vmov	r6, r7, d0
 8009108:	4b9f      	ldr	r3, [pc, #636]	; (8009388 <__kernel_rem_pio2+0x678>)
 800910a:	ee10 0a10 	vmov	r0, s0
 800910e:	2200      	movs	r2, #0
 8009110:	4639      	mov	r1, r7
 8009112:	f7f7 fd17 	bl	8000b44 <__aeabi_dcmpge>
 8009116:	b300      	cbz	r0, 800915a <__kernel_rem_pio2+0x44a>
 8009118:	4b9c      	ldr	r3, [pc, #624]	; (800938c <__kernel_rem_pio2+0x67c>)
 800911a:	2200      	movs	r2, #0
 800911c:	4630      	mov	r0, r6
 800911e:	4639      	mov	r1, r7
 8009120:	f7f7 fa8a 	bl	8000638 <__aeabi_dmul>
 8009124:	f7f7 fd38 	bl	8000b98 <__aeabi_d2iz>
 8009128:	4605      	mov	r5, r0
 800912a:	f7f7 fa1b 	bl	8000564 <__aeabi_i2d>
 800912e:	4b96      	ldr	r3, [pc, #600]	; (8009388 <__kernel_rem_pio2+0x678>)
 8009130:	2200      	movs	r2, #0
 8009132:	f7f7 fa81 	bl	8000638 <__aeabi_dmul>
 8009136:	460b      	mov	r3, r1
 8009138:	4602      	mov	r2, r0
 800913a:	4639      	mov	r1, r7
 800913c:	4630      	mov	r0, r6
 800913e:	f7f7 f8c3 	bl	80002c8 <__aeabi_dsub>
 8009142:	f7f7 fd29 	bl	8000b98 <__aeabi_d2iz>
 8009146:	f104 0b01 	add.w	fp, r4, #1
 800914a:	ab0c      	add	r3, sp, #48	; 0x30
 800914c:	f10a 0a18 	add.w	sl, sl, #24
 8009150:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009154:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8009158:	e72b      	b.n	8008fb2 <__kernel_rem_pio2+0x2a2>
 800915a:	4630      	mov	r0, r6
 800915c:	4639      	mov	r1, r7
 800915e:	f7f7 fd1b 	bl	8000b98 <__aeabi_d2iz>
 8009162:	ab0c      	add	r3, sp, #48	; 0x30
 8009164:	46a3      	mov	fp, r4
 8009166:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800916a:	e722      	b.n	8008fb2 <__kernel_rem_pio2+0x2a2>
 800916c:	ab70      	add	r3, sp, #448	; 0x1c0
 800916e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8009172:	ab0c      	add	r3, sp, #48	; 0x30
 8009174:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8009178:	f7f7 f9f4 	bl	8000564 <__aeabi_i2d>
 800917c:	4622      	mov	r2, r4
 800917e:	462b      	mov	r3, r5
 8009180:	f7f7 fa5a 	bl	8000638 <__aeabi_dmul>
 8009184:	4632      	mov	r2, r6
 8009186:	e9c9 0100 	strd	r0, r1, [r9]
 800918a:	463b      	mov	r3, r7
 800918c:	4620      	mov	r0, r4
 800918e:	4629      	mov	r1, r5
 8009190:	f7f7 fa52 	bl	8000638 <__aeabi_dmul>
 8009194:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8009198:	4604      	mov	r4, r0
 800919a:	460d      	mov	r5, r1
 800919c:	e713      	b.n	8008fc6 <__kernel_rem_pio2+0x2b6>
 800919e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80091a2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80091a6:	f7f7 fa47 	bl	8000638 <__aeabi_dmul>
 80091aa:	4602      	mov	r2, r0
 80091ac:	460b      	mov	r3, r1
 80091ae:	4620      	mov	r0, r4
 80091b0:	4629      	mov	r1, r5
 80091b2:	f7f7 f88b 	bl	80002cc <__adddf3>
 80091b6:	3601      	adds	r6, #1
 80091b8:	4604      	mov	r4, r0
 80091ba:	460d      	mov	r5, r1
 80091bc:	9b04      	ldr	r3, [sp, #16]
 80091be:	429e      	cmp	r6, r3
 80091c0:	dc01      	bgt.n	80091c6 <__kernel_rem_pio2+0x4b6>
 80091c2:	45b0      	cmp	r8, r6
 80091c4:	daeb      	bge.n	800919e <__kernel_rem_pio2+0x48e>
 80091c6:	ab48      	add	r3, sp, #288	; 0x120
 80091c8:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80091cc:	e9c3 4500 	strd	r4, r5, [r3]
 80091d0:	3f01      	subs	r7, #1
 80091d2:	f108 0801 	add.w	r8, r8, #1
 80091d6:	e6ff      	b.n	8008fd8 <__kernel_rem_pio2+0x2c8>
 80091d8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80091da:	2b02      	cmp	r3, #2
 80091dc:	dc0b      	bgt.n	80091f6 <__kernel_rem_pio2+0x4e6>
 80091de:	2b00      	cmp	r3, #0
 80091e0:	dc6e      	bgt.n	80092c0 <__kernel_rem_pio2+0x5b0>
 80091e2:	d045      	beq.n	8009270 <__kernel_rem_pio2+0x560>
 80091e4:	9b07      	ldr	r3, [sp, #28]
 80091e6:	f003 0007 	and.w	r0, r3, #7
 80091ea:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80091ee:	ecbd 8b02 	vpop	{d8}
 80091f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091f6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80091f8:	2b03      	cmp	r3, #3
 80091fa:	d1f3      	bne.n	80091e4 <__kernel_rem_pio2+0x4d4>
 80091fc:	ab48      	add	r3, sp, #288	; 0x120
 80091fe:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8009202:	46d0      	mov	r8, sl
 8009204:	46d9      	mov	r9, fp
 8009206:	f1b9 0f00 	cmp.w	r9, #0
 800920a:	f1a8 0808 	sub.w	r8, r8, #8
 800920e:	dc64      	bgt.n	80092da <__kernel_rem_pio2+0x5ca>
 8009210:	465c      	mov	r4, fp
 8009212:	2c01      	cmp	r4, #1
 8009214:	f1aa 0a08 	sub.w	sl, sl, #8
 8009218:	dc7e      	bgt.n	8009318 <__kernel_rem_pio2+0x608>
 800921a:	2000      	movs	r0, #0
 800921c:	2100      	movs	r1, #0
 800921e:	f1bb 0f01 	cmp.w	fp, #1
 8009222:	f300 8097 	bgt.w	8009354 <__kernel_rem_pio2+0x644>
 8009226:	9b02      	ldr	r3, [sp, #8]
 8009228:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800922c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8009230:	2b00      	cmp	r3, #0
 8009232:	f040 8099 	bne.w	8009368 <__kernel_rem_pio2+0x658>
 8009236:	9b01      	ldr	r3, [sp, #4]
 8009238:	e9c3 5600 	strd	r5, r6, [r3]
 800923c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8009240:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8009244:	e7ce      	b.n	80091e4 <__kernel_rem_pio2+0x4d4>
 8009246:	ab48      	add	r3, sp, #288	; 0x120
 8009248:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800924c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009250:	f7f7 f83c 	bl	80002cc <__adddf3>
 8009254:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009258:	f1bb 0f00 	cmp.w	fp, #0
 800925c:	daf3      	bge.n	8009246 <__kernel_rem_pio2+0x536>
 800925e:	9b02      	ldr	r3, [sp, #8]
 8009260:	b113      	cbz	r3, 8009268 <__kernel_rem_pio2+0x558>
 8009262:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009266:	4619      	mov	r1, r3
 8009268:	9b01      	ldr	r3, [sp, #4]
 800926a:	e9c3 0100 	strd	r0, r1, [r3]
 800926e:	e7b9      	b.n	80091e4 <__kernel_rem_pio2+0x4d4>
 8009270:	2000      	movs	r0, #0
 8009272:	2100      	movs	r1, #0
 8009274:	e7f0      	b.n	8009258 <__kernel_rem_pio2+0x548>
 8009276:	ab48      	add	r3, sp, #288	; 0x120
 8009278:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800927c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009280:	f7f7 f824 	bl	80002cc <__adddf3>
 8009284:	3c01      	subs	r4, #1
 8009286:	2c00      	cmp	r4, #0
 8009288:	daf5      	bge.n	8009276 <__kernel_rem_pio2+0x566>
 800928a:	9b02      	ldr	r3, [sp, #8]
 800928c:	b1e3      	cbz	r3, 80092c8 <__kernel_rem_pio2+0x5b8>
 800928e:	4602      	mov	r2, r0
 8009290:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009294:	9c01      	ldr	r4, [sp, #4]
 8009296:	e9c4 2300 	strd	r2, r3, [r4]
 800929a:	4602      	mov	r2, r0
 800929c:	460b      	mov	r3, r1
 800929e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80092a2:	f7f7 f811 	bl	80002c8 <__aeabi_dsub>
 80092a6:	ad4a      	add	r5, sp, #296	; 0x128
 80092a8:	2401      	movs	r4, #1
 80092aa:	45a3      	cmp	fp, r4
 80092ac:	da0f      	bge.n	80092ce <__kernel_rem_pio2+0x5be>
 80092ae:	9b02      	ldr	r3, [sp, #8]
 80092b0:	b113      	cbz	r3, 80092b8 <__kernel_rem_pio2+0x5a8>
 80092b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80092b6:	4619      	mov	r1, r3
 80092b8:	9b01      	ldr	r3, [sp, #4]
 80092ba:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80092be:	e791      	b.n	80091e4 <__kernel_rem_pio2+0x4d4>
 80092c0:	465c      	mov	r4, fp
 80092c2:	2000      	movs	r0, #0
 80092c4:	2100      	movs	r1, #0
 80092c6:	e7de      	b.n	8009286 <__kernel_rem_pio2+0x576>
 80092c8:	4602      	mov	r2, r0
 80092ca:	460b      	mov	r3, r1
 80092cc:	e7e2      	b.n	8009294 <__kernel_rem_pio2+0x584>
 80092ce:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80092d2:	f7f6 fffb 	bl	80002cc <__adddf3>
 80092d6:	3401      	adds	r4, #1
 80092d8:	e7e7      	b.n	80092aa <__kernel_rem_pio2+0x59a>
 80092da:	e9d8 4500 	ldrd	r4, r5, [r8]
 80092de:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 80092e2:	4620      	mov	r0, r4
 80092e4:	4632      	mov	r2, r6
 80092e6:	463b      	mov	r3, r7
 80092e8:	4629      	mov	r1, r5
 80092ea:	f7f6 ffef 	bl	80002cc <__adddf3>
 80092ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80092f2:	4602      	mov	r2, r0
 80092f4:	460b      	mov	r3, r1
 80092f6:	4620      	mov	r0, r4
 80092f8:	4629      	mov	r1, r5
 80092fa:	f7f6 ffe5 	bl	80002c8 <__aeabi_dsub>
 80092fe:	4632      	mov	r2, r6
 8009300:	463b      	mov	r3, r7
 8009302:	f7f6 ffe3 	bl	80002cc <__adddf3>
 8009306:	ed9d 7b04 	vldr	d7, [sp, #16]
 800930a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800930e:	ed88 7b00 	vstr	d7, [r8]
 8009312:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8009316:	e776      	b.n	8009206 <__kernel_rem_pio2+0x4f6>
 8009318:	e9da 8900 	ldrd	r8, r9, [sl]
 800931c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8009320:	4640      	mov	r0, r8
 8009322:	4632      	mov	r2, r6
 8009324:	463b      	mov	r3, r7
 8009326:	4649      	mov	r1, r9
 8009328:	f7f6 ffd0 	bl	80002cc <__adddf3>
 800932c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009330:	4602      	mov	r2, r0
 8009332:	460b      	mov	r3, r1
 8009334:	4640      	mov	r0, r8
 8009336:	4649      	mov	r1, r9
 8009338:	f7f6 ffc6 	bl	80002c8 <__aeabi_dsub>
 800933c:	4632      	mov	r2, r6
 800933e:	463b      	mov	r3, r7
 8009340:	f7f6 ffc4 	bl	80002cc <__adddf3>
 8009344:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009348:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800934c:	ed8a 7b00 	vstr	d7, [sl]
 8009350:	3c01      	subs	r4, #1
 8009352:	e75e      	b.n	8009212 <__kernel_rem_pio2+0x502>
 8009354:	ab48      	add	r3, sp, #288	; 0x120
 8009356:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800935a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800935e:	f7f6 ffb5 	bl	80002cc <__adddf3>
 8009362:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009366:	e75a      	b.n	800921e <__kernel_rem_pio2+0x50e>
 8009368:	9b01      	ldr	r3, [sp, #4]
 800936a:	9a01      	ldr	r2, [sp, #4]
 800936c:	601d      	str	r5, [r3, #0]
 800936e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8009372:	605c      	str	r4, [r3, #4]
 8009374:	609f      	str	r7, [r3, #8]
 8009376:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800937a:	60d3      	str	r3, [r2, #12]
 800937c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009380:	6110      	str	r0, [r2, #16]
 8009382:	6153      	str	r3, [r2, #20]
 8009384:	e72e      	b.n	80091e4 <__kernel_rem_pio2+0x4d4>
 8009386:	bf00      	nop
 8009388:	41700000 	.word	0x41700000
 800938c:	3e700000 	.word	0x3e700000

08009390 <__kernel_sin>:
 8009390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009394:	ed2d 8b04 	vpush	{d8-d9}
 8009398:	eeb0 8a41 	vmov.f32	s16, s2
 800939c:	eef0 8a61 	vmov.f32	s17, s3
 80093a0:	ec55 4b10 	vmov	r4, r5, d0
 80093a4:	b083      	sub	sp, #12
 80093a6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80093aa:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80093ae:	9001      	str	r0, [sp, #4]
 80093b0:	da06      	bge.n	80093c0 <__kernel_sin+0x30>
 80093b2:	ee10 0a10 	vmov	r0, s0
 80093b6:	4629      	mov	r1, r5
 80093b8:	f7f7 fbee 	bl	8000b98 <__aeabi_d2iz>
 80093bc:	2800      	cmp	r0, #0
 80093be:	d051      	beq.n	8009464 <__kernel_sin+0xd4>
 80093c0:	4622      	mov	r2, r4
 80093c2:	462b      	mov	r3, r5
 80093c4:	4620      	mov	r0, r4
 80093c6:	4629      	mov	r1, r5
 80093c8:	f7f7 f936 	bl	8000638 <__aeabi_dmul>
 80093cc:	4682      	mov	sl, r0
 80093ce:	468b      	mov	fp, r1
 80093d0:	4602      	mov	r2, r0
 80093d2:	460b      	mov	r3, r1
 80093d4:	4620      	mov	r0, r4
 80093d6:	4629      	mov	r1, r5
 80093d8:	f7f7 f92e 	bl	8000638 <__aeabi_dmul>
 80093dc:	a341      	add	r3, pc, #260	; (adr r3, 80094e4 <__kernel_sin+0x154>)
 80093de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e2:	4680      	mov	r8, r0
 80093e4:	4689      	mov	r9, r1
 80093e6:	4650      	mov	r0, sl
 80093e8:	4659      	mov	r1, fp
 80093ea:	f7f7 f925 	bl	8000638 <__aeabi_dmul>
 80093ee:	a33f      	add	r3, pc, #252	; (adr r3, 80094ec <__kernel_sin+0x15c>)
 80093f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f4:	f7f6 ff68 	bl	80002c8 <__aeabi_dsub>
 80093f8:	4652      	mov	r2, sl
 80093fa:	465b      	mov	r3, fp
 80093fc:	f7f7 f91c 	bl	8000638 <__aeabi_dmul>
 8009400:	a33c      	add	r3, pc, #240	; (adr r3, 80094f4 <__kernel_sin+0x164>)
 8009402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009406:	f7f6 ff61 	bl	80002cc <__adddf3>
 800940a:	4652      	mov	r2, sl
 800940c:	465b      	mov	r3, fp
 800940e:	f7f7 f913 	bl	8000638 <__aeabi_dmul>
 8009412:	a33a      	add	r3, pc, #232	; (adr r3, 80094fc <__kernel_sin+0x16c>)
 8009414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009418:	f7f6 ff56 	bl	80002c8 <__aeabi_dsub>
 800941c:	4652      	mov	r2, sl
 800941e:	465b      	mov	r3, fp
 8009420:	f7f7 f90a 	bl	8000638 <__aeabi_dmul>
 8009424:	a337      	add	r3, pc, #220	; (adr r3, 8009504 <__kernel_sin+0x174>)
 8009426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800942a:	f7f6 ff4f 	bl	80002cc <__adddf3>
 800942e:	9b01      	ldr	r3, [sp, #4]
 8009430:	4606      	mov	r6, r0
 8009432:	460f      	mov	r7, r1
 8009434:	b9eb      	cbnz	r3, 8009472 <__kernel_sin+0xe2>
 8009436:	4602      	mov	r2, r0
 8009438:	460b      	mov	r3, r1
 800943a:	4650      	mov	r0, sl
 800943c:	4659      	mov	r1, fp
 800943e:	f7f7 f8fb 	bl	8000638 <__aeabi_dmul>
 8009442:	a325      	add	r3, pc, #148	; (adr r3, 80094d8 <__kernel_sin+0x148>)
 8009444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009448:	f7f6 ff3e 	bl	80002c8 <__aeabi_dsub>
 800944c:	4642      	mov	r2, r8
 800944e:	464b      	mov	r3, r9
 8009450:	f7f7 f8f2 	bl	8000638 <__aeabi_dmul>
 8009454:	4602      	mov	r2, r0
 8009456:	460b      	mov	r3, r1
 8009458:	4620      	mov	r0, r4
 800945a:	4629      	mov	r1, r5
 800945c:	f7f6 ff36 	bl	80002cc <__adddf3>
 8009460:	4604      	mov	r4, r0
 8009462:	460d      	mov	r5, r1
 8009464:	ec45 4b10 	vmov	d0, r4, r5
 8009468:	b003      	add	sp, #12
 800946a:	ecbd 8b04 	vpop	{d8-d9}
 800946e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009472:	4b1b      	ldr	r3, [pc, #108]	; (80094e0 <__kernel_sin+0x150>)
 8009474:	ec51 0b18 	vmov	r0, r1, d8
 8009478:	2200      	movs	r2, #0
 800947a:	f7f7 f8dd 	bl	8000638 <__aeabi_dmul>
 800947e:	4632      	mov	r2, r6
 8009480:	ec41 0b19 	vmov	d9, r0, r1
 8009484:	463b      	mov	r3, r7
 8009486:	4640      	mov	r0, r8
 8009488:	4649      	mov	r1, r9
 800948a:	f7f7 f8d5 	bl	8000638 <__aeabi_dmul>
 800948e:	4602      	mov	r2, r0
 8009490:	460b      	mov	r3, r1
 8009492:	ec51 0b19 	vmov	r0, r1, d9
 8009496:	f7f6 ff17 	bl	80002c8 <__aeabi_dsub>
 800949a:	4652      	mov	r2, sl
 800949c:	465b      	mov	r3, fp
 800949e:	f7f7 f8cb 	bl	8000638 <__aeabi_dmul>
 80094a2:	ec53 2b18 	vmov	r2, r3, d8
 80094a6:	f7f6 ff0f 	bl	80002c8 <__aeabi_dsub>
 80094aa:	a30b      	add	r3, pc, #44	; (adr r3, 80094d8 <__kernel_sin+0x148>)
 80094ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094b0:	4606      	mov	r6, r0
 80094b2:	460f      	mov	r7, r1
 80094b4:	4640      	mov	r0, r8
 80094b6:	4649      	mov	r1, r9
 80094b8:	f7f7 f8be 	bl	8000638 <__aeabi_dmul>
 80094bc:	4602      	mov	r2, r0
 80094be:	460b      	mov	r3, r1
 80094c0:	4630      	mov	r0, r6
 80094c2:	4639      	mov	r1, r7
 80094c4:	f7f6 ff02 	bl	80002cc <__adddf3>
 80094c8:	4602      	mov	r2, r0
 80094ca:	460b      	mov	r3, r1
 80094cc:	4620      	mov	r0, r4
 80094ce:	4629      	mov	r1, r5
 80094d0:	f7f6 fefa 	bl	80002c8 <__aeabi_dsub>
 80094d4:	e7c4      	b.n	8009460 <__kernel_sin+0xd0>
 80094d6:	bf00      	nop
 80094d8:	55555549 	.word	0x55555549
 80094dc:	3fc55555 	.word	0x3fc55555
 80094e0:	3fe00000 	.word	0x3fe00000
 80094e4:	5acfd57c 	.word	0x5acfd57c
 80094e8:	3de5d93a 	.word	0x3de5d93a
 80094ec:	8a2b9ceb 	.word	0x8a2b9ceb
 80094f0:	3e5ae5e6 	.word	0x3e5ae5e6
 80094f4:	57b1fe7d 	.word	0x57b1fe7d
 80094f8:	3ec71de3 	.word	0x3ec71de3
 80094fc:	19c161d5 	.word	0x19c161d5
 8009500:	3f2a01a0 	.word	0x3f2a01a0
 8009504:	1110f8a6 	.word	0x1110f8a6
 8009508:	3f811111 	.word	0x3f811111

0800950c <fabs>:
 800950c:	ec51 0b10 	vmov	r0, r1, d0
 8009510:	ee10 2a10 	vmov	r2, s0
 8009514:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009518:	ec43 2b10 	vmov	d0, r2, r3
 800951c:	4770      	bx	lr
	...

08009520 <floor>:
 8009520:	ec51 0b10 	vmov	r0, r1, d0
 8009524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009528:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800952c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8009530:	2e13      	cmp	r6, #19
 8009532:	ee10 5a10 	vmov	r5, s0
 8009536:	ee10 8a10 	vmov	r8, s0
 800953a:	460c      	mov	r4, r1
 800953c:	dc32      	bgt.n	80095a4 <floor+0x84>
 800953e:	2e00      	cmp	r6, #0
 8009540:	da14      	bge.n	800956c <floor+0x4c>
 8009542:	a333      	add	r3, pc, #204	; (adr r3, 8009610 <floor+0xf0>)
 8009544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009548:	f7f6 fec0 	bl	80002cc <__adddf3>
 800954c:	2200      	movs	r2, #0
 800954e:	2300      	movs	r3, #0
 8009550:	f7f7 fb02 	bl	8000b58 <__aeabi_dcmpgt>
 8009554:	b138      	cbz	r0, 8009566 <floor+0x46>
 8009556:	2c00      	cmp	r4, #0
 8009558:	da57      	bge.n	800960a <floor+0xea>
 800955a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800955e:	431d      	orrs	r5, r3
 8009560:	d001      	beq.n	8009566 <floor+0x46>
 8009562:	4c2d      	ldr	r4, [pc, #180]	; (8009618 <floor+0xf8>)
 8009564:	2500      	movs	r5, #0
 8009566:	4621      	mov	r1, r4
 8009568:	4628      	mov	r0, r5
 800956a:	e025      	b.n	80095b8 <floor+0x98>
 800956c:	4f2b      	ldr	r7, [pc, #172]	; (800961c <floor+0xfc>)
 800956e:	4137      	asrs	r7, r6
 8009570:	ea01 0307 	and.w	r3, r1, r7
 8009574:	4303      	orrs	r3, r0
 8009576:	d01f      	beq.n	80095b8 <floor+0x98>
 8009578:	a325      	add	r3, pc, #148	; (adr r3, 8009610 <floor+0xf0>)
 800957a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800957e:	f7f6 fea5 	bl	80002cc <__adddf3>
 8009582:	2200      	movs	r2, #0
 8009584:	2300      	movs	r3, #0
 8009586:	f7f7 fae7 	bl	8000b58 <__aeabi_dcmpgt>
 800958a:	2800      	cmp	r0, #0
 800958c:	d0eb      	beq.n	8009566 <floor+0x46>
 800958e:	2c00      	cmp	r4, #0
 8009590:	bfbe      	ittt	lt
 8009592:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8009596:	fa43 f606 	asrlt.w	r6, r3, r6
 800959a:	19a4      	addlt	r4, r4, r6
 800959c:	ea24 0407 	bic.w	r4, r4, r7
 80095a0:	2500      	movs	r5, #0
 80095a2:	e7e0      	b.n	8009566 <floor+0x46>
 80095a4:	2e33      	cmp	r6, #51	; 0x33
 80095a6:	dd0b      	ble.n	80095c0 <floor+0xa0>
 80095a8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80095ac:	d104      	bne.n	80095b8 <floor+0x98>
 80095ae:	ee10 2a10 	vmov	r2, s0
 80095b2:	460b      	mov	r3, r1
 80095b4:	f7f6 fe8a 	bl	80002cc <__adddf3>
 80095b8:	ec41 0b10 	vmov	d0, r0, r1
 80095bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095c0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80095c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80095c8:	fa23 f707 	lsr.w	r7, r3, r7
 80095cc:	4207      	tst	r7, r0
 80095ce:	d0f3      	beq.n	80095b8 <floor+0x98>
 80095d0:	a30f      	add	r3, pc, #60	; (adr r3, 8009610 <floor+0xf0>)
 80095d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095d6:	f7f6 fe79 	bl	80002cc <__adddf3>
 80095da:	2200      	movs	r2, #0
 80095dc:	2300      	movs	r3, #0
 80095de:	f7f7 fabb 	bl	8000b58 <__aeabi_dcmpgt>
 80095e2:	2800      	cmp	r0, #0
 80095e4:	d0bf      	beq.n	8009566 <floor+0x46>
 80095e6:	2c00      	cmp	r4, #0
 80095e8:	da02      	bge.n	80095f0 <floor+0xd0>
 80095ea:	2e14      	cmp	r6, #20
 80095ec:	d103      	bne.n	80095f6 <floor+0xd6>
 80095ee:	3401      	adds	r4, #1
 80095f0:	ea25 0507 	bic.w	r5, r5, r7
 80095f4:	e7b7      	b.n	8009566 <floor+0x46>
 80095f6:	2301      	movs	r3, #1
 80095f8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80095fc:	fa03 f606 	lsl.w	r6, r3, r6
 8009600:	4435      	add	r5, r6
 8009602:	4545      	cmp	r5, r8
 8009604:	bf38      	it	cc
 8009606:	18e4      	addcc	r4, r4, r3
 8009608:	e7f2      	b.n	80095f0 <floor+0xd0>
 800960a:	2500      	movs	r5, #0
 800960c:	462c      	mov	r4, r5
 800960e:	e7aa      	b.n	8009566 <floor+0x46>
 8009610:	8800759c 	.word	0x8800759c
 8009614:	7e37e43c 	.word	0x7e37e43c
 8009618:	bff00000 	.word	0xbff00000
 800961c:	000fffff 	.word	0x000fffff

08009620 <scalbn>:
 8009620:	b570      	push	{r4, r5, r6, lr}
 8009622:	ec55 4b10 	vmov	r4, r5, d0
 8009626:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800962a:	4606      	mov	r6, r0
 800962c:	462b      	mov	r3, r5
 800962e:	b99a      	cbnz	r2, 8009658 <scalbn+0x38>
 8009630:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009634:	4323      	orrs	r3, r4
 8009636:	d036      	beq.n	80096a6 <scalbn+0x86>
 8009638:	4b39      	ldr	r3, [pc, #228]	; (8009720 <scalbn+0x100>)
 800963a:	4629      	mov	r1, r5
 800963c:	ee10 0a10 	vmov	r0, s0
 8009640:	2200      	movs	r2, #0
 8009642:	f7f6 fff9 	bl	8000638 <__aeabi_dmul>
 8009646:	4b37      	ldr	r3, [pc, #220]	; (8009724 <scalbn+0x104>)
 8009648:	429e      	cmp	r6, r3
 800964a:	4604      	mov	r4, r0
 800964c:	460d      	mov	r5, r1
 800964e:	da10      	bge.n	8009672 <scalbn+0x52>
 8009650:	a32b      	add	r3, pc, #172	; (adr r3, 8009700 <scalbn+0xe0>)
 8009652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009656:	e03a      	b.n	80096ce <scalbn+0xae>
 8009658:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800965c:	428a      	cmp	r2, r1
 800965e:	d10c      	bne.n	800967a <scalbn+0x5a>
 8009660:	ee10 2a10 	vmov	r2, s0
 8009664:	4620      	mov	r0, r4
 8009666:	4629      	mov	r1, r5
 8009668:	f7f6 fe30 	bl	80002cc <__adddf3>
 800966c:	4604      	mov	r4, r0
 800966e:	460d      	mov	r5, r1
 8009670:	e019      	b.n	80096a6 <scalbn+0x86>
 8009672:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009676:	460b      	mov	r3, r1
 8009678:	3a36      	subs	r2, #54	; 0x36
 800967a:	4432      	add	r2, r6
 800967c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009680:	428a      	cmp	r2, r1
 8009682:	dd08      	ble.n	8009696 <scalbn+0x76>
 8009684:	2d00      	cmp	r5, #0
 8009686:	a120      	add	r1, pc, #128	; (adr r1, 8009708 <scalbn+0xe8>)
 8009688:	e9d1 0100 	ldrd	r0, r1, [r1]
 800968c:	da1c      	bge.n	80096c8 <scalbn+0xa8>
 800968e:	a120      	add	r1, pc, #128	; (adr r1, 8009710 <scalbn+0xf0>)
 8009690:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009694:	e018      	b.n	80096c8 <scalbn+0xa8>
 8009696:	2a00      	cmp	r2, #0
 8009698:	dd08      	ble.n	80096ac <scalbn+0x8c>
 800969a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800969e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80096a2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80096a6:	ec45 4b10 	vmov	d0, r4, r5
 80096aa:	bd70      	pop	{r4, r5, r6, pc}
 80096ac:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80096b0:	da19      	bge.n	80096e6 <scalbn+0xc6>
 80096b2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80096b6:	429e      	cmp	r6, r3
 80096b8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80096bc:	dd0a      	ble.n	80096d4 <scalbn+0xb4>
 80096be:	a112      	add	r1, pc, #72	; (adr r1, 8009708 <scalbn+0xe8>)
 80096c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d1e2      	bne.n	800968e <scalbn+0x6e>
 80096c8:	a30f      	add	r3, pc, #60	; (adr r3, 8009708 <scalbn+0xe8>)
 80096ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ce:	f7f6 ffb3 	bl	8000638 <__aeabi_dmul>
 80096d2:	e7cb      	b.n	800966c <scalbn+0x4c>
 80096d4:	a10a      	add	r1, pc, #40	; (adr r1, 8009700 <scalbn+0xe0>)
 80096d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d0b8      	beq.n	8009650 <scalbn+0x30>
 80096de:	a10e      	add	r1, pc, #56	; (adr r1, 8009718 <scalbn+0xf8>)
 80096e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096e4:	e7b4      	b.n	8009650 <scalbn+0x30>
 80096e6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80096ea:	3236      	adds	r2, #54	; 0x36
 80096ec:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80096f0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80096f4:	4620      	mov	r0, r4
 80096f6:	4b0c      	ldr	r3, [pc, #48]	; (8009728 <scalbn+0x108>)
 80096f8:	2200      	movs	r2, #0
 80096fa:	e7e8      	b.n	80096ce <scalbn+0xae>
 80096fc:	f3af 8000 	nop.w
 8009700:	c2f8f359 	.word	0xc2f8f359
 8009704:	01a56e1f 	.word	0x01a56e1f
 8009708:	8800759c 	.word	0x8800759c
 800970c:	7e37e43c 	.word	0x7e37e43c
 8009710:	8800759c 	.word	0x8800759c
 8009714:	fe37e43c 	.word	0xfe37e43c
 8009718:	c2f8f359 	.word	0xc2f8f359
 800971c:	81a56e1f 	.word	0x81a56e1f
 8009720:	43500000 	.word	0x43500000
 8009724:	ffff3cb0 	.word	0xffff3cb0
 8009728:	3c900000 	.word	0x3c900000

0800972c <atanf>:
 800972c:	b538      	push	{r3, r4, r5, lr}
 800972e:	ee10 5a10 	vmov	r5, s0
 8009732:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8009736:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800973a:	eef0 7a40 	vmov.f32	s15, s0
 800973e:	db10      	blt.n	8009762 <atanf+0x36>
 8009740:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8009744:	dd04      	ble.n	8009750 <atanf+0x24>
 8009746:	ee70 7a00 	vadd.f32	s15, s0, s0
 800974a:	eeb0 0a67 	vmov.f32	s0, s15
 800974e:	bd38      	pop	{r3, r4, r5, pc}
 8009750:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8009888 <atanf+0x15c>
 8009754:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800988c <atanf+0x160>
 8009758:	2d00      	cmp	r5, #0
 800975a:	bfd8      	it	le
 800975c:	eef0 7a40 	vmovle.f32	s15, s0
 8009760:	e7f3      	b.n	800974a <atanf+0x1e>
 8009762:	4b4b      	ldr	r3, [pc, #300]	; (8009890 <atanf+0x164>)
 8009764:	429c      	cmp	r4, r3
 8009766:	dc10      	bgt.n	800978a <atanf+0x5e>
 8009768:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800976c:	da0a      	bge.n	8009784 <atanf+0x58>
 800976e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8009894 <atanf+0x168>
 8009772:	ee30 7a07 	vadd.f32	s14, s0, s14
 8009776:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800977a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800977e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009782:	dce2      	bgt.n	800974a <atanf+0x1e>
 8009784:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009788:	e013      	b.n	80097b2 <atanf+0x86>
 800978a:	f000 f8a3 	bl	80098d4 <fabsf>
 800978e:	4b42      	ldr	r3, [pc, #264]	; (8009898 <atanf+0x16c>)
 8009790:	429c      	cmp	r4, r3
 8009792:	dc4f      	bgt.n	8009834 <atanf+0x108>
 8009794:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8009798:	429c      	cmp	r4, r3
 800979a:	dc41      	bgt.n	8009820 <atanf+0xf4>
 800979c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80097a0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80097a4:	eea0 7a27 	vfma.f32	s14, s0, s15
 80097a8:	2300      	movs	r3, #0
 80097aa:	ee30 0a27 	vadd.f32	s0, s0, s15
 80097ae:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80097b2:	1c5a      	adds	r2, r3, #1
 80097b4:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80097b8:	eddf 5a38 	vldr	s11, [pc, #224]	; 800989c <atanf+0x170>
 80097bc:	ed9f 6a38 	vldr	s12, [pc, #224]	; 80098a0 <atanf+0x174>
 80097c0:	ed9f 5a38 	vldr	s10, [pc, #224]	; 80098a4 <atanf+0x178>
 80097c4:	ed9f 0a38 	vldr	s0, [pc, #224]	; 80098a8 <atanf+0x17c>
 80097c8:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80097cc:	eea7 6a25 	vfma.f32	s12, s14, s11
 80097d0:	eddf 5a36 	vldr	s11, [pc, #216]	; 80098ac <atanf+0x180>
 80097d4:	eee6 5a07 	vfma.f32	s11, s12, s14
 80097d8:	ed9f 6a35 	vldr	s12, [pc, #212]	; 80098b0 <atanf+0x184>
 80097dc:	eea5 6a87 	vfma.f32	s12, s11, s14
 80097e0:	eddf 5a34 	vldr	s11, [pc, #208]	; 80098b4 <atanf+0x188>
 80097e4:	eee6 5a07 	vfma.f32	s11, s12, s14
 80097e8:	ed9f 6a33 	vldr	s12, [pc, #204]	; 80098b8 <atanf+0x18c>
 80097ec:	eea5 6a87 	vfma.f32	s12, s11, s14
 80097f0:	eddf 5a32 	vldr	s11, [pc, #200]	; 80098bc <atanf+0x190>
 80097f4:	eee7 5a05 	vfma.f32	s11, s14, s10
 80097f8:	ed9f 5a31 	vldr	s10, [pc, #196]	; 80098c0 <atanf+0x194>
 80097fc:	eea5 5a87 	vfma.f32	s10, s11, s14
 8009800:	eddf 5a30 	vldr	s11, [pc, #192]	; 80098c4 <atanf+0x198>
 8009804:	eee5 5a07 	vfma.f32	s11, s10, s14
 8009808:	eea5 0a87 	vfma.f32	s0, s11, s14
 800980c:	ee20 0a07 	vmul.f32	s0, s0, s14
 8009810:	eea6 0a26 	vfma.f32	s0, s12, s13
 8009814:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009818:	d121      	bne.n	800985e <atanf+0x132>
 800981a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800981e:	e794      	b.n	800974a <atanf+0x1e>
 8009820:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8009824:	ee30 7a67 	vsub.f32	s14, s0, s15
 8009828:	ee30 0a27 	vadd.f32	s0, s0, s15
 800982c:	2301      	movs	r3, #1
 800982e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009832:	e7be      	b.n	80097b2 <atanf+0x86>
 8009834:	4b24      	ldr	r3, [pc, #144]	; (80098c8 <atanf+0x19c>)
 8009836:	429c      	cmp	r4, r3
 8009838:	dc0b      	bgt.n	8009852 <atanf+0x126>
 800983a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800983e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009842:	eea0 7a27 	vfma.f32	s14, s0, s15
 8009846:	2302      	movs	r3, #2
 8009848:	ee70 6a67 	vsub.f32	s13, s0, s15
 800984c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009850:	e7af      	b.n	80097b2 <atanf+0x86>
 8009852:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8009856:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800985a:	2303      	movs	r3, #3
 800985c:	e7a9      	b.n	80097b2 <atanf+0x86>
 800985e:	4a1b      	ldr	r2, [pc, #108]	; (80098cc <atanf+0x1a0>)
 8009860:	491b      	ldr	r1, [pc, #108]	; (80098d0 <atanf+0x1a4>)
 8009862:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8009866:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800986a:	ed93 7a00 	vldr	s14, [r3]
 800986e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8009872:	2d00      	cmp	r5, #0
 8009874:	ee70 7a67 	vsub.f32	s15, s0, s15
 8009878:	ed92 0a00 	vldr	s0, [r2]
 800987c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8009880:	bfb8      	it	lt
 8009882:	eef1 7a67 	vneglt.f32	s15, s15
 8009886:	e760      	b.n	800974a <atanf+0x1e>
 8009888:	3fc90fdb 	.word	0x3fc90fdb
 800988c:	bfc90fdb 	.word	0xbfc90fdb
 8009890:	3edfffff 	.word	0x3edfffff
 8009894:	7149f2ca 	.word	0x7149f2ca
 8009898:	3f97ffff 	.word	0x3f97ffff
 800989c:	3c8569d7 	.word	0x3c8569d7
 80098a0:	3d4bda59 	.word	0x3d4bda59
 80098a4:	bd15a221 	.word	0xbd15a221
 80098a8:	be4ccccd 	.word	0xbe4ccccd
 80098ac:	3d886b35 	.word	0x3d886b35
 80098b0:	3dba2e6e 	.word	0x3dba2e6e
 80098b4:	3e124925 	.word	0x3e124925
 80098b8:	3eaaaaab 	.word	0x3eaaaaab
 80098bc:	bd6ef16b 	.word	0xbd6ef16b
 80098c0:	bd9d8795 	.word	0xbd9d8795
 80098c4:	bde38e38 	.word	0xbde38e38
 80098c8:	401bffff 	.word	0x401bffff
 80098cc:	0800a108 	.word	0x0800a108
 80098d0:	0800a118 	.word	0x0800a118

080098d4 <fabsf>:
 80098d4:	ee10 3a10 	vmov	r3, s0
 80098d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80098dc:	ee00 3a10 	vmov	s0, r3
 80098e0:	4770      	bx	lr
	...

080098e4 <_init>:
 80098e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098e6:	bf00      	nop
 80098e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098ea:	bc08      	pop	{r3}
 80098ec:	469e      	mov	lr, r3
 80098ee:	4770      	bx	lr

080098f0 <_fini>:
 80098f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098f2:	bf00      	nop
 80098f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098f6:	bc08      	pop	{r3}
 80098f8:	469e      	mov	lr, r3
 80098fa:	4770      	bx	lr
