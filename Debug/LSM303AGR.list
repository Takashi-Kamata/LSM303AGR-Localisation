
LSM303AGR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092ac  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e8  08009480  08009480  00019480  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b68  08009b68  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08009b68  08009b68  00019b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b70  08009b70  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b70  08009b70  00019b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b74  08009b74  00019b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08009b78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  200001e4  08009d5c  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000300  08009d5c  00020300  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000df34  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c02  00000000  00000000  0002e148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a08  00000000  00000000  0002fd50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000988  00000000  00000000  00030758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022624  00000000  00000000  000310e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000da92  00000000  00000000  00053704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd0cd  00000000  00000000  00061196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012e263  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ddc  00000000  00000000  0012e2b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009464 	.word	0x08009464

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e8 	.word	0x200001e8
 800020c:	08009464 	.word	0x08009464

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b96e 	b.w	8000f7c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468c      	mov	ip, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8083 	bne.w	8000dce <__udivmoddi4+0x116>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d947      	bls.n	8000d5e <__udivmoddi4+0xa6>
 8000cce:	fab2 f282 	clz	r2, r2
 8000cd2:	b142      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	f1c2 0020 	rsb	r0, r2, #32
 8000cd8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cdc:	4091      	lsls	r1, r2
 8000cde:	4097      	lsls	r7, r2
 8000ce0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbbc f6f8 	udiv	r6, ip, r8
 8000cf0:	fa1f fe87 	uxth.w	lr, r7
 8000cf4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfc:	fb06 f10e 	mul.w	r1, r6, lr
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18fb      	adds	r3, r7, r3
 8000d06:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d0a:	f080 8119 	bcs.w	8000f40 <__udivmoddi4+0x288>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8116 	bls.w	8000f40 <__udivmoddi4+0x288>
 8000d14:	3e02      	subs	r6, #2
 8000d16:	443b      	add	r3, r7
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d20:	fb08 3310 	mls	r3, r8, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d2c:	45a6      	cmp	lr, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	193c      	adds	r4, r7, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d36:	f080 8105 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d3a:	45a6      	cmp	lr, r4
 8000d3c:	f240 8102 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d40:	3802      	subs	r0, #2
 8000d42:	443c      	add	r4, r7
 8000d44:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d48:	eba4 040e 	sub.w	r4, r4, lr
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	b11d      	cbz	r5, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c5 4300 	strd	r4, r3, [r5]
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	b902      	cbnz	r2, 8000d62 <__udivmoddi4+0xaa>
 8000d60:	deff      	udf	#255	; 0xff
 8000d62:	fab2 f282 	clz	r2, r2
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	d150      	bne.n	8000e0c <__udivmoddi4+0x154>
 8000d6a:	1bcb      	subs	r3, r1, r7
 8000d6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d70:	fa1f f887 	uxth.w	r8, r7
 8000d74:	2601      	movs	r6, #1
 8000d76:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d7a:	0c21      	lsrs	r1, r4, #16
 8000d7c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb08 f30c 	mul.w	r3, r8, ip
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0xe2>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	f200 80e9 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1ac9      	subs	r1, r1, r3
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000da8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x10c>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x10a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80d9 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e7bf      	b.n	8000d4e <__udivmoddi4+0x96>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0x12e>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80b1 	beq.w	8000f3a <__udivmoddi4+0x282>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x1cc>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0x140>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80b8 	bhi.w	8000f68 <__udivmoddi4+0x2b0>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0103 	sbc.w	r1, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	468c      	mov	ip, r1
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0a8      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000e06:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e0a:	e7a5      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f603 	lsr.w	r6, r0, r3
 8000e14:	4097      	lsls	r7, r2
 8000e16:	fa01 f002 	lsl.w	r0, r1, r2
 8000e1a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1e:	40d9      	lsrs	r1, r3
 8000e20:	4330      	orrs	r0, r6
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e28:	fa1f f887 	uxth.w	r8, r7
 8000e2c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e34:	fb06 f108 	mul.w	r1, r6, r8
 8000e38:	4299      	cmp	r1, r3
 8000e3a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3e:	d909      	bls.n	8000e54 <__udivmoddi4+0x19c>
 8000e40:	18fb      	adds	r3, r7, r3
 8000e42:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e46:	f080 808d 	bcs.w	8000f64 <__udivmoddi4+0x2ac>
 8000e4a:	4299      	cmp	r1, r3
 8000e4c:	f240 808a 	bls.w	8000f64 <__udivmoddi4+0x2ac>
 8000e50:	3e02      	subs	r6, #2
 8000e52:	443b      	add	r3, r7
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b281      	uxth	r1, r0
 8000e58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e64:	fb00 f308 	mul.w	r3, r0, r8
 8000e68:	428b      	cmp	r3, r1
 8000e6a:	d907      	bls.n	8000e7c <__udivmoddi4+0x1c4>
 8000e6c:	1879      	adds	r1, r7, r1
 8000e6e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e72:	d273      	bcs.n	8000f5c <__udivmoddi4+0x2a4>
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d971      	bls.n	8000f5c <__udivmoddi4+0x2a4>
 8000e78:	3802      	subs	r0, #2
 8000e7a:	4439      	add	r1, r7
 8000e7c:	1acb      	subs	r3, r1, r3
 8000e7e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e82:	e778      	b.n	8000d76 <__udivmoddi4+0xbe>
 8000e84:	f1c6 0c20 	rsb	ip, r6, #32
 8000e88:	fa03 f406 	lsl.w	r4, r3, r6
 8000e8c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e90:	431c      	orrs	r4, r3
 8000e92:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e9e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ea2:	431f      	orrs	r7, r3
 8000ea4:	0c3b      	lsrs	r3, r7, #16
 8000ea6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eaa:	fa1f f884 	uxth.w	r8, r4
 8000eae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eb2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000eb6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eba:	458a      	cmp	sl, r1
 8000ebc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x220>
 8000ec6:	1861      	adds	r1, r4, r1
 8000ec8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ecc:	d248      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000ece:	458a      	cmp	sl, r1
 8000ed0:	d946      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000ed2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ed6:	4421      	add	r1, r4
 8000ed8:	eba1 010a 	sub.w	r1, r1, sl
 8000edc:	b2bf      	uxth	r7, r7
 8000ede:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ee2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ee6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eea:	fb00 f808 	mul.w	r8, r0, r8
 8000eee:	45b8      	cmp	r8, r7
 8000ef0:	d907      	bls.n	8000f02 <__udivmoddi4+0x24a>
 8000ef2:	19e7      	adds	r7, r4, r7
 8000ef4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ef8:	d22e      	bcs.n	8000f58 <__udivmoddi4+0x2a0>
 8000efa:	45b8      	cmp	r8, r7
 8000efc:	d92c      	bls.n	8000f58 <__udivmoddi4+0x2a0>
 8000efe:	3802      	subs	r0, #2
 8000f00:	4427      	add	r7, r4
 8000f02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f06:	eba7 0708 	sub.w	r7, r7, r8
 8000f0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f0e:	454f      	cmp	r7, r9
 8000f10:	46c6      	mov	lr, r8
 8000f12:	4649      	mov	r1, r9
 8000f14:	d31a      	bcc.n	8000f4c <__udivmoddi4+0x294>
 8000f16:	d017      	beq.n	8000f48 <__udivmoddi4+0x290>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x27a>
 8000f1a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f1e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f22:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f26:	40f2      	lsrs	r2, r6
 8000f28:	ea4c 0202 	orr.w	r2, ip, r2
 8000f2c:	40f7      	lsrs	r7, r6
 8000f2e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f32:	2600      	movs	r6, #0
 8000f34:	4631      	mov	r1, r6
 8000f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e70b      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6fd      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f48:	4543      	cmp	r3, r8
 8000f4a:	d2e5      	bcs.n	8000f18 <__udivmoddi4+0x260>
 8000f4c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f50:	eb69 0104 	sbc.w	r1, r9, r4
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7df      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e7d2      	b.n	8000f02 <__udivmoddi4+0x24a>
 8000f5c:	4660      	mov	r0, ip
 8000f5e:	e78d      	b.n	8000e7c <__udivmoddi4+0x1c4>
 8000f60:	4681      	mov	r9, r0
 8000f62:	e7b9      	b.n	8000ed8 <__udivmoddi4+0x220>
 8000f64:	4666      	mov	r6, ip
 8000f66:	e775      	b.n	8000e54 <__udivmoddi4+0x19c>
 8000f68:	4630      	mov	r0, r6
 8000f6a:	e74a      	b.n	8000e02 <__udivmoddi4+0x14a>
 8000f6c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f70:	4439      	add	r1, r7
 8000f72:	e713      	b.n	8000d9c <__udivmoddi4+0xe4>
 8000f74:	3802      	subs	r0, #2
 8000f76:	443c      	add	r4, r7
 8000f78:	e724      	b.n	8000dc4 <__udivmoddi4+0x10c>
 8000f7a:	bf00      	nop

08000f7c <__aeabi_idiv0>:
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <main>:
 * Step length
 */
float step_length = 1.33;//in meter

int main(void)
{
 8000f80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f84:	b0e7      	sub	sp, #412	; 0x19c
 8000f86:	af04      	add	r7, sp, #16
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f88:	f001 fcec 	bl	8002964 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8000f8c:	f001 f9cc 	bl	8002328 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f90:	f001 fa90 	bl	80024b4 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000f94:	f001 fa64 	bl	8002460 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 8000f98:	f001 fa34 	bl	8002404 <MX_I2C1_Init>

	/* USER CODE BEGIN 2 */
	__HAL_RCC_I2C1_CLK_ENABLE();
 8000f9c:	463b      	mov	r3, r7
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	4b45      	ldr	r3, [pc, #276]	; (80010b8 <main+0x138>)
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa6:	4a44      	ldr	r2, [pc, #272]	; (80010b8 <main+0x138>)
 8000fa8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fac:	6413      	str	r3, [r2, #64]	; 0x40
 8000fae:	4b42      	ldr	r3, [pc, #264]	; (80010b8 <main+0x138>)
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb2:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8000fb6:	463b      	mov	r3, r7
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	463b      	mov	r3, r7
 8000fbc:	681b      	ldr	r3, [r3, #0]
	char aTxBuffer[16];
	char clear[7] = "\x1B[2J";
 8000fbe:	4a3f      	ldr	r2, [pc, #252]	; (80010bc <main+0x13c>)
 8000fc0:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8000fc4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fc8:	6018      	str	r0, [r3, #0]
 8000fca:	3304      	adds	r3, #4
 8000fcc:	7019      	strb	r1, [r3, #0]
 8000fce:	f107 03bd 	add.w	r3, r7, #189	; 0xbd
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	801a      	strh	r2, [r3, #0]

	/*
	* Clear console
	*/
	HAL_UART_Transmit(&huart2,  (uint8_t*)clear, sizeof(clear), 100);
 8000fd6:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 8000fda:	2364      	movs	r3, #100	; 0x64
 8000fdc:	2207      	movs	r2, #7
 8000fde:	4838      	ldr	r0, [pc, #224]	; (80010c0 <main+0x140>)
 8000fe0:	f003 fea7 	bl	8004d32 <HAL_UART_Transmit>

	/*
	 * I2C SCANNER
	 */
	HAL_UART_Transmit(&huart2,  (uint8_t*)"Scanning\n\r", 11, 100);
 8000fe4:	2364      	movs	r3, #100	; 0x64
 8000fe6:	220b      	movs	r2, #11
 8000fe8:	4936      	ldr	r1, [pc, #216]	; (80010c4 <main+0x144>)
 8000fea:	4835      	ldr	r0, [pc, #212]	; (80010c0 <main+0x140>)
 8000fec:	f003 fea1 	bl	8004d32 <HAL_UART_Transmit>
	for (uint8_t i = 0; i < 128; i++) {
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	f887 3173 	strb.w	r3, [r7, #371]	; 0x173
 8000ff6:	e021      	b.n	800103c <main+0xbc>
		if (HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 3, 5) == HAL_OK) {
 8000ff8:	f897 3173 	ldrb.w	r3, [r7, #371]	; 0x173
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	b299      	uxth	r1, r3
 8001002:	2305      	movs	r3, #5
 8001004:	2203      	movs	r2, #3
 8001006:	4830      	ldr	r0, [pc, #192]	; (80010c8 <main+0x148>)
 8001008:	f002 fc52 	bl	80038b0 <HAL_I2C_IsDeviceReady>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d10f      	bne.n	8001032 <main+0xb2>
			HAL_UART_Transmit(&huart2, (uint8_t*)aTxBuffer, sprintf(aTxBuffer, "%d\n\r", i), 100);
 8001012:	f897 2173 	ldrb.w	r2, [r7, #371]	; 0x173
 8001016:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800101a:	492c      	ldr	r1, [pc, #176]	; (80010cc <main+0x14c>)
 800101c:	4618      	mov	r0, r3
 800101e:	f004 fded 	bl	8005bfc <siprintf>
 8001022:	4603      	mov	r3, r0
 8001024:	b29a      	uxth	r2, r3
 8001026:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 800102a:	2364      	movs	r3, #100	; 0x64
 800102c:	4824      	ldr	r0, [pc, #144]	; (80010c0 <main+0x140>)
 800102e:	f003 fe80 	bl	8004d32 <HAL_UART_Transmit>
	for (uint8_t i = 0; i < 128; i++) {
 8001032:	f897 3173 	ldrb.w	r3, [r7, #371]	; 0x173
 8001036:	3301      	adds	r3, #1
 8001038:	f887 3173 	strb.w	r3, [r7, #371]	; 0x173
 800103c:	f997 3173 	ldrsb.w	r3, [r7, #371]	; 0x173
 8001040:	2b00      	cmp	r3, #0
 8001042:	dad9      	bge.n	8000ff8 <main+0x78>
		}
	}
	HAL_UART_Transmit(&huart2,  (uint8_t*)"Scanned\n\r", 10, 100);
 8001044:	2364      	movs	r3, #100	; 0x64
 8001046:	220a      	movs	r2, #10
 8001048:	4921      	ldr	r1, [pc, #132]	; (80010d0 <main+0x150>)
 800104a:	481d      	ldr	r0, [pc, #116]	; (80010c0 <main+0x140>)
 800104c:	f003 fe71 	bl	8004d32 <HAL_UART_Transmit>

	/*
	 * Start up
	 */
	HAL_Delay(500);
 8001050:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001054:	f001 fcf8 	bl	8002a48 <HAL_Delay>
	 * Accelerometer
	 */
	/*
	 * Check Communication from Accelerometer
	 */
	char acc_enabled[30] = "Accelerometer Enabled\n\r";
 8001058:	4b1e      	ldr	r3, [pc, #120]	; (80010d4 <main+0x154>)
 800105a:	f107 0498 	add.w	r4, r7, #152	; 0x98
 800105e:	461d      	mov	r5, r3
 8001060:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001062:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001064:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001068:	e884 0003 	stmia.w	r4, {r0, r1}
 800106c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	809a      	strh	r2, [r3, #4]
	uint8_t who_am_i_a_val;
	HAL_StatusTypeDef who_am_i_a_status = HAL_I2C_Mem_Read(&hi2c1, (ACC<<1)|0x1 , WHO_AM_I_A, 1, &who_am_i_a_val, 1, 50);
 8001076:	2332      	movs	r3, #50	; 0x32
 8001078:	9302      	str	r3, [sp, #8]
 800107a:	2301      	movs	r3, #1
 800107c:	9301      	str	r3, [sp, #4]
 800107e:	f107 0397 	add.w	r3, r7, #151	; 0x97
 8001082:	9300      	str	r3, [sp, #0]
 8001084:	2301      	movs	r3, #1
 8001086:	220f      	movs	r2, #15
 8001088:	2133      	movs	r1, #51	; 0x33
 800108a:	480f      	ldr	r0, [pc, #60]	; (80010c8 <main+0x148>)
 800108c:	f002 f9ea 	bl	8003464 <HAL_I2C_Mem_Read>
 8001090:	4603      	mov	r3, r0
 8001092:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
	char ACC_Buffer[32];
	if (who_am_i_a_status == HAL_OK && who_am_i_a_val == 51) {
 8001096:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800109a:	2b00      	cmp	r3, #0
 800109c:	d11c      	bne.n	80010d8 <main+0x158>
 800109e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80010a2:	2b33      	cmp	r3, #51	; 0x33
 80010a4:	d118      	bne.n	80010d8 <main+0x158>
		HAL_UART_Transmit(&huart2, (uint8_t*)acc_enabled , sizeof(acc_enabled), 100);
 80010a6:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80010aa:	2364      	movs	r3, #100	; 0x64
 80010ac:	221e      	movs	r2, #30
 80010ae:	4804      	ldr	r0, [pc, #16]	; (80010c0 <main+0x140>)
 80010b0:	f003 fe3f 	bl	8004d32 <HAL_UART_Transmit>
 80010b4:	e024      	b.n	8001100 <main+0x180>
 80010b6:	bf00      	nop
 80010b8:	40023800 	.word	0x40023800
 80010bc:	080094fc 	.word	0x080094fc
 80010c0:	200002a8 	.word	0x200002a8
 80010c4:	08009480 	.word	0x08009480
 80010c8:	20000254 	.word	0x20000254
 80010cc:	0800948c 	.word	0x0800948c
 80010d0:	08009494 	.word	0x08009494
 80010d4:	08009504 	.word	0x08009504
	} else if (who_am_i_a_status != HAL_OK) {
 80010d8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d00f      	beq.n	8001100 <main+0x180>
		HAL_UART_Transmit(&huart2,  (uint8_t*)ACC_Buffer, sprintf(ACC_Buffer, "%d\n\r", who_am_i_a_status), 100);
 80010e0:	f897 212f 	ldrb.w	r2, [r7, #303]	; 0x12f
 80010e4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80010e8:	498e      	ldr	r1, [pc, #568]	; (8001324 <main+0x3a4>)
 80010ea:	4618      	mov	r0, r3
 80010ec:	f004 fd86 	bl	8005bfc <siprintf>
 80010f0:	4603      	mov	r3, r0
 80010f2:	b29a      	uxth	r2, r3
 80010f4:	f107 0174 	add.w	r1, r7, #116	; 0x74
 80010f8:	2364      	movs	r3, #100	; 0x64
 80010fa:	488b      	ldr	r0, [pc, #556]	; (8001328 <main+0x3a8>)
 80010fc:	f003 fe19 	bl	8004d32 <HAL_UART_Transmit>
	}
	/*
	 * Set Control Registers
	 */
	uint8_t CTRL_REG1_A_val = 0x57;
 8001100:	f107 0373 	add.w	r3, r7, #115	; 0x73
 8001104:	2257      	movs	r2, #87	; 0x57
 8001106:	701a      	strb	r2, [r3, #0]
	uint8_t CTRL_REG2_A_val = 0x00;
 8001108:	f107 0372 	add.w	r3, r7, #114	; 0x72
 800110c:	2200      	movs	r2, #0
 800110e:	701a      	strb	r2, [r3, #0]
	uint8_t CTRL_REG3_A_val = 0x00;
 8001110:	f107 0371 	add.w	r3, r7, #113	; 0x71
 8001114:	2200      	movs	r2, #0
 8001116:	701a      	strb	r2, [r3, #0]
	uint8_t CTRL_REG4_A_val = 0x81;
 8001118:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800111c:	2281      	movs	r2, #129	; 0x81
 800111e:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef CTRL_REG1_A_status = HAL_I2C_Mem_Write(&hi2c1, (ACC<<1), CTRL_REG1_A, 1, &CTRL_REG1_A_val, 1, 50);
 8001120:	2332      	movs	r3, #50	; 0x32
 8001122:	9302      	str	r3, [sp, #8]
 8001124:	2301      	movs	r3, #1
 8001126:	9301      	str	r3, [sp, #4]
 8001128:	f107 0373 	add.w	r3, r7, #115	; 0x73
 800112c:	9300      	str	r3, [sp, #0]
 800112e:	2301      	movs	r3, #1
 8001130:	2220      	movs	r2, #32
 8001132:	2132      	movs	r1, #50	; 0x32
 8001134:	487d      	ldr	r0, [pc, #500]	; (800132c <main+0x3ac>)
 8001136:	f002 f89b 	bl	8003270 <HAL_I2C_Mem_Write>
 800113a:	4603      	mov	r3, r0
 800113c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
	HAL_StatusTypeDef CTRL_REG2_A_status = HAL_I2C_Mem_Write(&hi2c1, (ACC<<1), CTRL_REG2_A, 1, &CTRL_REG2_A_val, 1, 50);
 8001140:	2332      	movs	r3, #50	; 0x32
 8001142:	9302      	str	r3, [sp, #8]
 8001144:	2301      	movs	r3, #1
 8001146:	9301      	str	r3, [sp, #4]
 8001148:	f107 0372 	add.w	r3, r7, #114	; 0x72
 800114c:	9300      	str	r3, [sp, #0]
 800114e:	2301      	movs	r3, #1
 8001150:	2221      	movs	r2, #33	; 0x21
 8001152:	2132      	movs	r1, #50	; 0x32
 8001154:	4875      	ldr	r0, [pc, #468]	; (800132c <main+0x3ac>)
 8001156:	f002 f88b 	bl	8003270 <HAL_I2C_Mem_Write>
 800115a:	4603      	mov	r3, r0
 800115c:	f887 312d 	strb.w	r3, [r7, #301]	; 0x12d
	HAL_StatusTypeDef CTRL_REG3_A_status = HAL_I2C_Mem_Write(&hi2c1, (ACC<<1), CTRL_REG3_A, 1, &CTRL_REG3_A_val, 1, 50);
 8001160:	2332      	movs	r3, #50	; 0x32
 8001162:	9302      	str	r3, [sp, #8]
 8001164:	2301      	movs	r3, #1
 8001166:	9301      	str	r3, [sp, #4]
 8001168:	f107 0371 	add.w	r3, r7, #113	; 0x71
 800116c:	9300      	str	r3, [sp, #0]
 800116e:	2301      	movs	r3, #1
 8001170:	2222      	movs	r2, #34	; 0x22
 8001172:	2132      	movs	r1, #50	; 0x32
 8001174:	486d      	ldr	r0, [pc, #436]	; (800132c <main+0x3ac>)
 8001176:	f002 f87b 	bl	8003270 <HAL_I2C_Mem_Write>
 800117a:	4603      	mov	r3, r0
 800117c:	f887 312c 	strb.w	r3, [r7, #300]	; 0x12c
	HAL_StatusTypeDef CTRL_REG4_A_status = HAL_I2C_Mem_Write(&hi2c1, (ACC<<1), CTRL_REG4_A, 1, &CTRL_REG4_A_val, 1, 50);
 8001180:	2332      	movs	r3, #50	; 0x32
 8001182:	9302      	str	r3, [sp, #8]
 8001184:	2301      	movs	r3, #1
 8001186:	9301      	str	r3, [sp, #4]
 8001188:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800118c:	9300      	str	r3, [sp, #0]
 800118e:	2301      	movs	r3, #1
 8001190:	2223      	movs	r2, #35	; 0x23
 8001192:	2132      	movs	r1, #50	; 0x32
 8001194:	4865      	ldr	r0, [pc, #404]	; (800132c <main+0x3ac>)
 8001196:	f002 f86b 	bl	8003270 <HAL_I2C_Mem_Write>
 800119a:	4603      	mov	r3, r0
 800119c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b

	if (CTRL_REG1_A_status != HAL_OK) {
 80011a0:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d00f      	beq.n	80011c8 <main+0x248>
		HAL_UART_Transmit(&huart2,  (uint8_t*)ACC_Buffer, sprintf(ACC_Buffer, "Failed REG1:  %d\n\r", CTRL_REG1_A_status), 100);
 80011a8:	f897 212e 	ldrb.w	r2, [r7, #302]	; 0x12e
 80011ac:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80011b0:	495f      	ldr	r1, [pc, #380]	; (8001330 <main+0x3b0>)
 80011b2:	4618      	mov	r0, r3
 80011b4:	f004 fd22 	bl	8005bfc <siprintf>
 80011b8:	4603      	mov	r3, r0
 80011ba:	b29a      	uxth	r2, r3
 80011bc:	f107 0174 	add.w	r1, r7, #116	; 0x74
 80011c0:	2364      	movs	r3, #100	; 0x64
 80011c2:	4859      	ldr	r0, [pc, #356]	; (8001328 <main+0x3a8>)
 80011c4:	f003 fdb5 	bl	8004d32 <HAL_UART_Transmit>
	}

	if (CTRL_REG2_A_status != HAL_OK) {
 80011c8:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d00f      	beq.n	80011f0 <main+0x270>
		HAL_UART_Transmit(&huart2,  (uint8_t*)ACC_Buffer, sprintf(ACC_Buffer, "Failed REG2:  %d\n\r", CTRL_REG2_A_status), 100);
 80011d0:	f897 212d 	ldrb.w	r2, [r7, #301]	; 0x12d
 80011d4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80011d8:	4956      	ldr	r1, [pc, #344]	; (8001334 <main+0x3b4>)
 80011da:	4618      	mov	r0, r3
 80011dc:	f004 fd0e 	bl	8005bfc <siprintf>
 80011e0:	4603      	mov	r3, r0
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	f107 0174 	add.w	r1, r7, #116	; 0x74
 80011e8:	2364      	movs	r3, #100	; 0x64
 80011ea:	484f      	ldr	r0, [pc, #316]	; (8001328 <main+0x3a8>)
 80011ec:	f003 fda1 	bl	8004d32 <HAL_UART_Transmit>
	}

	if (CTRL_REG3_A_status != HAL_OK) {
 80011f0:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d00f      	beq.n	8001218 <main+0x298>
		HAL_UART_Transmit(&huart2,  (uint8_t*)ACC_Buffer, sprintf(ACC_Buffer, "Failed REG3:  %d\n\r", CTRL_REG3_A_status), 100);
 80011f8:	f897 212c 	ldrb.w	r2, [r7, #300]	; 0x12c
 80011fc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001200:	494d      	ldr	r1, [pc, #308]	; (8001338 <main+0x3b8>)
 8001202:	4618      	mov	r0, r3
 8001204:	f004 fcfa 	bl	8005bfc <siprintf>
 8001208:	4603      	mov	r3, r0
 800120a:	b29a      	uxth	r2, r3
 800120c:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8001210:	2364      	movs	r3, #100	; 0x64
 8001212:	4845      	ldr	r0, [pc, #276]	; (8001328 <main+0x3a8>)
 8001214:	f003 fd8d 	bl	8004d32 <HAL_UART_Transmit>
	}

	if (CTRL_REG4_A_status != HAL_OK) {
 8001218:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800121c:	2b00      	cmp	r3, #0
 800121e:	d00f      	beq.n	8001240 <main+0x2c0>
		HAL_UART_Transmit(&huart2,  (uint8_t*)ACC_Buffer, sprintf(ACC_Buffer, "Failed REG4:  %d\n\r", CTRL_REG4_A_status), 100);
 8001220:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 8001224:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001228:	4944      	ldr	r1, [pc, #272]	; (800133c <main+0x3bc>)
 800122a:	4618      	mov	r0, r3
 800122c:	f004 fce6 	bl	8005bfc <siprintf>
 8001230:	4603      	mov	r3, r0
 8001232:	b29a      	uxth	r2, r3
 8001234:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8001238:	2364      	movs	r3, #100	; 0x64
 800123a:	483b      	ldr	r0, [pc, #236]	; (8001328 <main+0x3a8>)
 800123c:	f003 fd79 	bl	8004d32 <HAL_UART_Transmit>
	}

	/*
	 * Check Status
	 */
	uint8_t STATUS_REG_A_val = 0;
 8001240:	f107 036f 	add.w	r3, r7, #111	; 0x6f
 8001244:	2200      	movs	r2, #0
 8001246:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef STATUS_REG_A_status;

	/*
	 * Read First
	 */
	uint8_t OUT_X_L_A_val = 0x00;
 8001248:	f107 036e 	add.w	r3, r7, #110	; 0x6e
 800124c:	2200      	movs	r2, #0
 800124e:	701a      	strb	r2, [r3, #0]
	uint8_t OUT_X_H_A_val = 0x00;
 8001250:	f107 036d 	add.w	r3, r7, #109	; 0x6d
 8001254:	2200      	movs	r2, #0
 8001256:	701a      	strb	r2, [r3, #0]
	int16_t OUT_X_A_val = 0x00;
 8001258:	2300      	movs	r3, #0
 800125a:	f8a7 3174 	strh.w	r3, [r7, #372]	; 0x174

	uint8_t OUT_Y_L_A_val = 0x00;
 800125e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001262:	2200      	movs	r2, #0
 8001264:	701a      	strb	r2, [r3, #0]
	uint8_t OUT_Y_H_A_val = 0x00;
 8001266:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 800126a:	2200      	movs	r2, #0
 800126c:	701a      	strb	r2, [r3, #0]
	int16_t OUT_Y_A_val = 0x00;
 800126e:	2300      	movs	r3, #0
 8001270:	f8a7 3176 	strh.w	r3, [r7, #374]	; 0x176

	uint8_t OUT_Z_L_A_val = 0x00;
 8001274:	f107 036a 	add.w	r3, r7, #106	; 0x6a
 8001278:	2200      	movs	r2, #0
 800127a:	701a      	strb	r2, [r3, #0]
	uint8_t OUT_Z_H_A_val = 0x00;
 800127c:	f107 0369 	add.w	r3, r7, #105	; 0x69
 8001280:	2200      	movs	r2, #0
 8001282:	701a      	strb	r2, [r3, #0]
	int16_t OUT_Z_A_val = 0x00;
 8001284:	2300      	movs	r3, #0
 8001286:	f8a7 3178 	strh.w	r3, [r7, #376]	; 0x178

	HAL_StatusTypeDef OUT_X_L_A_status = 0x00;
 800128a:	2300      	movs	r3, #0
 800128c:	f887 312a 	strb.w	r3, [r7, #298]	; 0x12a
	HAL_StatusTypeDef OUT_X_H_A_status = 0x00;
 8001290:	2300      	movs	r3, #0
 8001292:	f887 3129 	strb.w	r3, [r7, #297]	; 0x129

	HAL_StatusTypeDef OUT_Y_L_A_status = 0x00;
 8001296:	2300      	movs	r3, #0
 8001298:	f887 3128 	strb.w	r3, [r7, #296]	; 0x128
	HAL_StatusTypeDef OUT_Y_H_A_status = 0x00;
 800129c:	2300      	movs	r3, #0
 800129e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

	HAL_StatusTypeDef OUT_Z_L_A_status = 0x00;
 80012a2:	2300      	movs	r3, #0
 80012a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
	HAL_StatusTypeDef OUT_Z_H_A_status = 0x00;
 80012a8:	2300      	movs	r3, #0
 80012aa:	f887 3125 	strb.w	r3, [r7, #293]	; 0x125
	 * Magnetometer
	 */
	/*
	 * Check Communication from Magnetometer
	 */
	char mag_enabled[50] = "Magnetometer Enabled\n\r";
 80012ae:	f107 0634 	add.w	r6, r7, #52	; 0x34
 80012b2:	4b23      	ldr	r3, [pc, #140]	; (8001340 <main+0x3c0>)
 80012b4:	4634      	mov	r4, r6
 80012b6:	461d      	mov	r5, r3
 80012b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012bc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80012c0:	6020      	str	r0, [r4, #0]
 80012c2:	3404      	adds	r4, #4
 80012c4:	8021      	strh	r1, [r4, #0]
 80012c6:	3402      	adds	r4, #2
 80012c8:	0c0b      	lsrs	r3, r1, #16
 80012ca:	7023      	strb	r3, [r4, #0]
 80012cc:	f106 0317 	add.w	r3, r6, #23
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	609a      	str	r2, [r3, #8]
 80012d8:	60da      	str	r2, [r3, #12]
 80012da:	611a      	str	r2, [r3, #16]
 80012dc:	615a      	str	r2, [r3, #20]
 80012de:	f8c3 2017 	str.w	r2, [r3, #23]
	uint8_t who_am_i_m_val;
	HAL_StatusTypeDef who_am_i_m_status = HAL_I2C_Mem_Read(&hi2c1, (MAG<<1)|0x1 , WHO_AM_I_M, 1, &who_am_i_m_val, 1, 50);
 80012e2:	2332      	movs	r3, #50	; 0x32
 80012e4:	9302      	str	r3, [sp, #8]
 80012e6:	2301      	movs	r3, #1
 80012e8:	9301      	str	r3, [sp, #4]
 80012ea:	f107 0333 	add.w	r3, r7, #51	; 0x33
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	2301      	movs	r3, #1
 80012f2:	224f      	movs	r2, #79	; 0x4f
 80012f4:	213d      	movs	r1, #61	; 0x3d
 80012f6:	480d      	ldr	r0, [pc, #52]	; (800132c <main+0x3ac>)
 80012f8:	f002 f8b4 	bl	8003464 <HAL_I2C_Mem_Read>
 80012fc:	4603      	mov	r3, r0
 80012fe:	f887 3124 	strb.w	r3, [r7, #292]	; 0x124
	char MAG_Buffer[32];
	if (who_am_i_m_status == HAL_OK && who_am_i_m_val == 64) {
 8001302:	f897 3124 	ldrb.w	r3, [r7, #292]	; 0x124
 8001306:	2b00      	cmp	r3, #0
 8001308:	d11c      	bne.n	8001344 <main+0x3c4>
 800130a:	f107 0333 	add.w	r3, r7, #51	; 0x33
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b40      	cmp	r3, #64	; 0x40
 8001312:	d117      	bne.n	8001344 <main+0x3c4>
		HAL_UART_Transmit(&huart2, (uint8_t*)mag_enabled , sizeof(mag_enabled), 100);
 8001314:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001318:	2364      	movs	r3, #100	; 0x64
 800131a:	2232      	movs	r2, #50	; 0x32
 800131c:	4802      	ldr	r0, [pc, #8]	; (8001328 <main+0x3a8>)
 800131e:	f003 fd08 	bl	8004d32 <HAL_UART_Transmit>
 8001322:	e023      	b.n	800136c <main+0x3ec>
 8001324:	0800948c 	.word	0x0800948c
 8001328:	200002a8 	.word	0x200002a8
 800132c:	20000254 	.word	0x20000254
 8001330:	080094a0 	.word	0x080094a0
 8001334:	080094b4 	.word	0x080094b4
 8001338:	080094c8 	.word	0x080094c8
 800133c:	080094dc 	.word	0x080094dc
 8001340:	08009524 	.word	0x08009524
	} else if (who_am_i_m_status != HAL_OK) {
 8001344:	f897 3124 	ldrb.w	r3, [r7, #292]	; 0x124
 8001348:	2b00      	cmp	r3, #0
 800134a:	d00f      	beq.n	800136c <main+0x3ec>
		HAL_UART_Transmit(&huart2,  (uint8_t*)MAG_Buffer, sprintf(MAG_Buffer, "%d\n\r", who_am_i_m_status), 100);
 800134c:	f897 2124 	ldrb.w	r2, [r7, #292]	; 0x124
 8001350:	f107 0310 	add.w	r3, r7, #16
 8001354:	49d0      	ldr	r1, [pc, #832]	; (8001698 <main+0x718>)
 8001356:	4618      	mov	r0, r3
 8001358:	f004 fc50 	bl	8005bfc <siprintf>
 800135c:	4603      	mov	r3, r0
 800135e:	b29a      	uxth	r2, r3
 8001360:	f107 0110 	add.w	r1, r7, #16
 8001364:	2364      	movs	r3, #100	; 0x64
 8001366:	48cd      	ldr	r0, [pc, #820]	; (800169c <main+0x71c>)
 8001368:	f003 fce3 	bl	8004d32 <HAL_UART_Transmit>
	}
	/*
	 * Set Control Registers
	 */
	uint8_t CFG_REG_A_M_val = 0x8C;
 800136c:	f107 030f 	add.w	r3, r7, #15
 8001370:	228c      	movs	r2, #140	; 0x8c
 8001372:	701a      	strb	r2, [r3, #0]
	uint8_t CFG_REG_B_M_val = 0x03;
 8001374:	f107 030e 	add.w	r3, r7, #14
 8001378:	2203      	movs	r2, #3
 800137a:	701a      	strb	r2, [r3, #0]
	uint8_t CFG_REG_C_M_val = 0x10;
 800137c:	f107 030d 	add.w	r3, r7, #13
 8001380:	2210      	movs	r2, #16
 8001382:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef CFG_REG_A_M_Status = HAL_I2C_Mem_Write(&hi2c1, (MAG<<1), CFG_REG_A_M, 1, &CFG_REG_A_M_val, 1, 50);
 8001384:	2332      	movs	r3, #50	; 0x32
 8001386:	9302      	str	r3, [sp, #8]
 8001388:	2301      	movs	r3, #1
 800138a:	9301      	str	r3, [sp, #4]
 800138c:	f107 030f 	add.w	r3, r7, #15
 8001390:	9300      	str	r3, [sp, #0]
 8001392:	2301      	movs	r3, #1
 8001394:	2260      	movs	r2, #96	; 0x60
 8001396:	213c      	movs	r1, #60	; 0x3c
 8001398:	48c1      	ldr	r0, [pc, #772]	; (80016a0 <main+0x720>)
 800139a:	f001 ff69 	bl	8003270 <HAL_I2C_Mem_Write>
 800139e:	4603      	mov	r3, r0
 80013a0:	f887 3123 	strb.w	r3, [r7, #291]	; 0x123
	HAL_StatusTypeDef CFG_REG_B_M_status = HAL_I2C_Mem_Write(&hi2c1, (MAG<<1), CFG_REG_B_M, 1, &CFG_REG_B_M_val, 1, 50);
 80013a4:	2332      	movs	r3, #50	; 0x32
 80013a6:	9302      	str	r3, [sp, #8]
 80013a8:	2301      	movs	r3, #1
 80013aa:	9301      	str	r3, [sp, #4]
 80013ac:	f107 030e 	add.w	r3, r7, #14
 80013b0:	9300      	str	r3, [sp, #0]
 80013b2:	2301      	movs	r3, #1
 80013b4:	2261      	movs	r2, #97	; 0x61
 80013b6:	213c      	movs	r1, #60	; 0x3c
 80013b8:	48b9      	ldr	r0, [pc, #740]	; (80016a0 <main+0x720>)
 80013ba:	f001 ff59 	bl	8003270 <HAL_I2C_Mem_Write>
 80013be:	4603      	mov	r3, r0
 80013c0:	f887 3122 	strb.w	r3, [r7, #290]	; 0x122
	HAL_StatusTypeDef CFG_REG_C_M_status = HAL_I2C_Mem_Write(&hi2c1, (MAG<<1), CFG_REG_C_M, 1, &CFG_REG_C_M_val, 1, 50);
 80013c4:	2332      	movs	r3, #50	; 0x32
 80013c6:	9302      	str	r3, [sp, #8]
 80013c8:	2301      	movs	r3, #1
 80013ca:	9301      	str	r3, [sp, #4]
 80013cc:	f107 030d 	add.w	r3, r7, #13
 80013d0:	9300      	str	r3, [sp, #0]
 80013d2:	2301      	movs	r3, #1
 80013d4:	2262      	movs	r2, #98	; 0x62
 80013d6:	213c      	movs	r1, #60	; 0x3c
 80013d8:	48b1      	ldr	r0, [pc, #708]	; (80016a0 <main+0x720>)
 80013da:	f001 ff49 	bl	8003270 <HAL_I2C_Mem_Write>
 80013de:	4603      	mov	r3, r0
 80013e0:	f887 3121 	strb.w	r3, [r7, #289]	; 0x121

	if (CFG_REG_A_M_Status != HAL_OK) {
 80013e4:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d00f      	beq.n	800140c <main+0x48c>
		HAL_UART_Transmit(&huart2,  (uint8_t*)MAG_Buffer, sprintf(MAG_Buffer, "Failed REG1:  %d\n\r", CFG_REG_A_M_Status), 100);
 80013ec:	f897 2123 	ldrb.w	r2, [r7, #291]	; 0x123
 80013f0:	f107 0310 	add.w	r3, r7, #16
 80013f4:	49ab      	ldr	r1, [pc, #684]	; (80016a4 <main+0x724>)
 80013f6:	4618      	mov	r0, r3
 80013f8:	f004 fc00 	bl	8005bfc <siprintf>
 80013fc:	4603      	mov	r3, r0
 80013fe:	b29a      	uxth	r2, r3
 8001400:	f107 0110 	add.w	r1, r7, #16
 8001404:	2364      	movs	r3, #100	; 0x64
 8001406:	48a5      	ldr	r0, [pc, #660]	; (800169c <main+0x71c>)
 8001408:	f003 fc93 	bl	8004d32 <HAL_UART_Transmit>
	}

	if (CFG_REG_B_M_status != HAL_OK) {
 800140c:	f897 3122 	ldrb.w	r3, [r7, #290]	; 0x122
 8001410:	2b00      	cmp	r3, #0
 8001412:	d00f      	beq.n	8001434 <main+0x4b4>
		HAL_UART_Transmit(&huart2,  (uint8_t*)MAG_Buffer, sprintf(MAG_Buffer, "Failed REG2:  %d\n\r", CFG_REG_B_M_status), 100);
 8001414:	f897 2122 	ldrb.w	r2, [r7, #290]	; 0x122
 8001418:	f107 0310 	add.w	r3, r7, #16
 800141c:	49a2      	ldr	r1, [pc, #648]	; (80016a8 <main+0x728>)
 800141e:	4618      	mov	r0, r3
 8001420:	f004 fbec 	bl	8005bfc <siprintf>
 8001424:	4603      	mov	r3, r0
 8001426:	b29a      	uxth	r2, r3
 8001428:	f107 0110 	add.w	r1, r7, #16
 800142c:	2364      	movs	r3, #100	; 0x64
 800142e:	489b      	ldr	r0, [pc, #620]	; (800169c <main+0x71c>)
 8001430:	f003 fc7f 	bl	8004d32 <HAL_UART_Transmit>
	}

	if (CFG_REG_C_M_status != HAL_OK) {
 8001434:	f897 3121 	ldrb.w	r3, [r7, #289]	; 0x121
 8001438:	2b00      	cmp	r3, #0
 800143a:	d00f      	beq.n	800145c <main+0x4dc>
		HAL_UART_Transmit(&huart2,  (uint8_t*)MAG_Buffer, sprintf(MAG_Buffer, "Failed REG3:  %d\n\r", CFG_REG_C_M_status), 100);
 800143c:	f897 2121 	ldrb.w	r2, [r7, #289]	; 0x121
 8001440:	f107 0310 	add.w	r3, r7, #16
 8001444:	4999      	ldr	r1, [pc, #612]	; (80016ac <main+0x72c>)
 8001446:	4618      	mov	r0, r3
 8001448:	f004 fbd8 	bl	8005bfc <siprintf>
 800144c:	4603      	mov	r3, r0
 800144e:	b29a      	uxth	r2, r3
 8001450:	f107 0110 	add.w	r1, r7, #16
 8001454:	2364      	movs	r3, #100	; 0x64
 8001456:	4891      	ldr	r0, [pc, #580]	; (800169c <main+0x71c>)
 8001458:	f003 fc6b 	bl	8004d32 <HAL_UART_Transmit>
	}

	/*
	 * Check Status
	 */
	uint8_t STATUS_REG_M_val = 0;
 800145c:	f107 030c 	add.w	r3, r7, #12
 8001460:	2200      	movs	r2, #0
 8001462:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef STATUS_REG_M_status;

	/*
	 * Read First
	 */
	uint8_t OUTX_L_REG_M_val = 0x00;
 8001464:	f107 030b 	add.w	r3, r7, #11
 8001468:	2200      	movs	r2, #0
 800146a:	701a      	strb	r2, [r3, #0]
	uint8_t OUTX_H_REG_M_val = 0x00;
 800146c:	f107 030a 	add.w	r3, r7, #10
 8001470:	2200      	movs	r2, #0
 8001472:	701a      	strb	r2, [r3, #0]
	int16_t OUTX_M_val = 0x00;
 8001474:	2300      	movs	r3, #0
 8001476:	f8a7 317a 	strh.w	r3, [r7, #378]	; 0x17a

	uint8_t OUTY_L_REG_M_val = 0x00;
 800147a:	f107 0309 	add.w	r3, r7, #9
 800147e:	2200      	movs	r2, #0
 8001480:	701a      	strb	r2, [r3, #0]
	uint8_t OUTY_H_REG_M_val = 0x00;
 8001482:	f107 0308 	add.w	r3, r7, #8
 8001486:	2200      	movs	r2, #0
 8001488:	701a      	strb	r2, [r3, #0]
	int16_t OUTY_M_val = 0x00;
 800148a:	2300      	movs	r3, #0
 800148c:	f8a7 317c 	strh.w	r3, [r7, #380]	; 0x17c

	uint8_t OUTZ_L_REG_M_val = 0x00;
 8001490:	1dfb      	adds	r3, r7, #7
 8001492:	2200      	movs	r2, #0
 8001494:	701a      	strb	r2, [r3, #0]
	uint8_t OUTZ_H_REG_M_val = 0x00;
 8001496:	1dbb      	adds	r3, r7, #6
 8001498:	2200      	movs	r2, #0
 800149a:	701a      	strb	r2, [r3, #0]
	int16_t OUTZ_M_val = 0x00;
 800149c:	2300      	movs	r3, #0
 800149e:	f8a7 317e 	strh.w	r3, [r7, #382]	; 0x17e

	HAL_StatusTypeDef OUTX_L_M_status = 0x00;
 80014a2:	2300      	movs	r3, #0
 80014a4:	f887 3120 	strb.w	r3, [r7, #288]	; 0x120
	HAL_StatusTypeDef OUTX_H_M_status = 0x00;
 80014a8:	2300      	movs	r3, #0
 80014aa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

	HAL_StatusTypeDef OUTY_L_M_status = 0x00;
 80014ae:	2300      	movs	r3, #0
 80014b0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
	HAL_StatusTypeDef OUTY_H_M_status = 0x00;
 80014b4:	2300      	movs	r3, #0
 80014b6:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d

	HAL_StatusTypeDef OUTZ_L_M_status = 0x00;
 80014ba:	2300      	movs	r3, #0
 80014bc:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c
	HAL_StatusTypeDef OUTZ_H_M_status = 0x00;
 80014c0:	2300      	movs	r3, #0
 80014c2:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b


	/*
	 * Start up
	 */
	HAL_Delay(1000);
 80014c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014ca:	f001 fabd 	bl	8002a48 <HAL_Delay>

	/*
	* Button De-bounce
	*/
	int pushed = 0;
 80014ce:	2300      	movs	r3, #0
 80014d0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180

	/*
	 * Tick
	 */
	uint32_t current_tick =  HAL_GetTick();
 80014d4:	f001 faac 	bl	8002a30 <HAL_GetTick>
 80014d8:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

	/*
	 * Step Count
	 */
	uint8_t start_count = 0;
 80014dc:	2300      	movs	r3, #0
 80014de:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
	uint8_t step_counting = 0;
 80014e2:	2300      	movs	r3, #0
 80014e4:	f887 3172 	strb.w	r3, [r7, #370]	; 0x172
	uint16_t steps = 0;
 80014e8:	2300      	movs	r3, #0
 80014ea:	f8a7 3170 	strh.w	r3, [r7, #368]	; 0x170
	uint32_t increase_prev = 0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c

	/*
	 * Orientation
	 */
	float initial_yaw = 0;
 80014f4:	f04f 0300 	mov.w	r3, #0
 80014f8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
	float yaw = 0;
 80014fc:	f04f 0300 	mov.w	r3, #0
 8001500:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164

	/*
	 * Init button
	 */
	uint8_t first_pochi = 0;
 8001504:	2300      	movs	r3, #0
 8001506:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163

	/*
	 * Previous Coord
	 */
	float x_pos_prev = 0;
 800150a:	f04f 0300 	mov.w	r3, #0
 800150e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
	float y_pos_prev = 0;
 8001512:	f04f 0300 	mov.w	r3, #0
 8001516:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158

	while (1)
	{

//		HAL_UART_Transmit(&huart2,  (uint8_t*)clear, sizeof(clear), 100);
		STATUS_REG_A_status = HAL_I2C_Mem_Read(&hi2c1, (ACC<<1)|0x1, STATUS_REG_A, 1, &STATUS_REG_A_val, 1, 50);
 800151a:	2332      	movs	r3, #50	; 0x32
 800151c:	9302      	str	r3, [sp, #8]
 800151e:	2301      	movs	r3, #1
 8001520:	9301      	str	r3, [sp, #4]
 8001522:	f107 036f 	add.w	r3, r7, #111	; 0x6f
 8001526:	9300      	str	r3, [sp, #0]
 8001528:	2301      	movs	r3, #1
 800152a:	2227      	movs	r2, #39	; 0x27
 800152c:	2133      	movs	r1, #51	; 0x33
 800152e:	485c      	ldr	r0, [pc, #368]	; (80016a0 <main+0x720>)
 8001530:	f001 ff98 	bl	8003464 <HAL_I2C_Mem_Read>
 8001534:	4603      	mov	r3, r0
 8001536:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
		/*
		 * Average
		 */
		float avg_x_a = 0;
 800153a:	f04f 0300 	mov.w	r3, #0
 800153e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
		float avg_y_a = 0;
 8001542:	f04f 0300 	mov.w	r3, #0
 8001546:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
		float avg_z_a = 0;
 800154a:	f04f 0300 	mov.w	r3, #0
 800154e:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c

		if (STATUS_REG_A_status == HAL_OK && ((STATUS_REG_A_val & 0x08)>>3) == 1) {
 8001552:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8001556:	2b00      	cmp	r3, #0
 8001558:	f040 8292 	bne.w	8001a80 <main+0xb00>
 800155c:	f107 036f 	add.w	r3, r7, #111	; 0x6f
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	f003 0308 	and.w	r3, r3, #8
 8001566:	2b00      	cmp	r3, #0
 8001568:	f000 828a 	beq.w	8001a80 <main+0xb00>
 800156c:	466b      	mov	r3, sp
 800156e:	461d      	mov	r5, r3
			/*
			 * Sampling
			 */
			uint8_t sample_a = 5;
 8001570:	2305      	movs	r3, #5
 8001572:	f887 3112 	strb.w	r3, [r7, #274]	; 0x112
			int16_t arr_x_a[sample_a];
 8001576:	f897 4112 	ldrb.w	r4, [r7, #274]	; 0x112
 800157a:	4623      	mov	r3, r4
 800157c:	3b01      	subs	r3, #1
 800157e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001582:	b2e0      	uxtb	r0, r4
 8001584:	f04f 0100 	mov.w	r1, #0
 8001588:	f04f 0200 	mov.w	r2, #0
 800158c:	f04f 0300 	mov.w	r3, #0
 8001590:	010b      	lsls	r3, r1, #4
 8001592:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8001596:	0102      	lsls	r2, r0, #4
 8001598:	b2e0      	uxtb	r0, r4
 800159a:	f04f 0100 	mov.w	r1, #0
 800159e:	f04f 0200 	mov.w	r2, #0
 80015a2:	f04f 0300 	mov.w	r3, #0
 80015a6:	010b      	lsls	r3, r1, #4
 80015a8:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 80015ac:	0102      	lsls	r2, r0, #4
 80015ae:	4623      	mov	r3, r4
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	3307      	adds	r3, #7
 80015b4:	08db      	lsrs	r3, r3, #3
 80015b6:	00db      	lsls	r3, r3, #3
 80015b8:	ebad 0d03 	sub.w	sp, sp, r3
 80015bc:	ab04      	add	r3, sp, #16
 80015be:	3301      	adds	r3, #1
 80015c0:	085b      	lsrs	r3, r3, #1
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			int16_t arr_y_a[sample_a];
 80015c8:	f897 4112 	ldrb.w	r4, [r7, #274]	; 0x112
 80015cc:	4623      	mov	r3, r4
 80015ce:	3b01      	subs	r3, #1
 80015d0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80015d4:	b2e0      	uxtb	r0, r4
 80015d6:	f04f 0100 	mov.w	r1, #0
 80015da:	f04f 0200 	mov.w	r2, #0
 80015de:	f04f 0300 	mov.w	r3, #0
 80015e2:	010b      	lsls	r3, r1, #4
 80015e4:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 80015e8:	0102      	lsls	r2, r0, #4
 80015ea:	b2e0      	uxtb	r0, r4
 80015ec:	f04f 0100 	mov.w	r1, #0
 80015f0:	f04f 0200 	mov.w	r2, #0
 80015f4:	f04f 0300 	mov.w	r3, #0
 80015f8:	010b      	lsls	r3, r1, #4
 80015fa:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 80015fe:	0102      	lsls	r2, r0, #4
 8001600:	4623      	mov	r3, r4
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	3307      	adds	r3, #7
 8001606:	08db      	lsrs	r3, r3, #3
 8001608:	00db      	lsls	r3, r3, #3
 800160a:	ebad 0d03 	sub.w	sp, sp, r3
 800160e:	ab04      	add	r3, sp, #16
 8001610:	3301      	adds	r3, #1
 8001612:	085b      	lsrs	r3, r3, #1
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
			int16_t arr_z_a[sample_a];
 800161a:	f897 4112 	ldrb.w	r4, [r7, #274]	; 0x112
 800161e:	4623      	mov	r3, r4
 8001620:	3b01      	subs	r3, #1
 8001622:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001626:	b2e0      	uxtb	r0, r4
 8001628:	f04f 0100 	mov.w	r1, #0
 800162c:	f04f 0200 	mov.w	r2, #0
 8001630:	f04f 0300 	mov.w	r3, #0
 8001634:	010b      	lsls	r3, r1, #4
 8001636:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 800163a:	0102      	lsls	r2, r0, #4
 800163c:	b2e0      	uxtb	r0, r4
 800163e:	f04f 0100 	mov.w	r1, #0
 8001642:	f04f 0200 	mov.w	r2, #0
 8001646:	f04f 0300 	mov.w	r3, #0
 800164a:	010b      	lsls	r3, r1, #4
 800164c:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8001650:	0102      	lsls	r2, r0, #4
 8001652:	4623      	mov	r3, r4
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	3307      	adds	r3, #7
 8001658:	08db      	lsrs	r3, r3, #3
 800165a:	00db      	lsls	r3, r3, #3
 800165c:	ebad 0d03 	sub.w	sp, sp, r3
 8001660:	ab04      	add	r3, sp, #16
 8001662:	3301      	adds	r3, #1
 8001664:	085b      	lsrs	r3, r3, #1
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
			for (int i=0;i<sample_a;i++) {
 800166c:	2300      	movs	r3, #0
 800166e:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8001672:	e111      	b.n	8001898 <main+0x918>

				STATUS_REG_A_status = HAL_I2C_Mem_Read(&hi2c1, (ACC<<1)|0x1, STATUS_REG_A, 1, &STATUS_REG_A_val, 1, 50);
 8001674:	2332      	movs	r3, #50	; 0x32
 8001676:	9302      	str	r3, [sp, #8]
 8001678:	2301      	movs	r3, #1
 800167a:	9301      	str	r3, [sp, #4]
 800167c:	f107 036f 	add.w	r3, r7, #111	; 0x6f
 8001680:	9300      	str	r3, [sp, #0]
 8001682:	2301      	movs	r3, #1
 8001684:	2227      	movs	r2, #39	; 0x27
 8001686:	2133      	movs	r1, #51	; 0x33
 8001688:	4805      	ldr	r0, [pc, #20]	; (80016a0 <main+0x720>)
 800168a:	f001 feeb 	bl	8003464 <HAL_I2C_Mem_Read>
 800168e:	4603      	mov	r3, r0
 8001690:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
				while (((STATUS_REG_A_val & 0x08)>>3) != 1) {
 8001694:	e01c      	b.n	80016d0 <main+0x750>
 8001696:	bf00      	nop
 8001698:	0800948c 	.word	0x0800948c
 800169c:	200002a8 	.word	0x200002a8
 80016a0:	20000254 	.word	0x20000254
 80016a4:	080094a0 	.word	0x080094a0
 80016a8:	080094b4 	.word	0x080094b4
 80016ac:	080094c8 	.word	0x080094c8
					STATUS_REG_A_status = HAL_I2C_Mem_Read(&hi2c1, (ACC<<1)|0x1, STATUS_REG_A, 1, &STATUS_REG_A_val, 1, 50);
 80016b0:	2332      	movs	r3, #50	; 0x32
 80016b2:	9302      	str	r3, [sp, #8]
 80016b4:	2301      	movs	r3, #1
 80016b6:	9301      	str	r3, [sp, #4]
 80016b8:	f107 036f 	add.w	r3, r7, #111	; 0x6f
 80016bc:	9300      	str	r3, [sp, #0]
 80016be:	2301      	movs	r3, #1
 80016c0:	2227      	movs	r2, #39	; 0x27
 80016c2:	2133      	movs	r1, #51	; 0x33
 80016c4:	487a      	ldr	r0, [pc, #488]	; (80018b0 <main+0x930>)
 80016c6:	f001 fecd 	bl	8003464 <HAL_I2C_Mem_Read>
 80016ca:	4603      	mov	r3, r0
 80016cc:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
				while (((STATUS_REG_A_val & 0x08)>>3) != 1) {
 80016d0:	f107 036f 	add.w	r3, r7, #111	; 0x6f
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	f003 0308 	and.w	r3, r3, #8
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d0e8      	beq.n	80016b0 <main+0x730>
				}
				OUT_X_L_A_status = HAL_I2C_Mem_Read(&hi2c1, (ACC<<1)|0x1, OUT_X_L_A, 1, &OUT_X_L_A_val, 1, 50);
 80016de:	2332      	movs	r3, #50	; 0x32
 80016e0:	9302      	str	r3, [sp, #8]
 80016e2:	2301      	movs	r3, #1
 80016e4:	9301      	str	r3, [sp, #4]
 80016e6:	f107 036e 	add.w	r3, r7, #110	; 0x6e
 80016ea:	9300      	str	r3, [sp, #0]
 80016ec:	2301      	movs	r3, #1
 80016ee:	2228      	movs	r2, #40	; 0x28
 80016f0:	2133      	movs	r1, #51	; 0x33
 80016f2:	486f      	ldr	r0, [pc, #444]	; (80018b0 <main+0x930>)
 80016f4:	f001 feb6 	bl	8003464 <HAL_I2C_Mem_Read>
 80016f8:	4603      	mov	r3, r0
 80016fa:	f887 312a 	strb.w	r3, [r7, #298]	; 0x12a
				OUT_X_H_A_status = HAL_I2C_Mem_Read(&hi2c1, (ACC<<1)|0x1, OUT_X_H_A, 1, &OUT_X_H_A_val, 1, 50);
 80016fe:	2332      	movs	r3, #50	; 0x32
 8001700:	9302      	str	r3, [sp, #8]
 8001702:	2301      	movs	r3, #1
 8001704:	9301      	str	r3, [sp, #4]
 8001706:	f107 036d 	add.w	r3, r7, #109	; 0x6d
 800170a:	9300      	str	r3, [sp, #0]
 800170c:	2301      	movs	r3, #1
 800170e:	2229      	movs	r2, #41	; 0x29
 8001710:	2133      	movs	r1, #51	; 0x33
 8001712:	4867      	ldr	r0, [pc, #412]	; (80018b0 <main+0x930>)
 8001714:	f001 fea6 	bl	8003464 <HAL_I2C_Mem_Read>
 8001718:	4603      	mov	r3, r0
 800171a:	f887 3129 	strb.w	r3, [r7, #297]	; 0x129

				OUT_Y_L_A_status = HAL_I2C_Mem_Read(&hi2c1, (ACC<<1)|0x1, OUT_Y_L_A, 1, &OUT_Y_L_A_val, 1, 50);
 800171e:	2332      	movs	r3, #50	; 0x32
 8001720:	9302      	str	r3, [sp, #8]
 8001722:	2301      	movs	r3, #1
 8001724:	9301      	str	r3, [sp, #4]
 8001726:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800172a:	9300      	str	r3, [sp, #0]
 800172c:	2301      	movs	r3, #1
 800172e:	222a      	movs	r2, #42	; 0x2a
 8001730:	2133      	movs	r1, #51	; 0x33
 8001732:	485f      	ldr	r0, [pc, #380]	; (80018b0 <main+0x930>)
 8001734:	f001 fe96 	bl	8003464 <HAL_I2C_Mem_Read>
 8001738:	4603      	mov	r3, r0
 800173a:	f887 3128 	strb.w	r3, [r7, #296]	; 0x128
				OUT_Y_H_A_status = HAL_I2C_Mem_Read(&hi2c1, (ACC<<1)|0x1, OUT_Y_H_A, 1, &OUT_Y_H_A_val, 1, 50);
 800173e:	2332      	movs	r3, #50	; 0x32
 8001740:	9302      	str	r3, [sp, #8]
 8001742:	2301      	movs	r3, #1
 8001744:	9301      	str	r3, [sp, #4]
 8001746:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 800174a:	9300      	str	r3, [sp, #0]
 800174c:	2301      	movs	r3, #1
 800174e:	222b      	movs	r2, #43	; 0x2b
 8001750:	2133      	movs	r1, #51	; 0x33
 8001752:	4857      	ldr	r0, [pc, #348]	; (80018b0 <main+0x930>)
 8001754:	f001 fe86 	bl	8003464 <HAL_I2C_Mem_Read>
 8001758:	4603      	mov	r3, r0
 800175a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

				OUT_Z_L_A_status = HAL_I2C_Mem_Read(&hi2c1, (ACC<<1)|0x1, OUT_Z_L_A, 1, &OUT_Z_L_A_val, 1, 50);
 800175e:	2332      	movs	r3, #50	; 0x32
 8001760:	9302      	str	r3, [sp, #8]
 8001762:	2301      	movs	r3, #1
 8001764:	9301      	str	r3, [sp, #4]
 8001766:	f107 036a 	add.w	r3, r7, #106	; 0x6a
 800176a:	9300      	str	r3, [sp, #0]
 800176c:	2301      	movs	r3, #1
 800176e:	222c      	movs	r2, #44	; 0x2c
 8001770:	2133      	movs	r1, #51	; 0x33
 8001772:	484f      	ldr	r0, [pc, #316]	; (80018b0 <main+0x930>)
 8001774:	f001 fe76 	bl	8003464 <HAL_I2C_Mem_Read>
 8001778:	4603      	mov	r3, r0
 800177a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
				OUT_Z_H_A_status = HAL_I2C_Mem_Read(&hi2c1, (ACC<<1)|0x1, OUT_Z_H_A, 1, &OUT_Z_H_A_val, 1, 50);
 800177e:	2332      	movs	r3, #50	; 0x32
 8001780:	9302      	str	r3, [sp, #8]
 8001782:	2301      	movs	r3, #1
 8001784:	9301      	str	r3, [sp, #4]
 8001786:	f107 0369 	add.w	r3, r7, #105	; 0x69
 800178a:	9300      	str	r3, [sp, #0]
 800178c:	2301      	movs	r3, #1
 800178e:	222d      	movs	r2, #45	; 0x2d
 8001790:	2133      	movs	r1, #51	; 0x33
 8001792:	4847      	ldr	r0, [pc, #284]	; (80018b0 <main+0x930>)
 8001794:	f001 fe66 	bl	8003464 <HAL_I2C_Mem_Read>
 8001798:	4603      	mov	r3, r0
 800179a:	f887 3125 	strb.w	r3, [r7, #293]	; 0x125

				if (OUT_X_L_A_status == HAL_OK && OUT_X_H_A_status == HAL_OK) {
 800179e:	f897 312a 	ldrb.w	r3, [r7, #298]	; 0x12a
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d11b      	bne.n	80017de <main+0x85e>
 80017a6:	f897 3129 	ldrb.w	r3, [r7, #297]	; 0x129
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d117      	bne.n	80017de <main+0x85e>
					OUT_X_A_val = OUT_X_H_A_val;
 80017ae:	f107 036d 	add.w	r3, r7, #109	; 0x6d
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	f8a7 3174 	strh.w	r3, [r7, #372]	; 0x174
					OUT_X_A_val <<= 8;
 80017b8:	f9b7 3174 	ldrsh.w	r3, [r7, #372]	; 0x174
 80017bc:	021b      	lsls	r3, r3, #8
 80017be:	f8a7 3174 	strh.w	r3, [r7, #372]	; 0x174
					OUT_X_A_val |= OUT_X_L_A_val;
 80017c2:	f107 036e 	add.w	r3, r7, #110	; 0x6e
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	b21a      	sxth	r2, r3
 80017ca:	f8b7 3174 	ldrh.w	r3, [r7, #372]	; 0x174
 80017ce:	4313      	orrs	r3, r2
 80017d0:	f8a7 3174 	strh.w	r3, [r7, #372]	; 0x174
					OUT_X_A_val >>= 6;
 80017d4:	f9b7 3174 	ldrsh.w	r3, [r7, #372]	; 0x174
 80017d8:	119b      	asrs	r3, r3, #6
 80017da:	f8a7 3174 	strh.w	r3, [r7, #372]	; 0x174
				}

				if (OUT_Y_L_A_status == HAL_OK && OUT_Y_H_A_status == HAL_OK) {
 80017de:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d11b      	bne.n	800181e <main+0x89e>
 80017e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d117      	bne.n	800181e <main+0x89e>
					OUT_Y_A_val = OUT_Y_H_A_val;
 80017ee:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	f8a7 3176 	strh.w	r3, [r7, #374]	; 0x176
					OUT_Y_A_val <<= 8;
 80017f8:	f9b7 3176 	ldrsh.w	r3, [r7, #374]	; 0x176
 80017fc:	021b      	lsls	r3, r3, #8
 80017fe:	f8a7 3176 	strh.w	r3, [r7, #374]	; 0x176
					OUT_Y_A_val |= OUT_Y_L_A_val;
 8001802:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	b21a      	sxth	r2, r3
 800180a:	f8b7 3176 	ldrh.w	r3, [r7, #374]	; 0x176
 800180e:	4313      	orrs	r3, r2
 8001810:	f8a7 3176 	strh.w	r3, [r7, #374]	; 0x176
					OUT_Y_A_val >>= 6;
 8001814:	f9b7 3176 	ldrsh.w	r3, [r7, #374]	; 0x176
 8001818:	119b      	asrs	r3, r3, #6
 800181a:	f8a7 3176 	strh.w	r3, [r7, #374]	; 0x176
				}

				if (OUT_Z_L_A_status == HAL_OK && OUT_Z_H_A_status == HAL_OK) {
 800181e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8001822:	2b00      	cmp	r3, #0
 8001824:	d11b      	bne.n	800185e <main+0x8de>
 8001826:	f897 3125 	ldrb.w	r3, [r7, #293]	; 0x125
 800182a:	2b00      	cmp	r3, #0
 800182c:	d117      	bne.n	800185e <main+0x8de>
					OUT_Z_A_val = OUT_Z_H_A_val;
 800182e:	f107 0369 	add.w	r3, r7, #105	; 0x69
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	f8a7 3178 	strh.w	r3, [r7, #376]	; 0x178
					OUT_Z_A_val <<= 8;
 8001838:	f9b7 3178 	ldrsh.w	r3, [r7, #376]	; 0x178
 800183c:	021b      	lsls	r3, r3, #8
 800183e:	f8a7 3178 	strh.w	r3, [r7, #376]	; 0x178
					OUT_Z_A_val |= OUT_Z_L_A_val;
 8001842:	f107 036a 	add.w	r3, r7, #106	; 0x6a
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	b21a      	sxth	r2, r3
 800184a:	f8b7 3178 	ldrh.w	r3, [r7, #376]	; 0x178
 800184e:	4313      	orrs	r3, r2
 8001850:	f8a7 3178 	strh.w	r3, [r7, #376]	; 0x178
					OUT_Z_A_val >>= 6;
 8001854:	f9b7 3178 	ldrsh.w	r3, [r7, #376]	; 0x178
 8001858:	119b      	asrs	r3, r3, #6
 800185a:	f8a7 3178 	strh.w	r3, [r7, #376]	; 0x178
				}
				arr_x_a[i] = (OUT_X_A_val);
 800185e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001862:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001866:	f8b7 1174 	ldrh.w	r1, [r7, #372]	; 0x174
 800186a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				arr_y_a[i] = (OUT_Y_A_val);
 800186e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001872:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001876:	f8b7 1176 	ldrh.w	r1, [r7, #374]	; 0x176
 800187a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				arr_z_a[i] = (OUT_Z_A_val);
 800187e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001882:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001886:	f8b7 1178 	ldrh.w	r1, [r7, #376]	; 0x178
 800188a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (int i=0;i<sample_a;i++) {
 800188e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8001892:	3301      	adds	r3, #1
 8001894:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8001898:	f897 3112 	ldrb.w	r3, [r7, #274]	; 0x112
 800189c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80018a0:	429a      	cmp	r2, r3
 80018a2:	f6ff aee7 	blt.w	8001674 <main+0x6f4>


			}


			for (int i=0;i<sample_a;i++) {
 80018a6:	2300      	movs	r3, #0
 80018a8:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80018ac:	e037      	b.n	800191e <main+0x99e>
 80018ae:	bf00      	nop
 80018b0:	20000254 	.word	0x20000254
				avg_x_a += arr_x_a[i];
 80018b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80018b8:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80018bc:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80018c0:	ee07 3a90 	vmov	s15, r3
 80018c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018c8:	ed97 7a55 	vldr	s14, [r7, #340]	; 0x154
 80018cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018d0:	edc7 7a55 	vstr	s15, [r7, #340]	; 0x154
				avg_y_a += arr_y_a[i];
 80018d4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80018d8:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80018dc:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80018e0:	ee07 3a90 	vmov	s15, r3
 80018e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018e8:	ed97 7a54 	vldr	s14, [r7, #336]	; 0x150
 80018ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018f0:	edc7 7a54 	vstr	s15, [r7, #336]	; 0x150
				avg_z_a += arr_z_a[i];
 80018f4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80018f8:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80018fc:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001900:	ee07 3a90 	vmov	s15, r3
 8001904:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001908:	ed97 7a53 	vldr	s14, [r7, #332]	; 0x14c
 800190c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001910:	edc7 7a53 	vstr	s15, [r7, #332]	; 0x14c
			for (int i=0;i<sample_a;i++) {
 8001914:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001918:	3301      	adds	r3, #1
 800191a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800191e:	f897 3112 	ldrb.w	r3, [r7, #274]	; 0x112
 8001922:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001926:	429a      	cmp	r2, r3
 8001928:	dbc4      	blt.n	80018b4 <main+0x934>
			}

			/*
			 * Calculation
			 */
			avg_x_a = (avg_x_a / sample_a) * (4.0 / 1023);
 800192a:	f897 3112 	ldrb.w	r3, [r7, #274]	; 0x112
 800192e:	ee07 3a90 	vmov	s15, r3
 8001932:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001936:	ed97 7a55 	vldr	s14, [r7, #340]	; 0x154
 800193a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800193e:	ee16 0a90 	vmov	r0, s13
 8001942:	f7fe fe21 	bl	8000588 <__aeabi_f2d>
 8001946:	a3b4      	add	r3, pc, #720	; (adr r3, 8001c18 <main+0xc98>)
 8001948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194c:	f7fe fe74 	bl	8000638 <__aeabi_dmul>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	4610      	mov	r0, r2
 8001956:	4619      	mov	r1, r3
 8001958:	f7ff f946 	bl	8000be8 <__aeabi_d2f>
 800195c:	4603      	mov	r3, r0
 800195e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
			avg_y_a = (avg_y_a / sample_a) * (4.0 / 1023);
 8001962:	f897 3112 	ldrb.w	r3, [r7, #274]	; 0x112
 8001966:	ee07 3a90 	vmov	s15, r3
 800196a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800196e:	ed97 7a54 	vldr	s14, [r7, #336]	; 0x150
 8001972:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001976:	ee16 0a90 	vmov	r0, s13
 800197a:	f7fe fe05 	bl	8000588 <__aeabi_f2d>
 800197e:	a3a6      	add	r3, pc, #664	; (adr r3, 8001c18 <main+0xc98>)
 8001980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001984:	f7fe fe58 	bl	8000638 <__aeabi_dmul>
 8001988:	4602      	mov	r2, r0
 800198a:	460b      	mov	r3, r1
 800198c:	4610      	mov	r0, r2
 800198e:	4619      	mov	r1, r3
 8001990:	f7ff f92a 	bl	8000be8 <__aeabi_d2f>
 8001994:	4603      	mov	r3, r0
 8001996:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
			avg_z_a = (avg_z_a / sample_a) * (4.0 / 1023);
 800199a:	f897 3112 	ldrb.w	r3, [r7, #274]	; 0x112
 800199e:	ee07 3a90 	vmov	s15, r3
 80019a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019a6:	ed97 7a53 	vldr	s14, [r7, #332]	; 0x14c
 80019aa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80019ae:	ee16 0a90 	vmov	r0, s13
 80019b2:	f7fe fde9 	bl	8000588 <__aeabi_f2d>
 80019b6:	a398      	add	r3, pc, #608	; (adr r3, 8001c18 <main+0xc98>)
 80019b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019bc:	f7fe fe3c 	bl	8000638 <__aeabi_dmul>
 80019c0:	4602      	mov	r2, r0
 80019c2:	460b      	mov	r3, r1
 80019c4:	4610      	mov	r0, r2
 80019c6:	4619      	mov	r1, r3
 80019c8:	f7ff f90e 	bl	8000be8 <__aeabi_d2f>
 80019cc:	4603      	mov	r3, r0
 80019ce:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
			/*
			 * Kalman Filter
			 */


			KALMAN(avg_x_a, &P_x_a, &U_hat_x_a, &K_x_a);
 80019d2:	4a87      	ldr	r2, [pc, #540]	; (8001bf0 <main+0xc70>)
 80019d4:	4987      	ldr	r1, [pc, #540]	; (8001bf4 <main+0xc74>)
 80019d6:	4888      	ldr	r0, [pc, #544]	; (8001bf8 <main+0xc78>)
 80019d8:	ed97 0a55 	vldr	s0, [r7, #340]	; 0x154
 80019dc:	f000 fc48 	bl	8002270 <KALMAN>
			KALMAN(avg_y_a, &P_y_a, &U_hat_y_a, &K_y_a);
 80019e0:	4a86      	ldr	r2, [pc, #536]	; (8001bfc <main+0xc7c>)
 80019e2:	4987      	ldr	r1, [pc, #540]	; (8001c00 <main+0xc80>)
 80019e4:	4887      	ldr	r0, [pc, #540]	; (8001c04 <main+0xc84>)
 80019e6:	ed97 0a54 	vldr	s0, [r7, #336]	; 0x150
 80019ea:	f000 fc41 	bl	8002270 <KALMAN>
			KALMAN(avg_z_a, &P_z_a, &U_hat_z_a, &K_z_a);
 80019ee:	4a86      	ldr	r2, [pc, #536]	; (8001c08 <main+0xc88>)
 80019f0:	4986      	ldr	r1, [pc, #536]	; (8001c0c <main+0xc8c>)
 80019f2:	4887      	ldr	r0, [pc, #540]	; (8001c10 <main+0xc90>)
 80019f4:	ed97 0a53 	vldr	s0, [r7, #332]	; 0x14c
 80019f8:	f000 fc3a 	bl	8002270 <KALMAN>
			/*
			HAL_UART_Transmit(&huart2, (uint8_t*)ACC_Buffer, sprintf(ACC_Buffer, "% 06.5f,", U_hat_x_a - cal_x), 100); // @suppress("Float formatting support")
			HAL_UART_Transmit(&huart2, (uint8_t*)ACC_Buffer, sprintf(ACC_Buffer, "% 06.5f,", U_hat_y_a - cal_y), 100); // @suppress("Float formatting support")
			HAL_UART_Transmit(&huart2, (uint8_t*)ACC_Buffer, sprintf(ACC_Buffer, "% 06.5f\n", U_hat_z_a - cal_z), 100); // @suppress("Float formatting support")
			*/
			current_tick = HAL_GetTick();
 80019fc:	f001 f818 	bl	8002a30 <HAL_GetTick>
 8001a00:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

			if (U_hat_x_a > -0.55 && start_count == 1 && step_counting == 0 && (current_tick - increase_prev) > 400) {
 8001a04:	4b7b      	ldr	r3, [pc, #492]	; (8001bf4 <main+0xc74>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7fe fdbd 	bl	8000588 <__aeabi_f2d>
 8001a0e:	a376      	add	r3, pc, #472	; (adr r3, 8001be8 <main+0xc68>)
 8001a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a14:	f7ff f8a0 	bl	8000b58 <__aeabi_dcmpgt>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d016      	beq.n	8001a4c <main+0xacc>
 8001a1e:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d112      	bne.n	8001a4c <main+0xacc>
 8001a26:	f897 3172 	ldrb.w	r3, [r7, #370]	; 0x172
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d10e      	bne.n	8001a4c <main+0xacc>
 8001a2e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001a32:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001a3c:	d906      	bls.n	8001a4c <main+0xacc>
				step_counting = 1;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	f887 3172 	strb.w	r3, [r7, #370]	; 0x172
				increase_prev = HAL_GetTick();
 8001a44:	f000 fff4 	bl	8002a30 <HAL_GetTick>
 8001a48:	f8c7 016c 	str.w	r0, [r7, #364]	; 0x16c
//				HAL_UART_Transmit(&huart2, (uint8_t*)ACC_Buffer, sprintf(ACC_Buffer, "UP\n\r"), 100);
			}
			if (step_counting == 1 && U_hat_x_a < -0.55) {
 8001a4c:	f897 3172 	ldrb.w	r3, [r7, #370]	; 0x172
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d114      	bne.n	8001a7e <main+0xafe>
 8001a54:	4b67      	ldr	r3, [pc, #412]	; (8001bf4 <main+0xc74>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7fe fd95 	bl	8000588 <__aeabi_f2d>
 8001a5e:	a362      	add	r3, pc, #392	; (adr r3, 8001be8 <main+0xc68>)
 8001a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a64:	f7ff f85a 	bl	8000b1c <__aeabi_dcmplt>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d007      	beq.n	8001a7e <main+0xafe>
				step_counting = 0;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	f887 3172 	strb.w	r3, [r7, #370]	; 0x172
//				HAL_UART_Transmit(&huart2, (uint8_t*)ACC_Buffer, sprintf(ACC_Buffer, "DOWN\n\r"), 100);
				steps++;
 8001a74:	f8b7 3170 	ldrh.w	r3, [r7, #368]	; 0x170
 8001a78:	3301      	adds	r3, #1
 8001a7a:	f8a7 3170 	strh.w	r3, [r7, #368]	; 0x170
 8001a7e:	46ad      	mov	sp, r5

		/*
		 * Magnetometer
		 */

		STATUS_REG_M_status = HAL_I2C_Mem_Read(&hi2c1, (MAG<<1)|0x1, STATUS_REG_M, 1, &STATUS_REG_M_val, 1, 50);
 8001a80:	2332      	movs	r3, #50	; 0x32
 8001a82:	9302      	str	r3, [sp, #8]
 8001a84:	2301      	movs	r3, #1
 8001a86:	9301      	str	r3, [sp, #4]
 8001a88:	f107 030c 	add.w	r3, r7, #12
 8001a8c:	9300      	str	r3, [sp, #0]
 8001a8e:	2301      	movs	r3, #1
 8001a90:	2267      	movs	r2, #103	; 0x67
 8001a92:	213d      	movs	r1, #61	; 0x3d
 8001a94:	485f      	ldr	r0, [pc, #380]	; (8001c14 <main+0xc94>)
 8001a96:	f001 fce5 	bl	8003464 <HAL_I2C_Mem_Read>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7

		if (STATUS_REG_M_status == HAL_OK && ((STATUS_REG_M_val & 0x08)>>3) == 1) {
 8001aa0:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	f040 8298 	bne.w	8001fda <main+0x105a>
 8001aaa:	f107 030c 	add.w	r3, r7, #12
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	f003 0308 	and.w	r3, r3, #8
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	f000 8290 	beq.w	8001fda <main+0x105a>
 8001aba:	466b      	mov	r3, sp
 8001abc:	461d      	mov	r5, r3
			/*
			 * Sampling
			 */
			uint8_t sample_m = 5;
 8001abe:	2305      	movs	r3, #5
 8001ac0:	f887 30f6 	strb.w	r3, [r7, #246]	; 0xf6
			int16_t arr_x_m[sample_m];
 8001ac4:	f897 40f6 	ldrb.w	r4, [r7, #246]	; 0xf6
 8001ac8:	4623      	mov	r3, r4
 8001aca:	3b01      	subs	r3, #1
 8001acc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001ad0:	b2e0      	uxtb	r0, r4
 8001ad2:	f04f 0100 	mov.w	r1, #0
 8001ad6:	f04f 0200 	mov.w	r2, #0
 8001ada:	f04f 0300 	mov.w	r3, #0
 8001ade:	010b      	lsls	r3, r1, #4
 8001ae0:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8001ae4:	0102      	lsls	r2, r0, #4
 8001ae6:	b2e0      	uxtb	r0, r4
 8001ae8:	f04f 0100 	mov.w	r1, #0
 8001aec:	f04f 0200 	mov.w	r2, #0
 8001af0:	f04f 0300 	mov.w	r3, #0
 8001af4:	010b      	lsls	r3, r1, #4
 8001af6:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8001afa:	0102      	lsls	r2, r0, #4
 8001afc:	4623      	mov	r3, r4
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	3307      	adds	r3, #7
 8001b02:	08db      	lsrs	r3, r3, #3
 8001b04:	00db      	lsls	r3, r3, #3
 8001b06:	ebad 0d03 	sub.w	sp, sp, r3
 8001b0a:	ab04      	add	r3, sp, #16
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	085b      	lsrs	r3, r3, #1
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
			int16_t arr_y_m[sample_m];
 8001b16:	f897 40f6 	ldrb.w	r4, [r7, #246]	; 0xf6
 8001b1a:	4623      	mov	r3, r4
 8001b1c:	3b01      	subs	r3, #1
 8001b1e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001b22:	b2e0      	uxtb	r0, r4
 8001b24:	f04f 0100 	mov.w	r1, #0
 8001b28:	f04f 0200 	mov.w	r2, #0
 8001b2c:	f04f 0300 	mov.w	r3, #0
 8001b30:	010b      	lsls	r3, r1, #4
 8001b32:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8001b36:	0102      	lsls	r2, r0, #4
 8001b38:	b2e0      	uxtb	r0, r4
 8001b3a:	f04f 0100 	mov.w	r1, #0
 8001b3e:	f04f 0200 	mov.w	r2, #0
 8001b42:	f04f 0300 	mov.w	r3, #0
 8001b46:	010b      	lsls	r3, r1, #4
 8001b48:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8001b4c:	0102      	lsls	r2, r0, #4
 8001b4e:	4623      	mov	r3, r4
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	3307      	adds	r3, #7
 8001b54:	08db      	lsrs	r3, r3, #3
 8001b56:	00db      	lsls	r3, r3, #3
 8001b58:	ebad 0d03 	sub.w	sp, sp, r3
 8001b5c:	ab04      	add	r3, sp, #16
 8001b5e:	3301      	adds	r3, #1
 8001b60:	085b      	lsrs	r3, r3, #1
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
			int16_t arr_z_m[sample_m];
 8001b68:	f897 40f6 	ldrb.w	r4, [r7, #246]	; 0xf6
 8001b6c:	4623      	mov	r3, r4
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001b74:	b2e0      	uxtb	r0, r4
 8001b76:	f04f 0100 	mov.w	r1, #0
 8001b7a:	f04f 0200 	mov.w	r2, #0
 8001b7e:	f04f 0300 	mov.w	r3, #0
 8001b82:	010b      	lsls	r3, r1, #4
 8001b84:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8001b88:	0102      	lsls	r2, r0, #4
 8001b8a:	b2e0      	uxtb	r0, r4
 8001b8c:	f04f 0100 	mov.w	r1, #0
 8001b90:	f04f 0200 	mov.w	r2, #0
 8001b94:	f04f 0300 	mov.w	r3, #0
 8001b98:	010b      	lsls	r3, r1, #4
 8001b9a:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8001b9e:	0102      	lsls	r2, r0, #4
 8001ba0:	4623      	mov	r3, r4
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	3307      	adds	r3, #7
 8001ba6:	08db      	lsrs	r3, r3, #3
 8001ba8:	00db      	lsls	r3, r3, #3
 8001baa:	ebad 0d03 	sub.w	sp, sp, r3
 8001bae:	ab04      	add	r3, sp, #16
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	085b      	lsrs	r3, r3, #1
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
			for (int i=0;i<sample_m;i++) {
 8001bba:	2300      	movs	r3, #0
 8001bbc:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8001bc0:	e10f      	b.n	8001de2 <main+0xe62>

				STATUS_REG_M_status = HAL_I2C_Mem_Read(&hi2c1, (MAG<<1)|0x1, STATUS_REG_M, 1, &STATUS_REG_M_val, 1, 50);
 8001bc2:	2332      	movs	r3, #50	; 0x32
 8001bc4:	9302      	str	r3, [sp, #8]
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	9301      	str	r3, [sp, #4]
 8001bca:	f107 030c 	add.w	r3, r7, #12
 8001bce:	9300      	str	r3, [sp, #0]
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	2267      	movs	r2, #103	; 0x67
 8001bd4:	213d      	movs	r1, #61	; 0x3d
 8001bd6:	480f      	ldr	r0, [pc, #60]	; (8001c14 <main+0xc94>)
 8001bd8:	f001 fc44 	bl	8003464 <HAL_I2C_Mem_Read>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
				while (((STATUS_REG_M_val & 0x08)>>3) != 1) {
 8001be2:	e02d      	b.n	8001c40 <main+0xcc0>
 8001be4:	f3af 8000 	nop.w
 8001be8:	9999999a 	.word	0x9999999a
 8001bec:	bfe19999 	.word	0xbfe19999
 8001bf0:	20000208 	.word	0x20000208
 8001bf4:	20000204 	.word	0x20000204
 8001bf8:	20000200 	.word	0x20000200
 8001bfc:	20000214 	.word	0x20000214
 8001c00:	20000210 	.word	0x20000210
 8001c04:	2000020c 	.word	0x2000020c
 8001c08:	20000220 	.word	0x20000220
 8001c0c:	2000021c 	.word	0x2000021c
 8001c10:	20000218 	.word	0x20000218
 8001c14:	20000254 	.word	0x20000254
 8001c18:	00401004 	.word	0x00401004
 8001c1c:	3f700401 	.word	0x3f700401
					STATUS_REG_M_status = HAL_I2C_Mem_Read(&hi2c1, (MAG<<1)|0x1, STATUS_REG_M, 1, &STATUS_REG_M_val, 1, 50);
 8001c20:	2332      	movs	r3, #50	; 0x32
 8001c22:	9302      	str	r3, [sp, #8]
 8001c24:	2301      	movs	r3, #1
 8001c26:	9301      	str	r3, [sp, #4]
 8001c28:	f107 030c 	add.w	r3, r7, #12
 8001c2c:	9300      	str	r3, [sp, #0]
 8001c2e:	2301      	movs	r3, #1
 8001c30:	2267      	movs	r2, #103	; 0x67
 8001c32:	213d      	movs	r1, #61	; 0x3d
 8001c34:	4876      	ldr	r0, [pc, #472]	; (8001e10 <main+0xe90>)
 8001c36:	f001 fc15 	bl	8003464 <HAL_I2C_Mem_Read>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
				while (((STATUS_REG_M_val & 0x08)>>3) != 1) {
 8001c40:	f107 030c 	add.w	r3, r7, #12
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	f003 0308 	and.w	r3, r3, #8
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d0e8      	beq.n	8001c20 <main+0xca0>
				}
				OUTX_L_M_status = HAL_I2C_Mem_Read(&hi2c1, (MAG<<1)|0x1, OUTX_L_REG_M, 1, &OUTX_L_REG_M_val, 1, 50);
 8001c4e:	2332      	movs	r3, #50	; 0x32
 8001c50:	9302      	str	r3, [sp, #8]
 8001c52:	2301      	movs	r3, #1
 8001c54:	9301      	str	r3, [sp, #4]
 8001c56:	f107 030b 	add.w	r3, r7, #11
 8001c5a:	9300      	str	r3, [sp, #0]
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	2268      	movs	r2, #104	; 0x68
 8001c60:	213d      	movs	r1, #61	; 0x3d
 8001c62:	486b      	ldr	r0, [pc, #428]	; (8001e10 <main+0xe90>)
 8001c64:	f001 fbfe 	bl	8003464 <HAL_I2C_Mem_Read>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	f887 3120 	strb.w	r3, [r7, #288]	; 0x120
				OUTX_H_M_status = HAL_I2C_Mem_Read(&hi2c1, (MAG<<1)|0x1, OUTX_H_REG_M, 1, &OUTX_H_REG_M_val, 1, 50);
 8001c6e:	2332      	movs	r3, #50	; 0x32
 8001c70:	9302      	str	r3, [sp, #8]
 8001c72:	2301      	movs	r3, #1
 8001c74:	9301      	str	r3, [sp, #4]
 8001c76:	f107 030a 	add.w	r3, r7, #10
 8001c7a:	9300      	str	r3, [sp, #0]
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	2269      	movs	r2, #105	; 0x69
 8001c80:	213d      	movs	r1, #61	; 0x3d
 8001c82:	4863      	ldr	r0, [pc, #396]	; (8001e10 <main+0xe90>)
 8001c84:	f001 fbee 	bl	8003464 <HAL_I2C_Mem_Read>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

				OUTY_L_M_status = HAL_I2C_Mem_Read(&hi2c1, (MAG<<1)|0x1, OUTY_L_REG_M, 1, &OUTY_L_REG_M_val, 1, 50);
 8001c8e:	2332      	movs	r3, #50	; 0x32
 8001c90:	9302      	str	r3, [sp, #8]
 8001c92:	2301      	movs	r3, #1
 8001c94:	9301      	str	r3, [sp, #4]
 8001c96:	f107 0309 	add.w	r3, r7, #9
 8001c9a:	9300      	str	r3, [sp, #0]
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	226a      	movs	r2, #106	; 0x6a
 8001ca0:	213d      	movs	r1, #61	; 0x3d
 8001ca2:	485b      	ldr	r0, [pc, #364]	; (8001e10 <main+0xe90>)
 8001ca4:	f001 fbde 	bl	8003464 <HAL_I2C_Mem_Read>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
				OUTY_H_M_status = HAL_I2C_Mem_Read(&hi2c1, (MAG<<1)|0x1, OUTY_H_REG_M, 1, &OUTY_H_REG_M_val, 1, 50);
 8001cae:	2332      	movs	r3, #50	; 0x32
 8001cb0:	9302      	str	r3, [sp, #8]
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	9301      	str	r3, [sp, #4]
 8001cb6:	f107 0308 	add.w	r3, r7, #8
 8001cba:	9300      	str	r3, [sp, #0]
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	226b      	movs	r2, #107	; 0x6b
 8001cc0:	213d      	movs	r1, #61	; 0x3d
 8001cc2:	4853      	ldr	r0, [pc, #332]	; (8001e10 <main+0xe90>)
 8001cc4:	f001 fbce 	bl	8003464 <HAL_I2C_Mem_Read>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d

				OUTZ_L_M_status = HAL_I2C_Mem_Read(&hi2c1, (MAG<<1)|0x1, OUTZ_L_REG_M, 1, &OUTZ_L_REG_M_val, 1, 50);
 8001cce:	2332      	movs	r3, #50	; 0x32
 8001cd0:	9302      	str	r3, [sp, #8]
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	9301      	str	r3, [sp, #4]
 8001cd6:	1dfb      	adds	r3, r7, #7
 8001cd8:	9300      	str	r3, [sp, #0]
 8001cda:	2301      	movs	r3, #1
 8001cdc:	226c      	movs	r2, #108	; 0x6c
 8001cde:	213d      	movs	r1, #61	; 0x3d
 8001ce0:	484b      	ldr	r0, [pc, #300]	; (8001e10 <main+0xe90>)
 8001ce2:	f001 fbbf 	bl	8003464 <HAL_I2C_Mem_Read>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c
				OUTZ_H_M_status = HAL_I2C_Mem_Read(&hi2c1, (MAG<<1)|0x1, OUTZ_H_REG_M, 1, &OUTZ_H_REG_M_val, 1, 50);
 8001cec:	2332      	movs	r3, #50	; 0x32
 8001cee:	9302      	str	r3, [sp, #8]
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	9301      	str	r3, [sp, #4]
 8001cf4:	1dbb      	adds	r3, r7, #6
 8001cf6:	9300      	str	r3, [sp, #0]
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	226d      	movs	r2, #109	; 0x6d
 8001cfc:	213d      	movs	r1, #61	; 0x3d
 8001cfe:	4844      	ldr	r0, [pc, #272]	; (8001e10 <main+0xe90>)
 8001d00:	f001 fbb0 	bl	8003464 <HAL_I2C_Mem_Read>
 8001d04:	4603      	mov	r3, r0
 8001d06:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b

				if (OUTX_L_M_status == HAL_OK && OUTX_H_M_status == HAL_OK) {
 8001d0a:	f897 3120 	ldrb.w	r3, [r7, #288]	; 0x120
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d116      	bne.n	8001d40 <main+0xdc0>
 8001d12:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d112      	bne.n	8001d40 <main+0xdc0>
					OUTX_M_val = OUTX_H_REG_M_val;
 8001d1a:	f107 030a 	add.w	r3, r7, #10
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	f8a7 317a 	strh.w	r3, [r7, #378]	; 0x17a
					OUTX_M_val <<= 8;
 8001d24:	f9b7 317a 	ldrsh.w	r3, [r7, #378]	; 0x17a
 8001d28:	021b      	lsls	r3, r3, #8
 8001d2a:	f8a7 317a 	strh.w	r3, [r7, #378]	; 0x17a
					OUTX_M_val |= OUTX_L_REG_M_val;
 8001d2e:	f107 030b 	add.w	r3, r7, #11
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	b21a      	sxth	r2, r3
 8001d36:	f8b7 317a 	ldrh.w	r3, [r7, #378]	; 0x17a
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	f8a7 317a 	strh.w	r3, [r7, #378]	; 0x17a
//					HAL_UART_Transmit(&huart2, (uint8_t*)MAG_Buffer, sprintf(MAG_Buffer, "X: %05d  ", OUTX_M_val), 100);
				}

				if (OUTY_L_M_status == HAL_OK && OUTY_H_M_status == HAL_OK) {
 8001d40:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d116      	bne.n	8001d76 <main+0xdf6>
 8001d48:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d112      	bne.n	8001d76 <main+0xdf6>
					OUTY_M_val = OUTY_H_REG_M_val;
 8001d50:	f107 0308 	add.w	r3, r7, #8
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	f8a7 317c 	strh.w	r3, [r7, #380]	; 0x17c
					OUTY_M_val <<= 8;
 8001d5a:	f9b7 317c 	ldrsh.w	r3, [r7, #380]	; 0x17c
 8001d5e:	021b      	lsls	r3, r3, #8
 8001d60:	f8a7 317c 	strh.w	r3, [r7, #380]	; 0x17c
					OUTY_M_val |= OUTY_L_REG_M_val;
 8001d64:	f107 0309 	add.w	r3, r7, #9
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	b21a      	sxth	r2, r3
 8001d6c:	f8b7 317c 	ldrh.w	r3, [r7, #380]	; 0x17c
 8001d70:	4313      	orrs	r3, r2
 8001d72:	f8a7 317c 	strh.w	r3, [r7, #380]	; 0x17c
//					HAL_UART_Transmit(&huart2, (uint8_t*)MAG_Buffer, sprintf(MAG_Buffer, "Y: %05d  ", OUTY_M_val), 100);
				}

				if (OUTZ_L_M_status == HAL_OK && OUTZ_H_M_status == HAL_OK) {
 8001d76:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d114      	bne.n	8001da8 <main+0xe28>
 8001d7e:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d110      	bne.n	8001da8 <main+0xe28>
					OUTZ_M_val = OUTZ_H_REG_M_val;
 8001d86:	1dbb      	adds	r3, r7, #6
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	f8a7 317e 	strh.w	r3, [r7, #382]	; 0x17e
					OUTZ_M_val <<= 8;
 8001d8e:	f9b7 317e 	ldrsh.w	r3, [r7, #382]	; 0x17e
 8001d92:	021b      	lsls	r3, r3, #8
 8001d94:	f8a7 317e 	strh.w	r3, [r7, #382]	; 0x17e
					OUTZ_M_val |= OUTZ_L_REG_M_val;
 8001d98:	1dfb      	adds	r3, r7, #7
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	b21a      	sxth	r2, r3
 8001d9e:	f8b7 317e 	ldrh.w	r3, [r7, #382]	; 0x17e
 8001da2:	4313      	orrs	r3, r2
 8001da4:	f8a7 317e 	strh.w	r3, [r7, #382]	; 0x17e
//					HAL_UART_Transmit(&huart2, (uint8_t*)MAG_Buffer, sprintf(MAG_Buffer, "Z: %05d  \n\r", OUTZ_M_val), 100);
				}
				arr_x_m[i] = OUTX_M_val;
 8001da8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001dac:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8001db0:	f8b7 117a 	ldrh.w	r1, [r7, #378]	; 0x17a
 8001db4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				arr_y_m[i] = OUTY_M_val;
 8001db8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001dbc:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8001dc0:	f8b7 117c 	ldrh.w	r1, [r7, #380]	; 0x17c
 8001dc4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				arr_z_m[i] = OUTZ_M_val;
 8001dc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001dcc:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8001dd0:	f8b7 117e 	ldrh.w	r1, [r7, #382]	; 0x17e
 8001dd4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (int i=0;i<sample_m;i++) {
 8001dd8:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001ddc:	3301      	adds	r3, #1
 8001dde:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8001de2:	f897 30f6 	ldrb.w	r3, [r7, #246]	; 0xf6
 8001de6:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8001dea:	429a      	cmp	r2, r3
 8001dec:	f6ff aee9 	blt.w	8001bc2 <main+0xc42>
			}

			/*
			 * Average
			 */
			float avg_x_m = 0;
 8001df0:	f04f 0300 	mov.w	r3, #0
 8001df4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
			float avg_y_m = 0;
 8001df8:	f04f 0300 	mov.w	r3, #0
 8001dfc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
			float avg_z_m = 0;
 8001e00:	f04f 0300 	mov.w	r3, #0
 8001e04:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
			for (int i=0;i<sample_m;i++) {
 8001e08:	2300      	movs	r3, #0
 8001e0a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8001e0e:	e038      	b.n	8001e82 <main+0xf02>
 8001e10:	20000254 	.word	0x20000254
 8001e14:	3ac80000 	.word	0x3ac80000
				avg_x_m += arr_x_m[i];
 8001e18:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001e1c:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8001e20:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001e24:	ee07 3a90 	vmov	s15, r3
 8001e28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e2c:	ed97 7a4f 	vldr	s14, [r7, #316]	; 0x13c
 8001e30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e34:	edc7 7a4f 	vstr	s15, [r7, #316]	; 0x13c
				avg_y_m += arr_y_m[i];
 8001e38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e3c:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8001e40:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001e44:	ee07 3a90 	vmov	s15, r3
 8001e48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e4c:	ed97 7a4e 	vldr	s14, [r7, #312]	; 0x138
 8001e50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e54:	edc7 7a4e 	vstr	s15, [r7, #312]	; 0x138
				avg_z_m += arr_z_m[i];
 8001e58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001e5c:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8001e60:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001e64:	ee07 3a90 	vmov	s15, r3
 8001e68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e6c:	ed97 7a4d 	vldr	s14, [r7, #308]	; 0x134
 8001e70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e74:	edc7 7a4d 	vstr	s15, [r7, #308]	; 0x134
			for (int i=0;i<sample_m;i++) {
 8001e78:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8001e82:	f897 30f6 	ldrb.w	r3, [r7, #246]	; 0xf6
 8001e86:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	dbc4      	blt.n	8001e18 <main+0xe98>
			}

			/*
			 * Calculation
			 */
			avg_x_m = (avg_x_m / sample_m) * (100.0/65536);
 8001e8e:	f897 30f6 	ldrb.w	r3, [r7, #246]	; 0xf6
 8001e92:	ee07 3a90 	vmov	s15, r3
 8001e96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e9a:	edd7 6a4f 	vldr	s13, [r7, #316]	; 0x13c
 8001e9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ea2:	ed1f 7a24 	vldr	s14, [pc, #-144]	; 8001e14 <main+0xe94>
 8001ea6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001eaa:	edc7 7a4f 	vstr	s15, [r7, #316]	; 0x13c
			avg_y_m = (avg_y_m / sample_m) * (100.0/65536);
 8001eae:	f897 30f6 	ldrb.w	r3, [r7, #246]	; 0xf6
 8001eb2:	ee07 3a90 	vmov	s15, r3
 8001eb6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001eba:	edd7 6a4e 	vldr	s13, [r7, #312]	; 0x138
 8001ebe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ec2:	ed1f 7a2c 	vldr	s14, [pc, #-176]	; 8001e14 <main+0xe94>
 8001ec6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001eca:	edc7 7a4e 	vstr	s15, [r7, #312]	; 0x138
			avg_z_m = (avg_z_m / sample_m) * (100.0/65536);
 8001ece:	f897 30f6 	ldrb.w	r3, [r7, #246]	; 0xf6
 8001ed2:	ee07 3a90 	vmov	s15, r3
 8001ed6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001eda:	edd7 6a4d 	vldr	s13, [r7, #308]	; 0x134
 8001ede:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ee2:	ed1f 7a34 	vldr	s14, [pc, #-208]	; 8001e14 <main+0xe94>
 8001ee6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001eea:	edc7 7a4d 	vstr	s15, [r7, #308]	; 0x134

			/*
			 * Serial
			 */

			KALMAN(avg_x_m, &P_x_m, &U_hat_x_m, &K_x_m);
 8001eee:	4ad0      	ldr	r2, [pc, #832]	; (8002230 <main+0x12b0>)
 8001ef0:	49d0      	ldr	r1, [pc, #832]	; (8002234 <main+0x12b4>)
 8001ef2:	48d1      	ldr	r0, [pc, #836]	; (8002238 <main+0x12b8>)
 8001ef4:	ed97 0a4f 	vldr	s0, [r7, #316]	; 0x13c
 8001ef8:	f000 f9ba 	bl	8002270 <KALMAN>
			KALMAN(avg_y_m, &P_y_m, &U_hat_y_m, &K_y_m);
 8001efc:	4acf      	ldr	r2, [pc, #828]	; (800223c <main+0x12bc>)
 8001efe:	49d0      	ldr	r1, [pc, #832]	; (8002240 <main+0x12c0>)
 8001f00:	48d0      	ldr	r0, [pc, #832]	; (8002244 <main+0x12c4>)
 8001f02:	ed97 0a4e 	vldr	s0, [r7, #312]	; 0x138
 8001f06:	f000 f9b3 	bl	8002270 <KALMAN>
			KALMAN(avg_z_m, &P_z_m, &U_hat_z_m, &K_z_m);
 8001f0a:	4acf      	ldr	r2, [pc, #828]	; (8002248 <main+0x12c8>)
 8001f0c:	49cf      	ldr	r1, [pc, #828]	; (800224c <main+0x12cc>)
 8001f0e:	48d0      	ldr	r0, [pc, #832]	; (8002250 <main+0x12d0>)
 8001f10:	ed97 0a4d 	vldr	s0, [r7, #308]	; 0x134
 8001f14:	f000 f9ac 	bl	8002270 <KALMAN>
			HAL_UART_Transmit(&huart2, (uint8_t*)MAG_Buffer, sprintf(MAG_Buffer, "% 06.5f,", avg_z_m), 100); // @suppress("Float formatting support")
			*/


//			yaw = atan2f(avg_x_m, avg_y_m);
			yaw = atan2f(U_hat_z_m, U_hat_y_m);
 8001f18:	4bcc      	ldr	r3, [pc, #816]	; (800224c <main+0x12cc>)
 8001f1a:	edd3 7a00 	vldr	s15, [r3]
 8001f1e:	4bc8      	ldr	r3, [pc, #800]	; (8002240 <main+0x12c0>)
 8001f20:	ed93 7a00 	vldr	s14, [r3]
 8001f24:	eef0 0a47 	vmov.f32	s1, s14
 8001f28:	eeb0 0a67 	vmov.f32	s0, s15
 8001f2c:	f006 f938 	bl	80081a0 <atan2f>
 8001f30:	ed87 0a59 	vstr	s0, [r7, #356]	; 0x164

			if(yaw <0) yaw += 2*PI;
 8001f34:	edd7 7a59 	vldr	s15, [r7, #356]	; 0x164
 8001f38:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f40:	d511      	bpl.n	8001f66 <main+0xfe6>
 8001f42:	f8d7 0164 	ldr.w	r0, [r7, #356]	; 0x164
 8001f46:	f7fe fb1f 	bl	8000588 <__aeabi_f2d>
 8001f4a:	a3b5      	add	r3, pc, #724	; (adr r3, 8002220 <main+0x12a0>)
 8001f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f50:	f7fe f9bc 	bl	80002cc <__adddf3>
 8001f54:	4602      	mov	r2, r0
 8001f56:	460b      	mov	r3, r1
 8001f58:	4610      	mov	r0, r2
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	f7fe fe44 	bl	8000be8 <__aeabi_d2f>
 8001f60:	4603      	mov	r3, r0
 8001f62:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
			// Correcting due to the addition of the declination angle
			if(yaw > 2*PI)yaw -= 2*PI;
 8001f66:	f8d7 0164 	ldr.w	r0, [r7, #356]	; 0x164
 8001f6a:	f7fe fb0d 	bl	8000588 <__aeabi_f2d>
 8001f6e:	a3ac      	add	r3, pc, #688	; (adr r3, 8002220 <main+0x12a0>)
 8001f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f74:	f7fe fdf0 	bl	8000b58 <__aeabi_dcmpgt>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d011      	beq.n	8001fa2 <main+0x1022>
 8001f7e:	f8d7 0164 	ldr.w	r0, [r7, #356]	; 0x164
 8001f82:	f7fe fb01 	bl	8000588 <__aeabi_f2d>
 8001f86:	a3a6      	add	r3, pc, #664	; (adr r3, 8002220 <main+0x12a0>)
 8001f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f8c:	f7fe f99c 	bl	80002c8 <__aeabi_dsub>
 8001f90:	4602      	mov	r2, r0
 8001f92:	460b      	mov	r3, r1
 8001f94:	4610      	mov	r0, r2
 8001f96:	4619      	mov	r1, r3
 8001f98:	f7fe fe26 	bl	8000be8 <__aeabi_d2f>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
			yaw = yaw * 180.0/PI;
 8001fa2:	f8d7 0164 	ldr.w	r0, [r7, #356]	; 0x164
 8001fa6:	f7fe faef 	bl	8000588 <__aeabi_f2d>
 8001faa:	f04f 0200 	mov.w	r2, #0
 8001fae:	4ba9      	ldr	r3, [pc, #676]	; (8002254 <main+0x12d4>)
 8001fb0:	f7fe fb42 	bl	8000638 <__aeabi_dmul>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	4610      	mov	r0, r2
 8001fba:	4619      	mov	r1, r3
 8001fbc:	a39a      	add	r3, pc, #616	; (adr r3, 8002228 <main+0x12a8>)
 8001fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc2:	f7fe fc63 	bl	800088c <__aeabi_ddiv>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	460b      	mov	r3, r1
 8001fca:	4610      	mov	r0, r2
 8001fcc:	4619      	mov	r1, r3
 8001fce:	f7fe fe0b 	bl	8000be8 <__aeabi_d2f>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8001fd8:	46ad      	mov	sp, r5
//			HAL_UART_Transmit(&huart2, (uint8_t*)MAG_Buffer, sprintf(MAG_Buffer, "Total: % 06.5f Gauss \n\r", total), 100); // @suppress("Float formatting support")
		}



		if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 0 && pushed == 0) {
 8001fda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fde:	489e      	ldr	r0, [pc, #632]	; (8002258 <main+0x12d8>)
 8001fe0:	f000 ffd0 	bl	8002f84 <HAL_GPIO_ReadPin>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	f040 8101 	bne.w	80021ee <main+0x126e>
 8001fec:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f040 80fc 	bne.w	80021ee <main+0x126e>
			pushed = 1;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
			if (start_count == 0) {
 8001ffc:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 8002000:	2b00      	cmp	r3, #0
 8002002:	d116      	bne.n	8002032 <main+0x10b2>
				steps = 0;
 8002004:	2300      	movs	r3, #0
 8002006:	f8a7 3170 	strh.w	r3, [r7, #368]	; 0x170
				start_count = 1;
 800200a:	2301      	movs	r3, #1
 800200c:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
				increase_prev = HAL_GetTick();
 8002010:	f000 fd0e 	bl	8002a30 <HAL_GetTick>
 8002014:	f8c7 016c 	str.w	r0, [r7, #364]	; 0x16c
				if (first_pochi == 0) {
 8002018:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 800201c:	2b00      	cmp	r3, #0
 800201e:	f040 80e0 	bne.w	80021e2 <main+0x1262>
					initial_yaw = yaw;
 8002022:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002026:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
					first_pochi = 1;
 800202a:	2301      	movs	r3, #1
 800202c:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
 8002030:	e0d7      	b.n	80021e2 <main+0x1262>
				}

			} else if (start_count == 1) {
 8002032:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 8002036:	2b01      	cmp	r3, #1
 8002038:	f040 80d3 	bne.w	80021e2 <main+0x1262>
				start_count = 0;
 800203c:	2300      	movs	r3, #0
 800203e:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
				float turn = initial_yaw - yaw;
 8002042:	ed97 7a5a 	vldr	s14, [r7, #360]	; 0x168
 8002046:	edd7 7a59 	vldr	s15, [r7, #356]	; 0x164
 800204a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800204e:	edc7 7a36 	vstr	s15, [r7, #216]	; 0xd8
				float x_pos = x_pos_prev + step_length * steps * cos(turn * PI/180);
 8002052:	f8d7 015c 	ldr.w	r0, [r7, #348]	; 0x15c
 8002056:	f7fe fa97 	bl	8000588 <__aeabi_f2d>
 800205a:	4604      	mov	r4, r0
 800205c:	460d      	mov	r5, r1
 800205e:	f8b7 3170 	ldrh.w	r3, [r7, #368]	; 0x170
 8002062:	ee07 3a90 	vmov	s15, r3
 8002066:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800206a:	4b7c      	ldr	r3, [pc, #496]	; (800225c <main+0x12dc>)
 800206c:	edd3 7a00 	vldr	s15, [r3]
 8002070:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002074:	ee17 0a90 	vmov	r0, s15
 8002078:	f7fe fa86 	bl	8000588 <__aeabi_f2d>
 800207c:	4680      	mov	r8, r0
 800207e:	4689      	mov	r9, r1
 8002080:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8002084:	f7fe fa80 	bl	8000588 <__aeabi_f2d>
 8002088:	a367      	add	r3, pc, #412	; (adr r3, 8002228 <main+0x12a8>)
 800208a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800208e:	f7fe fad3 	bl	8000638 <__aeabi_dmul>
 8002092:	4602      	mov	r2, r0
 8002094:	460b      	mov	r3, r1
 8002096:	4610      	mov	r0, r2
 8002098:	4619      	mov	r1, r3
 800209a:	f04f 0200 	mov.w	r2, #0
 800209e:	4b6d      	ldr	r3, [pc, #436]	; (8002254 <main+0x12d4>)
 80020a0:	f7fe fbf4 	bl	800088c <__aeabi_ddiv>
 80020a4:	4602      	mov	r2, r0
 80020a6:	460b      	mov	r3, r1
 80020a8:	ec43 2b17 	vmov	d7, r2, r3
 80020ac:	eeb0 0a47 	vmov.f32	s0, s14
 80020b0:	eef0 0a67 	vmov.f32	s1, s15
 80020b4:	f005 ffd0 	bl	8008058 <cos>
 80020b8:	ec53 2b10 	vmov	r2, r3, d0
 80020bc:	4640      	mov	r0, r8
 80020be:	4649      	mov	r1, r9
 80020c0:	f7fe faba 	bl	8000638 <__aeabi_dmul>
 80020c4:	4602      	mov	r2, r0
 80020c6:	460b      	mov	r3, r1
 80020c8:	4620      	mov	r0, r4
 80020ca:	4629      	mov	r1, r5
 80020cc:	f7fe f8fe 	bl	80002cc <__adddf3>
 80020d0:	4602      	mov	r2, r0
 80020d2:	460b      	mov	r3, r1
 80020d4:	4610      	mov	r0, r2
 80020d6:	4619      	mov	r1, r3
 80020d8:	f7fe fd86 	bl	8000be8 <__aeabi_d2f>
 80020dc:	4603      	mov	r3, r0
 80020de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
				float y_pos = y_pos_prev + step_length * steps * sin(turn * PI/180);
 80020e2:	f8d7 0158 	ldr.w	r0, [r7, #344]	; 0x158
 80020e6:	f7fe fa4f 	bl	8000588 <__aeabi_f2d>
 80020ea:	4604      	mov	r4, r0
 80020ec:	460d      	mov	r5, r1
 80020ee:	f8b7 3170 	ldrh.w	r3, [r7, #368]	; 0x170
 80020f2:	ee07 3a90 	vmov	s15, r3
 80020f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020fa:	4b58      	ldr	r3, [pc, #352]	; (800225c <main+0x12dc>)
 80020fc:	edd3 7a00 	vldr	s15, [r3]
 8002100:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002104:	ee17 0a90 	vmov	r0, s15
 8002108:	f7fe fa3e 	bl	8000588 <__aeabi_f2d>
 800210c:	4680      	mov	r8, r0
 800210e:	4689      	mov	r9, r1
 8002110:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8002114:	f7fe fa38 	bl	8000588 <__aeabi_f2d>
 8002118:	a343      	add	r3, pc, #268	; (adr r3, 8002228 <main+0x12a8>)
 800211a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800211e:	f7fe fa8b 	bl	8000638 <__aeabi_dmul>
 8002122:	4602      	mov	r2, r0
 8002124:	460b      	mov	r3, r1
 8002126:	4610      	mov	r0, r2
 8002128:	4619      	mov	r1, r3
 800212a:	f04f 0200 	mov.w	r2, #0
 800212e:	4b49      	ldr	r3, [pc, #292]	; (8002254 <main+0x12d4>)
 8002130:	f7fe fbac 	bl	800088c <__aeabi_ddiv>
 8002134:	4602      	mov	r2, r0
 8002136:	460b      	mov	r3, r1
 8002138:	ec43 2b17 	vmov	d7, r2, r3
 800213c:	eeb0 0a47 	vmov.f32	s0, s14
 8002140:	eef0 0a67 	vmov.f32	s1, s15
 8002144:	f005 ffd8 	bl	80080f8 <sin>
 8002148:	ec53 2b10 	vmov	r2, r3, d0
 800214c:	4640      	mov	r0, r8
 800214e:	4649      	mov	r1, r9
 8002150:	f7fe fa72 	bl	8000638 <__aeabi_dmul>
 8002154:	4602      	mov	r2, r0
 8002156:	460b      	mov	r3, r1
 8002158:	4620      	mov	r0, r4
 800215a:	4629      	mov	r1, r5
 800215c:	f7fe f8b6 	bl	80002cc <__adddf3>
 8002160:	4602      	mov	r2, r0
 8002162:	460b      	mov	r3, r1
 8002164:	4610      	mov	r0, r2
 8002166:	4619      	mov	r1, r3
 8002168:	f7fe fd3e 	bl	8000be8 <__aeabi_d2f>
 800216c:	4603      	mov	r3, r0
 800216e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

				HAL_UART_Transmit(&huart2, (uint8_t*)ACC_Buffer, sprintf(ACC_Buffer, "%f,", x_pos), 100);
 8002172:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8002176:	f7fe fa07 	bl	8000588 <__aeabi_f2d>
 800217a:	4602      	mov	r2, r0
 800217c:	460b      	mov	r3, r1
 800217e:	f107 0074 	add.w	r0, r7, #116	; 0x74
 8002182:	4937      	ldr	r1, [pc, #220]	; (8002260 <main+0x12e0>)
 8002184:	f003 fd3a 	bl	8005bfc <siprintf>
 8002188:	4603      	mov	r3, r0
 800218a:	b29a      	uxth	r2, r3
 800218c:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8002190:	2364      	movs	r3, #100	; 0x64
 8002192:	4834      	ldr	r0, [pc, #208]	; (8002264 <main+0x12e4>)
 8002194:	f002 fdcd 	bl	8004d32 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, (uint8_t*)ACC_Buffer, sprintf(ACC_Buffer, "%f\n\r", y_pos), 100);
 8002198:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800219c:	f7fe f9f4 	bl	8000588 <__aeabi_f2d>
 80021a0:	4602      	mov	r2, r0
 80021a2:	460b      	mov	r3, r1
 80021a4:	f107 0074 	add.w	r0, r7, #116	; 0x74
 80021a8:	492f      	ldr	r1, [pc, #188]	; (8002268 <main+0x12e8>)
 80021aa:	f003 fd27 	bl	8005bfc <siprintf>
 80021ae:	4603      	mov	r3, r0
 80021b0:	b29a      	uxth	r2, r3
 80021b2:	f107 0174 	add.w	r1, r7, #116	; 0x74
 80021b6:	2364      	movs	r3, #100	; 0x64
 80021b8:	482a      	ldr	r0, [pc, #168]	; (8002264 <main+0x12e4>)
 80021ba:	f002 fdba 	bl	8004d32 <HAL_UART_Transmit>
				x_pos_prev = x_pos;
 80021be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80021c2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
				y_pos_prev = y_pos;
 80021c6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80021ca:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158



//				initial_yaw = yaw;
				start_count = 1;
 80021ce:	2301      	movs	r3, #1
 80021d0:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
				steps = 0;
 80021d4:	2300      	movs	r3, #0
 80021d6:	f8a7 3170 	strh.w	r3, [r7, #368]	; 0x170
				increase_prev = HAL_GetTick();
 80021da:	f000 fc29 	bl	8002a30 <HAL_GetTick>
 80021de:	f8c7 016c 	str.w	r0, [r7, #364]	; 0x16c
			}

			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 80021e2:	2201      	movs	r2, #1
 80021e4:	2120      	movs	r1, #32
 80021e6:	4821      	ldr	r0, [pc, #132]	; (800226c <main+0x12ec>)
 80021e8:	f000 fee4 	bl	8002fb4 <HAL_GPIO_WritePin>
 80021ec:	e013      	b.n	8002216 <main+0x1296>
		} else if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 1 && pushed == 1) {
 80021ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021f2:	4819      	ldr	r0, [pc, #100]	; (8002258 <main+0x12d8>)
 80021f4:	f000 fec6 	bl	8002f84 <HAL_GPIO_ReadPin>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d10b      	bne.n	8002216 <main+0x1296>
 80021fe:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002202:	2b01      	cmp	r3, #1
 8002204:	d107      	bne.n	8002216 <main+0x1296>
			pushed = 0;
 8002206:	2300      	movs	r3, #0
 8002208:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 800220c:	2200      	movs	r2, #0
 800220e:	2120      	movs	r1, #32
 8002210:	4816      	ldr	r0, [pc, #88]	; (800226c <main+0x12ec>)
 8002212:	f000 fecf 	bl	8002fb4 <HAL_GPIO_WritePin>


		/*
		 * Wait
		 */
		HAL_Delay(10);
 8002216:	200a      	movs	r0, #10
 8002218:	f000 fc16 	bl	8002a48 <HAL_Delay>
	{
 800221c:	f7ff b97d 	b.w	800151a <main+0x59a>
 8002220:	54524550 	.word	0x54524550
 8002224:	401921fb 	.word	0x401921fb
 8002228:	54524550 	.word	0x54524550
 800222c:	400921fb 	.word	0x400921fb
 8002230:	2000022c 	.word	0x2000022c
 8002234:	20000228 	.word	0x20000228
 8002238:	20000224 	.word	0x20000224
 800223c:	20000238 	.word	0x20000238
 8002240:	20000234 	.word	0x20000234
 8002244:	20000230 	.word	0x20000230
 8002248:	20000244 	.word	0x20000244
 800224c:	20000240 	.word	0x20000240
 8002250:	2000023c 	.word	0x2000023c
 8002254:	40668000 	.word	0x40668000
 8002258:	40020800 	.word	0x40020800
 800225c:	20000004 	.word	0x20000004
 8002260:	080094f0 	.word	0x080094f0
 8002264:	200002a8 	.word	0x200002a8
 8002268:	080094f4 	.word	0x080094f4
 800226c:	40020000 	.word	0x40020000

08002270 <KALMAN>:
	}
}



void KALMAN(float U, float *P, float *U_hat, float *K) {
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	ed87 0a03 	vstr	s0, [r7, #12]
 800227a:	60b8      	str	r0, [r7, #8]
 800227c:	6079      	str	r1, [r7, #4]
 800227e:	603a      	str	r2, [r7, #0]
	*K = (*P)*H/(H*(*P)*H+R);
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	edd3 7a00 	vldr	s15, [r3]
 8002286:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800228a:	ee67 6a87 	vmul.f32	s13, s15, s14
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	edd3 7a00 	vldr	s15, [r3]
 8002294:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002298:	ee67 7a87 	vmul.f32	s15, s15, s14
 800229c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80022a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022a4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80022a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80022ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	edc3 7a00 	vstr	s15, [r3]
	*U_hat = (*U_hat)+(*K)*(U-H*(*U_hat));
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	ed93 7a00 	vldr	s14, [r3]
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	edd3 6a00 	vldr	s13, [r3]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	edd3 7a00 	vldr	s15, [r3]
 80022c8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80022cc:	ee67 7a86 	vmul.f32	s15, s15, s12
 80022d0:	ed97 6a03 	vldr	s12, [r7, #12]
 80022d4:	ee76 7a67 	vsub.f32	s15, s12, s15
 80022d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	edc3 7a00 	vstr	s15, [r3]
	*P=(1-(*K)*H)*(*P)+Q;
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	edd3 7a00 	vldr	s15, [r3]
 80022ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80022f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80022f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	edd3 7a00 	vldr	s15, [r3]
 8002302:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002306:	4b07      	ldr	r3, [pc, #28]	; (8002324 <KALMAN+0xb4>)
 8002308:	edd3 7a00 	vldr	s15, [r3]
 800230c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	edc3 7a00 	vstr	s15, [r3]
	return;
 8002316:	bf00      	nop
}
 8002318:	3714      	adds	r7, #20
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	20000000 	.word	0x20000000

08002328 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b094      	sub	sp, #80	; 0x50
 800232c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800232e:	f107 031c 	add.w	r3, r7, #28
 8002332:	2234      	movs	r2, #52	; 0x34
 8002334:	2100      	movs	r1, #0
 8002336:	4618      	mov	r0, r3
 8002338:	f002 ffee 	bl	8005318 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800233c:	f107 0308 	add.w	r3, r7, #8
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	605a      	str	r2, [r3, #4]
 8002346:	609a      	str	r2, [r3, #8]
 8002348:	60da      	str	r2, [r3, #12]
 800234a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800234c:	2300      	movs	r3, #0
 800234e:	607b      	str	r3, [r7, #4]
 8002350:	4b2a      	ldr	r3, [pc, #168]	; (80023fc <SystemClock_Config+0xd4>)
 8002352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002354:	4a29      	ldr	r2, [pc, #164]	; (80023fc <SystemClock_Config+0xd4>)
 8002356:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800235a:	6413      	str	r3, [r2, #64]	; 0x40
 800235c:	4b27      	ldr	r3, [pc, #156]	; (80023fc <SystemClock_Config+0xd4>)
 800235e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002360:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002364:	607b      	str	r3, [r7, #4]
 8002366:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002368:	2300      	movs	r3, #0
 800236a:	603b      	str	r3, [r7, #0]
 800236c:	4b24      	ldr	r3, [pc, #144]	; (8002400 <SystemClock_Config+0xd8>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002374:	4a22      	ldr	r2, [pc, #136]	; (8002400 <SystemClock_Config+0xd8>)
 8002376:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800237a:	6013      	str	r3, [r2, #0]
 800237c:	4b20      	ldr	r3, [pc, #128]	; (8002400 <SystemClock_Config+0xd8>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002384:	603b      	str	r3, [r7, #0]
 8002386:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002388:	2302      	movs	r3, #2
 800238a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800238c:	2301      	movs	r3, #1
 800238e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002390:	2310      	movs	r3, #16
 8002392:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002394:	2302      	movs	r3, #2
 8002396:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002398:	2300      	movs	r3, #0
 800239a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800239c:	2310      	movs	r3, #16
 800239e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80023a0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80023a4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80023a6:	2304      	movs	r3, #4
 80023a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80023aa:	2302      	movs	r3, #2
 80023ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80023ae:	2302      	movs	r3, #2
 80023b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023b2:	f107 031c 	add.w	r3, r7, #28
 80023b6:	4618      	mov	r0, r3
 80023b8:	f002 f9d0 	bl	800475c <HAL_RCC_OscConfig>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80023c2:	f000 f8e5 	bl	8002590 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023c6:	230f      	movs	r3, #15
 80023c8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023ca:	2302      	movs	r3, #2
 80023cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023ce:	2300      	movs	r3, #0
 80023d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80023d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023d8:	2300      	movs	r3, #0
 80023da:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80023dc:	f107 0308 	add.w	r3, r7, #8
 80023e0:	2102      	movs	r1, #2
 80023e2:	4618      	mov	r0, r3
 80023e4:	f001 feee 	bl	80041c4 <HAL_RCC_ClockConfig>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80023ee:	f000 f8cf 	bl	8002590 <Error_Handler>
  }
}
 80023f2:	bf00      	nop
 80023f4:	3750      	adds	r7, #80	; 0x50
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	40023800 	.word	0x40023800
 8002400:	40007000 	.word	0x40007000

08002404 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002408:	4b12      	ldr	r3, [pc, #72]	; (8002454 <MX_I2C1_Init+0x50>)
 800240a:	4a13      	ldr	r2, [pc, #76]	; (8002458 <MX_I2C1_Init+0x54>)
 800240c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800240e:	4b11      	ldr	r3, [pc, #68]	; (8002454 <MX_I2C1_Init+0x50>)
 8002410:	4a12      	ldr	r2, [pc, #72]	; (800245c <MX_I2C1_Init+0x58>)
 8002412:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002414:	4b0f      	ldr	r3, [pc, #60]	; (8002454 <MX_I2C1_Init+0x50>)
 8002416:	2200      	movs	r2, #0
 8002418:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800241a:	4b0e      	ldr	r3, [pc, #56]	; (8002454 <MX_I2C1_Init+0x50>)
 800241c:	2200      	movs	r2, #0
 800241e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002420:	4b0c      	ldr	r3, [pc, #48]	; (8002454 <MX_I2C1_Init+0x50>)
 8002422:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002426:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002428:	4b0a      	ldr	r3, [pc, #40]	; (8002454 <MX_I2C1_Init+0x50>)
 800242a:	2200      	movs	r2, #0
 800242c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800242e:	4b09      	ldr	r3, [pc, #36]	; (8002454 <MX_I2C1_Init+0x50>)
 8002430:	2200      	movs	r2, #0
 8002432:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002434:	4b07      	ldr	r3, [pc, #28]	; (8002454 <MX_I2C1_Init+0x50>)
 8002436:	2200      	movs	r2, #0
 8002438:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800243a:	4b06      	ldr	r3, [pc, #24]	; (8002454 <MX_I2C1_Init+0x50>)
 800243c:	2200      	movs	r2, #0
 800243e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002440:	4804      	ldr	r0, [pc, #16]	; (8002454 <MX_I2C1_Init+0x50>)
 8002442:	f000 fdd1 	bl	8002fe8 <HAL_I2C_Init>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800244c:	f000 f8a0 	bl	8002590 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002450:	bf00      	nop
 8002452:	bd80      	pop	{r7, pc}
 8002454:	20000254 	.word	0x20000254
 8002458:	40005400 	.word	0x40005400
 800245c:	000186a0 	.word	0x000186a0

08002460 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8002464:	4b11      	ldr	r3, [pc, #68]	; (80024ac <MX_USART2_UART_Init+0x4c>)
 8002466:	4a12      	ldr	r2, [pc, #72]	; (80024b0 <MX_USART2_UART_Init+0x50>)
 8002468:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800246a:	4b10      	ldr	r3, [pc, #64]	; (80024ac <MX_USART2_UART_Init+0x4c>)
 800246c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002470:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002472:	4b0e      	ldr	r3, [pc, #56]	; (80024ac <MX_USART2_UART_Init+0x4c>)
 8002474:	2200      	movs	r2, #0
 8002476:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002478:	4b0c      	ldr	r3, [pc, #48]	; (80024ac <MX_USART2_UART_Init+0x4c>)
 800247a:	2200      	movs	r2, #0
 800247c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800247e:	4b0b      	ldr	r3, [pc, #44]	; (80024ac <MX_USART2_UART_Init+0x4c>)
 8002480:	2200      	movs	r2, #0
 8002482:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002484:	4b09      	ldr	r3, [pc, #36]	; (80024ac <MX_USART2_UART_Init+0x4c>)
 8002486:	220c      	movs	r2, #12
 8002488:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800248a:	4b08      	ldr	r3, [pc, #32]	; (80024ac <MX_USART2_UART_Init+0x4c>)
 800248c:	2200      	movs	r2, #0
 800248e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002490:	4b06      	ldr	r3, [pc, #24]	; (80024ac <MX_USART2_UART_Init+0x4c>)
 8002492:	2200      	movs	r2, #0
 8002494:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002496:	4805      	ldr	r0, [pc, #20]	; (80024ac <MX_USART2_UART_Init+0x4c>)
 8002498:	f002 fbfe 	bl	8004c98 <HAL_UART_Init>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80024a2:	f000 f875 	bl	8002590 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80024a6:	bf00      	nop
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	200002a8 	.word	0x200002a8
 80024b0:	40004400 	.word	0x40004400

080024b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b08a      	sub	sp, #40	; 0x28
 80024b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ba:	f107 0314 	add.w	r3, r7, #20
 80024be:	2200      	movs	r2, #0
 80024c0:	601a      	str	r2, [r3, #0]
 80024c2:	605a      	str	r2, [r3, #4]
 80024c4:	609a      	str	r2, [r3, #8]
 80024c6:	60da      	str	r2, [r3, #12]
 80024c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024ca:	2300      	movs	r3, #0
 80024cc:	613b      	str	r3, [r7, #16]
 80024ce:	4b2d      	ldr	r3, [pc, #180]	; (8002584 <MX_GPIO_Init+0xd0>)
 80024d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d2:	4a2c      	ldr	r2, [pc, #176]	; (8002584 <MX_GPIO_Init+0xd0>)
 80024d4:	f043 0304 	orr.w	r3, r3, #4
 80024d8:	6313      	str	r3, [r2, #48]	; 0x30
 80024da:	4b2a      	ldr	r3, [pc, #168]	; (8002584 <MX_GPIO_Init+0xd0>)
 80024dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024de:	f003 0304 	and.w	r3, r3, #4
 80024e2:	613b      	str	r3, [r7, #16]
 80024e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80024e6:	2300      	movs	r3, #0
 80024e8:	60fb      	str	r3, [r7, #12]
 80024ea:	4b26      	ldr	r3, [pc, #152]	; (8002584 <MX_GPIO_Init+0xd0>)
 80024ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ee:	4a25      	ldr	r2, [pc, #148]	; (8002584 <MX_GPIO_Init+0xd0>)
 80024f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024f4:	6313      	str	r3, [r2, #48]	; 0x30
 80024f6:	4b23      	ldr	r3, [pc, #140]	; (8002584 <MX_GPIO_Init+0xd0>)
 80024f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024fe:	60fb      	str	r3, [r7, #12]
 8002500:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002502:	2300      	movs	r3, #0
 8002504:	60bb      	str	r3, [r7, #8]
 8002506:	4b1f      	ldr	r3, [pc, #124]	; (8002584 <MX_GPIO_Init+0xd0>)
 8002508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250a:	4a1e      	ldr	r2, [pc, #120]	; (8002584 <MX_GPIO_Init+0xd0>)
 800250c:	f043 0301 	orr.w	r3, r3, #1
 8002510:	6313      	str	r3, [r2, #48]	; 0x30
 8002512:	4b1c      	ldr	r3, [pc, #112]	; (8002584 <MX_GPIO_Init+0xd0>)
 8002514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	60bb      	str	r3, [r7, #8]
 800251c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800251e:	2300      	movs	r3, #0
 8002520:	607b      	str	r3, [r7, #4]
 8002522:	4b18      	ldr	r3, [pc, #96]	; (8002584 <MX_GPIO_Init+0xd0>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002526:	4a17      	ldr	r2, [pc, #92]	; (8002584 <MX_GPIO_Init+0xd0>)
 8002528:	f043 0302 	orr.w	r3, r3, #2
 800252c:	6313      	str	r3, [r2, #48]	; 0x30
 800252e:	4b15      	ldr	r3, [pc, #84]	; (8002584 <MX_GPIO_Init+0xd0>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	607b      	str	r3, [r7, #4]
 8002538:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800253a:	2200      	movs	r2, #0
 800253c:	2120      	movs	r1, #32
 800253e:	4812      	ldr	r0, [pc, #72]	; (8002588 <MX_GPIO_Init+0xd4>)
 8002540:	f000 fd38 	bl	8002fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002544:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002548:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800254a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800254e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002550:	2300      	movs	r3, #0
 8002552:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002554:	f107 0314 	add.w	r3, r7, #20
 8002558:	4619      	mov	r1, r3
 800255a:	480c      	ldr	r0, [pc, #48]	; (800258c <MX_GPIO_Init+0xd8>)
 800255c:	f000 fb7e 	bl	8002c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002560:	2320      	movs	r3, #32
 8002562:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002564:	2301      	movs	r3, #1
 8002566:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002568:	2300      	movs	r3, #0
 800256a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800256c:	2300      	movs	r3, #0
 800256e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002570:	f107 0314 	add.w	r3, r7, #20
 8002574:	4619      	mov	r1, r3
 8002576:	4804      	ldr	r0, [pc, #16]	; (8002588 <MX_GPIO_Init+0xd4>)
 8002578:	f000 fb70 	bl	8002c5c <HAL_GPIO_Init>

}
 800257c:	bf00      	nop
 800257e:	3728      	adds	r7, #40	; 0x28
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	40023800 	.word	0x40023800
 8002588:	40020000 	.word	0x40020000
 800258c:	40020800 	.word	0x40020800

08002590 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002594:	b672      	cpsid	i
}
 8002596:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002598:	e7fe      	b.n	8002598 <Error_Handler+0x8>
	...

0800259c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	607b      	str	r3, [r7, #4]
 80025a6:	4b10      	ldr	r3, [pc, #64]	; (80025e8 <HAL_MspInit+0x4c>)
 80025a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025aa:	4a0f      	ldr	r2, [pc, #60]	; (80025e8 <HAL_MspInit+0x4c>)
 80025ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025b0:	6453      	str	r3, [r2, #68]	; 0x44
 80025b2:	4b0d      	ldr	r3, [pc, #52]	; (80025e8 <HAL_MspInit+0x4c>)
 80025b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025ba:	607b      	str	r3, [r7, #4]
 80025bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025be:	2300      	movs	r3, #0
 80025c0:	603b      	str	r3, [r7, #0]
 80025c2:	4b09      	ldr	r3, [pc, #36]	; (80025e8 <HAL_MspInit+0x4c>)
 80025c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c6:	4a08      	ldr	r2, [pc, #32]	; (80025e8 <HAL_MspInit+0x4c>)
 80025c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025cc:	6413      	str	r3, [r2, #64]	; 0x40
 80025ce:	4b06      	ldr	r3, [pc, #24]	; (80025e8 <HAL_MspInit+0x4c>)
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025d6:	603b      	str	r3, [r7, #0]
 80025d8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80025da:	2007      	movs	r0, #7
 80025dc:	f000 fb0a 	bl	8002bf4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025e0:	bf00      	nop
 80025e2:	3708      	adds	r7, #8
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	40023800 	.word	0x40023800

080025ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b08a      	sub	sp, #40	; 0x28
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f4:	f107 0314 	add.w	r3, r7, #20
 80025f8:	2200      	movs	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]
 80025fc:	605a      	str	r2, [r3, #4]
 80025fe:	609a      	str	r2, [r3, #8]
 8002600:	60da      	str	r2, [r3, #12]
 8002602:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a19      	ldr	r2, [pc, #100]	; (8002670 <HAL_I2C_MspInit+0x84>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d12c      	bne.n	8002668 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800260e:	2300      	movs	r3, #0
 8002610:	613b      	str	r3, [r7, #16]
 8002612:	4b18      	ldr	r3, [pc, #96]	; (8002674 <HAL_I2C_MspInit+0x88>)
 8002614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002616:	4a17      	ldr	r2, [pc, #92]	; (8002674 <HAL_I2C_MspInit+0x88>)
 8002618:	f043 0302 	orr.w	r3, r3, #2
 800261c:	6313      	str	r3, [r2, #48]	; 0x30
 800261e:	4b15      	ldr	r3, [pc, #84]	; (8002674 <HAL_I2C_MspInit+0x88>)
 8002620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	613b      	str	r3, [r7, #16]
 8002628:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800262a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800262e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002630:	2312      	movs	r3, #18
 8002632:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002634:	2300      	movs	r3, #0
 8002636:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002638:	2303      	movs	r3, #3
 800263a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800263c:	2304      	movs	r3, #4
 800263e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002640:	f107 0314 	add.w	r3, r7, #20
 8002644:	4619      	mov	r1, r3
 8002646:	480c      	ldr	r0, [pc, #48]	; (8002678 <HAL_I2C_MspInit+0x8c>)
 8002648:	f000 fb08 	bl	8002c5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800264c:	2300      	movs	r3, #0
 800264e:	60fb      	str	r3, [r7, #12]
 8002650:	4b08      	ldr	r3, [pc, #32]	; (8002674 <HAL_I2C_MspInit+0x88>)
 8002652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002654:	4a07      	ldr	r2, [pc, #28]	; (8002674 <HAL_I2C_MspInit+0x88>)
 8002656:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800265a:	6413      	str	r3, [r2, #64]	; 0x40
 800265c:	4b05      	ldr	r3, [pc, #20]	; (8002674 <HAL_I2C_MspInit+0x88>)
 800265e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002660:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002664:	60fb      	str	r3, [r7, #12]
 8002666:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002668:	bf00      	nop
 800266a:	3728      	adds	r7, #40	; 0x28
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	40005400 	.word	0x40005400
 8002674:	40023800 	.word	0x40023800
 8002678:	40020400 	.word	0x40020400

0800267c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b08a      	sub	sp, #40	; 0x28
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002684:	f107 0314 	add.w	r3, r7, #20
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	605a      	str	r2, [r3, #4]
 800268e:	609a      	str	r2, [r3, #8]
 8002690:	60da      	str	r2, [r3, #12]
 8002692:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a19      	ldr	r2, [pc, #100]	; (8002700 <HAL_UART_MspInit+0x84>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d12b      	bne.n	80026f6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800269e:	2300      	movs	r3, #0
 80026a0:	613b      	str	r3, [r7, #16]
 80026a2:	4b18      	ldr	r3, [pc, #96]	; (8002704 <HAL_UART_MspInit+0x88>)
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	4a17      	ldr	r2, [pc, #92]	; (8002704 <HAL_UART_MspInit+0x88>)
 80026a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026ac:	6413      	str	r3, [r2, #64]	; 0x40
 80026ae:	4b15      	ldr	r3, [pc, #84]	; (8002704 <HAL_UART_MspInit+0x88>)
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b6:	613b      	str	r3, [r7, #16]
 80026b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ba:	2300      	movs	r3, #0
 80026bc:	60fb      	str	r3, [r7, #12]
 80026be:	4b11      	ldr	r3, [pc, #68]	; (8002704 <HAL_UART_MspInit+0x88>)
 80026c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c2:	4a10      	ldr	r2, [pc, #64]	; (8002704 <HAL_UART_MspInit+0x88>)
 80026c4:	f043 0301 	orr.w	r3, r3, #1
 80026c8:	6313      	str	r3, [r2, #48]	; 0x30
 80026ca:	4b0e      	ldr	r3, [pc, #56]	; (8002704 <HAL_UART_MspInit+0x88>)
 80026cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	60fb      	str	r3, [r7, #12]
 80026d4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80026d6:	230c      	movs	r3, #12
 80026d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026da:	2302      	movs	r3, #2
 80026dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026de:	2300      	movs	r3, #0
 80026e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026e2:	2303      	movs	r3, #3
 80026e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026e6:	2307      	movs	r3, #7
 80026e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ea:	f107 0314 	add.w	r3, r7, #20
 80026ee:	4619      	mov	r1, r3
 80026f0:	4805      	ldr	r0, [pc, #20]	; (8002708 <HAL_UART_MspInit+0x8c>)
 80026f2:	f000 fab3 	bl	8002c5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80026f6:	bf00      	nop
 80026f8:	3728      	adds	r7, #40	; 0x28
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	40004400 	.word	0x40004400
 8002704:	40023800 	.word	0x40023800
 8002708:	40020000 	.word	0x40020000

0800270c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002710:	e7fe      	b.n	8002710 <NMI_Handler+0x4>

08002712 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002712:	b480      	push	{r7}
 8002714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002716:	e7fe      	b.n	8002716 <HardFault_Handler+0x4>

08002718 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800271c:	e7fe      	b.n	800271c <MemManage_Handler+0x4>

0800271e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800271e:	b480      	push	{r7}
 8002720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002722:	e7fe      	b.n	8002722 <BusFault_Handler+0x4>

08002724 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002728:	e7fe      	b.n	8002728 <UsageFault_Handler+0x4>

0800272a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800272a:	b480      	push	{r7}
 800272c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800272e:	bf00      	nop
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800273c:	bf00      	nop
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr

08002746 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002746:	b480      	push	{r7}
 8002748:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800274a:	bf00      	nop
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002758:	f000 f956 	bl	8002a08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800275c:	bf00      	nop
 800275e:	bd80      	pop	{r7, pc}

08002760 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
	return 1;
 8002764:	2301      	movs	r3, #1
}
 8002766:	4618      	mov	r0, r3
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <_kill>:

int _kill(int pid, int sig)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800277a:	f002 fda3 	bl	80052c4 <__errno>
 800277e:	4603      	mov	r3, r0
 8002780:	2216      	movs	r2, #22
 8002782:	601a      	str	r2, [r3, #0]
	return -1;
 8002784:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002788:	4618      	mov	r0, r3
 800278a:	3708      	adds	r7, #8
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <_exit>:

void _exit (int status)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002798:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f7ff ffe7 	bl	8002770 <_kill>
	while (1) {}		/* Make sure we hang here */
 80027a2:	e7fe      	b.n	80027a2 <_exit+0x12>

080027a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b086      	sub	sp, #24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027b0:	2300      	movs	r3, #0
 80027b2:	617b      	str	r3, [r7, #20]
 80027b4:	e00a      	b.n	80027cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80027b6:	f3af 8000 	nop.w
 80027ba:	4601      	mov	r1, r0
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	1c5a      	adds	r2, r3, #1
 80027c0:	60ba      	str	r2, [r7, #8]
 80027c2:	b2ca      	uxtb	r2, r1
 80027c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	3301      	adds	r3, #1
 80027ca:	617b      	str	r3, [r7, #20]
 80027cc:	697a      	ldr	r2, [r7, #20]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	dbf0      	blt.n	80027b6 <_read+0x12>
	}

return len;
 80027d4:	687b      	ldr	r3, [r7, #4]
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3718      	adds	r7, #24
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	b086      	sub	sp, #24
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	60f8      	str	r0, [r7, #12]
 80027e6:	60b9      	str	r1, [r7, #8]
 80027e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027ea:	2300      	movs	r3, #0
 80027ec:	617b      	str	r3, [r7, #20]
 80027ee:	e009      	b.n	8002804 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	1c5a      	adds	r2, r3, #1
 80027f4:	60ba      	str	r2, [r7, #8]
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	3301      	adds	r3, #1
 8002802:	617b      	str	r3, [r7, #20]
 8002804:	697a      	ldr	r2, [r7, #20]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	429a      	cmp	r2, r3
 800280a:	dbf1      	blt.n	80027f0 <_write+0x12>
	}
	return len;
 800280c:	687b      	ldr	r3, [r7, #4]
}
 800280e:	4618      	mov	r0, r3
 8002810:	3718      	adds	r7, #24
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <_close>:

int _close(int file)
{
 8002816:	b480      	push	{r7}
 8002818:	b083      	sub	sp, #12
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
	return -1;
 800281e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002822:	4618      	mov	r0, r3
 8002824:	370c      	adds	r7, #12
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr

0800282e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800282e:	b480      	push	{r7}
 8002830:	b083      	sub	sp, #12
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
 8002836:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800283e:	605a      	str	r2, [r3, #4]
	return 0;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr

0800284e <_isatty>:

int _isatty(int file)
{
 800284e:	b480      	push	{r7}
 8002850:	b083      	sub	sp, #12
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
	return 1;
 8002856:	2301      	movs	r3, #1
}
 8002858:	4618      	mov	r0, r3
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]
	return 0;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3714      	adds	r7, #20
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
	...

08002880 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002888:	4a14      	ldr	r2, [pc, #80]	; (80028dc <_sbrk+0x5c>)
 800288a:	4b15      	ldr	r3, [pc, #84]	; (80028e0 <_sbrk+0x60>)
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002894:	4b13      	ldr	r3, [pc, #76]	; (80028e4 <_sbrk+0x64>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d102      	bne.n	80028a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800289c:	4b11      	ldr	r3, [pc, #68]	; (80028e4 <_sbrk+0x64>)
 800289e:	4a12      	ldr	r2, [pc, #72]	; (80028e8 <_sbrk+0x68>)
 80028a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028a2:	4b10      	ldr	r3, [pc, #64]	; (80028e4 <_sbrk+0x64>)
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4413      	add	r3, r2
 80028aa:	693a      	ldr	r2, [r7, #16]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d207      	bcs.n	80028c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028b0:	f002 fd08 	bl	80052c4 <__errno>
 80028b4:	4603      	mov	r3, r0
 80028b6:	220c      	movs	r2, #12
 80028b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028be:	e009      	b.n	80028d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028c0:	4b08      	ldr	r3, [pc, #32]	; (80028e4 <_sbrk+0x64>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028c6:	4b07      	ldr	r3, [pc, #28]	; (80028e4 <_sbrk+0x64>)
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4413      	add	r3, r2
 80028ce:	4a05      	ldr	r2, [pc, #20]	; (80028e4 <_sbrk+0x64>)
 80028d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028d2:	68fb      	ldr	r3, [r7, #12]
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3718      	adds	r7, #24
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	20020000 	.word	0x20020000
 80028e0:	00000400 	.word	0x00000400
 80028e4:	20000248 	.word	0x20000248
 80028e8:	20000300 	.word	0x20000300

080028ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028f0:	4b06      	ldr	r3, [pc, #24]	; (800290c <SystemInit+0x20>)
 80028f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f6:	4a05      	ldr	r2, [pc, #20]	; (800290c <SystemInit+0x20>)
 80028f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002900:	bf00      	nop
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	e000ed00 	.word	0xe000ed00

08002910 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002910:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002948 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002914:	480d      	ldr	r0, [pc, #52]	; (800294c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002916:	490e      	ldr	r1, [pc, #56]	; (8002950 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002918:	4a0e      	ldr	r2, [pc, #56]	; (8002954 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800291a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800291c:	e002      	b.n	8002924 <LoopCopyDataInit>

0800291e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800291e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002920:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002922:	3304      	adds	r3, #4

08002924 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002924:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002926:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002928:	d3f9      	bcc.n	800291e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800292a:	4a0b      	ldr	r2, [pc, #44]	; (8002958 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800292c:	4c0b      	ldr	r4, [pc, #44]	; (800295c <LoopFillZerobss+0x26>)
  movs r3, #0
 800292e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002930:	e001      	b.n	8002936 <LoopFillZerobss>

08002932 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002932:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002934:	3204      	adds	r2, #4

08002936 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002936:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002938:	d3fb      	bcc.n	8002932 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800293a:	f7ff ffd7 	bl	80028ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800293e:	f002 fcc7 	bl	80052d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002942:	f7fe fb1d 	bl	8000f80 <main>
  bx  lr    
 8002946:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002948:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800294c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002950:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002954:	08009b78 	.word	0x08009b78
  ldr r2, =_sbss
 8002958:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 800295c:	20000300 	.word	0x20000300

08002960 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002960:	e7fe      	b.n	8002960 <ADC_IRQHandler>
	...

08002964 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002968:	4b0e      	ldr	r3, [pc, #56]	; (80029a4 <HAL_Init+0x40>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a0d      	ldr	r2, [pc, #52]	; (80029a4 <HAL_Init+0x40>)
 800296e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002972:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002974:	4b0b      	ldr	r3, [pc, #44]	; (80029a4 <HAL_Init+0x40>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a0a      	ldr	r2, [pc, #40]	; (80029a4 <HAL_Init+0x40>)
 800297a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800297e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002980:	4b08      	ldr	r3, [pc, #32]	; (80029a4 <HAL_Init+0x40>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a07      	ldr	r2, [pc, #28]	; (80029a4 <HAL_Init+0x40>)
 8002986:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800298a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800298c:	2003      	movs	r0, #3
 800298e:	f000 f931 	bl	8002bf4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002992:	2000      	movs	r0, #0
 8002994:	f000 f808 	bl	80029a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002998:	f7ff fe00 	bl	800259c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	40023c00 	.word	0x40023c00

080029a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029b0:	4b12      	ldr	r3, [pc, #72]	; (80029fc <HAL_InitTick+0x54>)
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	4b12      	ldr	r3, [pc, #72]	; (8002a00 <HAL_InitTick+0x58>)
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	4619      	mov	r1, r3
 80029ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029be:	fbb3 f3f1 	udiv	r3, r3, r1
 80029c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c6:	4618      	mov	r0, r3
 80029c8:	f000 f93b 	bl	8002c42 <HAL_SYSTICK_Config>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e00e      	b.n	80029f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2b0f      	cmp	r3, #15
 80029da:	d80a      	bhi.n	80029f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029dc:	2200      	movs	r2, #0
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029e4:	f000 f911 	bl	8002c0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029e8:	4a06      	ldr	r2, [pc, #24]	; (8002a04 <HAL_InitTick+0x5c>)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
 80029f0:	e000      	b.n	80029f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3708      	adds	r7, #8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	20000008 	.word	0x20000008
 8002a00:	20000010 	.word	0x20000010
 8002a04:	2000000c 	.word	0x2000000c

08002a08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a0c:	4b06      	ldr	r3, [pc, #24]	; (8002a28 <HAL_IncTick+0x20>)
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	461a      	mov	r2, r3
 8002a12:	4b06      	ldr	r3, [pc, #24]	; (8002a2c <HAL_IncTick+0x24>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4413      	add	r3, r2
 8002a18:	4a04      	ldr	r2, [pc, #16]	; (8002a2c <HAL_IncTick+0x24>)
 8002a1a:	6013      	str	r3, [r2, #0]
}
 8002a1c:	bf00      	nop
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	20000010 	.word	0x20000010
 8002a2c:	200002ec 	.word	0x200002ec

08002a30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  return uwTick;
 8002a34:	4b03      	ldr	r3, [pc, #12]	; (8002a44 <HAL_GetTick+0x14>)
 8002a36:	681b      	ldr	r3, [r3, #0]
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	200002ec 	.word	0x200002ec

08002a48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a50:	f7ff ffee 	bl	8002a30 <HAL_GetTick>
 8002a54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a60:	d005      	beq.n	8002a6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a62:	4b0a      	ldr	r3, [pc, #40]	; (8002a8c <HAL_Delay+0x44>)
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	461a      	mov	r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a6e:	bf00      	nop
 8002a70:	f7ff ffde 	bl	8002a30 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d8f7      	bhi.n	8002a70 <HAL_Delay+0x28>
  {
  }
}
 8002a80:	bf00      	nop
 8002a82:	bf00      	nop
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	20000010 	.word	0x20000010

08002a90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f003 0307 	and.w	r3, r3, #7
 8002a9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002aa0:	4b0c      	ldr	r3, [pc, #48]	; (8002ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aa6:	68ba      	ldr	r2, [r7, #8]
 8002aa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002aac:	4013      	ands	r3, r2
 8002aae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ab8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002abc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ac0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ac2:	4a04      	ldr	r2, [pc, #16]	; (8002ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	60d3      	str	r3, [r2, #12]
}
 8002ac8:	bf00      	nop
 8002aca:	3714      	adds	r7, #20
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr
 8002ad4:	e000ed00 	.word	0xe000ed00

08002ad8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002adc:	4b04      	ldr	r3, [pc, #16]	; (8002af0 <__NVIC_GetPriorityGrouping+0x18>)
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	0a1b      	lsrs	r3, r3, #8
 8002ae2:	f003 0307 	and.w	r3, r3, #7
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr
 8002af0:	e000ed00 	.word	0xe000ed00

08002af4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	4603      	mov	r3, r0
 8002afc:	6039      	str	r1, [r7, #0]
 8002afe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	db0a      	blt.n	8002b1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	b2da      	uxtb	r2, r3
 8002b0c:	490c      	ldr	r1, [pc, #48]	; (8002b40 <__NVIC_SetPriority+0x4c>)
 8002b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b12:	0112      	lsls	r2, r2, #4
 8002b14:	b2d2      	uxtb	r2, r2
 8002b16:	440b      	add	r3, r1
 8002b18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b1c:	e00a      	b.n	8002b34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	b2da      	uxtb	r2, r3
 8002b22:	4908      	ldr	r1, [pc, #32]	; (8002b44 <__NVIC_SetPriority+0x50>)
 8002b24:	79fb      	ldrb	r3, [r7, #7]
 8002b26:	f003 030f 	and.w	r3, r3, #15
 8002b2a:	3b04      	subs	r3, #4
 8002b2c:	0112      	lsls	r2, r2, #4
 8002b2e:	b2d2      	uxtb	r2, r2
 8002b30:	440b      	add	r3, r1
 8002b32:	761a      	strb	r2, [r3, #24]
}
 8002b34:	bf00      	nop
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr
 8002b40:	e000e100 	.word	0xe000e100
 8002b44:	e000ed00 	.word	0xe000ed00

08002b48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b089      	sub	sp, #36	; 0x24
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f003 0307 	and.w	r3, r3, #7
 8002b5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	f1c3 0307 	rsb	r3, r3, #7
 8002b62:	2b04      	cmp	r3, #4
 8002b64:	bf28      	it	cs
 8002b66:	2304      	movcs	r3, #4
 8002b68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	3304      	adds	r3, #4
 8002b6e:	2b06      	cmp	r3, #6
 8002b70:	d902      	bls.n	8002b78 <NVIC_EncodePriority+0x30>
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	3b03      	subs	r3, #3
 8002b76:	e000      	b.n	8002b7a <NVIC_EncodePriority+0x32>
 8002b78:	2300      	movs	r3, #0
 8002b7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	fa02 f303 	lsl.w	r3, r2, r3
 8002b86:	43da      	mvns	r2, r3
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	401a      	ands	r2, r3
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b90:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	fa01 f303 	lsl.w	r3, r1, r3
 8002b9a:	43d9      	mvns	r1, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ba0:	4313      	orrs	r3, r2
         );
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3724      	adds	r7, #36	; 0x24
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
	...

08002bb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bc0:	d301      	bcc.n	8002bc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e00f      	b.n	8002be6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bc6:	4a0a      	ldr	r2, [pc, #40]	; (8002bf0 <SysTick_Config+0x40>)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bce:	210f      	movs	r1, #15
 8002bd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002bd4:	f7ff ff8e 	bl	8002af4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bd8:	4b05      	ldr	r3, [pc, #20]	; (8002bf0 <SysTick_Config+0x40>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bde:	4b04      	ldr	r3, [pc, #16]	; (8002bf0 <SysTick_Config+0x40>)
 8002be0:	2207      	movs	r2, #7
 8002be2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3708      	adds	r7, #8
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	e000e010 	.word	0xe000e010

08002bf4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f7ff ff47 	bl	8002a90 <__NVIC_SetPriorityGrouping>
}
 8002c02:	bf00      	nop
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b086      	sub	sp, #24
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	4603      	mov	r3, r0
 8002c12:	60b9      	str	r1, [r7, #8]
 8002c14:	607a      	str	r2, [r7, #4]
 8002c16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c1c:	f7ff ff5c 	bl	8002ad8 <__NVIC_GetPriorityGrouping>
 8002c20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	68b9      	ldr	r1, [r7, #8]
 8002c26:	6978      	ldr	r0, [r7, #20]
 8002c28:	f7ff ff8e 	bl	8002b48 <NVIC_EncodePriority>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c32:	4611      	mov	r1, r2
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7ff ff5d 	bl	8002af4 <__NVIC_SetPriority>
}
 8002c3a:	bf00      	nop
 8002c3c:	3718      	adds	r7, #24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b082      	sub	sp, #8
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f7ff ffb0 	bl	8002bb0 <SysTick_Config>
 8002c50:	4603      	mov	r3, r0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3708      	adds	r7, #8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
	...

08002c5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b089      	sub	sp, #36	; 0x24
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c66:	2300      	movs	r3, #0
 8002c68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c72:	2300      	movs	r3, #0
 8002c74:	61fb      	str	r3, [r7, #28]
 8002c76:	e165      	b.n	8002f44 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c78:	2201      	movs	r2, #1
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	697a      	ldr	r2, [r7, #20]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c8c:	693a      	ldr	r2, [r7, #16]
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	f040 8154 	bne.w	8002f3e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f003 0303 	and.w	r3, r3, #3
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d005      	beq.n	8002cae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d130      	bne.n	8002d10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	2203      	movs	r2, #3
 8002cba:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbe:	43db      	mvns	r3, r3
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	68da      	ldr	r2, [r3, #12]
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	69ba      	ldr	r2, [r7, #24]
 8002cdc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cec:	43db      	mvns	r3, r3
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	091b      	lsrs	r3, r3, #4
 8002cfa:	f003 0201 	and.w	r2, r3, #1
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	fa02 f303 	lsl.w	r3, r2, r3
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f003 0303 	and.w	r3, r3, #3
 8002d18:	2b03      	cmp	r3, #3
 8002d1a:	d017      	beq.n	8002d4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	005b      	lsls	r3, r3, #1
 8002d26:	2203      	movs	r2, #3
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	43db      	mvns	r3, r3
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	4013      	ands	r3, r2
 8002d32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	689a      	ldr	r2, [r3, #8]
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	69ba      	ldr	r2, [r7, #24]
 8002d4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f003 0303 	and.w	r3, r3, #3
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d123      	bne.n	8002da0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	08da      	lsrs	r2, r3, #3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	3208      	adds	r2, #8
 8002d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	f003 0307 	and.w	r3, r3, #7
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	220f      	movs	r2, #15
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	43db      	mvns	r3, r3
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	4013      	ands	r3, r2
 8002d7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	691a      	ldr	r2, [r3, #16]
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	f003 0307 	and.w	r3, r3, #7
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	08da      	lsrs	r2, r3, #3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	3208      	adds	r2, #8
 8002d9a:	69b9      	ldr	r1, [r7, #24]
 8002d9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	2203      	movs	r2, #3
 8002dac:	fa02 f303 	lsl.w	r3, r2, r3
 8002db0:	43db      	mvns	r3, r3
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	4013      	ands	r3, r2
 8002db6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f003 0203 	and.w	r2, r3, #3
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	f000 80ae 	beq.w	8002f3e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002de2:	2300      	movs	r3, #0
 8002de4:	60fb      	str	r3, [r7, #12]
 8002de6:	4b5d      	ldr	r3, [pc, #372]	; (8002f5c <HAL_GPIO_Init+0x300>)
 8002de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dea:	4a5c      	ldr	r2, [pc, #368]	; (8002f5c <HAL_GPIO_Init+0x300>)
 8002dec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002df0:	6453      	str	r3, [r2, #68]	; 0x44
 8002df2:	4b5a      	ldr	r3, [pc, #360]	; (8002f5c <HAL_GPIO_Init+0x300>)
 8002df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dfa:	60fb      	str	r3, [r7, #12]
 8002dfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002dfe:	4a58      	ldr	r2, [pc, #352]	; (8002f60 <HAL_GPIO_Init+0x304>)
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	089b      	lsrs	r3, r3, #2
 8002e04:	3302      	adds	r3, #2
 8002e06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	f003 0303 	and.w	r3, r3, #3
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	220f      	movs	r2, #15
 8002e16:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1a:	43db      	mvns	r3, r3
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	4013      	ands	r3, r2
 8002e20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a4f      	ldr	r2, [pc, #316]	; (8002f64 <HAL_GPIO_Init+0x308>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d025      	beq.n	8002e76 <HAL_GPIO_Init+0x21a>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a4e      	ldr	r2, [pc, #312]	; (8002f68 <HAL_GPIO_Init+0x30c>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d01f      	beq.n	8002e72 <HAL_GPIO_Init+0x216>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a4d      	ldr	r2, [pc, #308]	; (8002f6c <HAL_GPIO_Init+0x310>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d019      	beq.n	8002e6e <HAL_GPIO_Init+0x212>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a4c      	ldr	r2, [pc, #304]	; (8002f70 <HAL_GPIO_Init+0x314>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d013      	beq.n	8002e6a <HAL_GPIO_Init+0x20e>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a4b      	ldr	r2, [pc, #300]	; (8002f74 <HAL_GPIO_Init+0x318>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d00d      	beq.n	8002e66 <HAL_GPIO_Init+0x20a>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a4a      	ldr	r2, [pc, #296]	; (8002f78 <HAL_GPIO_Init+0x31c>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d007      	beq.n	8002e62 <HAL_GPIO_Init+0x206>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a49      	ldr	r2, [pc, #292]	; (8002f7c <HAL_GPIO_Init+0x320>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d101      	bne.n	8002e5e <HAL_GPIO_Init+0x202>
 8002e5a:	2306      	movs	r3, #6
 8002e5c:	e00c      	b.n	8002e78 <HAL_GPIO_Init+0x21c>
 8002e5e:	2307      	movs	r3, #7
 8002e60:	e00a      	b.n	8002e78 <HAL_GPIO_Init+0x21c>
 8002e62:	2305      	movs	r3, #5
 8002e64:	e008      	b.n	8002e78 <HAL_GPIO_Init+0x21c>
 8002e66:	2304      	movs	r3, #4
 8002e68:	e006      	b.n	8002e78 <HAL_GPIO_Init+0x21c>
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e004      	b.n	8002e78 <HAL_GPIO_Init+0x21c>
 8002e6e:	2302      	movs	r3, #2
 8002e70:	e002      	b.n	8002e78 <HAL_GPIO_Init+0x21c>
 8002e72:	2301      	movs	r3, #1
 8002e74:	e000      	b.n	8002e78 <HAL_GPIO_Init+0x21c>
 8002e76:	2300      	movs	r3, #0
 8002e78:	69fa      	ldr	r2, [r7, #28]
 8002e7a:	f002 0203 	and.w	r2, r2, #3
 8002e7e:	0092      	lsls	r2, r2, #2
 8002e80:	4093      	lsls	r3, r2
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e88:	4935      	ldr	r1, [pc, #212]	; (8002f60 <HAL_GPIO_Init+0x304>)
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	089b      	lsrs	r3, r3, #2
 8002e8e:	3302      	adds	r3, #2
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e96:	4b3a      	ldr	r3, [pc, #232]	; (8002f80 <HAL_GPIO_Init+0x324>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	43db      	mvns	r3, r3
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d003      	beq.n	8002eba <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002eb2:	69ba      	ldr	r2, [r7, #24]
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002eba:	4a31      	ldr	r2, [pc, #196]	; (8002f80 <HAL_GPIO_Init+0x324>)
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002ec0:	4b2f      	ldr	r3, [pc, #188]	; (8002f80 <HAL_GPIO_Init+0x324>)
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	43db      	mvns	r3, r3
 8002eca:	69ba      	ldr	r2, [r7, #24]
 8002ecc:	4013      	ands	r3, r2
 8002ece:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d003      	beq.n	8002ee4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ee4:	4a26      	ldr	r2, [pc, #152]	; (8002f80 <HAL_GPIO_Init+0x324>)
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002eea:	4b25      	ldr	r3, [pc, #148]	; (8002f80 <HAL_GPIO_Init+0x324>)
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	43db      	mvns	r3, r3
 8002ef4:	69ba      	ldr	r2, [r7, #24]
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d003      	beq.n	8002f0e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002f06:	69ba      	ldr	r2, [r7, #24]
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f0e:	4a1c      	ldr	r2, [pc, #112]	; (8002f80 <HAL_GPIO_Init+0x324>)
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f14:	4b1a      	ldr	r3, [pc, #104]	; (8002f80 <HAL_GPIO_Init+0x324>)
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	43db      	mvns	r3, r3
 8002f1e:	69ba      	ldr	r2, [r7, #24]
 8002f20:	4013      	ands	r3, r2
 8002f22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d003      	beq.n	8002f38 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f38:	4a11      	ldr	r2, [pc, #68]	; (8002f80 <HAL_GPIO_Init+0x324>)
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	3301      	adds	r3, #1
 8002f42:	61fb      	str	r3, [r7, #28]
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	2b0f      	cmp	r3, #15
 8002f48:	f67f ae96 	bls.w	8002c78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f4c:	bf00      	nop
 8002f4e:	bf00      	nop
 8002f50:	3724      	adds	r7, #36	; 0x24
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	40023800 	.word	0x40023800
 8002f60:	40013800 	.word	0x40013800
 8002f64:	40020000 	.word	0x40020000
 8002f68:	40020400 	.word	0x40020400
 8002f6c:	40020800 	.word	0x40020800
 8002f70:	40020c00 	.word	0x40020c00
 8002f74:	40021000 	.word	0x40021000
 8002f78:	40021400 	.word	0x40021400
 8002f7c:	40021800 	.word	0x40021800
 8002f80:	40013c00 	.word	0x40013c00

08002f84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b085      	sub	sp, #20
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	691a      	ldr	r2, [r3, #16]
 8002f94:	887b      	ldrh	r3, [r7, #2]
 8002f96:	4013      	ands	r3, r2
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d002      	beq.n	8002fa2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	73fb      	strb	r3, [r7, #15]
 8002fa0:	e001      	b.n	8002fa6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3714      	adds	r7, #20
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	807b      	strh	r3, [r7, #2]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fc4:	787b      	ldrb	r3, [r7, #1]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d003      	beq.n	8002fd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fca:	887a      	ldrh	r2, [r7, #2]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002fd0:	e003      	b.n	8002fda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002fd2:	887b      	ldrh	r3, [r7, #2]
 8002fd4:	041a      	lsls	r2, r3, #16
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	619a      	str	r2, [r3, #24]
}
 8002fda:	bf00      	nop
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
	...

08002fe8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e12b      	b.n	8003252 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b00      	cmp	r3, #0
 8003004:	d106      	bne.n	8003014 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f7ff faec 	bl	80025ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2224      	movs	r2, #36	; 0x24
 8003018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f022 0201 	bic.w	r2, r2, #1
 800302a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800303a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800304a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800304c:	f001 f9ac 	bl	80043a8 <HAL_RCC_GetPCLK1Freq>
 8003050:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	4a81      	ldr	r2, [pc, #516]	; (800325c <HAL_I2C_Init+0x274>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d807      	bhi.n	800306c <HAL_I2C_Init+0x84>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	4a80      	ldr	r2, [pc, #512]	; (8003260 <HAL_I2C_Init+0x278>)
 8003060:	4293      	cmp	r3, r2
 8003062:	bf94      	ite	ls
 8003064:	2301      	movls	r3, #1
 8003066:	2300      	movhi	r3, #0
 8003068:	b2db      	uxtb	r3, r3
 800306a:	e006      	b.n	800307a <HAL_I2C_Init+0x92>
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	4a7d      	ldr	r2, [pc, #500]	; (8003264 <HAL_I2C_Init+0x27c>)
 8003070:	4293      	cmp	r3, r2
 8003072:	bf94      	ite	ls
 8003074:	2301      	movls	r3, #1
 8003076:	2300      	movhi	r3, #0
 8003078:	b2db      	uxtb	r3, r3
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e0e7      	b.n	8003252 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	4a78      	ldr	r2, [pc, #480]	; (8003268 <HAL_I2C_Init+0x280>)
 8003086:	fba2 2303 	umull	r2, r3, r2, r3
 800308a:	0c9b      	lsrs	r3, r3, #18
 800308c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68ba      	ldr	r2, [r7, #8]
 800309e:	430a      	orrs	r2, r1
 80030a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	6a1b      	ldr	r3, [r3, #32]
 80030a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	4a6a      	ldr	r2, [pc, #424]	; (800325c <HAL_I2C_Init+0x274>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d802      	bhi.n	80030bc <HAL_I2C_Init+0xd4>
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	3301      	adds	r3, #1
 80030ba:	e009      	b.n	80030d0 <HAL_I2C_Init+0xe8>
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80030c2:	fb02 f303 	mul.w	r3, r2, r3
 80030c6:	4a69      	ldr	r2, [pc, #420]	; (800326c <HAL_I2C_Init+0x284>)
 80030c8:	fba2 2303 	umull	r2, r3, r2, r3
 80030cc:	099b      	lsrs	r3, r3, #6
 80030ce:	3301      	adds	r3, #1
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	6812      	ldr	r2, [r2, #0]
 80030d4:	430b      	orrs	r3, r1
 80030d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	69db      	ldr	r3, [r3, #28]
 80030de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80030e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	495c      	ldr	r1, [pc, #368]	; (800325c <HAL_I2C_Init+0x274>)
 80030ec:	428b      	cmp	r3, r1
 80030ee:	d819      	bhi.n	8003124 <HAL_I2C_Init+0x13c>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	1e59      	subs	r1, r3, #1
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	005b      	lsls	r3, r3, #1
 80030fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80030fe:	1c59      	adds	r1, r3, #1
 8003100:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003104:	400b      	ands	r3, r1
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00a      	beq.n	8003120 <HAL_I2C_Init+0x138>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	1e59      	subs	r1, r3, #1
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	fbb1 f3f3 	udiv	r3, r1, r3
 8003118:	3301      	adds	r3, #1
 800311a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800311e:	e051      	b.n	80031c4 <HAL_I2C_Init+0x1dc>
 8003120:	2304      	movs	r3, #4
 8003122:	e04f      	b.n	80031c4 <HAL_I2C_Init+0x1dc>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d111      	bne.n	8003150 <HAL_I2C_Init+0x168>
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	1e58      	subs	r0, r3, #1
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6859      	ldr	r1, [r3, #4]
 8003134:	460b      	mov	r3, r1
 8003136:	005b      	lsls	r3, r3, #1
 8003138:	440b      	add	r3, r1
 800313a:	fbb0 f3f3 	udiv	r3, r0, r3
 800313e:	3301      	adds	r3, #1
 8003140:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003144:	2b00      	cmp	r3, #0
 8003146:	bf0c      	ite	eq
 8003148:	2301      	moveq	r3, #1
 800314a:	2300      	movne	r3, #0
 800314c:	b2db      	uxtb	r3, r3
 800314e:	e012      	b.n	8003176 <HAL_I2C_Init+0x18e>
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	1e58      	subs	r0, r3, #1
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6859      	ldr	r1, [r3, #4]
 8003158:	460b      	mov	r3, r1
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	440b      	add	r3, r1
 800315e:	0099      	lsls	r1, r3, #2
 8003160:	440b      	add	r3, r1
 8003162:	fbb0 f3f3 	udiv	r3, r0, r3
 8003166:	3301      	adds	r3, #1
 8003168:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800316c:	2b00      	cmp	r3, #0
 800316e:	bf0c      	ite	eq
 8003170:	2301      	moveq	r3, #1
 8003172:	2300      	movne	r3, #0
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <HAL_I2C_Init+0x196>
 800317a:	2301      	movs	r3, #1
 800317c:	e022      	b.n	80031c4 <HAL_I2C_Init+0x1dc>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d10e      	bne.n	80031a4 <HAL_I2C_Init+0x1bc>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	1e58      	subs	r0, r3, #1
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6859      	ldr	r1, [r3, #4]
 800318e:	460b      	mov	r3, r1
 8003190:	005b      	lsls	r3, r3, #1
 8003192:	440b      	add	r3, r1
 8003194:	fbb0 f3f3 	udiv	r3, r0, r3
 8003198:	3301      	adds	r3, #1
 800319a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800319e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031a2:	e00f      	b.n	80031c4 <HAL_I2C_Init+0x1dc>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	1e58      	subs	r0, r3, #1
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6859      	ldr	r1, [r3, #4]
 80031ac:	460b      	mov	r3, r1
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	440b      	add	r3, r1
 80031b2:	0099      	lsls	r1, r3, #2
 80031b4:	440b      	add	r3, r1
 80031b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80031ba:	3301      	adds	r3, #1
 80031bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031c4:	6879      	ldr	r1, [r7, #4]
 80031c6:	6809      	ldr	r1, [r1, #0]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	69da      	ldr	r2, [r3, #28]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a1b      	ldr	r3, [r3, #32]
 80031de:	431a      	orrs	r2, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	430a      	orrs	r2, r1
 80031e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80031f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	6911      	ldr	r1, [r2, #16]
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	68d2      	ldr	r2, [r2, #12]
 80031fe:	4311      	orrs	r1, r2
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	6812      	ldr	r2, [r2, #0]
 8003204:	430b      	orrs	r3, r1
 8003206:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	695a      	ldr	r2, [r3, #20]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	699b      	ldr	r3, [r3, #24]
 800321a:	431a      	orrs	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	430a      	orrs	r2, r1
 8003222:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f042 0201 	orr.w	r2, r2, #1
 8003232:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2220      	movs	r2, #32
 800323e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3710      	adds	r7, #16
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	000186a0 	.word	0x000186a0
 8003260:	001e847f 	.word	0x001e847f
 8003264:	003d08ff 	.word	0x003d08ff
 8003268:	431bde83 	.word	0x431bde83
 800326c:	10624dd3 	.word	0x10624dd3

08003270 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b088      	sub	sp, #32
 8003274:	af02      	add	r7, sp, #8
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	4608      	mov	r0, r1
 800327a:	4611      	mov	r1, r2
 800327c:	461a      	mov	r2, r3
 800327e:	4603      	mov	r3, r0
 8003280:	817b      	strh	r3, [r7, #10]
 8003282:	460b      	mov	r3, r1
 8003284:	813b      	strh	r3, [r7, #8]
 8003286:	4613      	mov	r3, r2
 8003288:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800328a:	f7ff fbd1 	bl	8002a30 <HAL_GetTick>
 800328e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003296:	b2db      	uxtb	r3, r3
 8003298:	2b20      	cmp	r3, #32
 800329a:	f040 80d9 	bne.w	8003450 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	9300      	str	r3, [sp, #0]
 80032a2:	2319      	movs	r3, #25
 80032a4:	2201      	movs	r2, #1
 80032a6:	496d      	ldr	r1, [pc, #436]	; (800345c <HAL_I2C_Mem_Write+0x1ec>)
 80032a8:	68f8      	ldr	r0, [r7, #12]
 80032aa:	f000 fdad 	bl	8003e08 <I2C_WaitOnFlagUntilTimeout>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d001      	beq.n	80032b8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80032b4:	2302      	movs	r3, #2
 80032b6:	e0cc      	b.n	8003452 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d101      	bne.n	80032c6 <HAL_I2C_Mem_Write+0x56>
 80032c2:	2302      	movs	r3, #2
 80032c4:	e0c5      	b.n	8003452 <HAL_I2C_Mem_Write+0x1e2>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2201      	movs	r2, #1
 80032ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0301 	and.w	r3, r3, #1
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d007      	beq.n	80032ec <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f042 0201 	orr.w	r2, r2, #1
 80032ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2221      	movs	r2, #33	; 0x21
 8003300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2240      	movs	r2, #64	; 0x40
 8003308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6a3a      	ldr	r2, [r7, #32]
 8003316:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800331c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003322:	b29a      	uxth	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	4a4d      	ldr	r2, [pc, #308]	; (8003460 <HAL_I2C_Mem_Write+0x1f0>)
 800332c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800332e:	88f8      	ldrh	r0, [r7, #6]
 8003330:	893a      	ldrh	r2, [r7, #8]
 8003332:	8979      	ldrh	r1, [r7, #10]
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	9301      	str	r3, [sp, #4]
 8003338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800333a:	9300      	str	r3, [sp, #0]
 800333c:	4603      	mov	r3, r0
 800333e:	68f8      	ldr	r0, [r7, #12]
 8003340:	f000 fbe4 	bl	8003b0c <I2C_RequestMemoryWrite>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d052      	beq.n	80033f0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e081      	b.n	8003452 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800334e:	697a      	ldr	r2, [r7, #20]
 8003350:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003352:	68f8      	ldr	r0, [r7, #12]
 8003354:	f000 fe2e 	bl	8003fb4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00d      	beq.n	800337a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003362:	2b04      	cmp	r3, #4
 8003364:	d107      	bne.n	8003376 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003374:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e06b      	b.n	8003452 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337e:	781a      	ldrb	r2, [r3, #0]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338a:	1c5a      	adds	r2, r3, #1
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003394:	3b01      	subs	r3, #1
 8003396:	b29a      	uxth	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	3b01      	subs	r3, #1
 80033a4:	b29a      	uxth	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	695b      	ldr	r3, [r3, #20]
 80033b0:	f003 0304 	and.w	r3, r3, #4
 80033b4:	2b04      	cmp	r3, #4
 80033b6:	d11b      	bne.n	80033f0 <HAL_I2C_Mem_Write+0x180>
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d017      	beq.n	80033f0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c4:	781a      	ldrb	r2, [r3, #0]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d0:	1c5a      	adds	r2, r3, #1
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033da:	3b01      	subs	r3, #1
 80033dc:	b29a      	uxth	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	3b01      	subs	r3, #1
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d1aa      	bne.n	800334e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033f8:	697a      	ldr	r2, [r7, #20]
 80033fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033fc:	68f8      	ldr	r0, [r7, #12]
 80033fe:	f000 fe1a 	bl	8004036 <I2C_WaitOnBTFFlagUntilTimeout>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d00d      	beq.n	8003424 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340c:	2b04      	cmp	r3, #4
 800340e:	d107      	bne.n	8003420 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800341e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e016      	b.n	8003452 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003432:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2220      	movs	r2, #32
 8003438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800344c:	2300      	movs	r3, #0
 800344e:	e000      	b.n	8003452 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003450:	2302      	movs	r3, #2
  }
}
 8003452:	4618      	mov	r0, r3
 8003454:	3718      	adds	r7, #24
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	00100002 	.word	0x00100002
 8003460:	ffff0000 	.word	0xffff0000

08003464 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b08c      	sub	sp, #48	; 0x30
 8003468:	af02      	add	r7, sp, #8
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	4608      	mov	r0, r1
 800346e:	4611      	mov	r1, r2
 8003470:	461a      	mov	r2, r3
 8003472:	4603      	mov	r3, r0
 8003474:	817b      	strh	r3, [r7, #10]
 8003476:	460b      	mov	r3, r1
 8003478:	813b      	strh	r3, [r7, #8]
 800347a:	4613      	mov	r3, r2
 800347c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800347e:	f7ff fad7 	bl	8002a30 <HAL_GetTick>
 8003482:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800348a:	b2db      	uxtb	r3, r3
 800348c:	2b20      	cmp	r3, #32
 800348e:	f040 8208 	bne.w	80038a2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003494:	9300      	str	r3, [sp, #0]
 8003496:	2319      	movs	r3, #25
 8003498:	2201      	movs	r2, #1
 800349a:	497b      	ldr	r1, [pc, #492]	; (8003688 <HAL_I2C_Mem_Read+0x224>)
 800349c:	68f8      	ldr	r0, [r7, #12]
 800349e:	f000 fcb3 	bl	8003e08 <I2C_WaitOnFlagUntilTimeout>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d001      	beq.n	80034ac <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80034a8:	2302      	movs	r3, #2
 80034aa:	e1fb      	b.n	80038a4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d101      	bne.n	80034ba <HAL_I2C_Mem_Read+0x56>
 80034b6:	2302      	movs	r3, #2
 80034b8:	e1f4      	b.n	80038a4 <HAL_I2C_Mem_Read+0x440>
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2201      	movs	r2, #1
 80034be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0301 	and.w	r3, r3, #1
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d007      	beq.n	80034e0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f042 0201 	orr.w	r2, r2, #1
 80034de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2222      	movs	r2, #34	; 0x22
 80034f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2240      	movs	r2, #64	; 0x40
 80034fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2200      	movs	r2, #0
 8003504:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800350a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003510:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003516:	b29a      	uxth	r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	4a5b      	ldr	r2, [pc, #364]	; (800368c <HAL_I2C_Mem_Read+0x228>)
 8003520:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003522:	88f8      	ldrh	r0, [r7, #6]
 8003524:	893a      	ldrh	r2, [r7, #8]
 8003526:	8979      	ldrh	r1, [r7, #10]
 8003528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352a:	9301      	str	r3, [sp, #4]
 800352c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800352e:	9300      	str	r3, [sp, #0]
 8003530:	4603      	mov	r3, r0
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	f000 fb80 	bl	8003c38 <I2C_RequestMemoryRead>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e1b0      	b.n	80038a4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003546:	2b00      	cmp	r3, #0
 8003548:	d113      	bne.n	8003572 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800354a:	2300      	movs	r3, #0
 800354c:	623b      	str	r3, [r7, #32]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	695b      	ldr	r3, [r3, #20]
 8003554:	623b      	str	r3, [r7, #32]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	699b      	ldr	r3, [r3, #24]
 800355c:	623b      	str	r3, [r7, #32]
 800355e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800356e:	601a      	str	r2, [r3, #0]
 8003570:	e184      	b.n	800387c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003576:	2b01      	cmp	r3, #1
 8003578:	d11b      	bne.n	80035b2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003588:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800358a:	2300      	movs	r3, #0
 800358c:	61fb      	str	r3, [r7, #28]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	695b      	ldr	r3, [r3, #20]
 8003594:	61fb      	str	r3, [r7, #28]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	61fb      	str	r3, [r7, #28]
 800359e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035ae:	601a      	str	r2, [r3, #0]
 80035b0:	e164      	b.n	800387c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d11b      	bne.n	80035f2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035c8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035da:	2300      	movs	r3, #0
 80035dc:	61bb      	str	r3, [r7, #24]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	695b      	ldr	r3, [r3, #20]
 80035e4:	61bb      	str	r3, [r7, #24]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	699b      	ldr	r3, [r3, #24]
 80035ec:	61bb      	str	r3, [r7, #24]
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	e144      	b.n	800387c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035f2:	2300      	movs	r3, #0
 80035f4:	617b      	str	r3, [r7, #20]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	695b      	ldr	r3, [r3, #20]
 80035fc:	617b      	str	r3, [r7, #20]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	617b      	str	r3, [r7, #20]
 8003606:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003608:	e138      	b.n	800387c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800360e:	2b03      	cmp	r3, #3
 8003610:	f200 80f1 	bhi.w	80037f6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003618:	2b01      	cmp	r3, #1
 800361a:	d123      	bne.n	8003664 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800361c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800361e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003620:	68f8      	ldr	r0, [r7, #12]
 8003622:	f000 fd49 	bl	80040b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d001      	beq.n	8003630 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e139      	b.n	80038a4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	691a      	ldr	r2, [r3, #16]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363a:	b2d2      	uxtb	r2, r2
 800363c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003642:	1c5a      	adds	r2, r3, #1
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800364c:	3b01      	subs	r3, #1
 800364e:	b29a      	uxth	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003658:	b29b      	uxth	r3, r3
 800365a:	3b01      	subs	r3, #1
 800365c:	b29a      	uxth	r2, r3
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003662:	e10b      	b.n	800387c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003668:	2b02      	cmp	r3, #2
 800366a:	d14e      	bne.n	800370a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800366c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366e:	9300      	str	r3, [sp, #0]
 8003670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003672:	2200      	movs	r2, #0
 8003674:	4906      	ldr	r1, [pc, #24]	; (8003690 <HAL_I2C_Mem_Read+0x22c>)
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f000 fbc6 	bl	8003e08 <I2C_WaitOnFlagUntilTimeout>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d008      	beq.n	8003694 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e10e      	b.n	80038a4 <HAL_I2C_Mem_Read+0x440>
 8003686:	bf00      	nop
 8003688:	00100002 	.word	0x00100002
 800368c:	ffff0000 	.word	0xffff0000
 8003690:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	691a      	ldr	r2, [r3, #16]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ae:	b2d2      	uxtb	r2, r2
 80036b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b6:	1c5a      	adds	r2, r3, #1
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036c0:	3b01      	subs	r3, #1
 80036c2:	b29a      	uxth	r2, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	3b01      	subs	r3, #1
 80036d0:	b29a      	uxth	r2, r3
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	691a      	ldr	r2, [r3, #16]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e0:	b2d2      	uxtb	r2, r2
 80036e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e8:	1c5a      	adds	r2, r3, #1
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036f2:	3b01      	subs	r3, #1
 80036f4:	b29a      	uxth	r2, r3
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036fe:	b29b      	uxth	r3, r3
 8003700:	3b01      	subs	r3, #1
 8003702:	b29a      	uxth	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003708:	e0b8      	b.n	800387c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800370a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370c:	9300      	str	r3, [sp, #0]
 800370e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003710:	2200      	movs	r2, #0
 8003712:	4966      	ldr	r1, [pc, #408]	; (80038ac <HAL_I2C_Mem_Read+0x448>)
 8003714:	68f8      	ldr	r0, [r7, #12]
 8003716:	f000 fb77 	bl	8003e08 <I2C_WaitOnFlagUntilTimeout>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d001      	beq.n	8003724 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e0bf      	b.n	80038a4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003732:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	691a      	ldr	r2, [r3, #16]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373e:	b2d2      	uxtb	r2, r2
 8003740:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003746:	1c5a      	adds	r2, r3, #1
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003750:	3b01      	subs	r3, #1
 8003752:	b29a      	uxth	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800375c:	b29b      	uxth	r3, r3
 800375e:	3b01      	subs	r3, #1
 8003760:	b29a      	uxth	r2, r3
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003768:	9300      	str	r3, [sp, #0]
 800376a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800376c:	2200      	movs	r2, #0
 800376e:	494f      	ldr	r1, [pc, #316]	; (80038ac <HAL_I2C_Mem_Read+0x448>)
 8003770:	68f8      	ldr	r0, [r7, #12]
 8003772:	f000 fb49 	bl	8003e08 <I2C_WaitOnFlagUntilTimeout>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d001      	beq.n	8003780 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e091      	b.n	80038a4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800378e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	691a      	ldr	r2, [r3, #16]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379a:	b2d2      	uxtb	r2, r2
 800379c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a2:	1c5a      	adds	r2, r3, #1
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ac:	3b01      	subs	r3, #1
 80037ae:	b29a      	uxth	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	3b01      	subs	r3, #1
 80037bc:	b29a      	uxth	r2, r3
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	691a      	ldr	r2, [r3, #16]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037cc:	b2d2      	uxtb	r2, r2
 80037ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d4:	1c5a      	adds	r2, r3, #1
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037de:	3b01      	subs	r3, #1
 80037e0:	b29a      	uxth	r2, r3
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	3b01      	subs	r3, #1
 80037ee:	b29a      	uxth	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80037f4:	e042      	b.n	800387c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80037fa:	68f8      	ldr	r0, [r7, #12]
 80037fc:	f000 fc5c 	bl	80040b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e04c      	b.n	80038a4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	691a      	ldr	r2, [r3, #16]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003814:	b2d2      	uxtb	r2, r2
 8003816:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381c:	1c5a      	adds	r2, r3, #1
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003826:	3b01      	subs	r3, #1
 8003828:	b29a      	uxth	r2, r3
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003832:	b29b      	uxth	r3, r3
 8003834:	3b01      	subs	r3, #1
 8003836:	b29a      	uxth	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	f003 0304 	and.w	r3, r3, #4
 8003846:	2b04      	cmp	r3, #4
 8003848:	d118      	bne.n	800387c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	691a      	ldr	r2, [r3, #16]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003854:	b2d2      	uxtb	r2, r2
 8003856:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385c:	1c5a      	adds	r2, r3, #1
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003866:	3b01      	subs	r3, #1
 8003868:	b29a      	uxth	r2, r3
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003872:	b29b      	uxth	r3, r3
 8003874:	3b01      	subs	r3, #1
 8003876:	b29a      	uxth	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003880:	2b00      	cmp	r3, #0
 8003882:	f47f aec2 	bne.w	800360a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2220      	movs	r2, #32
 800388a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800389e:	2300      	movs	r3, #0
 80038a0:	e000      	b.n	80038a4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80038a2:	2302      	movs	r3, #2
  }
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3728      	adds	r7, #40	; 0x28
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	00010004 	.word	0x00010004

080038b0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b08a      	sub	sp, #40	; 0x28
 80038b4:	af02      	add	r7, sp, #8
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	607a      	str	r2, [r7, #4]
 80038ba:	603b      	str	r3, [r7, #0]
 80038bc:	460b      	mov	r3, r1
 80038be:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80038c0:	f7ff f8b6 	bl	8002a30 <HAL_GetTick>
 80038c4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80038c6:	2301      	movs	r3, #1
 80038c8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b20      	cmp	r3, #32
 80038d4:	f040 8111 	bne.w	8003afa <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	9300      	str	r3, [sp, #0]
 80038dc:	2319      	movs	r3, #25
 80038de:	2201      	movs	r2, #1
 80038e0:	4988      	ldr	r1, [pc, #544]	; (8003b04 <HAL_I2C_IsDeviceReady+0x254>)
 80038e2:	68f8      	ldr	r0, [r7, #12]
 80038e4:	f000 fa90 	bl	8003e08 <I2C_WaitOnFlagUntilTimeout>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d001      	beq.n	80038f2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80038ee:	2302      	movs	r3, #2
 80038f0:	e104      	b.n	8003afc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d101      	bne.n	8003900 <HAL_I2C_IsDeviceReady+0x50>
 80038fc:	2302      	movs	r3, #2
 80038fe:	e0fd      	b.n	8003afc <HAL_I2C_IsDeviceReady+0x24c>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	2b01      	cmp	r3, #1
 8003914:	d007      	beq.n	8003926 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f042 0201 	orr.w	r2, r2, #1
 8003924:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003934:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2224      	movs	r2, #36	; 0x24
 800393a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2200      	movs	r2, #0
 8003942:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	4a70      	ldr	r2, [pc, #448]	; (8003b08 <HAL_I2C_IsDeviceReady+0x258>)
 8003948:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003958:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	9300      	str	r3, [sp, #0]
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	2200      	movs	r2, #0
 8003962:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003966:	68f8      	ldr	r0, [r7, #12]
 8003968:	f000 fa4e 	bl	8003e08 <I2C_WaitOnFlagUntilTimeout>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00d      	beq.n	800398e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800397c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003980:	d103      	bne.n	800398a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003988:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e0b6      	b.n	8003afc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800398e:	897b      	ldrh	r3, [r7, #10]
 8003990:	b2db      	uxtb	r3, r3
 8003992:	461a      	mov	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800399c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800399e:	f7ff f847 	bl	8002a30 <HAL_GetTick>
 80039a2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	bf0c      	ite	eq
 80039b2:	2301      	moveq	r3, #1
 80039b4:	2300      	movne	r3, #0
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	695b      	ldr	r3, [r3, #20]
 80039c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039c8:	bf0c      	ite	eq
 80039ca:	2301      	moveq	r3, #1
 80039cc:	2300      	movne	r3, #0
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80039d2:	e025      	b.n	8003a20 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80039d4:	f7ff f82c 	bl	8002a30 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	683a      	ldr	r2, [r7, #0]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d302      	bcc.n	80039ea <HAL_I2C_IsDeviceReady+0x13a>
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d103      	bne.n	80039f2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	22a0      	movs	r2, #160	; 0xa0
 80039ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	695b      	ldr	r3, [r3, #20]
 80039f8:	f003 0302 	and.w	r3, r3, #2
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	bf0c      	ite	eq
 8003a00:	2301      	moveq	r3, #1
 8003a02:	2300      	movne	r3, #0
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a16:	bf0c      	ite	eq
 8003a18:	2301      	moveq	r3, #1
 8003a1a:	2300      	movne	r3, #0
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	2ba0      	cmp	r3, #160	; 0xa0
 8003a2a:	d005      	beq.n	8003a38 <HAL_I2C_IsDeviceReady+0x188>
 8003a2c:	7dfb      	ldrb	r3, [r7, #23]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d102      	bne.n	8003a38 <HAL_I2C_IsDeviceReady+0x188>
 8003a32:	7dbb      	ldrb	r3, [r7, #22]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d0cd      	beq.n	80039d4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2220      	movs	r2, #32
 8003a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	695b      	ldr	r3, [r3, #20]
 8003a46:	f003 0302 	and.w	r3, r3, #2
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d129      	bne.n	8003aa2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a5c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a5e:	2300      	movs	r3, #0
 8003a60:	613b      	str	r3, [r7, #16]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	695b      	ldr	r3, [r3, #20]
 8003a68:	613b      	str	r3, [r7, #16]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	699b      	ldr	r3, [r3, #24]
 8003a70:	613b      	str	r3, [r7, #16]
 8003a72:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	9300      	str	r3, [sp, #0]
 8003a78:	2319      	movs	r3, #25
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	4921      	ldr	r1, [pc, #132]	; (8003b04 <HAL_I2C_IsDeviceReady+0x254>)
 8003a7e:	68f8      	ldr	r0, [r7, #12]
 8003a80:	f000 f9c2 	bl	8003e08 <I2C_WaitOnFlagUntilTimeout>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d001      	beq.n	8003a8e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e036      	b.n	8003afc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2220      	movs	r2, #32
 8003a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	e02c      	b.n	8003afc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ab0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003aba:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	9300      	str	r3, [sp, #0]
 8003ac0:	2319      	movs	r3, #25
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	490f      	ldr	r1, [pc, #60]	; (8003b04 <HAL_I2C_IsDeviceReady+0x254>)
 8003ac6:	68f8      	ldr	r0, [r7, #12]
 8003ac8:	f000 f99e 	bl	8003e08 <I2C_WaitOnFlagUntilTimeout>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d001      	beq.n	8003ad6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e012      	b.n	8003afc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	3301      	adds	r3, #1
 8003ada:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003adc:	69ba      	ldr	r2, [r7, #24]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	f4ff af32 	bcc.w	800394a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2220      	movs	r2, #32
 8003aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e000      	b.n	8003afc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003afa:	2302      	movs	r3, #2
  }
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3720      	adds	r7, #32
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	00100002 	.word	0x00100002
 8003b08:	ffff0000 	.word	0xffff0000

08003b0c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b088      	sub	sp, #32
 8003b10:	af02      	add	r7, sp, #8
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	4608      	mov	r0, r1
 8003b16:	4611      	mov	r1, r2
 8003b18:	461a      	mov	r2, r3
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	817b      	strh	r3, [r7, #10]
 8003b1e:	460b      	mov	r3, r1
 8003b20:	813b      	strh	r3, [r7, #8]
 8003b22:	4613      	mov	r3, r2
 8003b24:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b34:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b38:	9300      	str	r3, [sp, #0]
 8003b3a:	6a3b      	ldr	r3, [r7, #32]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b42:	68f8      	ldr	r0, [r7, #12]
 8003b44:	f000 f960 	bl	8003e08 <I2C_WaitOnFlagUntilTimeout>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00d      	beq.n	8003b6a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b5c:	d103      	bne.n	8003b66 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b64:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e05f      	b.n	8003c2a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b6a:	897b      	ldrh	r3, [r7, #10]
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	461a      	mov	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b78:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7c:	6a3a      	ldr	r2, [r7, #32]
 8003b7e:	492d      	ldr	r1, [pc, #180]	; (8003c34 <I2C_RequestMemoryWrite+0x128>)
 8003b80:	68f8      	ldr	r0, [r7, #12]
 8003b82:	f000 f998 	bl	8003eb6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d001      	beq.n	8003b90 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e04c      	b.n	8003c2a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b90:	2300      	movs	r3, #0
 8003b92:	617b      	str	r3, [r7, #20]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	695b      	ldr	r3, [r3, #20]
 8003b9a:	617b      	str	r3, [r7, #20]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	699b      	ldr	r3, [r3, #24]
 8003ba2:	617b      	str	r3, [r7, #20]
 8003ba4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ba8:	6a39      	ldr	r1, [r7, #32]
 8003baa:	68f8      	ldr	r0, [r7, #12]
 8003bac:	f000 fa02 	bl	8003fb4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00d      	beq.n	8003bd2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bba:	2b04      	cmp	r3, #4
 8003bbc:	d107      	bne.n	8003bce <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bcc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e02b      	b.n	8003c2a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003bd2:	88fb      	ldrh	r3, [r7, #6]
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d105      	bne.n	8003be4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003bd8:	893b      	ldrh	r3, [r7, #8]
 8003bda:	b2da      	uxtb	r2, r3
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	611a      	str	r2, [r3, #16]
 8003be2:	e021      	b.n	8003c28 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003be4:	893b      	ldrh	r3, [r7, #8]
 8003be6:	0a1b      	lsrs	r3, r3, #8
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	b2da      	uxtb	r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bf4:	6a39      	ldr	r1, [r7, #32]
 8003bf6:	68f8      	ldr	r0, [r7, #12]
 8003bf8:	f000 f9dc 	bl	8003fb4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00d      	beq.n	8003c1e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c06:	2b04      	cmp	r3, #4
 8003c08:	d107      	bne.n	8003c1a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c18:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e005      	b.n	8003c2a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c1e:	893b      	ldrh	r3, [r7, #8]
 8003c20:	b2da      	uxtb	r2, r3
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3718      	adds	r7, #24
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	00010002 	.word	0x00010002

08003c38 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b088      	sub	sp, #32
 8003c3c:	af02      	add	r7, sp, #8
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	4608      	mov	r0, r1
 8003c42:	4611      	mov	r1, r2
 8003c44:	461a      	mov	r2, r3
 8003c46:	4603      	mov	r3, r0
 8003c48:	817b      	strh	r3, [r7, #10]
 8003c4a:	460b      	mov	r3, r1
 8003c4c:	813b      	strh	r3, [r7, #8]
 8003c4e:	4613      	mov	r3, r2
 8003c50:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c60:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c70:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c74:	9300      	str	r3, [sp, #0]
 8003c76:	6a3b      	ldr	r3, [r7, #32]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c7e:	68f8      	ldr	r0, [r7, #12]
 8003c80:	f000 f8c2 	bl	8003e08 <I2C_WaitOnFlagUntilTimeout>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00d      	beq.n	8003ca6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c98:	d103      	bne.n	8003ca2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ca0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e0aa      	b.n	8003dfc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ca6:	897b      	ldrh	r3, [r7, #10]
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	461a      	mov	r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003cb4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb8:	6a3a      	ldr	r2, [r7, #32]
 8003cba:	4952      	ldr	r1, [pc, #328]	; (8003e04 <I2C_RequestMemoryRead+0x1cc>)
 8003cbc:	68f8      	ldr	r0, [r7, #12]
 8003cbe:	f000 f8fa 	bl	8003eb6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d001      	beq.n	8003ccc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e097      	b.n	8003dfc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ccc:	2300      	movs	r3, #0
 8003cce:	617b      	str	r3, [r7, #20]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	617b      	str	r3, [r7, #20]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	617b      	str	r3, [r7, #20]
 8003ce0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ce2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ce4:	6a39      	ldr	r1, [r7, #32]
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	f000 f964 	bl	8003fb4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00d      	beq.n	8003d0e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf6:	2b04      	cmp	r3, #4
 8003cf8:	d107      	bne.n	8003d0a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d08:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e076      	b.n	8003dfc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d0e:	88fb      	ldrh	r3, [r7, #6]
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d105      	bne.n	8003d20 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d14:	893b      	ldrh	r3, [r7, #8]
 8003d16:	b2da      	uxtb	r2, r3
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	611a      	str	r2, [r3, #16]
 8003d1e:	e021      	b.n	8003d64 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003d20:	893b      	ldrh	r3, [r7, #8]
 8003d22:	0a1b      	lsrs	r3, r3, #8
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	b2da      	uxtb	r2, r3
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d30:	6a39      	ldr	r1, [r7, #32]
 8003d32:	68f8      	ldr	r0, [r7, #12]
 8003d34:	f000 f93e 	bl	8003fb4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00d      	beq.n	8003d5a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d42:	2b04      	cmp	r3, #4
 8003d44:	d107      	bne.n	8003d56 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d54:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e050      	b.n	8003dfc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d5a:	893b      	ldrh	r3, [r7, #8]
 8003d5c:	b2da      	uxtb	r2, r3
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d66:	6a39      	ldr	r1, [r7, #32]
 8003d68:	68f8      	ldr	r0, [r7, #12]
 8003d6a:	f000 f923 	bl	8003fb4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00d      	beq.n	8003d90 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d78:	2b04      	cmp	r3, #4
 8003d7a:	d107      	bne.n	8003d8c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d8a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e035      	b.n	8003dfc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d9e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da2:	9300      	str	r3, [sp, #0]
 8003da4:	6a3b      	ldr	r3, [r7, #32]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003dac:	68f8      	ldr	r0, [r7, #12]
 8003dae:	f000 f82b 	bl	8003e08 <I2C_WaitOnFlagUntilTimeout>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00d      	beq.n	8003dd4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dc6:	d103      	bne.n	8003dd0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e013      	b.n	8003dfc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003dd4:	897b      	ldrh	r3, [r7, #10]
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	f043 0301 	orr.w	r3, r3, #1
 8003ddc:	b2da      	uxtb	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de6:	6a3a      	ldr	r2, [r7, #32]
 8003de8:	4906      	ldr	r1, [pc, #24]	; (8003e04 <I2C_RequestMemoryRead+0x1cc>)
 8003dea:	68f8      	ldr	r0, [r7, #12]
 8003dec:	f000 f863 	bl	8003eb6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e000      	b.n	8003dfc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3718      	adds	r7, #24
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	00010002 	.word	0x00010002

08003e08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	603b      	str	r3, [r7, #0]
 8003e14:	4613      	mov	r3, r2
 8003e16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e18:	e025      	b.n	8003e66 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e20:	d021      	beq.n	8003e66 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e22:	f7fe fe05 	bl	8002a30 <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	683a      	ldr	r2, [r7, #0]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d302      	bcc.n	8003e38 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d116      	bne.n	8003e66 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2220      	movs	r2, #32
 8003e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e52:	f043 0220 	orr.w	r2, r3, #32
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e023      	b.n	8003eae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	0c1b      	lsrs	r3, r3, #16
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d10d      	bne.n	8003e8c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	695b      	ldr	r3, [r3, #20]
 8003e76:	43da      	mvns	r2, r3
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	bf0c      	ite	eq
 8003e82:	2301      	moveq	r3, #1
 8003e84:	2300      	movne	r3, #0
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	461a      	mov	r2, r3
 8003e8a:	e00c      	b.n	8003ea6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	699b      	ldr	r3, [r3, #24]
 8003e92:	43da      	mvns	r2, r3
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	4013      	ands	r3, r2
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	bf0c      	ite	eq
 8003e9e:	2301      	moveq	r3, #1
 8003ea0:	2300      	movne	r3, #0
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	79fb      	ldrb	r3, [r7, #7]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d0b6      	beq.n	8003e1a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3710      	adds	r7, #16
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003eb6:	b580      	push	{r7, lr}
 8003eb8:	b084      	sub	sp, #16
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	60f8      	str	r0, [r7, #12]
 8003ebe:	60b9      	str	r1, [r7, #8]
 8003ec0:	607a      	str	r2, [r7, #4]
 8003ec2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ec4:	e051      	b.n	8003f6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	695b      	ldr	r3, [r3, #20]
 8003ecc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ed0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ed4:	d123      	bne.n	8003f1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ee4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003eee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2220      	movs	r2, #32
 8003efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0a:	f043 0204 	orr.w	r2, r3, #4
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e046      	b.n	8003fac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f24:	d021      	beq.n	8003f6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f26:	f7fe fd83 	bl	8002a30 <HAL_GetTick>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d302      	bcc.n	8003f3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d116      	bne.n	8003f6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2220      	movs	r2, #32
 8003f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f56:	f043 0220 	orr.w	r2, r3, #32
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e020      	b.n	8003fac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	0c1b      	lsrs	r3, r3, #16
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d10c      	bne.n	8003f8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	695b      	ldr	r3, [r3, #20]
 8003f7a:	43da      	mvns	r2, r3
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	4013      	ands	r3, r2
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	bf14      	ite	ne
 8003f86:	2301      	movne	r3, #1
 8003f88:	2300      	moveq	r3, #0
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	e00b      	b.n	8003fa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	699b      	ldr	r3, [r3, #24]
 8003f94:	43da      	mvns	r2, r3
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	4013      	ands	r3, r2
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	bf14      	ite	ne
 8003fa0:	2301      	movne	r3, #1
 8003fa2:	2300      	moveq	r3, #0
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d18d      	bne.n	8003ec6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3710      	adds	r7, #16
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fc0:	e02d      	b.n	800401e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003fc2:	68f8      	ldr	r0, [r7, #12]
 8003fc4:	f000 f8ce 	bl	8004164 <I2C_IsAcknowledgeFailed>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d001      	beq.n	8003fd2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e02d      	b.n	800402e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fd8:	d021      	beq.n	800401e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fda:	f7fe fd29 	bl	8002a30 <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	68ba      	ldr	r2, [r7, #8]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d302      	bcc.n	8003ff0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d116      	bne.n	800401e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2220      	movs	r2, #32
 8003ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2200      	movs	r2, #0
 8004002:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400a:	f043 0220 	orr.w	r2, r3, #32
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e007      	b.n	800402e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	695b      	ldr	r3, [r3, #20]
 8004024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004028:	2b80      	cmp	r3, #128	; 0x80
 800402a:	d1ca      	bne.n	8003fc2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004036:	b580      	push	{r7, lr}
 8004038:	b084      	sub	sp, #16
 800403a:	af00      	add	r7, sp, #0
 800403c:	60f8      	str	r0, [r7, #12]
 800403e:	60b9      	str	r1, [r7, #8]
 8004040:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004042:	e02d      	b.n	80040a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004044:	68f8      	ldr	r0, [r7, #12]
 8004046:	f000 f88d 	bl	8004164 <I2C_IsAcknowledgeFailed>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d001      	beq.n	8004054 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e02d      	b.n	80040b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800405a:	d021      	beq.n	80040a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800405c:	f7fe fce8 	bl	8002a30 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	68ba      	ldr	r2, [r7, #8]
 8004068:	429a      	cmp	r2, r3
 800406a:	d302      	bcc.n	8004072 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d116      	bne.n	80040a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2200      	movs	r2, #0
 8004076:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2220      	movs	r2, #32
 800407c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408c:	f043 0220 	orr.w	r2, r3, #32
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e007      	b.n	80040b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	f003 0304 	and.w	r3, r3, #4
 80040aa:	2b04      	cmp	r3, #4
 80040ac:	d1ca      	bne.n	8004044 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80040ae:	2300      	movs	r3, #0
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3710      	adds	r7, #16
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80040c4:	e042      	b.n	800414c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	695b      	ldr	r3, [r3, #20]
 80040cc:	f003 0310 	and.w	r3, r3, #16
 80040d0:	2b10      	cmp	r3, #16
 80040d2:	d119      	bne.n	8004108 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f06f 0210 	mvn.w	r2, #16
 80040dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2200      	movs	r2, #0
 80040e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2220      	movs	r2, #32
 80040e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e029      	b.n	800415c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004108:	f7fe fc92 	bl	8002a30 <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	68ba      	ldr	r2, [r7, #8]
 8004114:	429a      	cmp	r2, r3
 8004116:	d302      	bcc.n	800411e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d116      	bne.n	800414c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2220      	movs	r2, #32
 8004128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2200      	movs	r2, #0
 8004130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004138:	f043 0220 	orr.w	r2, r3, #32
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e007      	b.n	800415c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	695b      	ldr	r3, [r3, #20]
 8004152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004156:	2b40      	cmp	r3, #64	; 0x40
 8004158:	d1b5      	bne.n	80040c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800415a:	2300      	movs	r3, #0
}
 800415c:	4618      	mov	r0, r3
 800415e:	3710      	adds	r7, #16
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004176:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800417a:	d11b      	bne.n	80041b4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004184:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2220      	movs	r2, #32
 8004190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a0:	f043 0204 	orr.w	r2, r3, #4
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e000      	b.n	80041b6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	370c      	adds	r7, #12
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
	...

080041c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d101      	bne.n	80041d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e0cc      	b.n	8004372 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041d8:	4b68      	ldr	r3, [pc, #416]	; (800437c <HAL_RCC_ClockConfig+0x1b8>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 030f 	and.w	r3, r3, #15
 80041e0:	683a      	ldr	r2, [r7, #0]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d90c      	bls.n	8004200 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041e6:	4b65      	ldr	r3, [pc, #404]	; (800437c <HAL_RCC_ClockConfig+0x1b8>)
 80041e8:	683a      	ldr	r2, [r7, #0]
 80041ea:	b2d2      	uxtb	r2, r2
 80041ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ee:	4b63      	ldr	r3, [pc, #396]	; (800437c <HAL_RCC_ClockConfig+0x1b8>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 030f 	and.w	r3, r3, #15
 80041f6:	683a      	ldr	r2, [r7, #0]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d001      	beq.n	8004200 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e0b8      	b.n	8004372 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0302 	and.w	r3, r3, #2
 8004208:	2b00      	cmp	r3, #0
 800420a:	d020      	beq.n	800424e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0304 	and.w	r3, r3, #4
 8004214:	2b00      	cmp	r3, #0
 8004216:	d005      	beq.n	8004224 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004218:	4b59      	ldr	r3, [pc, #356]	; (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	4a58      	ldr	r2, [pc, #352]	; (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 800421e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004222:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0308 	and.w	r3, r3, #8
 800422c:	2b00      	cmp	r3, #0
 800422e:	d005      	beq.n	800423c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004230:	4b53      	ldr	r3, [pc, #332]	; (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	4a52      	ldr	r2, [pc, #328]	; (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 8004236:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800423a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800423c:	4b50      	ldr	r3, [pc, #320]	; (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	494d      	ldr	r1, [pc, #308]	; (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 800424a:	4313      	orrs	r3, r2
 800424c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0301 	and.w	r3, r3, #1
 8004256:	2b00      	cmp	r3, #0
 8004258:	d044      	beq.n	80042e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	2b01      	cmp	r3, #1
 8004260:	d107      	bne.n	8004272 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004262:	4b47      	ldr	r3, [pc, #284]	; (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d119      	bne.n	80042a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e07f      	b.n	8004372 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	2b02      	cmp	r3, #2
 8004278:	d003      	beq.n	8004282 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800427e:	2b03      	cmp	r3, #3
 8004280:	d107      	bne.n	8004292 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004282:	4b3f      	ldr	r3, [pc, #252]	; (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d109      	bne.n	80042a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e06f      	b.n	8004372 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004292:	4b3b      	ldr	r3, [pc, #236]	; (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0302 	and.w	r3, r3, #2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d101      	bne.n	80042a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e067      	b.n	8004372 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042a2:	4b37      	ldr	r3, [pc, #220]	; (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f023 0203 	bic.w	r2, r3, #3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	4934      	ldr	r1, [pc, #208]	; (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 80042b0:	4313      	orrs	r3, r2
 80042b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042b4:	f7fe fbbc 	bl	8002a30 <HAL_GetTick>
 80042b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ba:	e00a      	b.n	80042d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042bc:	f7fe fbb8 	bl	8002a30 <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d901      	bls.n	80042d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e04f      	b.n	8004372 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042d2:	4b2b      	ldr	r3, [pc, #172]	; (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f003 020c 	and.w	r2, r3, #12
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d1eb      	bne.n	80042bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042e4:	4b25      	ldr	r3, [pc, #148]	; (800437c <HAL_RCC_ClockConfig+0x1b8>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 030f 	and.w	r3, r3, #15
 80042ec:	683a      	ldr	r2, [r7, #0]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d20c      	bcs.n	800430c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042f2:	4b22      	ldr	r3, [pc, #136]	; (800437c <HAL_RCC_ClockConfig+0x1b8>)
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	b2d2      	uxtb	r2, r2
 80042f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042fa:	4b20      	ldr	r3, [pc, #128]	; (800437c <HAL_RCC_ClockConfig+0x1b8>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 030f 	and.w	r3, r3, #15
 8004302:	683a      	ldr	r2, [r7, #0]
 8004304:	429a      	cmp	r2, r3
 8004306:	d001      	beq.n	800430c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e032      	b.n	8004372 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0304 	and.w	r3, r3, #4
 8004314:	2b00      	cmp	r3, #0
 8004316:	d008      	beq.n	800432a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004318:	4b19      	ldr	r3, [pc, #100]	; (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	4916      	ldr	r1, [pc, #88]	; (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 8004326:	4313      	orrs	r3, r2
 8004328:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0308 	and.w	r3, r3, #8
 8004332:	2b00      	cmp	r3, #0
 8004334:	d009      	beq.n	800434a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004336:	4b12      	ldr	r3, [pc, #72]	; (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	00db      	lsls	r3, r3, #3
 8004344:	490e      	ldr	r1, [pc, #56]	; (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 8004346:	4313      	orrs	r3, r2
 8004348:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800434a:	f000 f855 	bl	80043f8 <HAL_RCC_GetSysClockFreq>
 800434e:	4602      	mov	r2, r0
 8004350:	4b0b      	ldr	r3, [pc, #44]	; (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	091b      	lsrs	r3, r3, #4
 8004356:	f003 030f 	and.w	r3, r3, #15
 800435a:	490a      	ldr	r1, [pc, #40]	; (8004384 <HAL_RCC_ClockConfig+0x1c0>)
 800435c:	5ccb      	ldrb	r3, [r1, r3]
 800435e:	fa22 f303 	lsr.w	r3, r2, r3
 8004362:	4a09      	ldr	r2, [pc, #36]	; (8004388 <HAL_RCC_ClockConfig+0x1c4>)
 8004364:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004366:	4b09      	ldr	r3, [pc, #36]	; (800438c <HAL_RCC_ClockConfig+0x1c8>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4618      	mov	r0, r3
 800436c:	f7fe fb1c 	bl	80029a8 <HAL_InitTick>

  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3710      	adds	r7, #16
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	40023c00 	.word	0x40023c00
 8004380:	40023800 	.word	0x40023800
 8004384:	08009558 	.word	0x08009558
 8004388:	20000008 	.word	0x20000008
 800438c:	2000000c 	.word	0x2000000c

08004390 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004390:	b480      	push	{r7}
 8004392:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004394:	4b03      	ldr	r3, [pc, #12]	; (80043a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004396:	681b      	ldr	r3, [r3, #0]
}
 8004398:	4618      	mov	r0, r3
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	20000008 	.word	0x20000008

080043a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80043ac:	f7ff fff0 	bl	8004390 <HAL_RCC_GetHCLKFreq>
 80043b0:	4602      	mov	r2, r0
 80043b2:	4b05      	ldr	r3, [pc, #20]	; (80043c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	0a9b      	lsrs	r3, r3, #10
 80043b8:	f003 0307 	and.w	r3, r3, #7
 80043bc:	4903      	ldr	r1, [pc, #12]	; (80043cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80043be:	5ccb      	ldrb	r3, [r1, r3]
 80043c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	40023800 	.word	0x40023800
 80043cc:	08009568 	.word	0x08009568

080043d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80043d4:	f7ff ffdc 	bl	8004390 <HAL_RCC_GetHCLKFreq>
 80043d8:	4602      	mov	r2, r0
 80043da:	4b05      	ldr	r3, [pc, #20]	; (80043f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	0b5b      	lsrs	r3, r3, #13
 80043e0:	f003 0307 	and.w	r3, r3, #7
 80043e4:	4903      	ldr	r1, [pc, #12]	; (80043f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043e6:	5ccb      	ldrb	r3, [r1, r3]
 80043e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	40023800 	.word	0x40023800
 80043f4:	08009568 	.word	0x08009568

080043f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043fc:	b088      	sub	sp, #32
 80043fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004400:	2300      	movs	r3, #0
 8004402:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8004404:	2300      	movs	r3, #0
 8004406:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8004408:	2300      	movs	r3, #0
 800440a:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 800440c:	2300      	movs	r3, #0
 800440e:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8004410:	2300      	movs	r3, #0
 8004412:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004414:	4bce      	ldr	r3, [pc, #824]	; (8004750 <HAL_RCC_GetSysClockFreq+0x358>)
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	f003 030c 	and.w	r3, r3, #12
 800441c:	2b0c      	cmp	r3, #12
 800441e:	f200 818d 	bhi.w	800473c <HAL_RCC_GetSysClockFreq+0x344>
 8004422:	a201      	add	r2, pc, #4	; (adr r2, 8004428 <HAL_RCC_GetSysClockFreq+0x30>)
 8004424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004428:	0800445d 	.word	0x0800445d
 800442c:	0800473d 	.word	0x0800473d
 8004430:	0800473d 	.word	0x0800473d
 8004434:	0800473d 	.word	0x0800473d
 8004438:	08004463 	.word	0x08004463
 800443c:	0800473d 	.word	0x0800473d
 8004440:	0800473d 	.word	0x0800473d
 8004444:	0800473d 	.word	0x0800473d
 8004448:	08004469 	.word	0x08004469
 800444c:	0800473d 	.word	0x0800473d
 8004450:	0800473d 	.word	0x0800473d
 8004454:	0800473d 	.word	0x0800473d
 8004458:	080045dd 	.word	0x080045dd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800445c:	4bbd      	ldr	r3, [pc, #756]	; (8004754 <HAL_RCC_GetSysClockFreq+0x35c>)
 800445e:	61bb      	str	r3, [r7, #24]
       break;
 8004460:	e16f      	b.n	8004742 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004462:	4bbd      	ldr	r3, [pc, #756]	; (8004758 <HAL_RCC_GetSysClockFreq+0x360>)
 8004464:	61bb      	str	r3, [r7, #24]
      break;
 8004466:	e16c      	b.n	8004742 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004468:	4bb9      	ldr	r3, [pc, #740]	; (8004750 <HAL_RCC_GetSysClockFreq+0x358>)
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004470:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004472:	4bb7      	ldr	r3, [pc, #732]	; (8004750 <HAL_RCC_GetSysClockFreq+0x358>)
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d053      	beq.n	8004526 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800447e:	4bb4      	ldr	r3, [pc, #720]	; (8004750 <HAL_RCC_GetSysClockFreq+0x358>)
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	099b      	lsrs	r3, r3, #6
 8004484:	461a      	mov	r2, r3
 8004486:	f04f 0300 	mov.w	r3, #0
 800448a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800448e:	f04f 0100 	mov.w	r1, #0
 8004492:	ea02 0400 	and.w	r4, r2, r0
 8004496:	603c      	str	r4, [r7, #0]
 8004498:	400b      	ands	r3, r1
 800449a:	607b      	str	r3, [r7, #4]
 800449c:	e9d7 4500 	ldrd	r4, r5, [r7]
 80044a0:	4620      	mov	r0, r4
 80044a2:	4629      	mov	r1, r5
 80044a4:	f04f 0200 	mov.w	r2, #0
 80044a8:	f04f 0300 	mov.w	r3, #0
 80044ac:	014b      	lsls	r3, r1, #5
 80044ae:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80044b2:	0142      	lsls	r2, r0, #5
 80044b4:	4610      	mov	r0, r2
 80044b6:	4619      	mov	r1, r3
 80044b8:	4623      	mov	r3, r4
 80044ba:	1ac0      	subs	r0, r0, r3
 80044bc:	462b      	mov	r3, r5
 80044be:	eb61 0103 	sbc.w	r1, r1, r3
 80044c2:	f04f 0200 	mov.w	r2, #0
 80044c6:	f04f 0300 	mov.w	r3, #0
 80044ca:	018b      	lsls	r3, r1, #6
 80044cc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80044d0:	0182      	lsls	r2, r0, #6
 80044d2:	1a12      	subs	r2, r2, r0
 80044d4:	eb63 0301 	sbc.w	r3, r3, r1
 80044d8:	f04f 0000 	mov.w	r0, #0
 80044dc:	f04f 0100 	mov.w	r1, #0
 80044e0:	00d9      	lsls	r1, r3, #3
 80044e2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80044e6:	00d0      	lsls	r0, r2, #3
 80044e8:	4602      	mov	r2, r0
 80044ea:	460b      	mov	r3, r1
 80044ec:	4621      	mov	r1, r4
 80044ee:	1852      	adds	r2, r2, r1
 80044f0:	4629      	mov	r1, r5
 80044f2:	eb43 0101 	adc.w	r1, r3, r1
 80044f6:	460b      	mov	r3, r1
 80044f8:	f04f 0000 	mov.w	r0, #0
 80044fc:	f04f 0100 	mov.w	r1, #0
 8004500:	0259      	lsls	r1, r3, #9
 8004502:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004506:	0250      	lsls	r0, r2, #9
 8004508:	4602      	mov	r2, r0
 800450a:	460b      	mov	r3, r1
 800450c:	4610      	mov	r0, r2
 800450e:	4619      	mov	r1, r3
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	461a      	mov	r2, r3
 8004514:	f04f 0300 	mov.w	r3, #0
 8004518:	f7fc fbb6 	bl	8000c88 <__aeabi_uldivmod>
 800451c:	4602      	mov	r2, r0
 800451e:	460b      	mov	r3, r1
 8004520:	4613      	mov	r3, r2
 8004522:	61fb      	str	r3, [r7, #28]
 8004524:	e04c      	b.n	80045c0 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004526:	4b8a      	ldr	r3, [pc, #552]	; (8004750 <HAL_RCC_GetSysClockFreq+0x358>)
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	099b      	lsrs	r3, r3, #6
 800452c:	461a      	mov	r2, r3
 800452e:	f04f 0300 	mov.w	r3, #0
 8004532:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004536:	f04f 0100 	mov.w	r1, #0
 800453a:	ea02 0a00 	and.w	sl, r2, r0
 800453e:	ea03 0b01 	and.w	fp, r3, r1
 8004542:	4650      	mov	r0, sl
 8004544:	4659      	mov	r1, fp
 8004546:	f04f 0200 	mov.w	r2, #0
 800454a:	f04f 0300 	mov.w	r3, #0
 800454e:	014b      	lsls	r3, r1, #5
 8004550:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004554:	0142      	lsls	r2, r0, #5
 8004556:	4610      	mov	r0, r2
 8004558:	4619      	mov	r1, r3
 800455a:	ebb0 000a 	subs.w	r0, r0, sl
 800455e:	eb61 010b 	sbc.w	r1, r1, fp
 8004562:	f04f 0200 	mov.w	r2, #0
 8004566:	f04f 0300 	mov.w	r3, #0
 800456a:	018b      	lsls	r3, r1, #6
 800456c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004570:	0182      	lsls	r2, r0, #6
 8004572:	1a12      	subs	r2, r2, r0
 8004574:	eb63 0301 	sbc.w	r3, r3, r1
 8004578:	f04f 0000 	mov.w	r0, #0
 800457c:	f04f 0100 	mov.w	r1, #0
 8004580:	00d9      	lsls	r1, r3, #3
 8004582:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004586:	00d0      	lsls	r0, r2, #3
 8004588:	4602      	mov	r2, r0
 800458a:	460b      	mov	r3, r1
 800458c:	eb12 020a 	adds.w	r2, r2, sl
 8004590:	eb43 030b 	adc.w	r3, r3, fp
 8004594:	f04f 0000 	mov.w	r0, #0
 8004598:	f04f 0100 	mov.w	r1, #0
 800459c:	0299      	lsls	r1, r3, #10
 800459e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80045a2:	0290      	lsls	r0, r2, #10
 80045a4:	4602      	mov	r2, r0
 80045a6:	460b      	mov	r3, r1
 80045a8:	4610      	mov	r0, r2
 80045aa:	4619      	mov	r1, r3
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	461a      	mov	r2, r3
 80045b0:	f04f 0300 	mov.w	r3, #0
 80045b4:	f7fc fb68 	bl	8000c88 <__aeabi_uldivmod>
 80045b8:	4602      	mov	r2, r0
 80045ba:	460b      	mov	r3, r1
 80045bc:	4613      	mov	r3, r2
 80045be:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80045c0:	4b63      	ldr	r3, [pc, #396]	; (8004750 <HAL_RCC_GetSysClockFreq+0x358>)
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	0c1b      	lsrs	r3, r3, #16
 80045c6:	f003 0303 	and.w	r3, r3, #3
 80045ca:	3301      	adds	r3, #1
 80045cc:	005b      	lsls	r3, r3, #1
 80045ce:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80045d0:	69fa      	ldr	r2, [r7, #28]
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045d8:	61bb      	str	r3, [r7, #24]
      break;
 80045da:	e0b2      	b.n	8004742 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045dc:	4b5c      	ldr	r3, [pc, #368]	; (8004750 <HAL_RCC_GetSysClockFreq+0x358>)
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045e4:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045e6:	4b5a      	ldr	r3, [pc, #360]	; (8004750 <HAL_RCC_GetSysClockFreq+0x358>)
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d04d      	beq.n	800468e <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045f2:	4b57      	ldr	r3, [pc, #348]	; (8004750 <HAL_RCC_GetSysClockFreq+0x358>)
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	099b      	lsrs	r3, r3, #6
 80045f8:	461a      	mov	r2, r3
 80045fa:	f04f 0300 	mov.w	r3, #0
 80045fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004602:	f04f 0100 	mov.w	r1, #0
 8004606:	ea02 0800 	and.w	r8, r2, r0
 800460a:	ea03 0901 	and.w	r9, r3, r1
 800460e:	4640      	mov	r0, r8
 8004610:	4649      	mov	r1, r9
 8004612:	f04f 0200 	mov.w	r2, #0
 8004616:	f04f 0300 	mov.w	r3, #0
 800461a:	014b      	lsls	r3, r1, #5
 800461c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004620:	0142      	lsls	r2, r0, #5
 8004622:	4610      	mov	r0, r2
 8004624:	4619      	mov	r1, r3
 8004626:	ebb0 0008 	subs.w	r0, r0, r8
 800462a:	eb61 0109 	sbc.w	r1, r1, r9
 800462e:	f04f 0200 	mov.w	r2, #0
 8004632:	f04f 0300 	mov.w	r3, #0
 8004636:	018b      	lsls	r3, r1, #6
 8004638:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800463c:	0182      	lsls	r2, r0, #6
 800463e:	1a12      	subs	r2, r2, r0
 8004640:	eb63 0301 	sbc.w	r3, r3, r1
 8004644:	f04f 0000 	mov.w	r0, #0
 8004648:	f04f 0100 	mov.w	r1, #0
 800464c:	00d9      	lsls	r1, r3, #3
 800464e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004652:	00d0      	lsls	r0, r2, #3
 8004654:	4602      	mov	r2, r0
 8004656:	460b      	mov	r3, r1
 8004658:	eb12 0208 	adds.w	r2, r2, r8
 800465c:	eb43 0309 	adc.w	r3, r3, r9
 8004660:	f04f 0000 	mov.w	r0, #0
 8004664:	f04f 0100 	mov.w	r1, #0
 8004668:	0259      	lsls	r1, r3, #9
 800466a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800466e:	0250      	lsls	r0, r2, #9
 8004670:	4602      	mov	r2, r0
 8004672:	460b      	mov	r3, r1
 8004674:	4610      	mov	r0, r2
 8004676:	4619      	mov	r1, r3
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	461a      	mov	r2, r3
 800467c:	f04f 0300 	mov.w	r3, #0
 8004680:	f7fc fb02 	bl	8000c88 <__aeabi_uldivmod>
 8004684:	4602      	mov	r2, r0
 8004686:	460b      	mov	r3, r1
 8004688:	4613      	mov	r3, r2
 800468a:	61fb      	str	r3, [r7, #28]
 800468c:	e04a      	b.n	8004724 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800468e:	4b30      	ldr	r3, [pc, #192]	; (8004750 <HAL_RCC_GetSysClockFreq+0x358>)
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	099b      	lsrs	r3, r3, #6
 8004694:	461a      	mov	r2, r3
 8004696:	f04f 0300 	mov.w	r3, #0
 800469a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800469e:	f04f 0100 	mov.w	r1, #0
 80046a2:	ea02 0400 	and.w	r4, r2, r0
 80046a6:	ea03 0501 	and.w	r5, r3, r1
 80046aa:	4620      	mov	r0, r4
 80046ac:	4629      	mov	r1, r5
 80046ae:	f04f 0200 	mov.w	r2, #0
 80046b2:	f04f 0300 	mov.w	r3, #0
 80046b6:	014b      	lsls	r3, r1, #5
 80046b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80046bc:	0142      	lsls	r2, r0, #5
 80046be:	4610      	mov	r0, r2
 80046c0:	4619      	mov	r1, r3
 80046c2:	1b00      	subs	r0, r0, r4
 80046c4:	eb61 0105 	sbc.w	r1, r1, r5
 80046c8:	f04f 0200 	mov.w	r2, #0
 80046cc:	f04f 0300 	mov.w	r3, #0
 80046d0:	018b      	lsls	r3, r1, #6
 80046d2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80046d6:	0182      	lsls	r2, r0, #6
 80046d8:	1a12      	subs	r2, r2, r0
 80046da:	eb63 0301 	sbc.w	r3, r3, r1
 80046de:	f04f 0000 	mov.w	r0, #0
 80046e2:	f04f 0100 	mov.w	r1, #0
 80046e6:	00d9      	lsls	r1, r3, #3
 80046e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80046ec:	00d0      	lsls	r0, r2, #3
 80046ee:	4602      	mov	r2, r0
 80046f0:	460b      	mov	r3, r1
 80046f2:	1912      	adds	r2, r2, r4
 80046f4:	eb45 0303 	adc.w	r3, r5, r3
 80046f8:	f04f 0000 	mov.w	r0, #0
 80046fc:	f04f 0100 	mov.w	r1, #0
 8004700:	0299      	lsls	r1, r3, #10
 8004702:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004706:	0290      	lsls	r0, r2, #10
 8004708:	4602      	mov	r2, r0
 800470a:	460b      	mov	r3, r1
 800470c:	4610      	mov	r0, r2
 800470e:	4619      	mov	r1, r3
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	461a      	mov	r2, r3
 8004714:	f04f 0300 	mov.w	r3, #0
 8004718:	f7fc fab6 	bl	8000c88 <__aeabi_uldivmod>
 800471c:	4602      	mov	r2, r0
 800471e:	460b      	mov	r3, r1
 8004720:	4613      	mov	r3, r2
 8004722:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004724:	4b0a      	ldr	r3, [pc, #40]	; (8004750 <HAL_RCC_GetSysClockFreq+0x358>)
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	0f1b      	lsrs	r3, r3, #28
 800472a:	f003 0307 	and.w	r3, r3, #7
 800472e:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8004730:	69fa      	ldr	r2, [r7, #28]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	fbb2 f3f3 	udiv	r3, r2, r3
 8004738:	61bb      	str	r3, [r7, #24]
      break;
 800473a:	e002      	b.n	8004742 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800473c:	4b05      	ldr	r3, [pc, #20]	; (8004754 <HAL_RCC_GetSysClockFreq+0x35c>)
 800473e:	61bb      	str	r3, [r7, #24]
      break;
 8004740:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004742:	69bb      	ldr	r3, [r7, #24]
}
 8004744:	4618      	mov	r0, r3
 8004746:	3720      	adds	r7, #32
 8004748:	46bd      	mov	sp, r7
 800474a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800474e:	bf00      	nop
 8004750:	40023800 	.word	0x40023800
 8004754:	00f42400 	.word	0x00f42400
 8004758:	007a1200 	.word	0x007a1200

0800475c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b086      	sub	sp, #24
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d101      	bne.n	800476e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e28d      	b.n	8004c8a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0301 	and.w	r3, r3, #1
 8004776:	2b00      	cmp	r3, #0
 8004778:	f000 8083 	beq.w	8004882 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800477c:	4b94      	ldr	r3, [pc, #592]	; (80049d0 <HAL_RCC_OscConfig+0x274>)
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	f003 030c 	and.w	r3, r3, #12
 8004784:	2b04      	cmp	r3, #4
 8004786:	d019      	beq.n	80047bc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004788:	4b91      	ldr	r3, [pc, #580]	; (80049d0 <HAL_RCC_OscConfig+0x274>)
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004790:	2b08      	cmp	r3, #8
 8004792:	d106      	bne.n	80047a2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004794:	4b8e      	ldr	r3, [pc, #568]	; (80049d0 <HAL_RCC_OscConfig+0x274>)
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800479c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047a0:	d00c      	beq.n	80047bc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047a2:	4b8b      	ldr	r3, [pc, #556]	; (80049d0 <HAL_RCC_OscConfig+0x274>)
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80047aa:	2b0c      	cmp	r3, #12
 80047ac:	d112      	bne.n	80047d4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047ae:	4b88      	ldr	r3, [pc, #544]	; (80049d0 <HAL_RCC_OscConfig+0x274>)
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047ba:	d10b      	bne.n	80047d4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047bc:	4b84      	ldr	r3, [pc, #528]	; (80049d0 <HAL_RCC_OscConfig+0x274>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d05b      	beq.n	8004880 <HAL_RCC_OscConfig+0x124>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d157      	bne.n	8004880 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e25a      	b.n	8004c8a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047dc:	d106      	bne.n	80047ec <HAL_RCC_OscConfig+0x90>
 80047de:	4b7c      	ldr	r3, [pc, #496]	; (80049d0 <HAL_RCC_OscConfig+0x274>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a7b      	ldr	r2, [pc, #492]	; (80049d0 <HAL_RCC_OscConfig+0x274>)
 80047e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047e8:	6013      	str	r3, [r2, #0]
 80047ea:	e01d      	b.n	8004828 <HAL_RCC_OscConfig+0xcc>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047f4:	d10c      	bne.n	8004810 <HAL_RCC_OscConfig+0xb4>
 80047f6:	4b76      	ldr	r3, [pc, #472]	; (80049d0 <HAL_RCC_OscConfig+0x274>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a75      	ldr	r2, [pc, #468]	; (80049d0 <HAL_RCC_OscConfig+0x274>)
 80047fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004800:	6013      	str	r3, [r2, #0]
 8004802:	4b73      	ldr	r3, [pc, #460]	; (80049d0 <HAL_RCC_OscConfig+0x274>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a72      	ldr	r2, [pc, #456]	; (80049d0 <HAL_RCC_OscConfig+0x274>)
 8004808:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800480c:	6013      	str	r3, [r2, #0]
 800480e:	e00b      	b.n	8004828 <HAL_RCC_OscConfig+0xcc>
 8004810:	4b6f      	ldr	r3, [pc, #444]	; (80049d0 <HAL_RCC_OscConfig+0x274>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a6e      	ldr	r2, [pc, #440]	; (80049d0 <HAL_RCC_OscConfig+0x274>)
 8004816:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800481a:	6013      	str	r3, [r2, #0]
 800481c:	4b6c      	ldr	r3, [pc, #432]	; (80049d0 <HAL_RCC_OscConfig+0x274>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a6b      	ldr	r2, [pc, #428]	; (80049d0 <HAL_RCC_OscConfig+0x274>)
 8004822:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004826:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d013      	beq.n	8004858 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004830:	f7fe f8fe 	bl	8002a30 <HAL_GetTick>
 8004834:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004836:	e008      	b.n	800484a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004838:	f7fe f8fa 	bl	8002a30 <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	2b64      	cmp	r3, #100	; 0x64
 8004844:	d901      	bls.n	800484a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e21f      	b.n	8004c8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800484a:	4b61      	ldr	r3, [pc, #388]	; (80049d0 <HAL_RCC_OscConfig+0x274>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d0f0      	beq.n	8004838 <HAL_RCC_OscConfig+0xdc>
 8004856:	e014      	b.n	8004882 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004858:	f7fe f8ea 	bl	8002a30 <HAL_GetTick>
 800485c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800485e:	e008      	b.n	8004872 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004860:	f7fe f8e6 	bl	8002a30 <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	2b64      	cmp	r3, #100	; 0x64
 800486c:	d901      	bls.n	8004872 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e20b      	b.n	8004c8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004872:	4b57      	ldr	r3, [pc, #348]	; (80049d0 <HAL_RCC_OscConfig+0x274>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1f0      	bne.n	8004860 <HAL_RCC_OscConfig+0x104>
 800487e:	e000      	b.n	8004882 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004880:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0302 	and.w	r3, r3, #2
 800488a:	2b00      	cmp	r3, #0
 800488c:	d06f      	beq.n	800496e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800488e:	4b50      	ldr	r3, [pc, #320]	; (80049d0 <HAL_RCC_OscConfig+0x274>)
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f003 030c 	and.w	r3, r3, #12
 8004896:	2b00      	cmp	r3, #0
 8004898:	d017      	beq.n	80048ca <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800489a:	4b4d      	ldr	r3, [pc, #308]	; (80049d0 <HAL_RCC_OscConfig+0x274>)
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80048a2:	2b08      	cmp	r3, #8
 80048a4:	d105      	bne.n	80048b2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80048a6:	4b4a      	ldr	r3, [pc, #296]	; (80049d0 <HAL_RCC_OscConfig+0x274>)
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d00b      	beq.n	80048ca <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048b2:	4b47      	ldr	r3, [pc, #284]	; (80049d0 <HAL_RCC_OscConfig+0x274>)
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80048ba:	2b0c      	cmp	r3, #12
 80048bc:	d11c      	bne.n	80048f8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048be:	4b44      	ldr	r3, [pc, #272]	; (80049d0 <HAL_RCC_OscConfig+0x274>)
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d116      	bne.n	80048f8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048ca:	4b41      	ldr	r3, [pc, #260]	; (80049d0 <HAL_RCC_OscConfig+0x274>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0302 	and.w	r3, r3, #2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d005      	beq.n	80048e2 <HAL_RCC_OscConfig+0x186>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d001      	beq.n	80048e2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e1d3      	b.n	8004c8a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048e2:	4b3b      	ldr	r3, [pc, #236]	; (80049d0 <HAL_RCC_OscConfig+0x274>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	00db      	lsls	r3, r3, #3
 80048f0:	4937      	ldr	r1, [pc, #220]	; (80049d0 <HAL_RCC_OscConfig+0x274>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048f6:	e03a      	b.n	800496e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d020      	beq.n	8004942 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004900:	4b34      	ldr	r3, [pc, #208]	; (80049d4 <HAL_RCC_OscConfig+0x278>)
 8004902:	2201      	movs	r2, #1
 8004904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004906:	f7fe f893 	bl	8002a30 <HAL_GetTick>
 800490a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800490c:	e008      	b.n	8004920 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800490e:	f7fe f88f 	bl	8002a30 <HAL_GetTick>
 8004912:	4602      	mov	r2, r0
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	2b02      	cmp	r3, #2
 800491a:	d901      	bls.n	8004920 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e1b4      	b.n	8004c8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004920:	4b2b      	ldr	r3, [pc, #172]	; (80049d0 <HAL_RCC_OscConfig+0x274>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0302 	and.w	r3, r3, #2
 8004928:	2b00      	cmp	r3, #0
 800492a:	d0f0      	beq.n	800490e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800492c:	4b28      	ldr	r3, [pc, #160]	; (80049d0 <HAL_RCC_OscConfig+0x274>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	00db      	lsls	r3, r3, #3
 800493a:	4925      	ldr	r1, [pc, #148]	; (80049d0 <HAL_RCC_OscConfig+0x274>)
 800493c:	4313      	orrs	r3, r2
 800493e:	600b      	str	r3, [r1, #0]
 8004940:	e015      	b.n	800496e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004942:	4b24      	ldr	r3, [pc, #144]	; (80049d4 <HAL_RCC_OscConfig+0x278>)
 8004944:	2200      	movs	r2, #0
 8004946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004948:	f7fe f872 	bl	8002a30 <HAL_GetTick>
 800494c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800494e:	e008      	b.n	8004962 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004950:	f7fe f86e 	bl	8002a30 <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	2b02      	cmp	r3, #2
 800495c:	d901      	bls.n	8004962 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e193      	b.n	8004c8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004962:	4b1b      	ldr	r3, [pc, #108]	; (80049d0 <HAL_RCC_OscConfig+0x274>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0302 	and.w	r3, r3, #2
 800496a:	2b00      	cmp	r3, #0
 800496c:	d1f0      	bne.n	8004950 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0308 	and.w	r3, r3, #8
 8004976:	2b00      	cmp	r3, #0
 8004978:	d036      	beq.n	80049e8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	695b      	ldr	r3, [r3, #20]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d016      	beq.n	80049b0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004982:	4b15      	ldr	r3, [pc, #84]	; (80049d8 <HAL_RCC_OscConfig+0x27c>)
 8004984:	2201      	movs	r2, #1
 8004986:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004988:	f7fe f852 	bl	8002a30 <HAL_GetTick>
 800498c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800498e:	e008      	b.n	80049a2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004990:	f7fe f84e 	bl	8002a30 <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	2b02      	cmp	r3, #2
 800499c:	d901      	bls.n	80049a2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e173      	b.n	8004c8a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049a2:	4b0b      	ldr	r3, [pc, #44]	; (80049d0 <HAL_RCC_OscConfig+0x274>)
 80049a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049a6:	f003 0302 	and.w	r3, r3, #2
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d0f0      	beq.n	8004990 <HAL_RCC_OscConfig+0x234>
 80049ae:	e01b      	b.n	80049e8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049b0:	4b09      	ldr	r3, [pc, #36]	; (80049d8 <HAL_RCC_OscConfig+0x27c>)
 80049b2:	2200      	movs	r2, #0
 80049b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049b6:	f7fe f83b 	bl	8002a30 <HAL_GetTick>
 80049ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049bc:	e00e      	b.n	80049dc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049be:	f7fe f837 	bl	8002a30 <HAL_GetTick>
 80049c2:	4602      	mov	r2, r0
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d907      	bls.n	80049dc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e15c      	b.n	8004c8a <HAL_RCC_OscConfig+0x52e>
 80049d0:	40023800 	.word	0x40023800
 80049d4:	42470000 	.word	0x42470000
 80049d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049dc:	4b8a      	ldr	r3, [pc, #552]	; (8004c08 <HAL_RCC_OscConfig+0x4ac>)
 80049de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049e0:	f003 0302 	and.w	r3, r3, #2
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d1ea      	bne.n	80049be <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 0304 	and.w	r3, r3, #4
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	f000 8097 	beq.w	8004b24 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049f6:	2300      	movs	r3, #0
 80049f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049fa:	4b83      	ldr	r3, [pc, #524]	; (8004c08 <HAL_RCC_OscConfig+0x4ac>)
 80049fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d10f      	bne.n	8004a26 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a06:	2300      	movs	r3, #0
 8004a08:	60bb      	str	r3, [r7, #8]
 8004a0a:	4b7f      	ldr	r3, [pc, #508]	; (8004c08 <HAL_RCC_OscConfig+0x4ac>)
 8004a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0e:	4a7e      	ldr	r2, [pc, #504]	; (8004c08 <HAL_RCC_OscConfig+0x4ac>)
 8004a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a14:	6413      	str	r3, [r2, #64]	; 0x40
 8004a16:	4b7c      	ldr	r3, [pc, #496]	; (8004c08 <HAL_RCC_OscConfig+0x4ac>)
 8004a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a1e:	60bb      	str	r3, [r7, #8]
 8004a20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a22:	2301      	movs	r3, #1
 8004a24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a26:	4b79      	ldr	r3, [pc, #484]	; (8004c0c <HAL_RCC_OscConfig+0x4b0>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d118      	bne.n	8004a64 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a32:	4b76      	ldr	r3, [pc, #472]	; (8004c0c <HAL_RCC_OscConfig+0x4b0>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a75      	ldr	r2, [pc, #468]	; (8004c0c <HAL_RCC_OscConfig+0x4b0>)
 8004a38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a3e:	f7fd fff7 	bl	8002a30 <HAL_GetTick>
 8004a42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a44:	e008      	b.n	8004a58 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a46:	f7fd fff3 	bl	8002a30 <HAL_GetTick>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d901      	bls.n	8004a58 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e118      	b.n	8004c8a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a58:	4b6c      	ldr	r3, [pc, #432]	; (8004c0c <HAL_RCC_OscConfig+0x4b0>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d0f0      	beq.n	8004a46 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d106      	bne.n	8004a7a <HAL_RCC_OscConfig+0x31e>
 8004a6c:	4b66      	ldr	r3, [pc, #408]	; (8004c08 <HAL_RCC_OscConfig+0x4ac>)
 8004a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a70:	4a65      	ldr	r2, [pc, #404]	; (8004c08 <HAL_RCC_OscConfig+0x4ac>)
 8004a72:	f043 0301 	orr.w	r3, r3, #1
 8004a76:	6713      	str	r3, [r2, #112]	; 0x70
 8004a78:	e01c      	b.n	8004ab4 <HAL_RCC_OscConfig+0x358>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	2b05      	cmp	r3, #5
 8004a80:	d10c      	bne.n	8004a9c <HAL_RCC_OscConfig+0x340>
 8004a82:	4b61      	ldr	r3, [pc, #388]	; (8004c08 <HAL_RCC_OscConfig+0x4ac>)
 8004a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a86:	4a60      	ldr	r2, [pc, #384]	; (8004c08 <HAL_RCC_OscConfig+0x4ac>)
 8004a88:	f043 0304 	orr.w	r3, r3, #4
 8004a8c:	6713      	str	r3, [r2, #112]	; 0x70
 8004a8e:	4b5e      	ldr	r3, [pc, #376]	; (8004c08 <HAL_RCC_OscConfig+0x4ac>)
 8004a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a92:	4a5d      	ldr	r2, [pc, #372]	; (8004c08 <HAL_RCC_OscConfig+0x4ac>)
 8004a94:	f043 0301 	orr.w	r3, r3, #1
 8004a98:	6713      	str	r3, [r2, #112]	; 0x70
 8004a9a:	e00b      	b.n	8004ab4 <HAL_RCC_OscConfig+0x358>
 8004a9c:	4b5a      	ldr	r3, [pc, #360]	; (8004c08 <HAL_RCC_OscConfig+0x4ac>)
 8004a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa0:	4a59      	ldr	r2, [pc, #356]	; (8004c08 <HAL_RCC_OscConfig+0x4ac>)
 8004aa2:	f023 0301 	bic.w	r3, r3, #1
 8004aa6:	6713      	str	r3, [r2, #112]	; 0x70
 8004aa8:	4b57      	ldr	r3, [pc, #348]	; (8004c08 <HAL_RCC_OscConfig+0x4ac>)
 8004aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aac:	4a56      	ldr	r2, [pc, #344]	; (8004c08 <HAL_RCC_OscConfig+0x4ac>)
 8004aae:	f023 0304 	bic.w	r3, r3, #4
 8004ab2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d015      	beq.n	8004ae8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004abc:	f7fd ffb8 	bl	8002a30 <HAL_GetTick>
 8004ac0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ac2:	e00a      	b.n	8004ada <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ac4:	f7fd ffb4 	bl	8002a30 <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d901      	bls.n	8004ada <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e0d7      	b.n	8004c8a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ada:	4b4b      	ldr	r3, [pc, #300]	; (8004c08 <HAL_RCC_OscConfig+0x4ac>)
 8004adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ade:	f003 0302 	and.w	r3, r3, #2
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d0ee      	beq.n	8004ac4 <HAL_RCC_OscConfig+0x368>
 8004ae6:	e014      	b.n	8004b12 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ae8:	f7fd ffa2 	bl	8002a30 <HAL_GetTick>
 8004aec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004aee:	e00a      	b.n	8004b06 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004af0:	f7fd ff9e 	bl	8002a30 <HAL_GetTick>
 8004af4:	4602      	mov	r2, r0
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d901      	bls.n	8004b06 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	e0c1      	b.n	8004c8a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b06:	4b40      	ldr	r3, [pc, #256]	; (8004c08 <HAL_RCC_OscConfig+0x4ac>)
 8004b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b0a:	f003 0302 	and.w	r3, r3, #2
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d1ee      	bne.n	8004af0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b12:	7dfb      	ldrb	r3, [r7, #23]
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d105      	bne.n	8004b24 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b18:	4b3b      	ldr	r3, [pc, #236]	; (8004c08 <HAL_RCC_OscConfig+0x4ac>)
 8004b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1c:	4a3a      	ldr	r2, [pc, #232]	; (8004c08 <HAL_RCC_OscConfig+0x4ac>)
 8004b1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b22:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	699b      	ldr	r3, [r3, #24]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	f000 80ad 	beq.w	8004c88 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b2e:	4b36      	ldr	r3, [pc, #216]	; (8004c08 <HAL_RCC_OscConfig+0x4ac>)
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	f003 030c 	and.w	r3, r3, #12
 8004b36:	2b08      	cmp	r3, #8
 8004b38:	d060      	beq.n	8004bfc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	699b      	ldr	r3, [r3, #24]
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d145      	bne.n	8004bce <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b42:	4b33      	ldr	r3, [pc, #204]	; (8004c10 <HAL_RCC_OscConfig+0x4b4>)
 8004b44:	2200      	movs	r2, #0
 8004b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b48:	f7fd ff72 	bl	8002a30 <HAL_GetTick>
 8004b4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b4e:	e008      	b.n	8004b62 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b50:	f7fd ff6e 	bl	8002a30 <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d901      	bls.n	8004b62 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e093      	b.n	8004c8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b62:	4b29      	ldr	r3, [pc, #164]	; (8004c08 <HAL_RCC_OscConfig+0x4ac>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d1f0      	bne.n	8004b50 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	69da      	ldr	r2, [r3, #28]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a1b      	ldr	r3, [r3, #32]
 8004b76:	431a      	orrs	r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7c:	019b      	lsls	r3, r3, #6
 8004b7e:	431a      	orrs	r2, r3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b84:	085b      	lsrs	r3, r3, #1
 8004b86:	3b01      	subs	r3, #1
 8004b88:	041b      	lsls	r3, r3, #16
 8004b8a:	431a      	orrs	r2, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b90:	061b      	lsls	r3, r3, #24
 8004b92:	431a      	orrs	r2, r3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b98:	071b      	lsls	r3, r3, #28
 8004b9a:	491b      	ldr	r1, [pc, #108]	; (8004c08 <HAL_RCC_OscConfig+0x4ac>)
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ba0:	4b1b      	ldr	r3, [pc, #108]	; (8004c10 <HAL_RCC_OscConfig+0x4b4>)
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba6:	f7fd ff43 	bl	8002a30 <HAL_GetTick>
 8004baa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bac:	e008      	b.n	8004bc0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bae:	f7fd ff3f 	bl	8002a30 <HAL_GetTick>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	d901      	bls.n	8004bc0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	e064      	b.n	8004c8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bc0:	4b11      	ldr	r3, [pc, #68]	; (8004c08 <HAL_RCC_OscConfig+0x4ac>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d0f0      	beq.n	8004bae <HAL_RCC_OscConfig+0x452>
 8004bcc:	e05c      	b.n	8004c88 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bce:	4b10      	ldr	r3, [pc, #64]	; (8004c10 <HAL_RCC_OscConfig+0x4b4>)
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bd4:	f7fd ff2c 	bl	8002a30 <HAL_GetTick>
 8004bd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bda:	e008      	b.n	8004bee <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bdc:	f7fd ff28 	bl	8002a30 <HAL_GetTick>
 8004be0:	4602      	mov	r2, r0
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d901      	bls.n	8004bee <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	e04d      	b.n	8004c8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bee:	4b06      	ldr	r3, [pc, #24]	; (8004c08 <HAL_RCC_OscConfig+0x4ac>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d1f0      	bne.n	8004bdc <HAL_RCC_OscConfig+0x480>
 8004bfa:	e045      	b.n	8004c88 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	699b      	ldr	r3, [r3, #24]
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d107      	bne.n	8004c14 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e040      	b.n	8004c8a <HAL_RCC_OscConfig+0x52e>
 8004c08:	40023800 	.word	0x40023800
 8004c0c:	40007000 	.word	0x40007000
 8004c10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c14:	4b1f      	ldr	r3, [pc, #124]	; (8004c94 <HAL_RCC_OscConfig+0x538>)
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	699b      	ldr	r3, [r3, #24]
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d030      	beq.n	8004c84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d129      	bne.n	8004c84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d122      	bne.n	8004c84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c3e:	68fa      	ldr	r2, [r7, #12]
 8004c40:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c44:	4013      	ands	r3, r2
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c4a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d119      	bne.n	8004c84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c5a:	085b      	lsrs	r3, r3, #1
 8004c5c:	3b01      	subs	r3, #1
 8004c5e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d10f      	bne.n	8004c84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c6e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d107      	bne.n	8004c84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c7e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d001      	beq.n	8004c88 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e000      	b.n	8004c8a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3718      	adds	r7, #24
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	40023800 	.word	0x40023800

08004c98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d101      	bne.n	8004caa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e03f      	b.n	8004d2a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d106      	bne.n	8004cc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f7fd fcdc 	bl	800267c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2224      	movs	r2, #36	; 0x24
 8004cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68da      	ldr	r2, [r3, #12]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004cda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f000 f929 	bl	8004f34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	691a      	ldr	r2, [r3, #16]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004cf0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	695a      	ldr	r2, [r3, #20]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68da      	ldr	r2, [r3, #12]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2220      	movs	r2, #32
 8004d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2220      	movs	r2, #32
 8004d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3708      	adds	r7, #8
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}

08004d32 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d32:	b580      	push	{r7, lr}
 8004d34:	b08a      	sub	sp, #40	; 0x28
 8004d36:	af02      	add	r7, sp, #8
 8004d38:	60f8      	str	r0, [r7, #12]
 8004d3a:	60b9      	str	r1, [r7, #8]
 8004d3c:	603b      	str	r3, [r7, #0]
 8004d3e:	4613      	mov	r3, r2
 8004d40:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d42:	2300      	movs	r3, #0
 8004d44:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	2b20      	cmp	r3, #32
 8004d50:	d17c      	bne.n	8004e4c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d002      	beq.n	8004d5e <HAL_UART_Transmit+0x2c>
 8004d58:	88fb      	ldrh	r3, [r7, #6]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d101      	bne.n	8004d62 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e075      	b.n	8004e4e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d101      	bne.n	8004d70 <HAL_UART_Transmit+0x3e>
 8004d6c:	2302      	movs	r3, #2
 8004d6e:	e06e      	b.n	8004e4e <HAL_UART_Transmit+0x11c>
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2221      	movs	r2, #33	; 0x21
 8004d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d86:	f7fd fe53 	bl	8002a30 <HAL_GetTick>
 8004d8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	88fa      	ldrh	r2, [r7, #6]
 8004d90:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	88fa      	ldrh	r2, [r7, #6]
 8004d96:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004da0:	d108      	bne.n	8004db4 <HAL_UART_Transmit+0x82>
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d104      	bne.n	8004db4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004daa:	2300      	movs	r3, #0
 8004dac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	61bb      	str	r3, [r7, #24]
 8004db2:	e003      	b.n	8004dbc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004db8:	2300      	movs	r3, #0
 8004dba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004dc4:	e02a      	b.n	8004e1c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	9300      	str	r3, [sp, #0]
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	2180      	movs	r1, #128	; 0x80
 8004dd0:	68f8      	ldr	r0, [r7, #12]
 8004dd2:	f000 f840 	bl	8004e56 <UART_WaitOnFlagUntilTimeout>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d001      	beq.n	8004de0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e036      	b.n	8004e4e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d10b      	bne.n	8004dfe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	881b      	ldrh	r3, [r3, #0]
 8004dea:	461a      	mov	r2, r3
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004df4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	3302      	adds	r3, #2
 8004dfa:	61bb      	str	r3, [r7, #24]
 8004dfc:	e007      	b.n	8004e0e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	781a      	ldrb	r2, [r3, #0]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	3301      	adds	r3, #1
 8004e0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	3b01      	subs	r3, #1
 8004e16:	b29a      	uxth	r2, r3
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d1cf      	bne.n	8004dc6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	9300      	str	r3, [sp, #0]
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	2140      	movs	r1, #64	; 0x40
 8004e30:	68f8      	ldr	r0, [r7, #12]
 8004e32:	f000 f810 	bl	8004e56 <UART_WaitOnFlagUntilTimeout>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d001      	beq.n	8004e40 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	e006      	b.n	8004e4e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2220      	movs	r2, #32
 8004e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	e000      	b.n	8004e4e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004e4c:	2302      	movs	r3, #2
  }
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3720      	adds	r7, #32
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}

08004e56 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004e56:	b580      	push	{r7, lr}
 8004e58:	b090      	sub	sp, #64	; 0x40
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	60f8      	str	r0, [r7, #12]
 8004e5e:	60b9      	str	r1, [r7, #8]
 8004e60:	603b      	str	r3, [r7, #0]
 8004e62:	4613      	mov	r3, r2
 8004e64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e66:	e050      	b.n	8004f0a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e6e:	d04c      	beq.n	8004f0a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004e70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d007      	beq.n	8004e86 <UART_WaitOnFlagUntilTimeout+0x30>
 8004e76:	f7fd fddb 	bl	8002a30 <HAL_GetTick>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d241      	bcs.n	8004f0a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	330c      	adds	r3, #12
 8004e8c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e90:	e853 3f00 	ldrex	r3, [r3]
 8004e94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e98:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	330c      	adds	r3, #12
 8004ea4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ea6:	637a      	str	r2, [r7, #52]	; 0x34
 8004ea8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eaa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004eac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004eae:	e841 2300 	strex	r3, r2, [r1]
 8004eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d1e5      	bne.n	8004e86 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	3314      	adds	r3, #20
 8004ec0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	e853 3f00 	ldrex	r3, [r3]
 8004ec8:	613b      	str	r3, [r7, #16]
   return(result);
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	f023 0301 	bic.w	r3, r3, #1
 8004ed0:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	3314      	adds	r3, #20
 8004ed8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004eda:	623a      	str	r2, [r7, #32]
 8004edc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ede:	69f9      	ldr	r1, [r7, #28]
 8004ee0:	6a3a      	ldr	r2, [r7, #32]
 8004ee2:	e841 2300 	strex	r3, r2, [r1]
 8004ee6:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d1e5      	bne.n	8004eba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2220      	movs	r2, #32
 8004ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2220      	movs	r2, #32
 8004efa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e00f      	b.n	8004f2a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	4013      	ands	r3, r2
 8004f14:	68ba      	ldr	r2, [r7, #8]
 8004f16:	429a      	cmp	r2, r3
 8004f18:	bf0c      	ite	eq
 8004f1a:	2301      	moveq	r3, #1
 8004f1c:	2300      	movne	r3, #0
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	461a      	mov	r2, r3
 8004f22:	79fb      	ldrb	r3, [r7, #7]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d09f      	beq.n	8004e68 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3740      	adds	r7, #64	; 0x40
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
	...

08004f34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f38:	b09f      	sub	sp, #124	; 0x7c
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	691b      	ldr	r3, [r3, #16]
 8004f44:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004f48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f4a:	68d9      	ldr	r1, [r3, #12]
 8004f4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	ea40 0301 	orr.w	r3, r0, r1
 8004f54:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f58:	689a      	ldr	r2, [r3, #8]
 8004f5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	431a      	orrs	r2, r3
 8004f60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f62:	695b      	ldr	r3, [r3, #20]
 8004f64:	431a      	orrs	r2, r3
 8004f66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f68:	69db      	ldr	r3, [r3, #28]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004f6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004f78:	f021 010c 	bic.w	r1, r1, #12
 8004f7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f82:	430b      	orrs	r3, r1
 8004f84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	695b      	ldr	r3, [r3, #20]
 8004f8c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004f90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f92:	6999      	ldr	r1, [r3, #24]
 8004f94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	ea40 0301 	orr.w	r3, r0, r1
 8004f9c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	4bc5      	ldr	r3, [pc, #788]	; (80052b8 <UART_SetConfig+0x384>)
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d004      	beq.n	8004fb2 <UART_SetConfig+0x7e>
 8004fa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	4bc3      	ldr	r3, [pc, #780]	; (80052bc <UART_SetConfig+0x388>)
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d103      	bne.n	8004fba <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004fb2:	f7ff fa0d 	bl	80043d0 <HAL_RCC_GetPCLK2Freq>
 8004fb6:	6778      	str	r0, [r7, #116]	; 0x74
 8004fb8:	e002      	b.n	8004fc0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004fba:	f7ff f9f5 	bl	80043a8 <HAL_RCC_GetPCLK1Freq>
 8004fbe:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fc2:	69db      	ldr	r3, [r3, #28]
 8004fc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fc8:	f040 80b6 	bne.w	8005138 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004fcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fce:	461c      	mov	r4, r3
 8004fd0:	f04f 0500 	mov.w	r5, #0
 8004fd4:	4622      	mov	r2, r4
 8004fd6:	462b      	mov	r3, r5
 8004fd8:	1891      	adds	r1, r2, r2
 8004fda:	6439      	str	r1, [r7, #64]	; 0x40
 8004fdc:	415b      	adcs	r3, r3
 8004fde:	647b      	str	r3, [r7, #68]	; 0x44
 8004fe0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004fe4:	1912      	adds	r2, r2, r4
 8004fe6:	eb45 0303 	adc.w	r3, r5, r3
 8004fea:	f04f 0000 	mov.w	r0, #0
 8004fee:	f04f 0100 	mov.w	r1, #0
 8004ff2:	00d9      	lsls	r1, r3, #3
 8004ff4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ff8:	00d0      	lsls	r0, r2, #3
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	460b      	mov	r3, r1
 8004ffe:	1911      	adds	r1, r2, r4
 8005000:	6639      	str	r1, [r7, #96]	; 0x60
 8005002:	416b      	adcs	r3, r5
 8005004:	667b      	str	r3, [r7, #100]	; 0x64
 8005006:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	461a      	mov	r2, r3
 800500c:	f04f 0300 	mov.w	r3, #0
 8005010:	1891      	adds	r1, r2, r2
 8005012:	63b9      	str	r1, [r7, #56]	; 0x38
 8005014:	415b      	adcs	r3, r3
 8005016:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005018:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800501c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005020:	f7fb fe32 	bl	8000c88 <__aeabi_uldivmod>
 8005024:	4602      	mov	r2, r0
 8005026:	460b      	mov	r3, r1
 8005028:	4ba5      	ldr	r3, [pc, #660]	; (80052c0 <UART_SetConfig+0x38c>)
 800502a:	fba3 2302 	umull	r2, r3, r3, r2
 800502e:	095b      	lsrs	r3, r3, #5
 8005030:	011e      	lsls	r6, r3, #4
 8005032:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005034:	461c      	mov	r4, r3
 8005036:	f04f 0500 	mov.w	r5, #0
 800503a:	4622      	mov	r2, r4
 800503c:	462b      	mov	r3, r5
 800503e:	1891      	adds	r1, r2, r2
 8005040:	6339      	str	r1, [r7, #48]	; 0x30
 8005042:	415b      	adcs	r3, r3
 8005044:	637b      	str	r3, [r7, #52]	; 0x34
 8005046:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800504a:	1912      	adds	r2, r2, r4
 800504c:	eb45 0303 	adc.w	r3, r5, r3
 8005050:	f04f 0000 	mov.w	r0, #0
 8005054:	f04f 0100 	mov.w	r1, #0
 8005058:	00d9      	lsls	r1, r3, #3
 800505a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800505e:	00d0      	lsls	r0, r2, #3
 8005060:	4602      	mov	r2, r0
 8005062:	460b      	mov	r3, r1
 8005064:	1911      	adds	r1, r2, r4
 8005066:	65b9      	str	r1, [r7, #88]	; 0x58
 8005068:	416b      	adcs	r3, r5
 800506a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800506c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	461a      	mov	r2, r3
 8005072:	f04f 0300 	mov.w	r3, #0
 8005076:	1891      	adds	r1, r2, r2
 8005078:	62b9      	str	r1, [r7, #40]	; 0x28
 800507a:	415b      	adcs	r3, r3
 800507c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800507e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005082:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005086:	f7fb fdff 	bl	8000c88 <__aeabi_uldivmod>
 800508a:	4602      	mov	r2, r0
 800508c:	460b      	mov	r3, r1
 800508e:	4b8c      	ldr	r3, [pc, #560]	; (80052c0 <UART_SetConfig+0x38c>)
 8005090:	fba3 1302 	umull	r1, r3, r3, r2
 8005094:	095b      	lsrs	r3, r3, #5
 8005096:	2164      	movs	r1, #100	; 0x64
 8005098:	fb01 f303 	mul.w	r3, r1, r3
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	00db      	lsls	r3, r3, #3
 80050a0:	3332      	adds	r3, #50	; 0x32
 80050a2:	4a87      	ldr	r2, [pc, #540]	; (80052c0 <UART_SetConfig+0x38c>)
 80050a4:	fba2 2303 	umull	r2, r3, r2, r3
 80050a8:	095b      	lsrs	r3, r3, #5
 80050aa:	005b      	lsls	r3, r3, #1
 80050ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80050b0:	441e      	add	r6, r3
 80050b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050b4:	4618      	mov	r0, r3
 80050b6:	f04f 0100 	mov.w	r1, #0
 80050ba:	4602      	mov	r2, r0
 80050bc:	460b      	mov	r3, r1
 80050be:	1894      	adds	r4, r2, r2
 80050c0:	623c      	str	r4, [r7, #32]
 80050c2:	415b      	adcs	r3, r3
 80050c4:	627b      	str	r3, [r7, #36]	; 0x24
 80050c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80050ca:	1812      	adds	r2, r2, r0
 80050cc:	eb41 0303 	adc.w	r3, r1, r3
 80050d0:	f04f 0400 	mov.w	r4, #0
 80050d4:	f04f 0500 	mov.w	r5, #0
 80050d8:	00dd      	lsls	r5, r3, #3
 80050da:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80050de:	00d4      	lsls	r4, r2, #3
 80050e0:	4622      	mov	r2, r4
 80050e2:	462b      	mov	r3, r5
 80050e4:	1814      	adds	r4, r2, r0
 80050e6:	653c      	str	r4, [r7, #80]	; 0x50
 80050e8:	414b      	adcs	r3, r1
 80050ea:	657b      	str	r3, [r7, #84]	; 0x54
 80050ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	461a      	mov	r2, r3
 80050f2:	f04f 0300 	mov.w	r3, #0
 80050f6:	1891      	adds	r1, r2, r2
 80050f8:	61b9      	str	r1, [r7, #24]
 80050fa:	415b      	adcs	r3, r3
 80050fc:	61fb      	str	r3, [r7, #28]
 80050fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005102:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005106:	f7fb fdbf 	bl	8000c88 <__aeabi_uldivmod>
 800510a:	4602      	mov	r2, r0
 800510c:	460b      	mov	r3, r1
 800510e:	4b6c      	ldr	r3, [pc, #432]	; (80052c0 <UART_SetConfig+0x38c>)
 8005110:	fba3 1302 	umull	r1, r3, r3, r2
 8005114:	095b      	lsrs	r3, r3, #5
 8005116:	2164      	movs	r1, #100	; 0x64
 8005118:	fb01 f303 	mul.w	r3, r1, r3
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	00db      	lsls	r3, r3, #3
 8005120:	3332      	adds	r3, #50	; 0x32
 8005122:	4a67      	ldr	r2, [pc, #412]	; (80052c0 <UART_SetConfig+0x38c>)
 8005124:	fba2 2303 	umull	r2, r3, r2, r3
 8005128:	095b      	lsrs	r3, r3, #5
 800512a:	f003 0207 	and.w	r2, r3, #7
 800512e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4432      	add	r2, r6
 8005134:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005136:	e0b9      	b.n	80052ac <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005138:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800513a:	461c      	mov	r4, r3
 800513c:	f04f 0500 	mov.w	r5, #0
 8005140:	4622      	mov	r2, r4
 8005142:	462b      	mov	r3, r5
 8005144:	1891      	adds	r1, r2, r2
 8005146:	6139      	str	r1, [r7, #16]
 8005148:	415b      	adcs	r3, r3
 800514a:	617b      	str	r3, [r7, #20]
 800514c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005150:	1912      	adds	r2, r2, r4
 8005152:	eb45 0303 	adc.w	r3, r5, r3
 8005156:	f04f 0000 	mov.w	r0, #0
 800515a:	f04f 0100 	mov.w	r1, #0
 800515e:	00d9      	lsls	r1, r3, #3
 8005160:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005164:	00d0      	lsls	r0, r2, #3
 8005166:	4602      	mov	r2, r0
 8005168:	460b      	mov	r3, r1
 800516a:	eb12 0804 	adds.w	r8, r2, r4
 800516e:	eb43 0905 	adc.w	r9, r3, r5
 8005172:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	4618      	mov	r0, r3
 8005178:	f04f 0100 	mov.w	r1, #0
 800517c:	f04f 0200 	mov.w	r2, #0
 8005180:	f04f 0300 	mov.w	r3, #0
 8005184:	008b      	lsls	r3, r1, #2
 8005186:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800518a:	0082      	lsls	r2, r0, #2
 800518c:	4640      	mov	r0, r8
 800518e:	4649      	mov	r1, r9
 8005190:	f7fb fd7a 	bl	8000c88 <__aeabi_uldivmod>
 8005194:	4602      	mov	r2, r0
 8005196:	460b      	mov	r3, r1
 8005198:	4b49      	ldr	r3, [pc, #292]	; (80052c0 <UART_SetConfig+0x38c>)
 800519a:	fba3 2302 	umull	r2, r3, r3, r2
 800519e:	095b      	lsrs	r3, r3, #5
 80051a0:	011e      	lsls	r6, r3, #4
 80051a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051a4:	4618      	mov	r0, r3
 80051a6:	f04f 0100 	mov.w	r1, #0
 80051aa:	4602      	mov	r2, r0
 80051ac:	460b      	mov	r3, r1
 80051ae:	1894      	adds	r4, r2, r2
 80051b0:	60bc      	str	r4, [r7, #8]
 80051b2:	415b      	adcs	r3, r3
 80051b4:	60fb      	str	r3, [r7, #12]
 80051b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051ba:	1812      	adds	r2, r2, r0
 80051bc:	eb41 0303 	adc.w	r3, r1, r3
 80051c0:	f04f 0400 	mov.w	r4, #0
 80051c4:	f04f 0500 	mov.w	r5, #0
 80051c8:	00dd      	lsls	r5, r3, #3
 80051ca:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80051ce:	00d4      	lsls	r4, r2, #3
 80051d0:	4622      	mov	r2, r4
 80051d2:	462b      	mov	r3, r5
 80051d4:	1814      	adds	r4, r2, r0
 80051d6:	64bc      	str	r4, [r7, #72]	; 0x48
 80051d8:	414b      	adcs	r3, r1
 80051da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	4618      	mov	r0, r3
 80051e2:	f04f 0100 	mov.w	r1, #0
 80051e6:	f04f 0200 	mov.w	r2, #0
 80051ea:	f04f 0300 	mov.w	r3, #0
 80051ee:	008b      	lsls	r3, r1, #2
 80051f0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80051f4:	0082      	lsls	r2, r0, #2
 80051f6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80051fa:	f7fb fd45 	bl	8000c88 <__aeabi_uldivmod>
 80051fe:	4602      	mov	r2, r0
 8005200:	460b      	mov	r3, r1
 8005202:	4b2f      	ldr	r3, [pc, #188]	; (80052c0 <UART_SetConfig+0x38c>)
 8005204:	fba3 1302 	umull	r1, r3, r3, r2
 8005208:	095b      	lsrs	r3, r3, #5
 800520a:	2164      	movs	r1, #100	; 0x64
 800520c:	fb01 f303 	mul.w	r3, r1, r3
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	011b      	lsls	r3, r3, #4
 8005214:	3332      	adds	r3, #50	; 0x32
 8005216:	4a2a      	ldr	r2, [pc, #168]	; (80052c0 <UART_SetConfig+0x38c>)
 8005218:	fba2 2303 	umull	r2, r3, r2, r3
 800521c:	095b      	lsrs	r3, r3, #5
 800521e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005222:	441e      	add	r6, r3
 8005224:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005226:	4618      	mov	r0, r3
 8005228:	f04f 0100 	mov.w	r1, #0
 800522c:	4602      	mov	r2, r0
 800522e:	460b      	mov	r3, r1
 8005230:	1894      	adds	r4, r2, r2
 8005232:	603c      	str	r4, [r7, #0]
 8005234:	415b      	adcs	r3, r3
 8005236:	607b      	str	r3, [r7, #4]
 8005238:	e9d7 2300 	ldrd	r2, r3, [r7]
 800523c:	1812      	adds	r2, r2, r0
 800523e:	eb41 0303 	adc.w	r3, r1, r3
 8005242:	f04f 0400 	mov.w	r4, #0
 8005246:	f04f 0500 	mov.w	r5, #0
 800524a:	00dd      	lsls	r5, r3, #3
 800524c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005250:	00d4      	lsls	r4, r2, #3
 8005252:	4622      	mov	r2, r4
 8005254:	462b      	mov	r3, r5
 8005256:	eb12 0a00 	adds.w	sl, r2, r0
 800525a:	eb43 0b01 	adc.w	fp, r3, r1
 800525e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	4618      	mov	r0, r3
 8005264:	f04f 0100 	mov.w	r1, #0
 8005268:	f04f 0200 	mov.w	r2, #0
 800526c:	f04f 0300 	mov.w	r3, #0
 8005270:	008b      	lsls	r3, r1, #2
 8005272:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005276:	0082      	lsls	r2, r0, #2
 8005278:	4650      	mov	r0, sl
 800527a:	4659      	mov	r1, fp
 800527c:	f7fb fd04 	bl	8000c88 <__aeabi_uldivmod>
 8005280:	4602      	mov	r2, r0
 8005282:	460b      	mov	r3, r1
 8005284:	4b0e      	ldr	r3, [pc, #56]	; (80052c0 <UART_SetConfig+0x38c>)
 8005286:	fba3 1302 	umull	r1, r3, r3, r2
 800528a:	095b      	lsrs	r3, r3, #5
 800528c:	2164      	movs	r1, #100	; 0x64
 800528e:	fb01 f303 	mul.w	r3, r1, r3
 8005292:	1ad3      	subs	r3, r2, r3
 8005294:	011b      	lsls	r3, r3, #4
 8005296:	3332      	adds	r3, #50	; 0x32
 8005298:	4a09      	ldr	r2, [pc, #36]	; (80052c0 <UART_SetConfig+0x38c>)
 800529a:	fba2 2303 	umull	r2, r3, r2, r3
 800529e:	095b      	lsrs	r3, r3, #5
 80052a0:	f003 020f 	and.w	r2, r3, #15
 80052a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4432      	add	r2, r6
 80052aa:	609a      	str	r2, [r3, #8]
}
 80052ac:	bf00      	nop
 80052ae:	377c      	adds	r7, #124	; 0x7c
 80052b0:	46bd      	mov	sp, r7
 80052b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052b6:	bf00      	nop
 80052b8:	40011000 	.word	0x40011000
 80052bc:	40011400 	.word	0x40011400
 80052c0:	51eb851f 	.word	0x51eb851f

080052c4 <__errno>:
 80052c4:	4b01      	ldr	r3, [pc, #4]	; (80052cc <__errno+0x8>)
 80052c6:	6818      	ldr	r0, [r3, #0]
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop
 80052cc:	20000014 	.word	0x20000014

080052d0 <__libc_init_array>:
 80052d0:	b570      	push	{r4, r5, r6, lr}
 80052d2:	4d0d      	ldr	r5, [pc, #52]	; (8005308 <__libc_init_array+0x38>)
 80052d4:	4c0d      	ldr	r4, [pc, #52]	; (800530c <__libc_init_array+0x3c>)
 80052d6:	1b64      	subs	r4, r4, r5
 80052d8:	10a4      	asrs	r4, r4, #2
 80052da:	2600      	movs	r6, #0
 80052dc:	42a6      	cmp	r6, r4
 80052de:	d109      	bne.n	80052f4 <__libc_init_array+0x24>
 80052e0:	4d0b      	ldr	r5, [pc, #44]	; (8005310 <__libc_init_array+0x40>)
 80052e2:	4c0c      	ldr	r4, [pc, #48]	; (8005314 <__libc_init_array+0x44>)
 80052e4:	f004 f8be 	bl	8009464 <_init>
 80052e8:	1b64      	subs	r4, r4, r5
 80052ea:	10a4      	asrs	r4, r4, #2
 80052ec:	2600      	movs	r6, #0
 80052ee:	42a6      	cmp	r6, r4
 80052f0:	d105      	bne.n	80052fe <__libc_init_array+0x2e>
 80052f2:	bd70      	pop	{r4, r5, r6, pc}
 80052f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80052f8:	4798      	blx	r3
 80052fa:	3601      	adds	r6, #1
 80052fc:	e7ee      	b.n	80052dc <__libc_init_array+0xc>
 80052fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005302:	4798      	blx	r3
 8005304:	3601      	adds	r6, #1
 8005306:	e7f2      	b.n	80052ee <__libc_init_array+0x1e>
 8005308:	08009b70 	.word	0x08009b70
 800530c:	08009b70 	.word	0x08009b70
 8005310:	08009b70 	.word	0x08009b70
 8005314:	08009b74 	.word	0x08009b74

08005318 <memset>:
 8005318:	4402      	add	r2, r0
 800531a:	4603      	mov	r3, r0
 800531c:	4293      	cmp	r3, r2
 800531e:	d100      	bne.n	8005322 <memset+0xa>
 8005320:	4770      	bx	lr
 8005322:	f803 1b01 	strb.w	r1, [r3], #1
 8005326:	e7f9      	b.n	800531c <memset+0x4>

08005328 <__cvt>:
 8005328:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800532c:	ec55 4b10 	vmov	r4, r5, d0
 8005330:	2d00      	cmp	r5, #0
 8005332:	460e      	mov	r6, r1
 8005334:	4619      	mov	r1, r3
 8005336:	462b      	mov	r3, r5
 8005338:	bfbb      	ittet	lt
 800533a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800533e:	461d      	movlt	r5, r3
 8005340:	2300      	movge	r3, #0
 8005342:	232d      	movlt	r3, #45	; 0x2d
 8005344:	700b      	strb	r3, [r1, #0]
 8005346:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005348:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800534c:	4691      	mov	r9, r2
 800534e:	f023 0820 	bic.w	r8, r3, #32
 8005352:	bfbc      	itt	lt
 8005354:	4622      	movlt	r2, r4
 8005356:	4614      	movlt	r4, r2
 8005358:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800535c:	d005      	beq.n	800536a <__cvt+0x42>
 800535e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005362:	d100      	bne.n	8005366 <__cvt+0x3e>
 8005364:	3601      	adds	r6, #1
 8005366:	2102      	movs	r1, #2
 8005368:	e000      	b.n	800536c <__cvt+0x44>
 800536a:	2103      	movs	r1, #3
 800536c:	ab03      	add	r3, sp, #12
 800536e:	9301      	str	r3, [sp, #4]
 8005370:	ab02      	add	r3, sp, #8
 8005372:	9300      	str	r3, [sp, #0]
 8005374:	ec45 4b10 	vmov	d0, r4, r5
 8005378:	4653      	mov	r3, sl
 800537a:	4632      	mov	r2, r6
 800537c:	f000 fcec 	bl	8005d58 <_dtoa_r>
 8005380:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005384:	4607      	mov	r7, r0
 8005386:	d102      	bne.n	800538e <__cvt+0x66>
 8005388:	f019 0f01 	tst.w	r9, #1
 800538c:	d022      	beq.n	80053d4 <__cvt+0xac>
 800538e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005392:	eb07 0906 	add.w	r9, r7, r6
 8005396:	d110      	bne.n	80053ba <__cvt+0x92>
 8005398:	783b      	ldrb	r3, [r7, #0]
 800539a:	2b30      	cmp	r3, #48	; 0x30
 800539c:	d10a      	bne.n	80053b4 <__cvt+0x8c>
 800539e:	2200      	movs	r2, #0
 80053a0:	2300      	movs	r3, #0
 80053a2:	4620      	mov	r0, r4
 80053a4:	4629      	mov	r1, r5
 80053a6:	f7fb fbaf 	bl	8000b08 <__aeabi_dcmpeq>
 80053aa:	b918      	cbnz	r0, 80053b4 <__cvt+0x8c>
 80053ac:	f1c6 0601 	rsb	r6, r6, #1
 80053b0:	f8ca 6000 	str.w	r6, [sl]
 80053b4:	f8da 3000 	ldr.w	r3, [sl]
 80053b8:	4499      	add	r9, r3
 80053ba:	2200      	movs	r2, #0
 80053bc:	2300      	movs	r3, #0
 80053be:	4620      	mov	r0, r4
 80053c0:	4629      	mov	r1, r5
 80053c2:	f7fb fba1 	bl	8000b08 <__aeabi_dcmpeq>
 80053c6:	b108      	cbz	r0, 80053cc <__cvt+0xa4>
 80053c8:	f8cd 900c 	str.w	r9, [sp, #12]
 80053cc:	2230      	movs	r2, #48	; 0x30
 80053ce:	9b03      	ldr	r3, [sp, #12]
 80053d0:	454b      	cmp	r3, r9
 80053d2:	d307      	bcc.n	80053e4 <__cvt+0xbc>
 80053d4:	9b03      	ldr	r3, [sp, #12]
 80053d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80053d8:	1bdb      	subs	r3, r3, r7
 80053da:	4638      	mov	r0, r7
 80053dc:	6013      	str	r3, [r2, #0]
 80053de:	b004      	add	sp, #16
 80053e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053e4:	1c59      	adds	r1, r3, #1
 80053e6:	9103      	str	r1, [sp, #12]
 80053e8:	701a      	strb	r2, [r3, #0]
 80053ea:	e7f0      	b.n	80053ce <__cvt+0xa6>

080053ec <__exponent>:
 80053ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80053ee:	4603      	mov	r3, r0
 80053f0:	2900      	cmp	r1, #0
 80053f2:	bfb8      	it	lt
 80053f4:	4249      	neglt	r1, r1
 80053f6:	f803 2b02 	strb.w	r2, [r3], #2
 80053fa:	bfb4      	ite	lt
 80053fc:	222d      	movlt	r2, #45	; 0x2d
 80053fe:	222b      	movge	r2, #43	; 0x2b
 8005400:	2909      	cmp	r1, #9
 8005402:	7042      	strb	r2, [r0, #1]
 8005404:	dd2a      	ble.n	800545c <__exponent+0x70>
 8005406:	f10d 0407 	add.w	r4, sp, #7
 800540a:	46a4      	mov	ip, r4
 800540c:	270a      	movs	r7, #10
 800540e:	46a6      	mov	lr, r4
 8005410:	460a      	mov	r2, r1
 8005412:	fb91 f6f7 	sdiv	r6, r1, r7
 8005416:	fb07 1516 	mls	r5, r7, r6, r1
 800541a:	3530      	adds	r5, #48	; 0x30
 800541c:	2a63      	cmp	r2, #99	; 0x63
 800541e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8005422:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005426:	4631      	mov	r1, r6
 8005428:	dcf1      	bgt.n	800540e <__exponent+0x22>
 800542a:	3130      	adds	r1, #48	; 0x30
 800542c:	f1ae 0502 	sub.w	r5, lr, #2
 8005430:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005434:	1c44      	adds	r4, r0, #1
 8005436:	4629      	mov	r1, r5
 8005438:	4561      	cmp	r1, ip
 800543a:	d30a      	bcc.n	8005452 <__exponent+0x66>
 800543c:	f10d 0209 	add.w	r2, sp, #9
 8005440:	eba2 020e 	sub.w	r2, r2, lr
 8005444:	4565      	cmp	r5, ip
 8005446:	bf88      	it	hi
 8005448:	2200      	movhi	r2, #0
 800544a:	4413      	add	r3, r2
 800544c:	1a18      	subs	r0, r3, r0
 800544e:	b003      	add	sp, #12
 8005450:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005452:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005456:	f804 2f01 	strb.w	r2, [r4, #1]!
 800545a:	e7ed      	b.n	8005438 <__exponent+0x4c>
 800545c:	2330      	movs	r3, #48	; 0x30
 800545e:	3130      	adds	r1, #48	; 0x30
 8005460:	7083      	strb	r3, [r0, #2]
 8005462:	70c1      	strb	r1, [r0, #3]
 8005464:	1d03      	adds	r3, r0, #4
 8005466:	e7f1      	b.n	800544c <__exponent+0x60>

08005468 <_printf_float>:
 8005468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800546c:	ed2d 8b02 	vpush	{d8}
 8005470:	b08d      	sub	sp, #52	; 0x34
 8005472:	460c      	mov	r4, r1
 8005474:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005478:	4616      	mov	r6, r2
 800547a:	461f      	mov	r7, r3
 800547c:	4605      	mov	r5, r0
 800547e:	f001 fa57 	bl	8006930 <_localeconv_r>
 8005482:	f8d0 a000 	ldr.w	sl, [r0]
 8005486:	4650      	mov	r0, sl
 8005488:	f7fa fec2 	bl	8000210 <strlen>
 800548c:	2300      	movs	r3, #0
 800548e:	930a      	str	r3, [sp, #40]	; 0x28
 8005490:	6823      	ldr	r3, [r4, #0]
 8005492:	9305      	str	r3, [sp, #20]
 8005494:	f8d8 3000 	ldr.w	r3, [r8]
 8005498:	f894 b018 	ldrb.w	fp, [r4, #24]
 800549c:	3307      	adds	r3, #7
 800549e:	f023 0307 	bic.w	r3, r3, #7
 80054a2:	f103 0208 	add.w	r2, r3, #8
 80054a6:	f8c8 2000 	str.w	r2, [r8]
 80054aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ae:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80054b2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80054b6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80054ba:	9307      	str	r3, [sp, #28]
 80054bc:	f8cd 8018 	str.w	r8, [sp, #24]
 80054c0:	ee08 0a10 	vmov	s16, r0
 80054c4:	4b9f      	ldr	r3, [pc, #636]	; (8005744 <_printf_float+0x2dc>)
 80054c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80054ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80054ce:	f7fb fb4d 	bl	8000b6c <__aeabi_dcmpun>
 80054d2:	bb88      	cbnz	r0, 8005538 <_printf_float+0xd0>
 80054d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80054d8:	4b9a      	ldr	r3, [pc, #616]	; (8005744 <_printf_float+0x2dc>)
 80054da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80054de:	f7fb fb27 	bl	8000b30 <__aeabi_dcmple>
 80054e2:	bb48      	cbnz	r0, 8005538 <_printf_float+0xd0>
 80054e4:	2200      	movs	r2, #0
 80054e6:	2300      	movs	r3, #0
 80054e8:	4640      	mov	r0, r8
 80054ea:	4649      	mov	r1, r9
 80054ec:	f7fb fb16 	bl	8000b1c <__aeabi_dcmplt>
 80054f0:	b110      	cbz	r0, 80054f8 <_printf_float+0x90>
 80054f2:	232d      	movs	r3, #45	; 0x2d
 80054f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054f8:	4b93      	ldr	r3, [pc, #588]	; (8005748 <_printf_float+0x2e0>)
 80054fa:	4894      	ldr	r0, [pc, #592]	; (800574c <_printf_float+0x2e4>)
 80054fc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005500:	bf94      	ite	ls
 8005502:	4698      	movls	r8, r3
 8005504:	4680      	movhi	r8, r0
 8005506:	2303      	movs	r3, #3
 8005508:	6123      	str	r3, [r4, #16]
 800550a:	9b05      	ldr	r3, [sp, #20]
 800550c:	f023 0204 	bic.w	r2, r3, #4
 8005510:	6022      	str	r2, [r4, #0]
 8005512:	f04f 0900 	mov.w	r9, #0
 8005516:	9700      	str	r7, [sp, #0]
 8005518:	4633      	mov	r3, r6
 800551a:	aa0b      	add	r2, sp, #44	; 0x2c
 800551c:	4621      	mov	r1, r4
 800551e:	4628      	mov	r0, r5
 8005520:	f000 f9d8 	bl	80058d4 <_printf_common>
 8005524:	3001      	adds	r0, #1
 8005526:	f040 8090 	bne.w	800564a <_printf_float+0x1e2>
 800552a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800552e:	b00d      	add	sp, #52	; 0x34
 8005530:	ecbd 8b02 	vpop	{d8}
 8005534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005538:	4642      	mov	r2, r8
 800553a:	464b      	mov	r3, r9
 800553c:	4640      	mov	r0, r8
 800553e:	4649      	mov	r1, r9
 8005540:	f7fb fb14 	bl	8000b6c <__aeabi_dcmpun>
 8005544:	b140      	cbz	r0, 8005558 <_printf_float+0xf0>
 8005546:	464b      	mov	r3, r9
 8005548:	2b00      	cmp	r3, #0
 800554a:	bfbc      	itt	lt
 800554c:	232d      	movlt	r3, #45	; 0x2d
 800554e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005552:	487f      	ldr	r0, [pc, #508]	; (8005750 <_printf_float+0x2e8>)
 8005554:	4b7f      	ldr	r3, [pc, #508]	; (8005754 <_printf_float+0x2ec>)
 8005556:	e7d1      	b.n	80054fc <_printf_float+0x94>
 8005558:	6863      	ldr	r3, [r4, #4]
 800555a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800555e:	9206      	str	r2, [sp, #24]
 8005560:	1c5a      	adds	r2, r3, #1
 8005562:	d13f      	bne.n	80055e4 <_printf_float+0x17c>
 8005564:	2306      	movs	r3, #6
 8005566:	6063      	str	r3, [r4, #4]
 8005568:	9b05      	ldr	r3, [sp, #20]
 800556a:	6861      	ldr	r1, [r4, #4]
 800556c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005570:	2300      	movs	r3, #0
 8005572:	9303      	str	r3, [sp, #12]
 8005574:	ab0a      	add	r3, sp, #40	; 0x28
 8005576:	e9cd b301 	strd	fp, r3, [sp, #4]
 800557a:	ab09      	add	r3, sp, #36	; 0x24
 800557c:	ec49 8b10 	vmov	d0, r8, r9
 8005580:	9300      	str	r3, [sp, #0]
 8005582:	6022      	str	r2, [r4, #0]
 8005584:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005588:	4628      	mov	r0, r5
 800558a:	f7ff fecd 	bl	8005328 <__cvt>
 800558e:	9b06      	ldr	r3, [sp, #24]
 8005590:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005592:	2b47      	cmp	r3, #71	; 0x47
 8005594:	4680      	mov	r8, r0
 8005596:	d108      	bne.n	80055aa <_printf_float+0x142>
 8005598:	1cc8      	adds	r0, r1, #3
 800559a:	db02      	blt.n	80055a2 <_printf_float+0x13a>
 800559c:	6863      	ldr	r3, [r4, #4]
 800559e:	4299      	cmp	r1, r3
 80055a0:	dd41      	ble.n	8005626 <_printf_float+0x1be>
 80055a2:	f1ab 0b02 	sub.w	fp, fp, #2
 80055a6:	fa5f fb8b 	uxtb.w	fp, fp
 80055aa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80055ae:	d820      	bhi.n	80055f2 <_printf_float+0x18a>
 80055b0:	3901      	subs	r1, #1
 80055b2:	465a      	mov	r2, fp
 80055b4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80055b8:	9109      	str	r1, [sp, #36]	; 0x24
 80055ba:	f7ff ff17 	bl	80053ec <__exponent>
 80055be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80055c0:	1813      	adds	r3, r2, r0
 80055c2:	2a01      	cmp	r2, #1
 80055c4:	4681      	mov	r9, r0
 80055c6:	6123      	str	r3, [r4, #16]
 80055c8:	dc02      	bgt.n	80055d0 <_printf_float+0x168>
 80055ca:	6822      	ldr	r2, [r4, #0]
 80055cc:	07d2      	lsls	r2, r2, #31
 80055ce:	d501      	bpl.n	80055d4 <_printf_float+0x16c>
 80055d0:	3301      	adds	r3, #1
 80055d2:	6123      	str	r3, [r4, #16]
 80055d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d09c      	beq.n	8005516 <_printf_float+0xae>
 80055dc:	232d      	movs	r3, #45	; 0x2d
 80055de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055e2:	e798      	b.n	8005516 <_printf_float+0xae>
 80055e4:	9a06      	ldr	r2, [sp, #24]
 80055e6:	2a47      	cmp	r2, #71	; 0x47
 80055e8:	d1be      	bne.n	8005568 <_printf_float+0x100>
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d1bc      	bne.n	8005568 <_printf_float+0x100>
 80055ee:	2301      	movs	r3, #1
 80055f0:	e7b9      	b.n	8005566 <_printf_float+0xfe>
 80055f2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80055f6:	d118      	bne.n	800562a <_printf_float+0x1c2>
 80055f8:	2900      	cmp	r1, #0
 80055fa:	6863      	ldr	r3, [r4, #4]
 80055fc:	dd0b      	ble.n	8005616 <_printf_float+0x1ae>
 80055fe:	6121      	str	r1, [r4, #16]
 8005600:	b913      	cbnz	r3, 8005608 <_printf_float+0x1a0>
 8005602:	6822      	ldr	r2, [r4, #0]
 8005604:	07d0      	lsls	r0, r2, #31
 8005606:	d502      	bpl.n	800560e <_printf_float+0x1a6>
 8005608:	3301      	adds	r3, #1
 800560a:	440b      	add	r3, r1
 800560c:	6123      	str	r3, [r4, #16]
 800560e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005610:	f04f 0900 	mov.w	r9, #0
 8005614:	e7de      	b.n	80055d4 <_printf_float+0x16c>
 8005616:	b913      	cbnz	r3, 800561e <_printf_float+0x1b6>
 8005618:	6822      	ldr	r2, [r4, #0]
 800561a:	07d2      	lsls	r2, r2, #31
 800561c:	d501      	bpl.n	8005622 <_printf_float+0x1ba>
 800561e:	3302      	adds	r3, #2
 8005620:	e7f4      	b.n	800560c <_printf_float+0x1a4>
 8005622:	2301      	movs	r3, #1
 8005624:	e7f2      	b.n	800560c <_printf_float+0x1a4>
 8005626:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800562a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800562c:	4299      	cmp	r1, r3
 800562e:	db05      	blt.n	800563c <_printf_float+0x1d4>
 8005630:	6823      	ldr	r3, [r4, #0]
 8005632:	6121      	str	r1, [r4, #16]
 8005634:	07d8      	lsls	r0, r3, #31
 8005636:	d5ea      	bpl.n	800560e <_printf_float+0x1a6>
 8005638:	1c4b      	adds	r3, r1, #1
 800563a:	e7e7      	b.n	800560c <_printf_float+0x1a4>
 800563c:	2900      	cmp	r1, #0
 800563e:	bfd4      	ite	le
 8005640:	f1c1 0202 	rsble	r2, r1, #2
 8005644:	2201      	movgt	r2, #1
 8005646:	4413      	add	r3, r2
 8005648:	e7e0      	b.n	800560c <_printf_float+0x1a4>
 800564a:	6823      	ldr	r3, [r4, #0]
 800564c:	055a      	lsls	r2, r3, #21
 800564e:	d407      	bmi.n	8005660 <_printf_float+0x1f8>
 8005650:	6923      	ldr	r3, [r4, #16]
 8005652:	4642      	mov	r2, r8
 8005654:	4631      	mov	r1, r6
 8005656:	4628      	mov	r0, r5
 8005658:	47b8      	blx	r7
 800565a:	3001      	adds	r0, #1
 800565c:	d12c      	bne.n	80056b8 <_printf_float+0x250>
 800565e:	e764      	b.n	800552a <_printf_float+0xc2>
 8005660:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005664:	f240 80e0 	bls.w	8005828 <_printf_float+0x3c0>
 8005668:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800566c:	2200      	movs	r2, #0
 800566e:	2300      	movs	r3, #0
 8005670:	f7fb fa4a 	bl	8000b08 <__aeabi_dcmpeq>
 8005674:	2800      	cmp	r0, #0
 8005676:	d034      	beq.n	80056e2 <_printf_float+0x27a>
 8005678:	4a37      	ldr	r2, [pc, #220]	; (8005758 <_printf_float+0x2f0>)
 800567a:	2301      	movs	r3, #1
 800567c:	4631      	mov	r1, r6
 800567e:	4628      	mov	r0, r5
 8005680:	47b8      	blx	r7
 8005682:	3001      	adds	r0, #1
 8005684:	f43f af51 	beq.w	800552a <_printf_float+0xc2>
 8005688:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800568c:	429a      	cmp	r2, r3
 800568e:	db02      	blt.n	8005696 <_printf_float+0x22e>
 8005690:	6823      	ldr	r3, [r4, #0]
 8005692:	07d8      	lsls	r0, r3, #31
 8005694:	d510      	bpl.n	80056b8 <_printf_float+0x250>
 8005696:	ee18 3a10 	vmov	r3, s16
 800569a:	4652      	mov	r2, sl
 800569c:	4631      	mov	r1, r6
 800569e:	4628      	mov	r0, r5
 80056a0:	47b8      	blx	r7
 80056a2:	3001      	adds	r0, #1
 80056a4:	f43f af41 	beq.w	800552a <_printf_float+0xc2>
 80056a8:	f04f 0800 	mov.w	r8, #0
 80056ac:	f104 091a 	add.w	r9, r4, #26
 80056b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056b2:	3b01      	subs	r3, #1
 80056b4:	4543      	cmp	r3, r8
 80056b6:	dc09      	bgt.n	80056cc <_printf_float+0x264>
 80056b8:	6823      	ldr	r3, [r4, #0]
 80056ba:	079b      	lsls	r3, r3, #30
 80056bc:	f100 8105 	bmi.w	80058ca <_printf_float+0x462>
 80056c0:	68e0      	ldr	r0, [r4, #12]
 80056c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056c4:	4298      	cmp	r0, r3
 80056c6:	bfb8      	it	lt
 80056c8:	4618      	movlt	r0, r3
 80056ca:	e730      	b.n	800552e <_printf_float+0xc6>
 80056cc:	2301      	movs	r3, #1
 80056ce:	464a      	mov	r2, r9
 80056d0:	4631      	mov	r1, r6
 80056d2:	4628      	mov	r0, r5
 80056d4:	47b8      	blx	r7
 80056d6:	3001      	adds	r0, #1
 80056d8:	f43f af27 	beq.w	800552a <_printf_float+0xc2>
 80056dc:	f108 0801 	add.w	r8, r8, #1
 80056e0:	e7e6      	b.n	80056b0 <_printf_float+0x248>
 80056e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	dc39      	bgt.n	800575c <_printf_float+0x2f4>
 80056e8:	4a1b      	ldr	r2, [pc, #108]	; (8005758 <_printf_float+0x2f0>)
 80056ea:	2301      	movs	r3, #1
 80056ec:	4631      	mov	r1, r6
 80056ee:	4628      	mov	r0, r5
 80056f0:	47b8      	blx	r7
 80056f2:	3001      	adds	r0, #1
 80056f4:	f43f af19 	beq.w	800552a <_printf_float+0xc2>
 80056f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80056fc:	4313      	orrs	r3, r2
 80056fe:	d102      	bne.n	8005706 <_printf_float+0x29e>
 8005700:	6823      	ldr	r3, [r4, #0]
 8005702:	07d9      	lsls	r1, r3, #31
 8005704:	d5d8      	bpl.n	80056b8 <_printf_float+0x250>
 8005706:	ee18 3a10 	vmov	r3, s16
 800570a:	4652      	mov	r2, sl
 800570c:	4631      	mov	r1, r6
 800570e:	4628      	mov	r0, r5
 8005710:	47b8      	blx	r7
 8005712:	3001      	adds	r0, #1
 8005714:	f43f af09 	beq.w	800552a <_printf_float+0xc2>
 8005718:	f04f 0900 	mov.w	r9, #0
 800571c:	f104 0a1a 	add.w	sl, r4, #26
 8005720:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005722:	425b      	negs	r3, r3
 8005724:	454b      	cmp	r3, r9
 8005726:	dc01      	bgt.n	800572c <_printf_float+0x2c4>
 8005728:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800572a:	e792      	b.n	8005652 <_printf_float+0x1ea>
 800572c:	2301      	movs	r3, #1
 800572e:	4652      	mov	r2, sl
 8005730:	4631      	mov	r1, r6
 8005732:	4628      	mov	r0, r5
 8005734:	47b8      	blx	r7
 8005736:	3001      	adds	r0, #1
 8005738:	f43f aef7 	beq.w	800552a <_printf_float+0xc2>
 800573c:	f109 0901 	add.w	r9, r9, #1
 8005740:	e7ee      	b.n	8005720 <_printf_float+0x2b8>
 8005742:	bf00      	nop
 8005744:	7fefffff 	.word	0x7fefffff
 8005748:	08009574 	.word	0x08009574
 800574c:	08009578 	.word	0x08009578
 8005750:	08009580 	.word	0x08009580
 8005754:	0800957c 	.word	0x0800957c
 8005758:	08009584 	.word	0x08009584
 800575c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800575e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005760:	429a      	cmp	r2, r3
 8005762:	bfa8      	it	ge
 8005764:	461a      	movge	r2, r3
 8005766:	2a00      	cmp	r2, #0
 8005768:	4691      	mov	r9, r2
 800576a:	dc37      	bgt.n	80057dc <_printf_float+0x374>
 800576c:	f04f 0b00 	mov.w	fp, #0
 8005770:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005774:	f104 021a 	add.w	r2, r4, #26
 8005778:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800577a:	9305      	str	r3, [sp, #20]
 800577c:	eba3 0309 	sub.w	r3, r3, r9
 8005780:	455b      	cmp	r3, fp
 8005782:	dc33      	bgt.n	80057ec <_printf_float+0x384>
 8005784:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005788:	429a      	cmp	r2, r3
 800578a:	db3b      	blt.n	8005804 <_printf_float+0x39c>
 800578c:	6823      	ldr	r3, [r4, #0]
 800578e:	07da      	lsls	r2, r3, #31
 8005790:	d438      	bmi.n	8005804 <_printf_float+0x39c>
 8005792:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005794:	9b05      	ldr	r3, [sp, #20]
 8005796:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	eba2 0901 	sub.w	r9, r2, r1
 800579e:	4599      	cmp	r9, r3
 80057a0:	bfa8      	it	ge
 80057a2:	4699      	movge	r9, r3
 80057a4:	f1b9 0f00 	cmp.w	r9, #0
 80057a8:	dc35      	bgt.n	8005816 <_printf_float+0x3ae>
 80057aa:	f04f 0800 	mov.w	r8, #0
 80057ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80057b2:	f104 0a1a 	add.w	sl, r4, #26
 80057b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80057ba:	1a9b      	subs	r3, r3, r2
 80057bc:	eba3 0309 	sub.w	r3, r3, r9
 80057c0:	4543      	cmp	r3, r8
 80057c2:	f77f af79 	ble.w	80056b8 <_printf_float+0x250>
 80057c6:	2301      	movs	r3, #1
 80057c8:	4652      	mov	r2, sl
 80057ca:	4631      	mov	r1, r6
 80057cc:	4628      	mov	r0, r5
 80057ce:	47b8      	blx	r7
 80057d0:	3001      	adds	r0, #1
 80057d2:	f43f aeaa 	beq.w	800552a <_printf_float+0xc2>
 80057d6:	f108 0801 	add.w	r8, r8, #1
 80057da:	e7ec      	b.n	80057b6 <_printf_float+0x34e>
 80057dc:	4613      	mov	r3, r2
 80057de:	4631      	mov	r1, r6
 80057e0:	4642      	mov	r2, r8
 80057e2:	4628      	mov	r0, r5
 80057e4:	47b8      	blx	r7
 80057e6:	3001      	adds	r0, #1
 80057e8:	d1c0      	bne.n	800576c <_printf_float+0x304>
 80057ea:	e69e      	b.n	800552a <_printf_float+0xc2>
 80057ec:	2301      	movs	r3, #1
 80057ee:	4631      	mov	r1, r6
 80057f0:	4628      	mov	r0, r5
 80057f2:	9205      	str	r2, [sp, #20]
 80057f4:	47b8      	blx	r7
 80057f6:	3001      	adds	r0, #1
 80057f8:	f43f ae97 	beq.w	800552a <_printf_float+0xc2>
 80057fc:	9a05      	ldr	r2, [sp, #20]
 80057fe:	f10b 0b01 	add.w	fp, fp, #1
 8005802:	e7b9      	b.n	8005778 <_printf_float+0x310>
 8005804:	ee18 3a10 	vmov	r3, s16
 8005808:	4652      	mov	r2, sl
 800580a:	4631      	mov	r1, r6
 800580c:	4628      	mov	r0, r5
 800580e:	47b8      	blx	r7
 8005810:	3001      	adds	r0, #1
 8005812:	d1be      	bne.n	8005792 <_printf_float+0x32a>
 8005814:	e689      	b.n	800552a <_printf_float+0xc2>
 8005816:	9a05      	ldr	r2, [sp, #20]
 8005818:	464b      	mov	r3, r9
 800581a:	4442      	add	r2, r8
 800581c:	4631      	mov	r1, r6
 800581e:	4628      	mov	r0, r5
 8005820:	47b8      	blx	r7
 8005822:	3001      	adds	r0, #1
 8005824:	d1c1      	bne.n	80057aa <_printf_float+0x342>
 8005826:	e680      	b.n	800552a <_printf_float+0xc2>
 8005828:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800582a:	2a01      	cmp	r2, #1
 800582c:	dc01      	bgt.n	8005832 <_printf_float+0x3ca>
 800582e:	07db      	lsls	r3, r3, #31
 8005830:	d538      	bpl.n	80058a4 <_printf_float+0x43c>
 8005832:	2301      	movs	r3, #1
 8005834:	4642      	mov	r2, r8
 8005836:	4631      	mov	r1, r6
 8005838:	4628      	mov	r0, r5
 800583a:	47b8      	blx	r7
 800583c:	3001      	adds	r0, #1
 800583e:	f43f ae74 	beq.w	800552a <_printf_float+0xc2>
 8005842:	ee18 3a10 	vmov	r3, s16
 8005846:	4652      	mov	r2, sl
 8005848:	4631      	mov	r1, r6
 800584a:	4628      	mov	r0, r5
 800584c:	47b8      	blx	r7
 800584e:	3001      	adds	r0, #1
 8005850:	f43f ae6b 	beq.w	800552a <_printf_float+0xc2>
 8005854:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005858:	2200      	movs	r2, #0
 800585a:	2300      	movs	r3, #0
 800585c:	f7fb f954 	bl	8000b08 <__aeabi_dcmpeq>
 8005860:	b9d8      	cbnz	r0, 800589a <_printf_float+0x432>
 8005862:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005864:	f108 0201 	add.w	r2, r8, #1
 8005868:	3b01      	subs	r3, #1
 800586a:	4631      	mov	r1, r6
 800586c:	4628      	mov	r0, r5
 800586e:	47b8      	blx	r7
 8005870:	3001      	adds	r0, #1
 8005872:	d10e      	bne.n	8005892 <_printf_float+0x42a>
 8005874:	e659      	b.n	800552a <_printf_float+0xc2>
 8005876:	2301      	movs	r3, #1
 8005878:	4652      	mov	r2, sl
 800587a:	4631      	mov	r1, r6
 800587c:	4628      	mov	r0, r5
 800587e:	47b8      	blx	r7
 8005880:	3001      	adds	r0, #1
 8005882:	f43f ae52 	beq.w	800552a <_printf_float+0xc2>
 8005886:	f108 0801 	add.w	r8, r8, #1
 800588a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800588c:	3b01      	subs	r3, #1
 800588e:	4543      	cmp	r3, r8
 8005890:	dcf1      	bgt.n	8005876 <_printf_float+0x40e>
 8005892:	464b      	mov	r3, r9
 8005894:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005898:	e6dc      	b.n	8005654 <_printf_float+0x1ec>
 800589a:	f04f 0800 	mov.w	r8, #0
 800589e:	f104 0a1a 	add.w	sl, r4, #26
 80058a2:	e7f2      	b.n	800588a <_printf_float+0x422>
 80058a4:	2301      	movs	r3, #1
 80058a6:	4642      	mov	r2, r8
 80058a8:	e7df      	b.n	800586a <_printf_float+0x402>
 80058aa:	2301      	movs	r3, #1
 80058ac:	464a      	mov	r2, r9
 80058ae:	4631      	mov	r1, r6
 80058b0:	4628      	mov	r0, r5
 80058b2:	47b8      	blx	r7
 80058b4:	3001      	adds	r0, #1
 80058b6:	f43f ae38 	beq.w	800552a <_printf_float+0xc2>
 80058ba:	f108 0801 	add.w	r8, r8, #1
 80058be:	68e3      	ldr	r3, [r4, #12]
 80058c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80058c2:	1a5b      	subs	r3, r3, r1
 80058c4:	4543      	cmp	r3, r8
 80058c6:	dcf0      	bgt.n	80058aa <_printf_float+0x442>
 80058c8:	e6fa      	b.n	80056c0 <_printf_float+0x258>
 80058ca:	f04f 0800 	mov.w	r8, #0
 80058ce:	f104 0919 	add.w	r9, r4, #25
 80058d2:	e7f4      	b.n	80058be <_printf_float+0x456>

080058d4 <_printf_common>:
 80058d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058d8:	4616      	mov	r6, r2
 80058da:	4699      	mov	r9, r3
 80058dc:	688a      	ldr	r2, [r1, #8]
 80058de:	690b      	ldr	r3, [r1, #16]
 80058e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80058e4:	4293      	cmp	r3, r2
 80058e6:	bfb8      	it	lt
 80058e8:	4613      	movlt	r3, r2
 80058ea:	6033      	str	r3, [r6, #0]
 80058ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80058f0:	4607      	mov	r7, r0
 80058f2:	460c      	mov	r4, r1
 80058f4:	b10a      	cbz	r2, 80058fa <_printf_common+0x26>
 80058f6:	3301      	adds	r3, #1
 80058f8:	6033      	str	r3, [r6, #0]
 80058fa:	6823      	ldr	r3, [r4, #0]
 80058fc:	0699      	lsls	r1, r3, #26
 80058fe:	bf42      	ittt	mi
 8005900:	6833      	ldrmi	r3, [r6, #0]
 8005902:	3302      	addmi	r3, #2
 8005904:	6033      	strmi	r3, [r6, #0]
 8005906:	6825      	ldr	r5, [r4, #0]
 8005908:	f015 0506 	ands.w	r5, r5, #6
 800590c:	d106      	bne.n	800591c <_printf_common+0x48>
 800590e:	f104 0a19 	add.w	sl, r4, #25
 8005912:	68e3      	ldr	r3, [r4, #12]
 8005914:	6832      	ldr	r2, [r6, #0]
 8005916:	1a9b      	subs	r3, r3, r2
 8005918:	42ab      	cmp	r3, r5
 800591a:	dc26      	bgt.n	800596a <_printf_common+0x96>
 800591c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005920:	1e13      	subs	r3, r2, #0
 8005922:	6822      	ldr	r2, [r4, #0]
 8005924:	bf18      	it	ne
 8005926:	2301      	movne	r3, #1
 8005928:	0692      	lsls	r2, r2, #26
 800592a:	d42b      	bmi.n	8005984 <_printf_common+0xb0>
 800592c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005930:	4649      	mov	r1, r9
 8005932:	4638      	mov	r0, r7
 8005934:	47c0      	blx	r8
 8005936:	3001      	adds	r0, #1
 8005938:	d01e      	beq.n	8005978 <_printf_common+0xa4>
 800593a:	6823      	ldr	r3, [r4, #0]
 800593c:	68e5      	ldr	r5, [r4, #12]
 800593e:	6832      	ldr	r2, [r6, #0]
 8005940:	f003 0306 	and.w	r3, r3, #6
 8005944:	2b04      	cmp	r3, #4
 8005946:	bf08      	it	eq
 8005948:	1aad      	subeq	r5, r5, r2
 800594a:	68a3      	ldr	r3, [r4, #8]
 800594c:	6922      	ldr	r2, [r4, #16]
 800594e:	bf0c      	ite	eq
 8005950:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005954:	2500      	movne	r5, #0
 8005956:	4293      	cmp	r3, r2
 8005958:	bfc4      	itt	gt
 800595a:	1a9b      	subgt	r3, r3, r2
 800595c:	18ed      	addgt	r5, r5, r3
 800595e:	2600      	movs	r6, #0
 8005960:	341a      	adds	r4, #26
 8005962:	42b5      	cmp	r5, r6
 8005964:	d11a      	bne.n	800599c <_printf_common+0xc8>
 8005966:	2000      	movs	r0, #0
 8005968:	e008      	b.n	800597c <_printf_common+0xa8>
 800596a:	2301      	movs	r3, #1
 800596c:	4652      	mov	r2, sl
 800596e:	4649      	mov	r1, r9
 8005970:	4638      	mov	r0, r7
 8005972:	47c0      	blx	r8
 8005974:	3001      	adds	r0, #1
 8005976:	d103      	bne.n	8005980 <_printf_common+0xac>
 8005978:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800597c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005980:	3501      	adds	r5, #1
 8005982:	e7c6      	b.n	8005912 <_printf_common+0x3e>
 8005984:	18e1      	adds	r1, r4, r3
 8005986:	1c5a      	adds	r2, r3, #1
 8005988:	2030      	movs	r0, #48	; 0x30
 800598a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800598e:	4422      	add	r2, r4
 8005990:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005994:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005998:	3302      	adds	r3, #2
 800599a:	e7c7      	b.n	800592c <_printf_common+0x58>
 800599c:	2301      	movs	r3, #1
 800599e:	4622      	mov	r2, r4
 80059a0:	4649      	mov	r1, r9
 80059a2:	4638      	mov	r0, r7
 80059a4:	47c0      	blx	r8
 80059a6:	3001      	adds	r0, #1
 80059a8:	d0e6      	beq.n	8005978 <_printf_common+0xa4>
 80059aa:	3601      	adds	r6, #1
 80059ac:	e7d9      	b.n	8005962 <_printf_common+0x8e>
	...

080059b0 <_printf_i>:
 80059b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059b4:	460c      	mov	r4, r1
 80059b6:	4691      	mov	r9, r2
 80059b8:	7e27      	ldrb	r7, [r4, #24]
 80059ba:	990c      	ldr	r1, [sp, #48]	; 0x30
 80059bc:	2f78      	cmp	r7, #120	; 0x78
 80059be:	4680      	mov	r8, r0
 80059c0:	469a      	mov	sl, r3
 80059c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80059c6:	d807      	bhi.n	80059d8 <_printf_i+0x28>
 80059c8:	2f62      	cmp	r7, #98	; 0x62
 80059ca:	d80a      	bhi.n	80059e2 <_printf_i+0x32>
 80059cc:	2f00      	cmp	r7, #0
 80059ce:	f000 80d8 	beq.w	8005b82 <_printf_i+0x1d2>
 80059d2:	2f58      	cmp	r7, #88	; 0x58
 80059d4:	f000 80a3 	beq.w	8005b1e <_printf_i+0x16e>
 80059d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80059dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80059e0:	e03a      	b.n	8005a58 <_printf_i+0xa8>
 80059e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80059e6:	2b15      	cmp	r3, #21
 80059e8:	d8f6      	bhi.n	80059d8 <_printf_i+0x28>
 80059ea:	a001      	add	r0, pc, #4	; (adr r0, 80059f0 <_printf_i+0x40>)
 80059ec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80059f0:	08005a49 	.word	0x08005a49
 80059f4:	08005a5d 	.word	0x08005a5d
 80059f8:	080059d9 	.word	0x080059d9
 80059fc:	080059d9 	.word	0x080059d9
 8005a00:	080059d9 	.word	0x080059d9
 8005a04:	080059d9 	.word	0x080059d9
 8005a08:	08005a5d 	.word	0x08005a5d
 8005a0c:	080059d9 	.word	0x080059d9
 8005a10:	080059d9 	.word	0x080059d9
 8005a14:	080059d9 	.word	0x080059d9
 8005a18:	080059d9 	.word	0x080059d9
 8005a1c:	08005b69 	.word	0x08005b69
 8005a20:	08005a8d 	.word	0x08005a8d
 8005a24:	08005b4b 	.word	0x08005b4b
 8005a28:	080059d9 	.word	0x080059d9
 8005a2c:	080059d9 	.word	0x080059d9
 8005a30:	08005b8b 	.word	0x08005b8b
 8005a34:	080059d9 	.word	0x080059d9
 8005a38:	08005a8d 	.word	0x08005a8d
 8005a3c:	080059d9 	.word	0x080059d9
 8005a40:	080059d9 	.word	0x080059d9
 8005a44:	08005b53 	.word	0x08005b53
 8005a48:	680b      	ldr	r3, [r1, #0]
 8005a4a:	1d1a      	adds	r2, r3, #4
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	600a      	str	r2, [r1, #0]
 8005a50:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005a54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e0a3      	b.n	8005ba4 <_printf_i+0x1f4>
 8005a5c:	6825      	ldr	r5, [r4, #0]
 8005a5e:	6808      	ldr	r0, [r1, #0]
 8005a60:	062e      	lsls	r6, r5, #24
 8005a62:	f100 0304 	add.w	r3, r0, #4
 8005a66:	d50a      	bpl.n	8005a7e <_printf_i+0xce>
 8005a68:	6805      	ldr	r5, [r0, #0]
 8005a6a:	600b      	str	r3, [r1, #0]
 8005a6c:	2d00      	cmp	r5, #0
 8005a6e:	da03      	bge.n	8005a78 <_printf_i+0xc8>
 8005a70:	232d      	movs	r3, #45	; 0x2d
 8005a72:	426d      	negs	r5, r5
 8005a74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a78:	485e      	ldr	r0, [pc, #376]	; (8005bf4 <_printf_i+0x244>)
 8005a7a:	230a      	movs	r3, #10
 8005a7c:	e019      	b.n	8005ab2 <_printf_i+0x102>
 8005a7e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005a82:	6805      	ldr	r5, [r0, #0]
 8005a84:	600b      	str	r3, [r1, #0]
 8005a86:	bf18      	it	ne
 8005a88:	b22d      	sxthne	r5, r5
 8005a8a:	e7ef      	b.n	8005a6c <_printf_i+0xbc>
 8005a8c:	680b      	ldr	r3, [r1, #0]
 8005a8e:	6825      	ldr	r5, [r4, #0]
 8005a90:	1d18      	adds	r0, r3, #4
 8005a92:	6008      	str	r0, [r1, #0]
 8005a94:	0628      	lsls	r0, r5, #24
 8005a96:	d501      	bpl.n	8005a9c <_printf_i+0xec>
 8005a98:	681d      	ldr	r5, [r3, #0]
 8005a9a:	e002      	b.n	8005aa2 <_printf_i+0xf2>
 8005a9c:	0669      	lsls	r1, r5, #25
 8005a9e:	d5fb      	bpl.n	8005a98 <_printf_i+0xe8>
 8005aa0:	881d      	ldrh	r5, [r3, #0]
 8005aa2:	4854      	ldr	r0, [pc, #336]	; (8005bf4 <_printf_i+0x244>)
 8005aa4:	2f6f      	cmp	r7, #111	; 0x6f
 8005aa6:	bf0c      	ite	eq
 8005aa8:	2308      	moveq	r3, #8
 8005aaa:	230a      	movne	r3, #10
 8005aac:	2100      	movs	r1, #0
 8005aae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005ab2:	6866      	ldr	r6, [r4, #4]
 8005ab4:	60a6      	str	r6, [r4, #8]
 8005ab6:	2e00      	cmp	r6, #0
 8005ab8:	bfa2      	ittt	ge
 8005aba:	6821      	ldrge	r1, [r4, #0]
 8005abc:	f021 0104 	bicge.w	r1, r1, #4
 8005ac0:	6021      	strge	r1, [r4, #0]
 8005ac2:	b90d      	cbnz	r5, 8005ac8 <_printf_i+0x118>
 8005ac4:	2e00      	cmp	r6, #0
 8005ac6:	d04d      	beq.n	8005b64 <_printf_i+0x1b4>
 8005ac8:	4616      	mov	r6, r2
 8005aca:	fbb5 f1f3 	udiv	r1, r5, r3
 8005ace:	fb03 5711 	mls	r7, r3, r1, r5
 8005ad2:	5dc7      	ldrb	r7, [r0, r7]
 8005ad4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005ad8:	462f      	mov	r7, r5
 8005ada:	42bb      	cmp	r3, r7
 8005adc:	460d      	mov	r5, r1
 8005ade:	d9f4      	bls.n	8005aca <_printf_i+0x11a>
 8005ae0:	2b08      	cmp	r3, #8
 8005ae2:	d10b      	bne.n	8005afc <_printf_i+0x14c>
 8005ae4:	6823      	ldr	r3, [r4, #0]
 8005ae6:	07df      	lsls	r7, r3, #31
 8005ae8:	d508      	bpl.n	8005afc <_printf_i+0x14c>
 8005aea:	6923      	ldr	r3, [r4, #16]
 8005aec:	6861      	ldr	r1, [r4, #4]
 8005aee:	4299      	cmp	r1, r3
 8005af0:	bfde      	ittt	le
 8005af2:	2330      	movle	r3, #48	; 0x30
 8005af4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005af8:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8005afc:	1b92      	subs	r2, r2, r6
 8005afe:	6122      	str	r2, [r4, #16]
 8005b00:	f8cd a000 	str.w	sl, [sp]
 8005b04:	464b      	mov	r3, r9
 8005b06:	aa03      	add	r2, sp, #12
 8005b08:	4621      	mov	r1, r4
 8005b0a:	4640      	mov	r0, r8
 8005b0c:	f7ff fee2 	bl	80058d4 <_printf_common>
 8005b10:	3001      	adds	r0, #1
 8005b12:	d14c      	bne.n	8005bae <_printf_i+0x1fe>
 8005b14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b18:	b004      	add	sp, #16
 8005b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b1e:	4835      	ldr	r0, [pc, #212]	; (8005bf4 <_printf_i+0x244>)
 8005b20:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005b24:	6823      	ldr	r3, [r4, #0]
 8005b26:	680e      	ldr	r6, [r1, #0]
 8005b28:	061f      	lsls	r7, r3, #24
 8005b2a:	f856 5b04 	ldr.w	r5, [r6], #4
 8005b2e:	600e      	str	r6, [r1, #0]
 8005b30:	d514      	bpl.n	8005b5c <_printf_i+0x1ac>
 8005b32:	07d9      	lsls	r1, r3, #31
 8005b34:	bf44      	itt	mi
 8005b36:	f043 0320 	orrmi.w	r3, r3, #32
 8005b3a:	6023      	strmi	r3, [r4, #0]
 8005b3c:	b91d      	cbnz	r5, 8005b46 <_printf_i+0x196>
 8005b3e:	6823      	ldr	r3, [r4, #0]
 8005b40:	f023 0320 	bic.w	r3, r3, #32
 8005b44:	6023      	str	r3, [r4, #0]
 8005b46:	2310      	movs	r3, #16
 8005b48:	e7b0      	b.n	8005aac <_printf_i+0xfc>
 8005b4a:	6823      	ldr	r3, [r4, #0]
 8005b4c:	f043 0320 	orr.w	r3, r3, #32
 8005b50:	6023      	str	r3, [r4, #0]
 8005b52:	2378      	movs	r3, #120	; 0x78
 8005b54:	4828      	ldr	r0, [pc, #160]	; (8005bf8 <_printf_i+0x248>)
 8005b56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005b5a:	e7e3      	b.n	8005b24 <_printf_i+0x174>
 8005b5c:	065e      	lsls	r6, r3, #25
 8005b5e:	bf48      	it	mi
 8005b60:	b2ad      	uxthmi	r5, r5
 8005b62:	e7e6      	b.n	8005b32 <_printf_i+0x182>
 8005b64:	4616      	mov	r6, r2
 8005b66:	e7bb      	b.n	8005ae0 <_printf_i+0x130>
 8005b68:	680b      	ldr	r3, [r1, #0]
 8005b6a:	6826      	ldr	r6, [r4, #0]
 8005b6c:	6960      	ldr	r0, [r4, #20]
 8005b6e:	1d1d      	adds	r5, r3, #4
 8005b70:	600d      	str	r5, [r1, #0]
 8005b72:	0635      	lsls	r5, r6, #24
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	d501      	bpl.n	8005b7c <_printf_i+0x1cc>
 8005b78:	6018      	str	r0, [r3, #0]
 8005b7a:	e002      	b.n	8005b82 <_printf_i+0x1d2>
 8005b7c:	0671      	lsls	r1, r6, #25
 8005b7e:	d5fb      	bpl.n	8005b78 <_printf_i+0x1c8>
 8005b80:	8018      	strh	r0, [r3, #0]
 8005b82:	2300      	movs	r3, #0
 8005b84:	6123      	str	r3, [r4, #16]
 8005b86:	4616      	mov	r6, r2
 8005b88:	e7ba      	b.n	8005b00 <_printf_i+0x150>
 8005b8a:	680b      	ldr	r3, [r1, #0]
 8005b8c:	1d1a      	adds	r2, r3, #4
 8005b8e:	600a      	str	r2, [r1, #0]
 8005b90:	681e      	ldr	r6, [r3, #0]
 8005b92:	6862      	ldr	r2, [r4, #4]
 8005b94:	2100      	movs	r1, #0
 8005b96:	4630      	mov	r0, r6
 8005b98:	f7fa fb42 	bl	8000220 <memchr>
 8005b9c:	b108      	cbz	r0, 8005ba2 <_printf_i+0x1f2>
 8005b9e:	1b80      	subs	r0, r0, r6
 8005ba0:	6060      	str	r0, [r4, #4]
 8005ba2:	6863      	ldr	r3, [r4, #4]
 8005ba4:	6123      	str	r3, [r4, #16]
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bac:	e7a8      	b.n	8005b00 <_printf_i+0x150>
 8005bae:	6923      	ldr	r3, [r4, #16]
 8005bb0:	4632      	mov	r2, r6
 8005bb2:	4649      	mov	r1, r9
 8005bb4:	4640      	mov	r0, r8
 8005bb6:	47d0      	blx	sl
 8005bb8:	3001      	adds	r0, #1
 8005bba:	d0ab      	beq.n	8005b14 <_printf_i+0x164>
 8005bbc:	6823      	ldr	r3, [r4, #0]
 8005bbe:	079b      	lsls	r3, r3, #30
 8005bc0:	d413      	bmi.n	8005bea <_printf_i+0x23a>
 8005bc2:	68e0      	ldr	r0, [r4, #12]
 8005bc4:	9b03      	ldr	r3, [sp, #12]
 8005bc6:	4298      	cmp	r0, r3
 8005bc8:	bfb8      	it	lt
 8005bca:	4618      	movlt	r0, r3
 8005bcc:	e7a4      	b.n	8005b18 <_printf_i+0x168>
 8005bce:	2301      	movs	r3, #1
 8005bd0:	4632      	mov	r2, r6
 8005bd2:	4649      	mov	r1, r9
 8005bd4:	4640      	mov	r0, r8
 8005bd6:	47d0      	blx	sl
 8005bd8:	3001      	adds	r0, #1
 8005bda:	d09b      	beq.n	8005b14 <_printf_i+0x164>
 8005bdc:	3501      	adds	r5, #1
 8005bde:	68e3      	ldr	r3, [r4, #12]
 8005be0:	9903      	ldr	r1, [sp, #12]
 8005be2:	1a5b      	subs	r3, r3, r1
 8005be4:	42ab      	cmp	r3, r5
 8005be6:	dcf2      	bgt.n	8005bce <_printf_i+0x21e>
 8005be8:	e7eb      	b.n	8005bc2 <_printf_i+0x212>
 8005bea:	2500      	movs	r5, #0
 8005bec:	f104 0619 	add.w	r6, r4, #25
 8005bf0:	e7f5      	b.n	8005bde <_printf_i+0x22e>
 8005bf2:	bf00      	nop
 8005bf4:	08009586 	.word	0x08009586
 8005bf8:	08009597 	.word	0x08009597

08005bfc <siprintf>:
 8005bfc:	b40e      	push	{r1, r2, r3}
 8005bfe:	b500      	push	{lr}
 8005c00:	b09c      	sub	sp, #112	; 0x70
 8005c02:	ab1d      	add	r3, sp, #116	; 0x74
 8005c04:	9002      	str	r0, [sp, #8]
 8005c06:	9006      	str	r0, [sp, #24]
 8005c08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005c0c:	4809      	ldr	r0, [pc, #36]	; (8005c34 <siprintf+0x38>)
 8005c0e:	9107      	str	r1, [sp, #28]
 8005c10:	9104      	str	r1, [sp, #16]
 8005c12:	4909      	ldr	r1, [pc, #36]	; (8005c38 <siprintf+0x3c>)
 8005c14:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c18:	9105      	str	r1, [sp, #20]
 8005c1a:	6800      	ldr	r0, [r0, #0]
 8005c1c:	9301      	str	r3, [sp, #4]
 8005c1e:	a902      	add	r1, sp, #8
 8005c20:	f001 fb34 	bl	800728c <_svfiprintf_r>
 8005c24:	9b02      	ldr	r3, [sp, #8]
 8005c26:	2200      	movs	r2, #0
 8005c28:	701a      	strb	r2, [r3, #0]
 8005c2a:	b01c      	add	sp, #112	; 0x70
 8005c2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c30:	b003      	add	sp, #12
 8005c32:	4770      	bx	lr
 8005c34:	20000014 	.word	0x20000014
 8005c38:	ffff0208 	.word	0xffff0208

08005c3c <quorem>:
 8005c3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c40:	6903      	ldr	r3, [r0, #16]
 8005c42:	690c      	ldr	r4, [r1, #16]
 8005c44:	42a3      	cmp	r3, r4
 8005c46:	4607      	mov	r7, r0
 8005c48:	f2c0 8081 	blt.w	8005d4e <quorem+0x112>
 8005c4c:	3c01      	subs	r4, #1
 8005c4e:	f101 0814 	add.w	r8, r1, #20
 8005c52:	f100 0514 	add.w	r5, r0, #20
 8005c56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c5a:	9301      	str	r3, [sp, #4]
 8005c5c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005c60:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c64:	3301      	adds	r3, #1
 8005c66:	429a      	cmp	r2, r3
 8005c68:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005c6c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005c70:	fbb2 f6f3 	udiv	r6, r2, r3
 8005c74:	d331      	bcc.n	8005cda <quorem+0x9e>
 8005c76:	f04f 0e00 	mov.w	lr, #0
 8005c7a:	4640      	mov	r0, r8
 8005c7c:	46ac      	mov	ip, r5
 8005c7e:	46f2      	mov	sl, lr
 8005c80:	f850 2b04 	ldr.w	r2, [r0], #4
 8005c84:	b293      	uxth	r3, r2
 8005c86:	fb06 e303 	mla	r3, r6, r3, lr
 8005c8a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	ebaa 0303 	sub.w	r3, sl, r3
 8005c94:	0c12      	lsrs	r2, r2, #16
 8005c96:	f8dc a000 	ldr.w	sl, [ip]
 8005c9a:	fb06 e202 	mla	r2, r6, r2, lr
 8005c9e:	fa13 f38a 	uxtah	r3, r3, sl
 8005ca2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005ca6:	fa1f fa82 	uxth.w	sl, r2
 8005caa:	f8dc 2000 	ldr.w	r2, [ip]
 8005cae:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005cb2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005cbc:	4581      	cmp	r9, r0
 8005cbe:	f84c 3b04 	str.w	r3, [ip], #4
 8005cc2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005cc6:	d2db      	bcs.n	8005c80 <quorem+0x44>
 8005cc8:	f855 300b 	ldr.w	r3, [r5, fp]
 8005ccc:	b92b      	cbnz	r3, 8005cda <quorem+0x9e>
 8005cce:	9b01      	ldr	r3, [sp, #4]
 8005cd0:	3b04      	subs	r3, #4
 8005cd2:	429d      	cmp	r5, r3
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	d32e      	bcc.n	8005d36 <quorem+0xfa>
 8005cd8:	613c      	str	r4, [r7, #16]
 8005cda:	4638      	mov	r0, r7
 8005cdc:	f001 f8c0 	bl	8006e60 <__mcmp>
 8005ce0:	2800      	cmp	r0, #0
 8005ce2:	db24      	blt.n	8005d2e <quorem+0xf2>
 8005ce4:	3601      	adds	r6, #1
 8005ce6:	4628      	mov	r0, r5
 8005ce8:	f04f 0c00 	mov.w	ip, #0
 8005cec:	f858 2b04 	ldr.w	r2, [r8], #4
 8005cf0:	f8d0 e000 	ldr.w	lr, [r0]
 8005cf4:	b293      	uxth	r3, r2
 8005cf6:	ebac 0303 	sub.w	r3, ip, r3
 8005cfa:	0c12      	lsrs	r2, r2, #16
 8005cfc:	fa13 f38e 	uxtah	r3, r3, lr
 8005d00:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005d04:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d0e:	45c1      	cmp	r9, r8
 8005d10:	f840 3b04 	str.w	r3, [r0], #4
 8005d14:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005d18:	d2e8      	bcs.n	8005cec <quorem+0xb0>
 8005d1a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d1e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d22:	b922      	cbnz	r2, 8005d2e <quorem+0xf2>
 8005d24:	3b04      	subs	r3, #4
 8005d26:	429d      	cmp	r5, r3
 8005d28:	461a      	mov	r2, r3
 8005d2a:	d30a      	bcc.n	8005d42 <quorem+0x106>
 8005d2c:	613c      	str	r4, [r7, #16]
 8005d2e:	4630      	mov	r0, r6
 8005d30:	b003      	add	sp, #12
 8005d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d36:	6812      	ldr	r2, [r2, #0]
 8005d38:	3b04      	subs	r3, #4
 8005d3a:	2a00      	cmp	r2, #0
 8005d3c:	d1cc      	bne.n	8005cd8 <quorem+0x9c>
 8005d3e:	3c01      	subs	r4, #1
 8005d40:	e7c7      	b.n	8005cd2 <quorem+0x96>
 8005d42:	6812      	ldr	r2, [r2, #0]
 8005d44:	3b04      	subs	r3, #4
 8005d46:	2a00      	cmp	r2, #0
 8005d48:	d1f0      	bne.n	8005d2c <quorem+0xf0>
 8005d4a:	3c01      	subs	r4, #1
 8005d4c:	e7eb      	b.n	8005d26 <quorem+0xea>
 8005d4e:	2000      	movs	r0, #0
 8005d50:	e7ee      	b.n	8005d30 <quorem+0xf4>
 8005d52:	0000      	movs	r0, r0
 8005d54:	0000      	movs	r0, r0
	...

08005d58 <_dtoa_r>:
 8005d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d5c:	ed2d 8b02 	vpush	{d8}
 8005d60:	ec57 6b10 	vmov	r6, r7, d0
 8005d64:	b095      	sub	sp, #84	; 0x54
 8005d66:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005d68:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005d6c:	9105      	str	r1, [sp, #20]
 8005d6e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005d72:	4604      	mov	r4, r0
 8005d74:	9209      	str	r2, [sp, #36]	; 0x24
 8005d76:	930f      	str	r3, [sp, #60]	; 0x3c
 8005d78:	b975      	cbnz	r5, 8005d98 <_dtoa_r+0x40>
 8005d7a:	2010      	movs	r0, #16
 8005d7c:	f000 fddc 	bl	8006938 <malloc>
 8005d80:	4602      	mov	r2, r0
 8005d82:	6260      	str	r0, [r4, #36]	; 0x24
 8005d84:	b920      	cbnz	r0, 8005d90 <_dtoa_r+0x38>
 8005d86:	4bb2      	ldr	r3, [pc, #712]	; (8006050 <_dtoa_r+0x2f8>)
 8005d88:	21ea      	movs	r1, #234	; 0xea
 8005d8a:	48b2      	ldr	r0, [pc, #712]	; (8006054 <_dtoa_r+0x2fc>)
 8005d8c:	f001 fb8e 	bl	80074ac <__assert_func>
 8005d90:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005d94:	6005      	str	r5, [r0, #0]
 8005d96:	60c5      	str	r5, [r0, #12]
 8005d98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d9a:	6819      	ldr	r1, [r3, #0]
 8005d9c:	b151      	cbz	r1, 8005db4 <_dtoa_r+0x5c>
 8005d9e:	685a      	ldr	r2, [r3, #4]
 8005da0:	604a      	str	r2, [r1, #4]
 8005da2:	2301      	movs	r3, #1
 8005da4:	4093      	lsls	r3, r2
 8005da6:	608b      	str	r3, [r1, #8]
 8005da8:	4620      	mov	r0, r4
 8005daa:	f000 fe1b 	bl	80069e4 <_Bfree>
 8005dae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005db0:	2200      	movs	r2, #0
 8005db2:	601a      	str	r2, [r3, #0]
 8005db4:	1e3b      	subs	r3, r7, #0
 8005db6:	bfb9      	ittee	lt
 8005db8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005dbc:	9303      	strlt	r3, [sp, #12]
 8005dbe:	2300      	movge	r3, #0
 8005dc0:	f8c8 3000 	strge.w	r3, [r8]
 8005dc4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005dc8:	4ba3      	ldr	r3, [pc, #652]	; (8006058 <_dtoa_r+0x300>)
 8005dca:	bfbc      	itt	lt
 8005dcc:	2201      	movlt	r2, #1
 8005dce:	f8c8 2000 	strlt.w	r2, [r8]
 8005dd2:	ea33 0309 	bics.w	r3, r3, r9
 8005dd6:	d11b      	bne.n	8005e10 <_dtoa_r+0xb8>
 8005dd8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005dda:	f242 730f 	movw	r3, #9999	; 0x270f
 8005dde:	6013      	str	r3, [r2, #0]
 8005de0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005de4:	4333      	orrs	r3, r6
 8005de6:	f000 857a 	beq.w	80068de <_dtoa_r+0xb86>
 8005dea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005dec:	b963      	cbnz	r3, 8005e08 <_dtoa_r+0xb0>
 8005dee:	4b9b      	ldr	r3, [pc, #620]	; (800605c <_dtoa_r+0x304>)
 8005df0:	e024      	b.n	8005e3c <_dtoa_r+0xe4>
 8005df2:	4b9b      	ldr	r3, [pc, #620]	; (8006060 <_dtoa_r+0x308>)
 8005df4:	9300      	str	r3, [sp, #0]
 8005df6:	3308      	adds	r3, #8
 8005df8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005dfa:	6013      	str	r3, [r2, #0]
 8005dfc:	9800      	ldr	r0, [sp, #0]
 8005dfe:	b015      	add	sp, #84	; 0x54
 8005e00:	ecbd 8b02 	vpop	{d8}
 8005e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e08:	4b94      	ldr	r3, [pc, #592]	; (800605c <_dtoa_r+0x304>)
 8005e0a:	9300      	str	r3, [sp, #0]
 8005e0c:	3303      	adds	r3, #3
 8005e0e:	e7f3      	b.n	8005df8 <_dtoa_r+0xa0>
 8005e10:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005e14:	2200      	movs	r2, #0
 8005e16:	ec51 0b17 	vmov	r0, r1, d7
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8005e20:	f7fa fe72 	bl	8000b08 <__aeabi_dcmpeq>
 8005e24:	4680      	mov	r8, r0
 8005e26:	b158      	cbz	r0, 8005e40 <_dtoa_r+0xe8>
 8005e28:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	6013      	str	r3, [r2, #0]
 8005e2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	f000 8551 	beq.w	80068d8 <_dtoa_r+0xb80>
 8005e36:	488b      	ldr	r0, [pc, #556]	; (8006064 <_dtoa_r+0x30c>)
 8005e38:	6018      	str	r0, [r3, #0]
 8005e3a:	1e43      	subs	r3, r0, #1
 8005e3c:	9300      	str	r3, [sp, #0]
 8005e3e:	e7dd      	b.n	8005dfc <_dtoa_r+0xa4>
 8005e40:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8005e44:	aa12      	add	r2, sp, #72	; 0x48
 8005e46:	a913      	add	r1, sp, #76	; 0x4c
 8005e48:	4620      	mov	r0, r4
 8005e4a:	f001 f8ad 	bl	8006fa8 <__d2b>
 8005e4e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005e52:	4683      	mov	fp, r0
 8005e54:	2d00      	cmp	r5, #0
 8005e56:	d07c      	beq.n	8005f52 <_dtoa_r+0x1fa>
 8005e58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e5a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8005e5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e62:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8005e66:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005e6a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005e6e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005e72:	4b7d      	ldr	r3, [pc, #500]	; (8006068 <_dtoa_r+0x310>)
 8005e74:	2200      	movs	r2, #0
 8005e76:	4630      	mov	r0, r6
 8005e78:	4639      	mov	r1, r7
 8005e7a:	f7fa fa25 	bl	80002c8 <__aeabi_dsub>
 8005e7e:	a36e      	add	r3, pc, #440	; (adr r3, 8006038 <_dtoa_r+0x2e0>)
 8005e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e84:	f7fa fbd8 	bl	8000638 <__aeabi_dmul>
 8005e88:	a36d      	add	r3, pc, #436	; (adr r3, 8006040 <_dtoa_r+0x2e8>)
 8005e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e8e:	f7fa fa1d 	bl	80002cc <__adddf3>
 8005e92:	4606      	mov	r6, r0
 8005e94:	4628      	mov	r0, r5
 8005e96:	460f      	mov	r7, r1
 8005e98:	f7fa fb64 	bl	8000564 <__aeabi_i2d>
 8005e9c:	a36a      	add	r3, pc, #424	; (adr r3, 8006048 <_dtoa_r+0x2f0>)
 8005e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea2:	f7fa fbc9 	bl	8000638 <__aeabi_dmul>
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	460b      	mov	r3, r1
 8005eaa:	4630      	mov	r0, r6
 8005eac:	4639      	mov	r1, r7
 8005eae:	f7fa fa0d 	bl	80002cc <__adddf3>
 8005eb2:	4606      	mov	r6, r0
 8005eb4:	460f      	mov	r7, r1
 8005eb6:	f7fa fe6f 	bl	8000b98 <__aeabi_d2iz>
 8005eba:	2200      	movs	r2, #0
 8005ebc:	4682      	mov	sl, r0
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	4630      	mov	r0, r6
 8005ec2:	4639      	mov	r1, r7
 8005ec4:	f7fa fe2a 	bl	8000b1c <__aeabi_dcmplt>
 8005ec8:	b148      	cbz	r0, 8005ede <_dtoa_r+0x186>
 8005eca:	4650      	mov	r0, sl
 8005ecc:	f7fa fb4a 	bl	8000564 <__aeabi_i2d>
 8005ed0:	4632      	mov	r2, r6
 8005ed2:	463b      	mov	r3, r7
 8005ed4:	f7fa fe18 	bl	8000b08 <__aeabi_dcmpeq>
 8005ed8:	b908      	cbnz	r0, 8005ede <_dtoa_r+0x186>
 8005eda:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005ede:	f1ba 0f16 	cmp.w	sl, #22
 8005ee2:	d854      	bhi.n	8005f8e <_dtoa_r+0x236>
 8005ee4:	4b61      	ldr	r3, [pc, #388]	; (800606c <_dtoa_r+0x314>)
 8005ee6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005ef2:	f7fa fe13 	bl	8000b1c <__aeabi_dcmplt>
 8005ef6:	2800      	cmp	r0, #0
 8005ef8:	d04b      	beq.n	8005f92 <_dtoa_r+0x23a>
 8005efa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005efe:	2300      	movs	r3, #0
 8005f00:	930e      	str	r3, [sp, #56]	; 0x38
 8005f02:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005f04:	1b5d      	subs	r5, r3, r5
 8005f06:	1e6b      	subs	r3, r5, #1
 8005f08:	9304      	str	r3, [sp, #16]
 8005f0a:	bf43      	ittte	mi
 8005f0c:	2300      	movmi	r3, #0
 8005f0e:	f1c5 0801 	rsbmi	r8, r5, #1
 8005f12:	9304      	strmi	r3, [sp, #16]
 8005f14:	f04f 0800 	movpl.w	r8, #0
 8005f18:	f1ba 0f00 	cmp.w	sl, #0
 8005f1c:	db3b      	blt.n	8005f96 <_dtoa_r+0x23e>
 8005f1e:	9b04      	ldr	r3, [sp, #16]
 8005f20:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8005f24:	4453      	add	r3, sl
 8005f26:	9304      	str	r3, [sp, #16]
 8005f28:	2300      	movs	r3, #0
 8005f2a:	9306      	str	r3, [sp, #24]
 8005f2c:	9b05      	ldr	r3, [sp, #20]
 8005f2e:	2b09      	cmp	r3, #9
 8005f30:	d869      	bhi.n	8006006 <_dtoa_r+0x2ae>
 8005f32:	2b05      	cmp	r3, #5
 8005f34:	bfc4      	itt	gt
 8005f36:	3b04      	subgt	r3, #4
 8005f38:	9305      	strgt	r3, [sp, #20]
 8005f3a:	9b05      	ldr	r3, [sp, #20]
 8005f3c:	f1a3 0302 	sub.w	r3, r3, #2
 8005f40:	bfcc      	ite	gt
 8005f42:	2500      	movgt	r5, #0
 8005f44:	2501      	movle	r5, #1
 8005f46:	2b03      	cmp	r3, #3
 8005f48:	d869      	bhi.n	800601e <_dtoa_r+0x2c6>
 8005f4a:	e8df f003 	tbb	[pc, r3]
 8005f4e:	4e2c      	.short	0x4e2c
 8005f50:	5a4c      	.short	0x5a4c
 8005f52:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005f56:	441d      	add	r5, r3
 8005f58:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005f5c:	2b20      	cmp	r3, #32
 8005f5e:	bfc1      	itttt	gt
 8005f60:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005f64:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005f68:	fa09 f303 	lslgt.w	r3, r9, r3
 8005f6c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005f70:	bfda      	itte	le
 8005f72:	f1c3 0320 	rsble	r3, r3, #32
 8005f76:	fa06 f003 	lslle.w	r0, r6, r3
 8005f7a:	4318      	orrgt	r0, r3
 8005f7c:	f7fa fae2 	bl	8000544 <__aeabi_ui2d>
 8005f80:	2301      	movs	r3, #1
 8005f82:	4606      	mov	r6, r0
 8005f84:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005f88:	3d01      	subs	r5, #1
 8005f8a:	9310      	str	r3, [sp, #64]	; 0x40
 8005f8c:	e771      	b.n	8005e72 <_dtoa_r+0x11a>
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e7b6      	b.n	8005f00 <_dtoa_r+0x1a8>
 8005f92:	900e      	str	r0, [sp, #56]	; 0x38
 8005f94:	e7b5      	b.n	8005f02 <_dtoa_r+0x1aa>
 8005f96:	f1ca 0300 	rsb	r3, sl, #0
 8005f9a:	9306      	str	r3, [sp, #24]
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	eba8 080a 	sub.w	r8, r8, sl
 8005fa2:	930d      	str	r3, [sp, #52]	; 0x34
 8005fa4:	e7c2      	b.n	8005f2c <_dtoa_r+0x1d4>
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	9308      	str	r3, [sp, #32]
 8005faa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	dc39      	bgt.n	8006024 <_dtoa_r+0x2cc>
 8005fb0:	f04f 0901 	mov.w	r9, #1
 8005fb4:	f8cd 9004 	str.w	r9, [sp, #4]
 8005fb8:	464b      	mov	r3, r9
 8005fba:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005fbe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	6042      	str	r2, [r0, #4]
 8005fc4:	2204      	movs	r2, #4
 8005fc6:	f102 0614 	add.w	r6, r2, #20
 8005fca:	429e      	cmp	r6, r3
 8005fcc:	6841      	ldr	r1, [r0, #4]
 8005fce:	d92f      	bls.n	8006030 <_dtoa_r+0x2d8>
 8005fd0:	4620      	mov	r0, r4
 8005fd2:	f000 fcc7 	bl	8006964 <_Balloc>
 8005fd6:	9000      	str	r0, [sp, #0]
 8005fd8:	2800      	cmp	r0, #0
 8005fda:	d14b      	bne.n	8006074 <_dtoa_r+0x31c>
 8005fdc:	4b24      	ldr	r3, [pc, #144]	; (8006070 <_dtoa_r+0x318>)
 8005fde:	4602      	mov	r2, r0
 8005fe0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005fe4:	e6d1      	b.n	8005d8a <_dtoa_r+0x32>
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	e7de      	b.n	8005fa8 <_dtoa_r+0x250>
 8005fea:	2300      	movs	r3, #0
 8005fec:	9308      	str	r3, [sp, #32]
 8005fee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ff0:	eb0a 0903 	add.w	r9, sl, r3
 8005ff4:	f109 0301 	add.w	r3, r9, #1
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	9301      	str	r3, [sp, #4]
 8005ffc:	bfb8      	it	lt
 8005ffe:	2301      	movlt	r3, #1
 8006000:	e7dd      	b.n	8005fbe <_dtoa_r+0x266>
 8006002:	2301      	movs	r3, #1
 8006004:	e7f2      	b.n	8005fec <_dtoa_r+0x294>
 8006006:	2501      	movs	r5, #1
 8006008:	2300      	movs	r3, #0
 800600a:	9305      	str	r3, [sp, #20]
 800600c:	9508      	str	r5, [sp, #32]
 800600e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8006012:	2200      	movs	r2, #0
 8006014:	f8cd 9004 	str.w	r9, [sp, #4]
 8006018:	2312      	movs	r3, #18
 800601a:	9209      	str	r2, [sp, #36]	; 0x24
 800601c:	e7cf      	b.n	8005fbe <_dtoa_r+0x266>
 800601e:	2301      	movs	r3, #1
 8006020:	9308      	str	r3, [sp, #32]
 8006022:	e7f4      	b.n	800600e <_dtoa_r+0x2b6>
 8006024:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006028:	f8cd 9004 	str.w	r9, [sp, #4]
 800602c:	464b      	mov	r3, r9
 800602e:	e7c6      	b.n	8005fbe <_dtoa_r+0x266>
 8006030:	3101      	adds	r1, #1
 8006032:	6041      	str	r1, [r0, #4]
 8006034:	0052      	lsls	r2, r2, #1
 8006036:	e7c6      	b.n	8005fc6 <_dtoa_r+0x26e>
 8006038:	636f4361 	.word	0x636f4361
 800603c:	3fd287a7 	.word	0x3fd287a7
 8006040:	8b60c8b3 	.word	0x8b60c8b3
 8006044:	3fc68a28 	.word	0x3fc68a28
 8006048:	509f79fb 	.word	0x509f79fb
 800604c:	3fd34413 	.word	0x3fd34413
 8006050:	080095b5 	.word	0x080095b5
 8006054:	080095cc 	.word	0x080095cc
 8006058:	7ff00000 	.word	0x7ff00000
 800605c:	080095b1 	.word	0x080095b1
 8006060:	080095a8 	.word	0x080095a8
 8006064:	08009585 	.word	0x08009585
 8006068:	3ff80000 	.word	0x3ff80000
 800606c:	080096c8 	.word	0x080096c8
 8006070:	0800962b 	.word	0x0800962b
 8006074:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006076:	9a00      	ldr	r2, [sp, #0]
 8006078:	601a      	str	r2, [r3, #0]
 800607a:	9b01      	ldr	r3, [sp, #4]
 800607c:	2b0e      	cmp	r3, #14
 800607e:	f200 80ad 	bhi.w	80061dc <_dtoa_r+0x484>
 8006082:	2d00      	cmp	r5, #0
 8006084:	f000 80aa 	beq.w	80061dc <_dtoa_r+0x484>
 8006088:	f1ba 0f00 	cmp.w	sl, #0
 800608c:	dd36      	ble.n	80060fc <_dtoa_r+0x3a4>
 800608e:	4ac3      	ldr	r2, [pc, #780]	; (800639c <_dtoa_r+0x644>)
 8006090:	f00a 030f 	and.w	r3, sl, #15
 8006094:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006098:	ed93 7b00 	vldr	d7, [r3]
 800609c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80060a0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80060a4:	eeb0 8a47 	vmov.f32	s16, s14
 80060a8:	eef0 8a67 	vmov.f32	s17, s15
 80060ac:	d016      	beq.n	80060dc <_dtoa_r+0x384>
 80060ae:	4bbc      	ldr	r3, [pc, #752]	; (80063a0 <_dtoa_r+0x648>)
 80060b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80060b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80060b8:	f7fa fbe8 	bl	800088c <__aeabi_ddiv>
 80060bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060c0:	f007 070f 	and.w	r7, r7, #15
 80060c4:	2503      	movs	r5, #3
 80060c6:	4eb6      	ldr	r6, [pc, #728]	; (80063a0 <_dtoa_r+0x648>)
 80060c8:	b957      	cbnz	r7, 80060e0 <_dtoa_r+0x388>
 80060ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060ce:	ec53 2b18 	vmov	r2, r3, d8
 80060d2:	f7fa fbdb 	bl	800088c <__aeabi_ddiv>
 80060d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060da:	e029      	b.n	8006130 <_dtoa_r+0x3d8>
 80060dc:	2502      	movs	r5, #2
 80060de:	e7f2      	b.n	80060c6 <_dtoa_r+0x36e>
 80060e0:	07f9      	lsls	r1, r7, #31
 80060e2:	d508      	bpl.n	80060f6 <_dtoa_r+0x39e>
 80060e4:	ec51 0b18 	vmov	r0, r1, d8
 80060e8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80060ec:	f7fa faa4 	bl	8000638 <__aeabi_dmul>
 80060f0:	ec41 0b18 	vmov	d8, r0, r1
 80060f4:	3501      	adds	r5, #1
 80060f6:	107f      	asrs	r7, r7, #1
 80060f8:	3608      	adds	r6, #8
 80060fa:	e7e5      	b.n	80060c8 <_dtoa_r+0x370>
 80060fc:	f000 80a6 	beq.w	800624c <_dtoa_r+0x4f4>
 8006100:	f1ca 0600 	rsb	r6, sl, #0
 8006104:	4ba5      	ldr	r3, [pc, #660]	; (800639c <_dtoa_r+0x644>)
 8006106:	4fa6      	ldr	r7, [pc, #664]	; (80063a0 <_dtoa_r+0x648>)
 8006108:	f006 020f 	and.w	r2, r6, #15
 800610c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006114:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006118:	f7fa fa8e 	bl	8000638 <__aeabi_dmul>
 800611c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006120:	1136      	asrs	r6, r6, #4
 8006122:	2300      	movs	r3, #0
 8006124:	2502      	movs	r5, #2
 8006126:	2e00      	cmp	r6, #0
 8006128:	f040 8085 	bne.w	8006236 <_dtoa_r+0x4de>
 800612c:	2b00      	cmp	r3, #0
 800612e:	d1d2      	bne.n	80060d6 <_dtoa_r+0x37e>
 8006130:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006132:	2b00      	cmp	r3, #0
 8006134:	f000 808c 	beq.w	8006250 <_dtoa_r+0x4f8>
 8006138:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800613c:	4b99      	ldr	r3, [pc, #612]	; (80063a4 <_dtoa_r+0x64c>)
 800613e:	2200      	movs	r2, #0
 8006140:	4630      	mov	r0, r6
 8006142:	4639      	mov	r1, r7
 8006144:	f7fa fcea 	bl	8000b1c <__aeabi_dcmplt>
 8006148:	2800      	cmp	r0, #0
 800614a:	f000 8081 	beq.w	8006250 <_dtoa_r+0x4f8>
 800614e:	9b01      	ldr	r3, [sp, #4]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d07d      	beq.n	8006250 <_dtoa_r+0x4f8>
 8006154:	f1b9 0f00 	cmp.w	r9, #0
 8006158:	dd3c      	ble.n	80061d4 <_dtoa_r+0x47c>
 800615a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800615e:	9307      	str	r3, [sp, #28]
 8006160:	2200      	movs	r2, #0
 8006162:	4b91      	ldr	r3, [pc, #580]	; (80063a8 <_dtoa_r+0x650>)
 8006164:	4630      	mov	r0, r6
 8006166:	4639      	mov	r1, r7
 8006168:	f7fa fa66 	bl	8000638 <__aeabi_dmul>
 800616c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006170:	3501      	adds	r5, #1
 8006172:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8006176:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800617a:	4628      	mov	r0, r5
 800617c:	f7fa f9f2 	bl	8000564 <__aeabi_i2d>
 8006180:	4632      	mov	r2, r6
 8006182:	463b      	mov	r3, r7
 8006184:	f7fa fa58 	bl	8000638 <__aeabi_dmul>
 8006188:	4b88      	ldr	r3, [pc, #544]	; (80063ac <_dtoa_r+0x654>)
 800618a:	2200      	movs	r2, #0
 800618c:	f7fa f89e 	bl	80002cc <__adddf3>
 8006190:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006194:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006198:	9303      	str	r3, [sp, #12]
 800619a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800619c:	2b00      	cmp	r3, #0
 800619e:	d15c      	bne.n	800625a <_dtoa_r+0x502>
 80061a0:	4b83      	ldr	r3, [pc, #524]	; (80063b0 <_dtoa_r+0x658>)
 80061a2:	2200      	movs	r2, #0
 80061a4:	4630      	mov	r0, r6
 80061a6:	4639      	mov	r1, r7
 80061a8:	f7fa f88e 	bl	80002c8 <__aeabi_dsub>
 80061ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80061b0:	4606      	mov	r6, r0
 80061b2:	460f      	mov	r7, r1
 80061b4:	f7fa fcd0 	bl	8000b58 <__aeabi_dcmpgt>
 80061b8:	2800      	cmp	r0, #0
 80061ba:	f040 8296 	bne.w	80066ea <_dtoa_r+0x992>
 80061be:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80061c2:	4630      	mov	r0, r6
 80061c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80061c8:	4639      	mov	r1, r7
 80061ca:	f7fa fca7 	bl	8000b1c <__aeabi_dcmplt>
 80061ce:	2800      	cmp	r0, #0
 80061d0:	f040 8288 	bne.w	80066e4 <_dtoa_r+0x98c>
 80061d4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80061d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80061dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80061de:	2b00      	cmp	r3, #0
 80061e0:	f2c0 8158 	blt.w	8006494 <_dtoa_r+0x73c>
 80061e4:	f1ba 0f0e 	cmp.w	sl, #14
 80061e8:	f300 8154 	bgt.w	8006494 <_dtoa_r+0x73c>
 80061ec:	4b6b      	ldr	r3, [pc, #428]	; (800639c <_dtoa_r+0x644>)
 80061ee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80061f2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80061f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	f280 80e3 	bge.w	80063c4 <_dtoa_r+0x66c>
 80061fe:	9b01      	ldr	r3, [sp, #4]
 8006200:	2b00      	cmp	r3, #0
 8006202:	f300 80df 	bgt.w	80063c4 <_dtoa_r+0x66c>
 8006206:	f040 826d 	bne.w	80066e4 <_dtoa_r+0x98c>
 800620a:	4b69      	ldr	r3, [pc, #420]	; (80063b0 <_dtoa_r+0x658>)
 800620c:	2200      	movs	r2, #0
 800620e:	4640      	mov	r0, r8
 8006210:	4649      	mov	r1, r9
 8006212:	f7fa fa11 	bl	8000638 <__aeabi_dmul>
 8006216:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800621a:	f7fa fc93 	bl	8000b44 <__aeabi_dcmpge>
 800621e:	9e01      	ldr	r6, [sp, #4]
 8006220:	4637      	mov	r7, r6
 8006222:	2800      	cmp	r0, #0
 8006224:	f040 8243 	bne.w	80066ae <_dtoa_r+0x956>
 8006228:	9d00      	ldr	r5, [sp, #0]
 800622a:	2331      	movs	r3, #49	; 0x31
 800622c:	f805 3b01 	strb.w	r3, [r5], #1
 8006230:	f10a 0a01 	add.w	sl, sl, #1
 8006234:	e23f      	b.n	80066b6 <_dtoa_r+0x95e>
 8006236:	07f2      	lsls	r2, r6, #31
 8006238:	d505      	bpl.n	8006246 <_dtoa_r+0x4ee>
 800623a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800623e:	f7fa f9fb 	bl	8000638 <__aeabi_dmul>
 8006242:	3501      	adds	r5, #1
 8006244:	2301      	movs	r3, #1
 8006246:	1076      	asrs	r6, r6, #1
 8006248:	3708      	adds	r7, #8
 800624a:	e76c      	b.n	8006126 <_dtoa_r+0x3ce>
 800624c:	2502      	movs	r5, #2
 800624e:	e76f      	b.n	8006130 <_dtoa_r+0x3d8>
 8006250:	9b01      	ldr	r3, [sp, #4]
 8006252:	f8cd a01c 	str.w	sl, [sp, #28]
 8006256:	930c      	str	r3, [sp, #48]	; 0x30
 8006258:	e78d      	b.n	8006176 <_dtoa_r+0x41e>
 800625a:	9900      	ldr	r1, [sp, #0]
 800625c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800625e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006260:	4b4e      	ldr	r3, [pc, #312]	; (800639c <_dtoa_r+0x644>)
 8006262:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006266:	4401      	add	r1, r0
 8006268:	9102      	str	r1, [sp, #8]
 800626a:	9908      	ldr	r1, [sp, #32]
 800626c:	eeb0 8a47 	vmov.f32	s16, s14
 8006270:	eef0 8a67 	vmov.f32	s17, s15
 8006274:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006278:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800627c:	2900      	cmp	r1, #0
 800627e:	d045      	beq.n	800630c <_dtoa_r+0x5b4>
 8006280:	494c      	ldr	r1, [pc, #304]	; (80063b4 <_dtoa_r+0x65c>)
 8006282:	2000      	movs	r0, #0
 8006284:	f7fa fb02 	bl	800088c <__aeabi_ddiv>
 8006288:	ec53 2b18 	vmov	r2, r3, d8
 800628c:	f7fa f81c 	bl	80002c8 <__aeabi_dsub>
 8006290:	9d00      	ldr	r5, [sp, #0]
 8006292:	ec41 0b18 	vmov	d8, r0, r1
 8006296:	4639      	mov	r1, r7
 8006298:	4630      	mov	r0, r6
 800629a:	f7fa fc7d 	bl	8000b98 <__aeabi_d2iz>
 800629e:	900c      	str	r0, [sp, #48]	; 0x30
 80062a0:	f7fa f960 	bl	8000564 <__aeabi_i2d>
 80062a4:	4602      	mov	r2, r0
 80062a6:	460b      	mov	r3, r1
 80062a8:	4630      	mov	r0, r6
 80062aa:	4639      	mov	r1, r7
 80062ac:	f7fa f80c 	bl	80002c8 <__aeabi_dsub>
 80062b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80062b2:	3330      	adds	r3, #48	; 0x30
 80062b4:	f805 3b01 	strb.w	r3, [r5], #1
 80062b8:	ec53 2b18 	vmov	r2, r3, d8
 80062bc:	4606      	mov	r6, r0
 80062be:	460f      	mov	r7, r1
 80062c0:	f7fa fc2c 	bl	8000b1c <__aeabi_dcmplt>
 80062c4:	2800      	cmp	r0, #0
 80062c6:	d165      	bne.n	8006394 <_dtoa_r+0x63c>
 80062c8:	4632      	mov	r2, r6
 80062ca:	463b      	mov	r3, r7
 80062cc:	4935      	ldr	r1, [pc, #212]	; (80063a4 <_dtoa_r+0x64c>)
 80062ce:	2000      	movs	r0, #0
 80062d0:	f7f9 fffa 	bl	80002c8 <__aeabi_dsub>
 80062d4:	ec53 2b18 	vmov	r2, r3, d8
 80062d8:	f7fa fc20 	bl	8000b1c <__aeabi_dcmplt>
 80062dc:	2800      	cmp	r0, #0
 80062de:	f040 80b9 	bne.w	8006454 <_dtoa_r+0x6fc>
 80062e2:	9b02      	ldr	r3, [sp, #8]
 80062e4:	429d      	cmp	r5, r3
 80062e6:	f43f af75 	beq.w	80061d4 <_dtoa_r+0x47c>
 80062ea:	4b2f      	ldr	r3, [pc, #188]	; (80063a8 <_dtoa_r+0x650>)
 80062ec:	ec51 0b18 	vmov	r0, r1, d8
 80062f0:	2200      	movs	r2, #0
 80062f2:	f7fa f9a1 	bl	8000638 <__aeabi_dmul>
 80062f6:	4b2c      	ldr	r3, [pc, #176]	; (80063a8 <_dtoa_r+0x650>)
 80062f8:	ec41 0b18 	vmov	d8, r0, r1
 80062fc:	2200      	movs	r2, #0
 80062fe:	4630      	mov	r0, r6
 8006300:	4639      	mov	r1, r7
 8006302:	f7fa f999 	bl	8000638 <__aeabi_dmul>
 8006306:	4606      	mov	r6, r0
 8006308:	460f      	mov	r7, r1
 800630a:	e7c4      	b.n	8006296 <_dtoa_r+0x53e>
 800630c:	ec51 0b17 	vmov	r0, r1, d7
 8006310:	f7fa f992 	bl	8000638 <__aeabi_dmul>
 8006314:	9b02      	ldr	r3, [sp, #8]
 8006316:	9d00      	ldr	r5, [sp, #0]
 8006318:	930c      	str	r3, [sp, #48]	; 0x30
 800631a:	ec41 0b18 	vmov	d8, r0, r1
 800631e:	4639      	mov	r1, r7
 8006320:	4630      	mov	r0, r6
 8006322:	f7fa fc39 	bl	8000b98 <__aeabi_d2iz>
 8006326:	9011      	str	r0, [sp, #68]	; 0x44
 8006328:	f7fa f91c 	bl	8000564 <__aeabi_i2d>
 800632c:	4602      	mov	r2, r0
 800632e:	460b      	mov	r3, r1
 8006330:	4630      	mov	r0, r6
 8006332:	4639      	mov	r1, r7
 8006334:	f7f9 ffc8 	bl	80002c8 <__aeabi_dsub>
 8006338:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800633a:	3330      	adds	r3, #48	; 0x30
 800633c:	f805 3b01 	strb.w	r3, [r5], #1
 8006340:	9b02      	ldr	r3, [sp, #8]
 8006342:	429d      	cmp	r5, r3
 8006344:	4606      	mov	r6, r0
 8006346:	460f      	mov	r7, r1
 8006348:	f04f 0200 	mov.w	r2, #0
 800634c:	d134      	bne.n	80063b8 <_dtoa_r+0x660>
 800634e:	4b19      	ldr	r3, [pc, #100]	; (80063b4 <_dtoa_r+0x65c>)
 8006350:	ec51 0b18 	vmov	r0, r1, d8
 8006354:	f7f9 ffba 	bl	80002cc <__adddf3>
 8006358:	4602      	mov	r2, r0
 800635a:	460b      	mov	r3, r1
 800635c:	4630      	mov	r0, r6
 800635e:	4639      	mov	r1, r7
 8006360:	f7fa fbfa 	bl	8000b58 <__aeabi_dcmpgt>
 8006364:	2800      	cmp	r0, #0
 8006366:	d175      	bne.n	8006454 <_dtoa_r+0x6fc>
 8006368:	ec53 2b18 	vmov	r2, r3, d8
 800636c:	4911      	ldr	r1, [pc, #68]	; (80063b4 <_dtoa_r+0x65c>)
 800636e:	2000      	movs	r0, #0
 8006370:	f7f9 ffaa 	bl	80002c8 <__aeabi_dsub>
 8006374:	4602      	mov	r2, r0
 8006376:	460b      	mov	r3, r1
 8006378:	4630      	mov	r0, r6
 800637a:	4639      	mov	r1, r7
 800637c:	f7fa fbce 	bl	8000b1c <__aeabi_dcmplt>
 8006380:	2800      	cmp	r0, #0
 8006382:	f43f af27 	beq.w	80061d4 <_dtoa_r+0x47c>
 8006386:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006388:	1e6b      	subs	r3, r5, #1
 800638a:	930c      	str	r3, [sp, #48]	; 0x30
 800638c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006390:	2b30      	cmp	r3, #48	; 0x30
 8006392:	d0f8      	beq.n	8006386 <_dtoa_r+0x62e>
 8006394:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006398:	e04a      	b.n	8006430 <_dtoa_r+0x6d8>
 800639a:	bf00      	nop
 800639c:	080096c8 	.word	0x080096c8
 80063a0:	080096a0 	.word	0x080096a0
 80063a4:	3ff00000 	.word	0x3ff00000
 80063a8:	40240000 	.word	0x40240000
 80063ac:	401c0000 	.word	0x401c0000
 80063b0:	40140000 	.word	0x40140000
 80063b4:	3fe00000 	.word	0x3fe00000
 80063b8:	4baf      	ldr	r3, [pc, #700]	; (8006678 <_dtoa_r+0x920>)
 80063ba:	f7fa f93d 	bl	8000638 <__aeabi_dmul>
 80063be:	4606      	mov	r6, r0
 80063c0:	460f      	mov	r7, r1
 80063c2:	e7ac      	b.n	800631e <_dtoa_r+0x5c6>
 80063c4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80063c8:	9d00      	ldr	r5, [sp, #0]
 80063ca:	4642      	mov	r2, r8
 80063cc:	464b      	mov	r3, r9
 80063ce:	4630      	mov	r0, r6
 80063d0:	4639      	mov	r1, r7
 80063d2:	f7fa fa5b 	bl	800088c <__aeabi_ddiv>
 80063d6:	f7fa fbdf 	bl	8000b98 <__aeabi_d2iz>
 80063da:	9002      	str	r0, [sp, #8]
 80063dc:	f7fa f8c2 	bl	8000564 <__aeabi_i2d>
 80063e0:	4642      	mov	r2, r8
 80063e2:	464b      	mov	r3, r9
 80063e4:	f7fa f928 	bl	8000638 <__aeabi_dmul>
 80063e8:	4602      	mov	r2, r0
 80063ea:	460b      	mov	r3, r1
 80063ec:	4630      	mov	r0, r6
 80063ee:	4639      	mov	r1, r7
 80063f0:	f7f9 ff6a 	bl	80002c8 <__aeabi_dsub>
 80063f4:	9e02      	ldr	r6, [sp, #8]
 80063f6:	9f01      	ldr	r7, [sp, #4]
 80063f8:	3630      	adds	r6, #48	; 0x30
 80063fa:	f805 6b01 	strb.w	r6, [r5], #1
 80063fe:	9e00      	ldr	r6, [sp, #0]
 8006400:	1bae      	subs	r6, r5, r6
 8006402:	42b7      	cmp	r7, r6
 8006404:	4602      	mov	r2, r0
 8006406:	460b      	mov	r3, r1
 8006408:	d137      	bne.n	800647a <_dtoa_r+0x722>
 800640a:	f7f9 ff5f 	bl	80002cc <__adddf3>
 800640e:	4642      	mov	r2, r8
 8006410:	464b      	mov	r3, r9
 8006412:	4606      	mov	r6, r0
 8006414:	460f      	mov	r7, r1
 8006416:	f7fa fb9f 	bl	8000b58 <__aeabi_dcmpgt>
 800641a:	b9c8      	cbnz	r0, 8006450 <_dtoa_r+0x6f8>
 800641c:	4642      	mov	r2, r8
 800641e:	464b      	mov	r3, r9
 8006420:	4630      	mov	r0, r6
 8006422:	4639      	mov	r1, r7
 8006424:	f7fa fb70 	bl	8000b08 <__aeabi_dcmpeq>
 8006428:	b110      	cbz	r0, 8006430 <_dtoa_r+0x6d8>
 800642a:	9b02      	ldr	r3, [sp, #8]
 800642c:	07d9      	lsls	r1, r3, #31
 800642e:	d40f      	bmi.n	8006450 <_dtoa_r+0x6f8>
 8006430:	4620      	mov	r0, r4
 8006432:	4659      	mov	r1, fp
 8006434:	f000 fad6 	bl	80069e4 <_Bfree>
 8006438:	2300      	movs	r3, #0
 800643a:	702b      	strb	r3, [r5, #0]
 800643c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800643e:	f10a 0001 	add.w	r0, sl, #1
 8006442:	6018      	str	r0, [r3, #0]
 8006444:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006446:	2b00      	cmp	r3, #0
 8006448:	f43f acd8 	beq.w	8005dfc <_dtoa_r+0xa4>
 800644c:	601d      	str	r5, [r3, #0]
 800644e:	e4d5      	b.n	8005dfc <_dtoa_r+0xa4>
 8006450:	f8cd a01c 	str.w	sl, [sp, #28]
 8006454:	462b      	mov	r3, r5
 8006456:	461d      	mov	r5, r3
 8006458:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800645c:	2a39      	cmp	r2, #57	; 0x39
 800645e:	d108      	bne.n	8006472 <_dtoa_r+0x71a>
 8006460:	9a00      	ldr	r2, [sp, #0]
 8006462:	429a      	cmp	r2, r3
 8006464:	d1f7      	bne.n	8006456 <_dtoa_r+0x6fe>
 8006466:	9a07      	ldr	r2, [sp, #28]
 8006468:	9900      	ldr	r1, [sp, #0]
 800646a:	3201      	adds	r2, #1
 800646c:	9207      	str	r2, [sp, #28]
 800646e:	2230      	movs	r2, #48	; 0x30
 8006470:	700a      	strb	r2, [r1, #0]
 8006472:	781a      	ldrb	r2, [r3, #0]
 8006474:	3201      	adds	r2, #1
 8006476:	701a      	strb	r2, [r3, #0]
 8006478:	e78c      	b.n	8006394 <_dtoa_r+0x63c>
 800647a:	4b7f      	ldr	r3, [pc, #508]	; (8006678 <_dtoa_r+0x920>)
 800647c:	2200      	movs	r2, #0
 800647e:	f7fa f8db 	bl	8000638 <__aeabi_dmul>
 8006482:	2200      	movs	r2, #0
 8006484:	2300      	movs	r3, #0
 8006486:	4606      	mov	r6, r0
 8006488:	460f      	mov	r7, r1
 800648a:	f7fa fb3d 	bl	8000b08 <__aeabi_dcmpeq>
 800648e:	2800      	cmp	r0, #0
 8006490:	d09b      	beq.n	80063ca <_dtoa_r+0x672>
 8006492:	e7cd      	b.n	8006430 <_dtoa_r+0x6d8>
 8006494:	9a08      	ldr	r2, [sp, #32]
 8006496:	2a00      	cmp	r2, #0
 8006498:	f000 80c4 	beq.w	8006624 <_dtoa_r+0x8cc>
 800649c:	9a05      	ldr	r2, [sp, #20]
 800649e:	2a01      	cmp	r2, #1
 80064a0:	f300 80a8 	bgt.w	80065f4 <_dtoa_r+0x89c>
 80064a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80064a6:	2a00      	cmp	r2, #0
 80064a8:	f000 80a0 	beq.w	80065ec <_dtoa_r+0x894>
 80064ac:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80064b0:	9e06      	ldr	r6, [sp, #24]
 80064b2:	4645      	mov	r5, r8
 80064b4:	9a04      	ldr	r2, [sp, #16]
 80064b6:	2101      	movs	r1, #1
 80064b8:	441a      	add	r2, r3
 80064ba:	4620      	mov	r0, r4
 80064bc:	4498      	add	r8, r3
 80064be:	9204      	str	r2, [sp, #16]
 80064c0:	f000 fb4c 	bl	8006b5c <__i2b>
 80064c4:	4607      	mov	r7, r0
 80064c6:	2d00      	cmp	r5, #0
 80064c8:	dd0b      	ble.n	80064e2 <_dtoa_r+0x78a>
 80064ca:	9b04      	ldr	r3, [sp, #16]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	dd08      	ble.n	80064e2 <_dtoa_r+0x78a>
 80064d0:	42ab      	cmp	r3, r5
 80064d2:	9a04      	ldr	r2, [sp, #16]
 80064d4:	bfa8      	it	ge
 80064d6:	462b      	movge	r3, r5
 80064d8:	eba8 0803 	sub.w	r8, r8, r3
 80064dc:	1aed      	subs	r5, r5, r3
 80064de:	1ad3      	subs	r3, r2, r3
 80064e0:	9304      	str	r3, [sp, #16]
 80064e2:	9b06      	ldr	r3, [sp, #24]
 80064e4:	b1fb      	cbz	r3, 8006526 <_dtoa_r+0x7ce>
 80064e6:	9b08      	ldr	r3, [sp, #32]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	f000 809f 	beq.w	800662c <_dtoa_r+0x8d4>
 80064ee:	2e00      	cmp	r6, #0
 80064f0:	dd11      	ble.n	8006516 <_dtoa_r+0x7be>
 80064f2:	4639      	mov	r1, r7
 80064f4:	4632      	mov	r2, r6
 80064f6:	4620      	mov	r0, r4
 80064f8:	f000 fbec 	bl	8006cd4 <__pow5mult>
 80064fc:	465a      	mov	r2, fp
 80064fe:	4601      	mov	r1, r0
 8006500:	4607      	mov	r7, r0
 8006502:	4620      	mov	r0, r4
 8006504:	f000 fb40 	bl	8006b88 <__multiply>
 8006508:	4659      	mov	r1, fp
 800650a:	9007      	str	r0, [sp, #28]
 800650c:	4620      	mov	r0, r4
 800650e:	f000 fa69 	bl	80069e4 <_Bfree>
 8006512:	9b07      	ldr	r3, [sp, #28]
 8006514:	469b      	mov	fp, r3
 8006516:	9b06      	ldr	r3, [sp, #24]
 8006518:	1b9a      	subs	r2, r3, r6
 800651a:	d004      	beq.n	8006526 <_dtoa_r+0x7ce>
 800651c:	4659      	mov	r1, fp
 800651e:	4620      	mov	r0, r4
 8006520:	f000 fbd8 	bl	8006cd4 <__pow5mult>
 8006524:	4683      	mov	fp, r0
 8006526:	2101      	movs	r1, #1
 8006528:	4620      	mov	r0, r4
 800652a:	f000 fb17 	bl	8006b5c <__i2b>
 800652e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006530:	2b00      	cmp	r3, #0
 8006532:	4606      	mov	r6, r0
 8006534:	dd7c      	ble.n	8006630 <_dtoa_r+0x8d8>
 8006536:	461a      	mov	r2, r3
 8006538:	4601      	mov	r1, r0
 800653a:	4620      	mov	r0, r4
 800653c:	f000 fbca 	bl	8006cd4 <__pow5mult>
 8006540:	9b05      	ldr	r3, [sp, #20]
 8006542:	2b01      	cmp	r3, #1
 8006544:	4606      	mov	r6, r0
 8006546:	dd76      	ble.n	8006636 <_dtoa_r+0x8de>
 8006548:	2300      	movs	r3, #0
 800654a:	9306      	str	r3, [sp, #24]
 800654c:	6933      	ldr	r3, [r6, #16]
 800654e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006552:	6918      	ldr	r0, [r3, #16]
 8006554:	f000 fab2 	bl	8006abc <__hi0bits>
 8006558:	f1c0 0020 	rsb	r0, r0, #32
 800655c:	9b04      	ldr	r3, [sp, #16]
 800655e:	4418      	add	r0, r3
 8006560:	f010 001f 	ands.w	r0, r0, #31
 8006564:	f000 8086 	beq.w	8006674 <_dtoa_r+0x91c>
 8006568:	f1c0 0320 	rsb	r3, r0, #32
 800656c:	2b04      	cmp	r3, #4
 800656e:	dd7f      	ble.n	8006670 <_dtoa_r+0x918>
 8006570:	f1c0 001c 	rsb	r0, r0, #28
 8006574:	9b04      	ldr	r3, [sp, #16]
 8006576:	4403      	add	r3, r0
 8006578:	4480      	add	r8, r0
 800657a:	4405      	add	r5, r0
 800657c:	9304      	str	r3, [sp, #16]
 800657e:	f1b8 0f00 	cmp.w	r8, #0
 8006582:	dd05      	ble.n	8006590 <_dtoa_r+0x838>
 8006584:	4659      	mov	r1, fp
 8006586:	4642      	mov	r2, r8
 8006588:	4620      	mov	r0, r4
 800658a:	f000 fbfd 	bl	8006d88 <__lshift>
 800658e:	4683      	mov	fp, r0
 8006590:	9b04      	ldr	r3, [sp, #16]
 8006592:	2b00      	cmp	r3, #0
 8006594:	dd05      	ble.n	80065a2 <_dtoa_r+0x84a>
 8006596:	4631      	mov	r1, r6
 8006598:	461a      	mov	r2, r3
 800659a:	4620      	mov	r0, r4
 800659c:	f000 fbf4 	bl	8006d88 <__lshift>
 80065a0:	4606      	mov	r6, r0
 80065a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d069      	beq.n	800667c <_dtoa_r+0x924>
 80065a8:	4631      	mov	r1, r6
 80065aa:	4658      	mov	r0, fp
 80065ac:	f000 fc58 	bl	8006e60 <__mcmp>
 80065b0:	2800      	cmp	r0, #0
 80065b2:	da63      	bge.n	800667c <_dtoa_r+0x924>
 80065b4:	2300      	movs	r3, #0
 80065b6:	4659      	mov	r1, fp
 80065b8:	220a      	movs	r2, #10
 80065ba:	4620      	mov	r0, r4
 80065bc:	f000 fa34 	bl	8006a28 <__multadd>
 80065c0:	9b08      	ldr	r3, [sp, #32]
 80065c2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80065c6:	4683      	mov	fp, r0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	f000 818f 	beq.w	80068ec <_dtoa_r+0xb94>
 80065ce:	4639      	mov	r1, r7
 80065d0:	2300      	movs	r3, #0
 80065d2:	220a      	movs	r2, #10
 80065d4:	4620      	mov	r0, r4
 80065d6:	f000 fa27 	bl	8006a28 <__multadd>
 80065da:	f1b9 0f00 	cmp.w	r9, #0
 80065de:	4607      	mov	r7, r0
 80065e0:	f300 808e 	bgt.w	8006700 <_dtoa_r+0x9a8>
 80065e4:	9b05      	ldr	r3, [sp, #20]
 80065e6:	2b02      	cmp	r3, #2
 80065e8:	dc50      	bgt.n	800668c <_dtoa_r+0x934>
 80065ea:	e089      	b.n	8006700 <_dtoa_r+0x9a8>
 80065ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80065ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80065f2:	e75d      	b.n	80064b0 <_dtoa_r+0x758>
 80065f4:	9b01      	ldr	r3, [sp, #4]
 80065f6:	1e5e      	subs	r6, r3, #1
 80065f8:	9b06      	ldr	r3, [sp, #24]
 80065fa:	42b3      	cmp	r3, r6
 80065fc:	bfbf      	itttt	lt
 80065fe:	9b06      	ldrlt	r3, [sp, #24]
 8006600:	9606      	strlt	r6, [sp, #24]
 8006602:	1af2      	sublt	r2, r6, r3
 8006604:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8006606:	bfb6      	itet	lt
 8006608:	189b      	addlt	r3, r3, r2
 800660a:	1b9e      	subge	r6, r3, r6
 800660c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800660e:	9b01      	ldr	r3, [sp, #4]
 8006610:	bfb8      	it	lt
 8006612:	2600      	movlt	r6, #0
 8006614:	2b00      	cmp	r3, #0
 8006616:	bfb5      	itete	lt
 8006618:	eba8 0503 	sublt.w	r5, r8, r3
 800661c:	9b01      	ldrge	r3, [sp, #4]
 800661e:	2300      	movlt	r3, #0
 8006620:	4645      	movge	r5, r8
 8006622:	e747      	b.n	80064b4 <_dtoa_r+0x75c>
 8006624:	9e06      	ldr	r6, [sp, #24]
 8006626:	9f08      	ldr	r7, [sp, #32]
 8006628:	4645      	mov	r5, r8
 800662a:	e74c      	b.n	80064c6 <_dtoa_r+0x76e>
 800662c:	9a06      	ldr	r2, [sp, #24]
 800662e:	e775      	b.n	800651c <_dtoa_r+0x7c4>
 8006630:	9b05      	ldr	r3, [sp, #20]
 8006632:	2b01      	cmp	r3, #1
 8006634:	dc18      	bgt.n	8006668 <_dtoa_r+0x910>
 8006636:	9b02      	ldr	r3, [sp, #8]
 8006638:	b9b3      	cbnz	r3, 8006668 <_dtoa_r+0x910>
 800663a:	9b03      	ldr	r3, [sp, #12]
 800663c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006640:	b9a3      	cbnz	r3, 800666c <_dtoa_r+0x914>
 8006642:	9b03      	ldr	r3, [sp, #12]
 8006644:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006648:	0d1b      	lsrs	r3, r3, #20
 800664a:	051b      	lsls	r3, r3, #20
 800664c:	b12b      	cbz	r3, 800665a <_dtoa_r+0x902>
 800664e:	9b04      	ldr	r3, [sp, #16]
 8006650:	3301      	adds	r3, #1
 8006652:	9304      	str	r3, [sp, #16]
 8006654:	f108 0801 	add.w	r8, r8, #1
 8006658:	2301      	movs	r3, #1
 800665a:	9306      	str	r3, [sp, #24]
 800665c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800665e:	2b00      	cmp	r3, #0
 8006660:	f47f af74 	bne.w	800654c <_dtoa_r+0x7f4>
 8006664:	2001      	movs	r0, #1
 8006666:	e779      	b.n	800655c <_dtoa_r+0x804>
 8006668:	2300      	movs	r3, #0
 800666a:	e7f6      	b.n	800665a <_dtoa_r+0x902>
 800666c:	9b02      	ldr	r3, [sp, #8]
 800666e:	e7f4      	b.n	800665a <_dtoa_r+0x902>
 8006670:	d085      	beq.n	800657e <_dtoa_r+0x826>
 8006672:	4618      	mov	r0, r3
 8006674:	301c      	adds	r0, #28
 8006676:	e77d      	b.n	8006574 <_dtoa_r+0x81c>
 8006678:	40240000 	.word	0x40240000
 800667c:	9b01      	ldr	r3, [sp, #4]
 800667e:	2b00      	cmp	r3, #0
 8006680:	dc38      	bgt.n	80066f4 <_dtoa_r+0x99c>
 8006682:	9b05      	ldr	r3, [sp, #20]
 8006684:	2b02      	cmp	r3, #2
 8006686:	dd35      	ble.n	80066f4 <_dtoa_r+0x99c>
 8006688:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800668c:	f1b9 0f00 	cmp.w	r9, #0
 8006690:	d10d      	bne.n	80066ae <_dtoa_r+0x956>
 8006692:	4631      	mov	r1, r6
 8006694:	464b      	mov	r3, r9
 8006696:	2205      	movs	r2, #5
 8006698:	4620      	mov	r0, r4
 800669a:	f000 f9c5 	bl	8006a28 <__multadd>
 800669e:	4601      	mov	r1, r0
 80066a0:	4606      	mov	r6, r0
 80066a2:	4658      	mov	r0, fp
 80066a4:	f000 fbdc 	bl	8006e60 <__mcmp>
 80066a8:	2800      	cmp	r0, #0
 80066aa:	f73f adbd 	bgt.w	8006228 <_dtoa_r+0x4d0>
 80066ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066b0:	9d00      	ldr	r5, [sp, #0]
 80066b2:	ea6f 0a03 	mvn.w	sl, r3
 80066b6:	f04f 0800 	mov.w	r8, #0
 80066ba:	4631      	mov	r1, r6
 80066bc:	4620      	mov	r0, r4
 80066be:	f000 f991 	bl	80069e4 <_Bfree>
 80066c2:	2f00      	cmp	r7, #0
 80066c4:	f43f aeb4 	beq.w	8006430 <_dtoa_r+0x6d8>
 80066c8:	f1b8 0f00 	cmp.w	r8, #0
 80066cc:	d005      	beq.n	80066da <_dtoa_r+0x982>
 80066ce:	45b8      	cmp	r8, r7
 80066d0:	d003      	beq.n	80066da <_dtoa_r+0x982>
 80066d2:	4641      	mov	r1, r8
 80066d4:	4620      	mov	r0, r4
 80066d6:	f000 f985 	bl	80069e4 <_Bfree>
 80066da:	4639      	mov	r1, r7
 80066dc:	4620      	mov	r0, r4
 80066de:	f000 f981 	bl	80069e4 <_Bfree>
 80066e2:	e6a5      	b.n	8006430 <_dtoa_r+0x6d8>
 80066e4:	2600      	movs	r6, #0
 80066e6:	4637      	mov	r7, r6
 80066e8:	e7e1      	b.n	80066ae <_dtoa_r+0x956>
 80066ea:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80066ec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80066f0:	4637      	mov	r7, r6
 80066f2:	e599      	b.n	8006228 <_dtoa_r+0x4d0>
 80066f4:	9b08      	ldr	r3, [sp, #32]
 80066f6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	f000 80fd 	beq.w	80068fa <_dtoa_r+0xba2>
 8006700:	2d00      	cmp	r5, #0
 8006702:	dd05      	ble.n	8006710 <_dtoa_r+0x9b8>
 8006704:	4639      	mov	r1, r7
 8006706:	462a      	mov	r2, r5
 8006708:	4620      	mov	r0, r4
 800670a:	f000 fb3d 	bl	8006d88 <__lshift>
 800670e:	4607      	mov	r7, r0
 8006710:	9b06      	ldr	r3, [sp, #24]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d05c      	beq.n	80067d0 <_dtoa_r+0xa78>
 8006716:	6879      	ldr	r1, [r7, #4]
 8006718:	4620      	mov	r0, r4
 800671a:	f000 f923 	bl	8006964 <_Balloc>
 800671e:	4605      	mov	r5, r0
 8006720:	b928      	cbnz	r0, 800672e <_dtoa_r+0x9d6>
 8006722:	4b80      	ldr	r3, [pc, #512]	; (8006924 <_dtoa_r+0xbcc>)
 8006724:	4602      	mov	r2, r0
 8006726:	f240 21ea 	movw	r1, #746	; 0x2ea
 800672a:	f7ff bb2e 	b.w	8005d8a <_dtoa_r+0x32>
 800672e:	693a      	ldr	r2, [r7, #16]
 8006730:	3202      	adds	r2, #2
 8006732:	0092      	lsls	r2, r2, #2
 8006734:	f107 010c 	add.w	r1, r7, #12
 8006738:	300c      	adds	r0, #12
 800673a:	f000 f905 	bl	8006948 <memcpy>
 800673e:	2201      	movs	r2, #1
 8006740:	4629      	mov	r1, r5
 8006742:	4620      	mov	r0, r4
 8006744:	f000 fb20 	bl	8006d88 <__lshift>
 8006748:	9b00      	ldr	r3, [sp, #0]
 800674a:	3301      	adds	r3, #1
 800674c:	9301      	str	r3, [sp, #4]
 800674e:	9b00      	ldr	r3, [sp, #0]
 8006750:	444b      	add	r3, r9
 8006752:	9307      	str	r3, [sp, #28]
 8006754:	9b02      	ldr	r3, [sp, #8]
 8006756:	f003 0301 	and.w	r3, r3, #1
 800675a:	46b8      	mov	r8, r7
 800675c:	9306      	str	r3, [sp, #24]
 800675e:	4607      	mov	r7, r0
 8006760:	9b01      	ldr	r3, [sp, #4]
 8006762:	4631      	mov	r1, r6
 8006764:	3b01      	subs	r3, #1
 8006766:	4658      	mov	r0, fp
 8006768:	9302      	str	r3, [sp, #8]
 800676a:	f7ff fa67 	bl	8005c3c <quorem>
 800676e:	4603      	mov	r3, r0
 8006770:	3330      	adds	r3, #48	; 0x30
 8006772:	9004      	str	r0, [sp, #16]
 8006774:	4641      	mov	r1, r8
 8006776:	4658      	mov	r0, fp
 8006778:	9308      	str	r3, [sp, #32]
 800677a:	f000 fb71 	bl	8006e60 <__mcmp>
 800677e:	463a      	mov	r2, r7
 8006780:	4681      	mov	r9, r0
 8006782:	4631      	mov	r1, r6
 8006784:	4620      	mov	r0, r4
 8006786:	f000 fb87 	bl	8006e98 <__mdiff>
 800678a:	68c2      	ldr	r2, [r0, #12]
 800678c:	9b08      	ldr	r3, [sp, #32]
 800678e:	4605      	mov	r5, r0
 8006790:	bb02      	cbnz	r2, 80067d4 <_dtoa_r+0xa7c>
 8006792:	4601      	mov	r1, r0
 8006794:	4658      	mov	r0, fp
 8006796:	f000 fb63 	bl	8006e60 <__mcmp>
 800679a:	9b08      	ldr	r3, [sp, #32]
 800679c:	4602      	mov	r2, r0
 800679e:	4629      	mov	r1, r5
 80067a0:	4620      	mov	r0, r4
 80067a2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80067a6:	f000 f91d 	bl	80069e4 <_Bfree>
 80067aa:	9b05      	ldr	r3, [sp, #20]
 80067ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80067ae:	9d01      	ldr	r5, [sp, #4]
 80067b0:	ea43 0102 	orr.w	r1, r3, r2
 80067b4:	9b06      	ldr	r3, [sp, #24]
 80067b6:	430b      	orrs	r3, r1
 80067b8:	9b08      	ldr	r3, [sp, #32]
 80067ba:	d10d      	bne.n	80067d8 <_dtoa_r+0xa80>
 80067bc:	2b39      	cmp	r3, #57	; 0x39
 80067be:	d029      	beq.n	8006814 <_dtoa_r+0xabc>
 80067c0:	f1b9 0f00 	cmp.w	r9, #0
 80067c4:	dd01      	ble.n	80067ca <_dtoa_r+0xa72>
 80067c6:	9b04      	ldr	r3, [sp, #16]
 80067c8:	3331      	adds	r3, #49	; 0x31
 80067ca:	9a02      	ldr	r2, [sp, #8]
 80067cc:	7013      	strb	r3, [r2, #0]
 80067ce:	e774      	b.n	80066ba <_dtoa_r+0x962>
 80067d0:	4638      	mov	r0, r7
 80067d2:	e7b9      	b.n	8006748 <_dtoa_r+0x9f0>
 80067d4:	2201      	movs	r2, #1
 80067d6:	e7e2      	b.n	800679e <_dtoa_r+0xa46>
 80067d8:	f1b9 0f00 	cmp.w	r9, #0
 80067dc:	db06      	blt.n	80067ec <_dtoa_r+0xa94>
 80067de:	9905      	ldr	r1, [sp, #20]
 80067e0:	ea41 0909 	orr.w	r9, r1, r9
 80067e4:	9906      	ldr	r1, [sp, #24]
 80067e6:	ea59 0101 	orrs.w	r1, r9, r1
 80067ea:	d120      	bne.n	800682e <_dtoa_r+0xad6>
 80067ec:	2a00      	cmp	r2, #0
 80067ee:	ddec      	ble.n	80067ca <_dtoa_r+0xa72>
 80067f0:	4659      	mov	r1, fp
 80067f2:	2201      	movs	r2, #1
 80067f4:	4620      	mov	r0, r4
 80067f6:	9301      	str	r3, [sp, #4]
 80067f8:	f000 fac6 	bl	8006d88 <__lshift>
 80067fc:	4631      	mov	r1, r6
 80067fe:	4683      	mov	fp, r0
 8006800:	f000 fb2e 	bl	8006e60 <__mcmp>
 8006804:	2800      	cmp	r0, #0
 8006806:	9b01      	ldr	r3, [sp, #4]
 8006808:	dc02      	bgt.n	8006810 <_dtoa_r+0xab8>
 800680a:	d1de      	bne.n	80067ca <_dtoa_r+0xa72>
 800680c:	07da      	lsls	r2, r3, #31
 800680e:	d5dc      	bpl.n	80067ca <_dtoa_r+0xa72>
 8006810:	2b39      	cmp	r3, #57	; 0x39
 8006812:	d1d8      	bne.n	80067c6 <_dtoa_r+0xa6e>
 8006814:	9a02      	ldr	r2, [sp, #8]
 8006816:	2339      	movs	r3, #57	; 0x39
 8006818:	7013      	strb	r3, [r2, #0]
 800681a:	462b      	mov	r3, r5
 800681c:	461d      	mov	r5, r3
 800681e:	3b01      	subs	r3, #1
 8006820:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006824:	2a39      	cmp	r2, #57	; 0x39
 8006826:	d050      	beq.n	80068ca <_dtoa_r+0xb72>
 8006828:	3201      	adds	r2, #1
 800682a:	701a      	strb	r2, [r3, #0]
 800682c:	e745      	b.n	80066ba <_dtoa_r+0x962>
 800682e:	2a00      	cmp	r2, #0
 8006830:	dd03      	ble.n	800683a <_dtoa_r+0xae2>
 8006832:	2b39      	cmp	r3, #57	; 0x39
 8006834:	d0ee      	beq.n	8006814 <_dtoa_r+0xabc>
 8006836:	3301      	adds	r3, #1
 8006838:	e7c7      	b.n	80067ca <_dtoa_r+0xa72>
 800683a:	9a01      	ldr	r2, [sp, #4]
 800683c:	9907      	ldr	r1, [sp, #28]
 800683e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006842:	428a      	cmp	r2, r1
 8006844:	d02a      	beq.n	800689c <_dtoa_r+0xb44>
 8006846:	4659      	mov	r1, fp
 8006848:	2300      	movs	r3, #0
 800684a:	220a      	movs	r2, #10
 800684c:	4620      	mov	r0, r4
 800684e:	f000 f8eb 	bl	8006a28 <__multadd>
 8006852:	45b8      	cmp	r8, r7
 8006854:	4683      	mov	fp, r0
 8006856:	f04f 0300 	mov.w	r3, #0
 800685a:	f04f 020a 	mov.w	r2, #10
 800685e:	4641      	mov	r1, r8
 8006860:	4620      	mov	r0, r4
 8006862:	d107      	bne.n	8006874 <_dtoa_r+0xb1c>
 8006864:	f000 f8e0 	bl	8006a28 <__multadd>
 8006868:	4680      	mov	r8, r0
 800686a:	4607      	mov	r7, r0
 800686c:	9b01      	ldr	r3, [sp, #4]
 800686e:	3301      	adds	r3, #1
 8006870:	9301      	str	r3, [sp, #4]
 8006872:	e775      	b.n	8006760 <_dtoa_r+0xa08>
 8006874:	f000 f8d8 	bl	8006a28 <__multadd>
 8006878:	4639      	mov	r1, r7
 800687a:	4680      	mov	r8, r0
 800687c:	2300      	movs	r3, #0
 800687e:	220a      	movs	r2, #10
 8006880:	4620      	mov	r0, r4
 8006882:	f000 f8d1 	bl	8006a28 <__multadd>
 8006886:	4607      	mov	r7, r0
 8006888:	e7f0      	b.n	800686c <_dtoa_r+0xb14>
 800688a:	f1b9 0f00 	cmp.w	r9, #0
 800688e:	9a00      	ldr	r2, [sp, #0]
 8006890:	bfcc      	ite	gt
 8006892:	464d      	movgt	r5, r9
 8006894:	2501      	movle	r5, #1
 8006896:	4415      	add	r5, r2
 8006898:	f04f 0800 	mov.w	r8, #0
 800689c:	4659      	mov	r1, fp
 800689e:	2201      	movs	r2, #1
 80068a0:	4620      	mov	r0, r4
 80068a2:	9301      	str	r3, [sp, #4]
 80068a4:	f000 fa70 	bl	8006d88 <__lshift>
 80068a8:	4631      	mov	r1, r6
 80068aa:	4683      	mov	fp, r0
 80068ac:	f000 fad8 	bl	8006e60 <__mcmp>
 80068b0:	2800      	cmp	r0, #0
 80068b2:	dcb2      	bgt.n	800681a <_dtoa_r+0xac2>
 80068b4:	d102      	bne.n	80068bc <_dtoa_r+0xb64>
 80068b6:	9b01      	ldr	r3, [sp, #4]
 80068b8:	07db      	lsls	r3, r3, #31
 80068ba:	d4ae      	bmi.n	800681a <_dtoa_r+0xac2>
 80068bc:	462b      	mov	r3, r5
 80068be:	461d      	mov	r5, r3
 80068c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80068c4:	2a30      	cmp	r2, #48	; 0x30
 80068c6:	d0fa      	beq.n	80068be <_dtoa_r+0xb66>
 80068c8:	e6f7      	b.n	80066ba <_dtoa_r+0x962>
 80068ca:	9a00      	ldr	r2, [sp, #0]
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d1a5      	bne.n	800681c <_dtoa_r+0xac4>
 80068d0:	f10a 0a01 	add.w	sl, sl, #1
 80068d4:	2331      	movs	r3, #49	; 0x31
 80068d6:	e779      	b.n	80067cc <_dtoa_r+0xa74>
 80068d8:	4b13      	ldr	r3, [pc, #76]	; (8006928 <_dtoa_r+0xbd0>)
 80068da:	f7ff baaf 	b.w	8005e3c <_dtoa_r+0xe4>
 80068de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	f47f aa86 	bne.w	8005df2 <_dtoa_r+0x9a>
 80068e6:	4b11      	ldr	r3, [pc, #68]	; (800692c <_dtoa_r+0xbd4>)
 80068e8:	f7ff baa8 	b.w	8005e3c <_dtoa_r+0xe4>
 80068ec:	f1b9 0f00 	cmp.w	r9, #0
 80068f0:	dc03      	bgt.n	80068fa <_dtoa_r+0xba2>
 80068f2:	9b05      	ldr	r3, [sp, #20]
 80068f4:	2b02      	cmp	r3, #2
 80068f6:	f73f aec9 	bgt.w	800668c <_dtoa_r+0x934>
 80068fa:	9d00      	ldr	r5, [sp, #0]
 80068fc:	4631      	mov	r1, r6
 80068fe:	4658      	mov	r0, fp
 8006900:	f7ff f99c 	bl	8005c3c <quorem>
 8006904:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006908:	f805 3b01 	strb.w	r3, [r5], #1
 800690c:	9a00      	ldr	r2, [sp, #0]
 800690e:	1aaa      	subs	r2, r5, r2
 8006910:	4591      	cmp	r9, r2
 8006912:	ddba      	ble.n	800688a <_dtoa_r+0xb32>
 8006914:	4659      	mov	r1, fp
 8006916:	2300      	movs	r3, #0
 8006918:	220a      	movs	r2, #10
 800691a:	4620      	mov	r0, r4
 800691c:	f000 f884 	bl	8006a28 <__multadd>
 8006920:	4683      	mov	fp, r0
 8006922:	e7eb      	b.n	80068fc <_dtoa_r+0xba4>
 8006924:	0800962b 	.word	0x0800962b
 8006928:	08009584 	.word	0x08009584
 800692c:	080095a8 	.word	0x080095a8

08006930 <_localeconv_r>:
 8006930:	4800      	ldr	r0, [pc, #0]	; (8006934 <_localeconv_r+0x4>)
 8006932:	4770      	bx	lr
 8006934:	20000168 	.word	0x20000168

08006938 <malloc>:
 8006938:	4b02      	ldr	r3, [pc, #8]	; (8006944 <malloc+0xc>)
 800693a:	4601      	mov	r1, r0
 800693c:	6818      	ldr	r0, [r3, #0]
 800693e:	f000 bbef 	b.w	8007120 <_malloc_r>
 8006942:	bf00      	nop
 8006944:	20000014 	.word	0x20000014

08006948 <memcpy>:
 8006948:	440a      	add	r2, r1
 800694a:	4291      	cmp	r1, r2
 800694c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006950:	d100      	bne.n	8006954 <memcpy+0xc>
 8006952:	4770      	bx	lr
 8006954:	b510      	push	{r4, lr}
 8006956:	f811 4b01 	ldrb.w	r4, [r1], #1
 800695a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800695e:	4291      	cmp	r1, r2
 8006960:	d1f9      	bne.n	8006956 <memcpy+0xe>
 8006962:	bd10      	pop	{r4, pc}

08006964 <_Balloc>:
 8006964:	b570      	push	{r4, r5, r6, lr}
 8006966:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006968:	4604      	mov	r4, r0
 800696a:	460d      	mov	r5, r1
 800696c:	b976      	cbnz	r6, 800698c <_Balloc+0x28>
 800696e:	2010      	movs	r0, #16
 8006970:	f7ff ffe2 	bl	8006938 <malloc>
 8006974:	4602      	mov	r2, r0
 8006976:	6260      	str	r0, [r4, #36]	; 0x24
 8006978:	b920      	cbnz	r0, 8006984 <_Balloc+0x20>
 800697a:	4b18      	ldr	r3, [pc, #96]	; (80069dc <_Balloc+0x78>)
 800697c:	4818      	ldr	r0, [pc, #96]	; (80069e0 <_Balloc+0x7c>)
 800697e:	2166      	movs	r1, #102	; 0x66
 8006980:	f000 fd94 	bl	80074ac <__assert_func>
 8006984:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006988:	6006      	str	r6, [r0, #0]
 800698a:	60c6      	str	r6, [r0, #12]
 800698c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800698e:	68f3      	ldr	r3, [r6, #12]
 8006990:	b183      	cbz	r3, 80069b4 <_Balloc+0x50>
 8006992:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006994:	68db      	ldr	r3, [r3, #12]
 8006996:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800699a:	b9b8      	cbnz	r0, 80069cc <_Balloc+0x68>
 800699c:	2101      	movs	r1, #1
 800699e:	fa01 f605 	lsl.w	r6, r1, r5
 80069a2:	1d72      	adds	r2, r6, #5
 80069a4:	0092      	lsls	r2, r2, #2
 80069a6:	4620      	mov	r0, r4
 80069a8:	f000 fb5a 	bl	8007060 <_calloc_r>
 80069ac:	b160      	cbz	r0, 80069c8 <_Balloc+0x64>
 80069ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80069b2:	e00e      	b.n	80069d2 <_Balloc+0x6e>
 80069b4:	2221      	movs	r2, #33	; 0x21
 80069b6:	2104      	movs	r1, #4
 80069b8:	4620      	mov	r0, r4
 80069ba:	f000 fb51 	bl	8007060 <_calloc_r>
 80069be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069c0:	60f0      	str	r0, [r6, #12]
 80069c2:	68db      	ldr	r3, [r3, #12]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d1e4      	bne.n	8006992 <_Balloc+0x2e>
 80069c8:	2000      	movs	r0, #0
 80069ca:	bd70      	pop	{r4, r5, r6, pc}
 80069cc:	6802      	ldr	r2, [r0, #0]
 80069ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80069d2:	2300      	movs	r3, #0
 80069d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80069d8:	e7f7      	b.n	80069ca <_Balloc+0x66>
 80069da:	bf00      	nop
 80069dc:	080095b5 	.word	0x080095b5
 80069e0:	0800963c 	.word	0x0800963c

080069e4 <_Bfree>:
 80069e4:	b570      	push	{r4, r5, r6, lr}
 80069e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80069e8:	4605      	mov	r5, r0
 80069ea:	460c      	mov	r4, r1
 80069ec:	b976      	cbnz	r6, 8006a0c <_Bfree+0x28>
 80069ee:	2010      	movs	r0, #16
 80069f0:	f7ff ffa2 	bl	8006938 <malloc>
 80069f4:	4602      	mov	r2, r0
 80069f6:	6268      	str	r0, [r5, #36]	; 0x24
 80069f8:	b920      	cbnz	r0, 8006a04 <_Bfree+0x20>
 80069fa:	4b09      	ldr	r3, [pc, #36]	; (8006a20 <_Bfree+0x3c>)
 80069fc:	4809      	ldr	r0, [pc, #36]	; (8006a24 <_Bfree+0x40>)
 80069fe:	218a      	movs	r1, #138	; 0x8a
 8006a00:	f000 fd54 	bl	80074ac <__assert_func>
 8006a04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a08:	6006      	str	r6, [r0, #0]
 8006a0a:	60c6      	str	r6, [r0, #12]
 8006a0c:	b13c      	cbz	r4, 8006a1e <_Bfree+0x3a>
 8006a0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006a10:	6862      	ldr	r2, [r4, #4]
 8006a12:	68db      	ldr	r3, [r3, #12]
 8006a14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a18:	6021      	str	r1, [r4, #0]
 8006a1a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006a1e:	bd70      	pop	{r4, r5, r6, pc}
 8006a20:	080095b5 	.word	0x080095b5
 8006a24:	0800963c 	.word	0x0800963c

08006a28 <__multadd>:
 8006a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a2c:	690e      	ldr	r6, [r1, #16]
 8006a2e:	4607      	mov	r7, r0
 8006a30:	4698      	mov	r8, r3
 8006a32:	460c      	mov	r4, r1
 8006a34:	f101 0014 	add.w	r0, r1, #20
 8006a38:	2300      	movs	r3, #0
 8006a3a:	6805      	ldr	r5, [r0, #0]
 8006a3c:	b2a9      	uxth	r1, r5
 8006a3e:	fb02 8101 	mla	r1, r2, r1, r8
 8006a42:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006a46:	0c2d      	lsrs	r5, r5, #16
 8006a48:	fb02 c505 	mla	r5, r2, r5, ip
 8006a4c:	b289      	uxth	r1, r1
 8006a4e:	3301      	adds	r3, #1
 8006a50:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006a54:	429e      	cmp	r6, r3
 8006a56:	f840 1b04 	str.w	r1, [r0], #4
 8006a5a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006a5e:	dcec      	bgt.n	8006a3a <__multadd+0x12>
 8006a60:	f1b8 0f00 	cmp.w	r8, #0
 8006a64:	d022      	beq.n	8006aac <__multadd+0x84>
 8006a66:	68a3      	ldr	r3, [r4, #8]
 8006a68:	42b3      	cmp	r3, r6
 8006a6a:	dc19      	bgt.n	8006aa0 <__multadd+0x78>
 8006a6c:	6861      	ldr	r1, [r4, #4]
 8006a6e:	4638      	mov	r0, r7
 8006a70:	3101      	adds	r1, #1
 8006a72:	f7ff ff77 	bl	8006964 <_Balloc>
 8006a76:	4605      	mov	r5, r0
 8006a78:	b928      	cbnz	r0, 8006a86 <__multadd+0x5e>
 8006a7a:	4602      	mov	r2, r0
 8006a7c:	4b0d      	ldr	r3, [pc, #52]	; (8006ab4 <__multadd+0x8c>)
 8006a7e:	480e      	ldr	r0, [pc, #56]	; (8006ab8 <__multadd+0x90>)
 8006a80:	21b5      	movs	r1, #181	; 0xb5
 8006a82:	f000 fd13 	bl	80074ac <__assert_func>
 8006a86:	6922      	ldr	r2, [r4, #16]
 8006a88:	3202      	adds	r2, #2
 8006a8a:	f104 010c 	add.w	r1, r4, #12
 8006a8e:	0092      	lsls	r2, r2, #2
 8006a90:	300c      	adds	r0, #12
 8006a92:	f7ff ff59 	bl	8006948 <memcpy>
 8006a96:	4621      	mov	r1, r4
 8006a98:	4638      	mov	r0, r7
 8006a9a:	f7ff ffa3 	bl	80069e4 <_Bfree>
 8006a9e:	462c      	mov	r4, r5
 8006aa0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006aa4:	3601      	adds	r6, #1
 8006aa6:	f8c3 8014 	str.w	r8, [r3, #20]
 8006aaa:	6126      	str	r6, [r4, #16]
 8006aac:	4620      	mov	r0, r4
 8006aae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ab2:	bf00      	nop
 8006ab4:	0800962b 	.word	0x0800962b
 8006ab8:	0800963c 	.word	0x0800963c

08006abc <__hi0bits>:
 8006abc:	0c03      	lsrs	r3, r0, #16
 8006abe:	041b      	lsls	r3, r3, #16
 8006ac0:	b9d3      	cbnz	r3, 8006af8 <__hi0bits+0x3c>
 8006ac2:	0400      	lsls	r0, r0, #16
 8006ac4:	2310      	movs	r3, #16
 8006ac6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006aca:	bf04      	itt	eq
 8006acc:	0200      	lsleq	r0, r0, #8
 8006ace:	3308      	addeq	r3, #8
 8006ad0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006ad4:	bf04      	itt	eq
 8006ad6:	0100      	lsleq	r0, r0, #4
 8006ad8:	3304      	addeq	r3, #4
 8006ada:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006ade:	bf04      	itt	eq
 8006ae0:	0080      	lsleq	r0, r0, #2
 8006ae2:	3302      	addeq	r3, #2
 8006ae4:	2800      	cmp	r0, #0
 8006ae6:	db05      	blt.n	8006af4 <__hi0bits+0x38>
 8006ae8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006aec:	f103 0301 	add.w	r3, r3, #1
 8006af0:	bf08      	it	eq
 8006af2:	2320      	moveq	r3, #32
 8006af4:	4618      	mov	r0, r3
 8006af6:	4770      	bx	lr
 8006af8:	2300      	movs	r3, #0
 8006afa:	e7e4      	b.n	8006ac6 <__hi0bits+0xa>

08006afc <__lo0bits>:
 8006afc:	6803      	ldr	r3, [r0, #0]
 8006afe:	f013 0207 	ands.w	r2, r3, #7
 8006b02:	4601      	mov	r1, r0
 8006b04:	d00b      	beq.n	8006b1e <__lo0bits+0x22>
 8006b06:	07da      	lsls	r2, r3, #31
 8006b08:	d424      	bmi.n	8006b54 <__lo0bits+0x58>
 8006b0a:	0798      	lsls	r0, r3, #30
 8006b0c:	bf49      	itett	mi
 8006b0e:	085b      	lsrmi	r3, r3, #1
 8006b10:	089b      	lsrpl	r3, r3, #2
 8006b12:	2001      	movmi	r0, #1
 8006b14:	600b      	strmi	r3, [r1, #0]
 8006b16:	bf5c      	itt	pl
 8006b18:	600b      	strpl	r3, [r1, #0]
 8006b1a:	2002      	movpl	r0, #2
 8006b1c:	4770      	bx	lr
 8006b1e:	b298      	uxth	r0, r3
 8006b20:	b9b0      	cbnz	r0, 8006b50 <__lo0bits+0x54>
 8006b22:	0c1b      	lsrs	r3, r3, #16
 8006b24:	2010      	movs	r0, #16
 8006b26:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006b2a:	bf04      	itt	eq
 8006b2c:	0a1b      	lsreq	r3, r3, #8
 8006b2e:	3008      	addeq	r0, #8
 8006b30:	071a      	lsls	r2, r3, #28
 8006b32:	bf04      	itt	eq
 8006b34:	091b      	lsreq	r3, r3, #4
 8006b36:	3004      	addeq	r0, #4
 8006b38:	079a      	lsls	r2, r3, #30
 8006b3a:	bf04      	itt	eq
 8006b3c:	089b      	lsreq	r3, r3, #2
 8006b3e:	3002      	addeq	r0, #2
 8006b40:	07da      	lsls	r2, r3, #31
 8006b42:	d403      	bmi.n	8006b4c <__lo0bits+0x50>
 8006b44:	085b      	lsrs	r3, r3, #1
 8006b46:	f100 0001 	add.w	r0, r0, #1
 8006b4a:	d005      	beq.n	8006b58 <__lo0bits+0x5c>
 8006b4c:	600b      	str	r3, [r1, #0]
 8006b4e:	4770      	bx	lr
 8006b50:	4610      	mov	r0, r2
 8006b52:	e7e8      	b.n	8006b26 <__lo0bits+0x2a>
 8006b54:	2000      	movs	r0, #0
 8006b56:	4770      	bx	lr
 8006b58:	2020      	movs	r0, #32
 8006b5a:	4770      	bx	lr

08006b5c <__i2b>:
 8006b5c:	b510      	push	{r4, lr}
 8006b5e:	460c      	mov	r4, r1
 8006b60:	2101      	movs	r1, #1
 8006b62:	f7ff feff 	bl	8006964 <_Balloc>
 8006b66:	4602      	mov	r2, r0
 8006b68:	b928      	cbnz	r0, 8006b76 <__i2b+0x1a>
 8006b6a:	4b05      	ldr	r3, [pc, #20]	; (8006b80 <__i2b+0x24>)
 8006b6c:	4805      	ldr	r0, [pc, #20]	; (8006b84 <__i2b+0x28>)
 8006b6e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006b72:	f000 fc9b 	bl	80074ac <__assert_func>
 8006b76:	2301      	movs	r3, #1
 8006b78:	6144      	str	r4, [r0, #20]
 8006b7a:	6103      	str	r3, [r0, #16]
 8006b7c:	bd10      	pop	{r4, pc}
 8006b7e:	bf00      	nop
 8006b80:	0800962b 	.word	0x0800962b
 8006b84:	0800963c 	.word	0x0800963c

08006b88 <__multiply>:
 8006b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b8c:	4614      	mov	r4, r2
 8006b8e:	690a      	ldr	r2, [r1, #16]
 8006b90:	6923      	ldr	r3, [r4, #16]
 8006b92:	429a      	cmp	r2, r3
 8006b94:	bfb8      	it	lt
 8006b96:	460b      	movlt	r3, r1
 8006b98:	460d      	mov	r5, r1
 8006b9a:	bfbc      	itt	lt
 8006b9c:	4625      	movlt	r5, r4
 8006b9e:	461c      	movlt	r4, r3
 8006ba0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006ba4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006ba8:	68ab      	ldr	r3, [r5, #8]
 8006baa:	6869      	ldr	r1, [r5, #4]
 8006bac:	eb0a 0709 	add.w	r7, sl, r9
 8006bb0:	42bb      	cmp	r3, r7
 8006bb2:	b085      	sub	sp, #20
 8006bb4:	bfb8      	it	lt
 8006bb6:	3101      	addlt	r1, #1
 8006bb8:	f7ff fed4 	bl	8006964 <_Balloc>
 8006bbc:	b930      	cbnz	r0, 8006bcc <__multiply+0x44>
 8006bbe:	4602      	mov	r2, r0
 8006bc0:	4b42      	ldr	r3, [pc, #264]	; (8006ccc <__multiply+0x144>)
 8006bc2:	4843      	ldr	r0, [pc, #268]	; (8006cd0 <__multiply+0x148>)
 8006bc4:	f240 115d 	movw	r1, #349	; 0x15d
 8006bc8:	f000 fc70 	bl	80074ac <__assert_func>
 8006bcc:	f100 0614 	add.w	r6, r0, #20
 8006bd0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006bd4:	4633      	mov	r3, r6
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	4543      	cmp	r3, r8
 8006bda:	d31e      	bcc.n	8006c1a <__multiply+0x92>
 8006bdc:	f105 0c14 	add.w	ip, r5, #20
 8006be0:	f104 0314 	add.w	r3, r4, #20
 8006be4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006be8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8006bec:	9202      	str	r2, [sp, #8]
 8006bee:	ebac 0205 	sub.w	r2, ip, r5
 8006bf2:	3a15      	subs	r2, #21
 8006bf4:	f022 0203 	bic.w	r2, r2, #3
 8006bf8:	3204      	adds	r2, #4
 8006bfa:	f105 0115 	add.w	r1, r5, #21
 8006bfe:	458c      	cmp	ip, r1
 8006c00:	bf38      	it	cc
 8006c02:	2204      	movcc	r2, #4
 8006c04:	9201      	str	r2, [sp, #4]
 8006c06:	9a02      	ldr	r2, [sp, #8]
 8006c08:	9303      	str	r3, [sp, #12]
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d808      	bhi.n	8006c20 <__multiply+0x98>
 8006c0e:	2f00      	cmp	r7, #0
 8006c10:	dc55      	bgt.n	8006cbe <__multiply+0x136>
 8006c12:	6107      	str	r7, [r0, #16]
 8006c14:	b005      	add	sp, #20
 8006c16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c1a:	f843 2b04 	str.w	r2, [r3], #4
 8006c1e:	e7db      	b.n	8006bd8 <__multiply+0x50>
 8006c20:	f8b3 a000 	ldrh.w	sl, [r3]
 8006c24:	f1ba 0f00 	cmp.w	sl, #0
 8006c28:	d020      	beq.n	8006c6c <__multiply+0xe4>
 8006c2a:	f105 0e14 	add.w	lr, r5, #20
 8006c2e:	46b1      	mov	r9, r6
 8006c30:	2200      	movs	r2, #0
 8006c32:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006c36:	f8d9 b000 	ldr.w	fp, [r9]
 8006c3a:	b2a1      	uxth	r1, r4
 8006c3c:	fa1f fb8b 	uxth.w	fp, fp
 8006c40:	fb0a b101 	mla	r1, sl, r1, fp
 8006c44:	4411      	add	r1, r2
 8006c46:	f8d9 2000 	ldr.w	r2, [r9]
 8006c4a:	0c24      	lsrs	r4, r4, #16
 8006c4c:	0c12      	lsrs	r2, r2, #16
 8006c4e:	fb0a 2404 	mla	r4, sl, r4, r2
 8006c52:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006c56:	b289      	uxth	r1, r1
 8006c58:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006c5c:	45f4      	cmp	ip, lr
 8006c5e:	f849 1b04 	str.w	r1, [r9], #4
 8006c62:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8006c66:	d8e4      	bhi.n	8006c32 <__multiply+0xaa>
 8006c68:	9901      	ldr	r1, [sp, #4]
 8006c6a:	5072      	str	r2, [r6, r1]
 8006c6c:	9a03      	ldr	r2, [sp, #12]
 8006c6e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006c72:	3304      	adds	r3, #4
 8006c74:	f1b9 0f00 	cmp.w	r9, #0
 8006c78:	d01f      	beq.n	8006cba <__multiply+0x132>
 8006c7a:	6834      	ldr	r4, [r6, #0]
 8006c7c:	f105 0114 	add.w	r1, r5, #20
 8006c80:	46b6      	mov	lr, r6
 8006c82:	f04f 0a00 	mov.w	sl, #0
 8006c86:	880a      	ldrh	r2, [r1, #0]
 8006c88:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006c8c:	fb09 b202 	mla	r2, r9, r2, fp
 8006c90:	4492      	add	sl, r2
 8006c92:	b2a4      	uxth	r4, r4
 8006c94:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006c98:	f84e 4b04 	str.w	r4, [lr], #4
 8006c9c:	f851 4b04 	ldr.w	r4, [r1], #4
 8006ca0:	f8be 2000 	ldrh.w	r2, [lr]
 8006ca4:	0c24      	lsrs	r4, r4, #16
 8006ca6:	fb09 2404 	mla	r4, r9, r4, r2
 8006caa:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8006cae:	458c      	cmp	ip, r1
 8006cb0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006cb4:	d8e7      	bhi.n	8006c86 <__multiply+0xfe>
 8006cb6:	9a01      	ldr	r2, [sp, #4]
 8006cb8:	50b4      	str	r4, [r6, r2]
 8006cba:	3604      	adds	r6, #4
 8006cbc:	e7a3      	b.n	8006c06 <__multiply+0x7e>
 8006cbe:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d1a5      	bne.n	8006c12 <__multiply+0x8a>
 8006cc6:	3f01      	subs	r7, #1
 8006cc8:	e7a1      	b.n	8006c0e <__multiply+0x86>
 8006cca:	bf00      	nop
 8006ccc:	0800962b 	.word	0x0800962b
 8006cd0:	0800963c 	.word	0x0800963c

08006cd4 <__pow5mult>:
 8006cd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006cd8:	4615      	mov	r5, r2
 8006cda:	f012 0203 	ands.w	r2, r2, #3
 8006cde:	4606      	mov	r6, r0
 8006ce0:	460f      	mov	r7, r1
 8006ce2:	d007      	beq.n	8006cf4 <__pow5mult+0x20>
 8006ce4:	4c25      	ldr	r4, [pc, #148]	; (8006d7c <__pow5mult+0xa8>)
 8006ce6:	3a01      	subs	r2, #1
 8006ce8:	2300      	movs	r3, #0
 8006cea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006cee:	f7ff fe9b 	bl	8006a28 <__multadd>
 8006cf2:	4607      	mov	r7, r0
 8006cf4:	10ad      	asrs	r5, r5, #2
 8006cf6:	d03d      	beq.n	8006d74 <__pow5mult+0xa0>
 8006cf8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006cfa:	b97c      	cbnz	r4, 8006d1c <__pow5mult+0x48>
 8006cfc:	2010      	movs	r0, #16
 8006cfe:	f7ff fe1b 	bl	8006938 <malloc>
 8006d02:	4602      	mov	r2, r0
 8006d04:	6270      	str	r0, [r6, #36]	; 0x24
 8006d06:	b928      	cbnz	r0, 8006d14 <__pow5mult+0x40>
 8006d08:	4b1d      	ldr	r3, [pc, #116]	; (8006d80 <__pow5mult+0xac>)
 8006d0a:	481e      	ldr	r0, [pc, #120]	; (8006d84 <__pow5mult+0xb0>)
 8006d0c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006d10:	f000 fbcc 	bl	80074ac <__assert_func>
 8006d14:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006d18:	6004      	str	r4, [r0, #0]
 8006d1a:	60c4      	str	r4, [r0, #12]
 8006d1c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006d20:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006d24:	b94c      	cbnz	r4, 8006d3a <__pow5mult+0x66>
 8006d26:	f240 2171 	movw	r1, #625	; 0x271
 8006d2a:	4630      	mov	r0, r6
 8006d2c:	f7ff ff16 	bl	8006b5c <__i2b>
 8006d30:	2300      	movs	r3, #0
 8006d32:	f8c8 0008 	str.w	r0, [r8, #8]
 8006d36:	4604      	mov	r4, r0
 8006d38:	6003      	str	r3, [r0, #0]
 8006d3a:	f04f 0900 	mov.w	r9, #0
 8006d3e:	07eb      	lsls	r3, r5, #31
 8006d40:	d50a      	bpl.n	8006d58 <__pow5mult+0x84>
 8006d42:	4639      	mov	r1, r7
 8006d44:	4622      	mov	r2, r4
 8006d46:	4630      	mov	r0, r6
 8006d48:	f7ff ff1e 	bl	8006b88 <__multiply>
 8006d4c:	4639      	mov	r1, r7
 8006d4e:	4680      	mov	r8, r0
 8006d50:	4630      	mov	r0, r6
 8006d52:	f7ff fe47 	bl	80069e4 <_Bfree>
 8006d56:	4647      	mov	r7, r8
 8006d58:	106d      	asrs	r5, r5, #1
 8006d5a:	d00b      	beq.n	8006d74 <__pow5mult+0xa0>
 8006d5c:	6820      	ldr	r0, [r4, #0]
 8006d5e:	b938      	cbnz	r0, 8006d70 <__pow5mult+0x9c>
 8006d60:	4622      	mov	r2, r4
 8006d62:	4621      	mov	r1, r4
 8006d64:	4630      	mov	r0, r6
 8006d66:	f7ff ff0f 	bl	8006b88 <__multiply>
 8006d6a:	6020      	str	r0, [r4, #0]
 8006d6c:	f8c0 9000 	str.w	r9, [r0]
 8006d70:	4604      	mov	r4, r0
 8006d72:	e7e4      	b.n	8006d3e <__pow5mult+0x6a>
 8006d74:	4638      	mov	r0, r7
 8006d76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d7a:	bf00      	nop
 8006d7c:	08009790 	.word	0x08009790
 8006d80:	080095b5 	.word	0x080095b5
 8006d84:	0800963c 	.word	0x0800963c

08006d88 <__lshift>:
 8006d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d8c:	460c      	mov	r4, r1
 8006d8e:	6849      	ldr	r1, [r1, #4]
 8006d90:	6923      	ldr	r3, [r4, #16]
 8006d92:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006d96:	68a3      	ldr	r3, [r4, #8]
 8006d98:	4607      	mov	r7, r0
 8006d9a:	4691      	mov	r9, r2
 8006d9c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006da0:	f108 0601 	add.w	r6, r8, #1
 8006da4:	42b3      	cmp	r3, r6
 8006da6:	db0b      	blt.n	8006dc0 <__lshift+0x38>
 8006da8:	4638      	mov	r0, r7
 8006daa:	f7ff fddb 	bl	8006964 <_Balloc>
 8006dae:	4605      	mov	r5, r0
 8006db0:	b948      	cbnz	r0, 8006dc6 <__lshift+0x3e>
 8006db2:	4602      	mov	r2, r0
 8006db4:	4b28      	ldr	r3, [pc, #160]	; (8006e58 <__lshift+0xd0>)
 8006db6:	4829      	ldr	r0, [pc, #164]	; (8006e5c <__lshift+0xd4>)
 8006db8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006dbc:	f000 fb76 	bl	80074ac <__assert_func>
 8006dc0:	3101      	adds	r1, #1
 8006dc2:	005b      	lsls	r3, r3, #1
 8006dc4:	e7ee      	b.n	8006da4 <__lshift+0x1c>
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	f100 0114 	add.w	r1, r0, #20
 8006dcc:	f100 0210 	add.w	r2, r0, #16
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	4553      	cmp	r3, sl
 8006dd4:	db33      	blt.n	8006e3e <__lshift+0xb6>
 8006dd6:	6920      	ldr	r0, [r4, #16]
 8006dd8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006ddc:	f104 0314 	add.w	r3, r4, #20
 8006de0:	f019 091f 	ands.w	r9, r9, #31
 8006de4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006de8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006dec:	d02b      	beq.n	8006e46 <__lshift+0xbe>
 8006dee:	f1c9 0e20 	rsb	lr, r9, #32
 8006df2:	468a      	mov	sl, r1
 8006df4:	2200      	movs	r2, #0
 8006df6:	6818      	ldr	r0, [r3, #0]
 8006df8:	fa00 f009 	lsl.w	r0, r0, r9
 8006dfc:	4302      	orrs	r2, r0
 8006dfe:	f84a 2b04 	str.w	r2, [sl], #4
 8006e02:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e06:	459c      	cmp	ip, r3
 8006e08:	fa22 f20e 	lsr.w	r2, r2, lr
 8006e0c:	d8f3      	bhi.n	8006df6 <__lshift+0x6e>
 8006e0e:	ebac 0304 	sub.w	r3, ip, r4
 8006e12:	3b15      	subs	r3, #21
 8006e14:	f023 0303 	bic.w	r3, r3, #3
 8006e18:	3304      	adds	r3, #4
 8006e1a:	f104 0015 	add.w	r0, r4, #21
 8006e1e:	4584      	cmp	ip, r0
 8006e20:	bf38      	it	cc
 8006e22:	2304      	movcc	r3, #4
 8006e24:	50ca      	str	r2, [r1, r3]
 8006e26:	b10a      	cbz	r2, 8006e2c <__lshift+0xa4>
 8006e28:	f108 0602 	add.w	r6, r8, #2
 8006e2c:	3e01      	subs	r6, #1
 8006e2e:	4638      	mov	r0, r7
 8006e30:	612e      	str	r6, [r5, #16]
 8006e32:	4621      	mov	r1, r4
 8006e34:	f7ff fdd6 	bl	80069e4 <_Bfree>
 8006e38:	4628      	mov	r0, r5
 8006e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e3e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006e42:	3301      	adds	r3, #1
 8006e44:	e7c5      	b.n	8006dd2 <__lshift+0x4a>
 8006e46:	3904      	subs	r1, #4
 8006e48:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e4c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006e50:	459c      	cmp	ip, r3
 8006e52:	d8f9      	bhi.n	8006e48 <__lshift+0xc0>
 8006e54:	e7ea      	b.n	8006e2c <__lshift+0xa4>
 8006e56:	bf00      	nop
 8006e58:	0800962b 	.word	0x0800962b
 8006e5c:	0800963c 	.word	0x0800963c

08006e60 <__mcmp>:
 8006e60:	b530      	push	{r4, r5, lr}
 8006e62:	6902      	ldr	r2, [r0, #16]
 8006e64:	690c      	ldr	r4, [r1, #16]
 8006e66:	1b12      	subs	r2, r2, r4
 8006e68:	d10e      	bne.n	8006e88 <__mcmp+0x28>
 8006e6a:	f100 0314 	add.w	r3, r0, #20
 8006e6e:	3114      	adds	r1, #20
 8006e70:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006e74:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006e78:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006e7c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006e80:	42a5      	cmp	r5, r4
 8006e82:	d003      	beq.n	8006e8c <__mcmp+0x2c>
 8006e84:	d305      	bcc.n	8006e92 <__mcmp+0x32>
 8006e86:	2201      	movs	r2, #1
 8006e88:	4610      	mov	r0, r2
 8006e8a:	bd30      	pop	{r4, r5, pc}
 8006e8c:	4283      	cmp	r3, r0
 8006e8e:	d3f3      	bcc.n	8006e78 <__mcmp+0x18>
 8006e90:	e7fa      	b.n	8006e88 <__mcmp+0x28>
 8006e92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006e96:	e7f7      	b.n	8006e88 <__mcmp+0x28>

08006e98 <__mdiff>:
 8006e98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e9c:	460c      	mov	r4, r1
 8006e9e:	4606      	mov	r6, r0
 8006ea0:	4611      	mov	r1, r2
 8006ea2:	4620      	mov	r0, r4
 8006ea4:	4617      	mov	r7, r2
 8006ea6:	f7ff ffdb 	bl	8006e60 <__mcmp>
 8006eaa:	1e05      	subs	r5, r0, #0
 8006eac:	d110      	bne.n	8006ed0 <__mdiff+0x38>
 8006eae:	4629      	mov	r1, r5
 8006eb0:	4630      	mov	r0, r6
 8006eb2:	f7ff fd57 	bl	8006964 <_Balloc>
 8006eb6:	b930      	cbnz	r0, 8006ec6 <__mdiff+0x2e>
 8006eb8:	4b39      	ldr	r3, [pc, #228]	; (8006fa0 <__mdiff+0x108>)
 8006eba:	4602      	mov	r2, r0
 8006ebc:	f240 2132 	movw	r1, #562	; 0x232
 8006ec0:	4838      	ldr	r0, [pc, #224]	; (8006fa4 <__mdiff+0x10c>)
 8006ec2:	f000 faf3 	bl	80074ac <__assert_func>
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006ecc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ed0:	bfa4      	itt	ge
 8006ed2:	463b      	movge	r3, r7
 8006ed4:	4627      	movge	r7, r4
 8006ed6:	4630      	mov	r0, r6
 8006ed8:	6879      	ldr	r1, [r7, #4]
 8006eda:	bfa6      	itte	ge
 8006edc:	461c      	movge	r4, r3
 8006ede:	2500      	movge	r5, #0
 8006ee0:	2501      	movlt	r5, #1
 8006ee2:	f7ff fd3f 	bl	8006964 <_Balloc>
 8006ee6:	b920      	cbnz	r0, 8006ef2 <__mdiff+0x5a>
 8006ee8:	4b2d      	ldr	r3, [pc, #180]	; (8006fa0 <__mdiff+0x108>)
 8006eea:	4602      	mov	r2, r0
 8006eec:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006ef0:	e7e6      	b.n	8006ec0 <__mdiff+0x28>
 8006ef2:	693e      	ldr	r6, [r7, #16]
 8006ef4:	60c5      	str	r5, [r0, #12]
 8006ef6:	6925      	ldr	r5, [r4, #16]
 8006ef8:	f107 0114 	add.w	r1, r7, #20
 8006efc:	f104 0914 	add.w	r9, r4, #20
 8006f00:	f100 0e14 	add.w	lr, r0, #20
 8006f04:	f107 0210 	add.w	r2, r7, #16
 8006f08:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8006f0c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8006f10:	46f2      	mov	sl, lr
 8006f12:	2700      	movs	r7, #0
 8006f14:	f859 3b04 	ldr.w	r3, [r9], #4
 8006f18:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006f1c:	fa1f f883 	uxth.w	r8, r3
 8006f20:	fa17 f78b 	uxtah	r7, r7, fp
 8006f24:	0c1b      	lsrs	r3, r3, #16
 8006f26:	eba7 0808 	sub.w	r8, r7, r8
 8006f2a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006f2e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006f32:	fa1f f888 	uxth.w	r8, r8
 8006f36:	141f      	asrs	r7, r3, #16
 8006f38:	454d      	cmp	r5, r9
 8006f3a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006f3e:	f84a 3b04 	str.w	r3, [sl], #4
 8006f42:	d8e7      	bhi.n	8006f14 <__mdiff+0x7c>
 8006f44:	1b2b      	subs	r3, r5, r4
 8006f46:	3b15      	subs	r3, #21
 8006f48:	f023 0303 	bic.w	r3, r3, #3
 8006f4c:	3304      	adds	r3, #4
 8006f4e:	3415      	adds	r4, #21
 8006f50:	42a5      	cmp	r5, r4
 8006f52:	bf38      	it	cc
 8006f54:	2304      	movcc	r3, #4
 8006f56:	4419      	add	r1, r3
 8006f58:	4473      	add	r3, lr
 8006f5a:	469e      	mov	lr, r3
 8006f5c:	460d      	mov	r5, r1
 8006f5e:	4565      	cmp	r5, ip
 8006f60:	d30e      	bcc.n	8006f80 <__mdiff+0xe8>
 8006f62:	f10c 0203 	add.w	r2, ip, #3
 8006f66:	1a52      	subs	r2, r2, r1
 8006f68:	f022 0203 	bic.w	r2, r2, #3
 8006f6c:	3903      	subs	r1, #3
 8006f6e:	458c      	cmp	ip, r1
 8006f70:	bf38      	it	cc
 8006f72:	2200      	movcc	r2, #0
 8006f74:	441a      	add	r2, r3
 8006f76:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006f7a:	b17b      	cbz	r3, 8006f9c <__mdiff+0x104>
 8006f7c:	6106      	str	r6, [r0, #16]
 8006f7e:	e7a5      	b.n	8006ecc <__mdiff+0x34>
 8006f80:	f855 8b04 	ldr.w	r8, [r5], #4
 8006f84:	fa17 f488 	uxtah	r4, r7, r8
 8006f88:	1422      	asrs	r2, r4, #16
 8006f8a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8006f8e:	b2a4      	uxth	r4, r4
 8006f90:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006f94:	f84e 4b04 	str.w	r4, [lr], #4
 8006f98:	1417      	asrs	r7, r2, #16
 8006f9a:	e7e0      	b.n	8006f5e <__mdiff+0xc6>
 8006f9c:	3e01      	subs	r6, #1
 8006f9e:	e7ea      	b.n	8006f76 <__mdiff+0xde>
 8006fa0:	0800962b 	.word	0x0800962b
 8006fa4:	0800963c 	.word	0x0800963c

08006fa8 <__d2b>:
 8006fa8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006fac:	4689      	mov	r9, r1
 8006fae:	2101      	movs	r1, #1
 8006fb0:	ec57 6b10 	vmov	r6, r7, d0
 8006fb4:	4690      	mov	r8, r2
 8006fb6:	f7ff fcd5 	bl	8006964 <_Balloc>
 8006fba:	4604      	mov	r4, r0
 8006fbc:	b930      	cbnz	r0, 8006fcc <__d2b+0x24>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	4b25      	ldr	r3, [pc, #148]	; (8007058 <__d2b+0xb0>)
 8006fc2:	4826      	ldr	r0, [pc, #152]	; (800705c <__d2b+0xb4>)
 8006fc4:	f240 310a 	movw	r1, #778	; 0x30a
 8006fc8:	f000 fa70 	bl	80074ac <__assert_func>
 8006fcc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006fd0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006fd4:	bb35      	cbnz	r5, 8007024 <__d2b+0x7c>
 8006fd6:	2e00      	cmp	r6, #0
 8006fd8:	9301      	str	r3, [sp, #4]
 8006fda:	d028      	beq.n	800702e <__d2b+0x86>
 8006fdc:	4668      	mov	r0, sp
 8006fde:	9600      	str	r6, [sp, #0]
 8006fe0:	f7ff fd8c 	bl	8006afc <__lo0bits>
 8006fe4:	9900      	ldr	r1, [sp, #0]
 8006fe6:	b300      	cbz	r0, 800702a <__d2b+0x82>
 8006fe8:	9a01      	ldr	r2, [sp, #4]
 8006fea:	f1c0 0320 	rsb	r3, r0, #32
 8006fee:	fa02 f303 	lsl.w	r3, r2, r3
 8006ff2:	430b      	orrs	r3, r1
 8006ff4:	40c2      	lsrs	r2, r0
 8006ff6:	6163      	str	r3, [r4, #20]
 8006ff8:	9201      	str	r2, [sp, #4]
 8006ffa:	9b01      	ldr	r3, [sp, #4]
 8006ffc:	61a3      	str	r3, [r4, #24]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	bf14      	ite	ne
 8007002:	2202      	movne	r2, #2
 8007004:	2201      	moveq	r2, #1
 8007006:	6122      	str	r2, [r4, #16]
 8007008:	b1d5      	cbz	r5, 8007040 <__d2b+0x98>
 800700a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800700e:	4405      	add	r5, r0
 8007010:	f8c9 5000 	str.w	r5, [r9]
 8007014:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007018:	f8c8 0000 	str.w	r0, [r8]
 800701c:	4620      	mov	r0, r4
 800701e:	b003      	add	sp, #12
 8007020:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007024:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007028:	e7d5      	b.n	8006fd6 <__d2b+0x2e>
 800702a:	6161      	str	r1, [r4, #20]
 800702c:	e7e5      	b.n	8006ffa <__d2b+0x52>
 800702e:	a801      	add	r0, sp, #4
 8007030:	f7ff fd64 	bl	8006afc <__lo0bits>
 8007034:	9b01      	ldr	r3, [sp, #4]
 8007036:	6163      	str	r3, [r4, #20]
 8007038:	2201      	movs	r2, #1
 800703a:	6122      	str	r2, [r4, #16]
 800703c:	3020      	adds	r0, #32
 800703e:	e7e3      	b.n	8007008 <__d2b+0x60>
 8007040:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007044:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007048:	f8c9 0000 	str.w	r0, [r9]
 800704c:	6918      	ldr	r0, [r3, #16]
 800704e:	f7ff fd35 	bl	8006abc <__hi0bits>
 8007052:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007056:	e7df      	b.n	8007018 <__d2b+0x70>
 8007058:	0800962b 	.word	0x0800962b
 800705c:	0800963c 	.word	0x0800963c

08007060 <_calloc_r>:
 8007060:	b513      	push	{r0, r1, r4, lr}
 8007062:	434a      	muls	r2, r1
 8007064:	4611      	mov	r1, r2
 8007066:	9201      	str	r2, [sp, #4]
 8007068:	f000 f85a 	bl	8007120 <_malloc_r>
 800706c:	4604      	mov	r4, r0
 800706e:	b118      	cbz	r0, 8007078 <_calloc_r+0x18>
 8007070:	9a01      	ldr	r2, [sp, #4]
 8007072:	2100      	movs	r1, #0
 8007074:	f7fe f950 	bl	8005318 <memset>
 8007078:	4620      	mov	r0, r4
 800707a:	b002      	add	sp, #8
 800707c:	bd10      	pop	{r4, pc}
	...

08007080 <_free_r>:
 8007080:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007082:	2900      	cmp	r1, #0
 8007084:	d048      	beq.n	8007118 <_free_r+0x98>
 8007086:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800708a:	9001      	str	r0, [sp, #4]
 800708c:	2b00      	cmp	r3, #0
 800708e:	f1a1 0404 	sub.w	r4, r1, #4
 8007092:	bfb8      	it	lt
 8007094:	18e4      	addlt	r4, r4, r3
 8007096:	f000 fa65 	bl	8007564 <__malloc_lock>
 800709a:	4a20      	ldr	r2, [pc, #128]	; (800711c <_free_r+0x9c>)
 800709c:	9801      	ldr	r0, [sp, #4]
 800709e:	6813      	ldr	r3, [r2, #0]
 80070a0:	4615      	mov	r5, r2
 80070a2:	b933      	cbnz	r3, 80070b2 <_free_r+0x32>
 80070a4:	6063      	str	r3, [r4, #4]
 80070a6:	6014      	str	r4, [r2, #0]
 80070a8:	b003      	add	sp, #12
 80070aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80070ae:	f000 ba5f 	b.w	8007570 <__malloc_unlock>
 80070b2:	42a3      	cmp	r3, r4
 80070b4:	d90b      	bls.n	80070ce <_free_r+0x4e>
 80070b6:	6821      	ldr	r1, [r4, #0]
 80070b8:	1862      	adds	r2, r4, r1
 80070ba:	4293      	cmp	r3, r2
 80070bc:	bf04      	itt	eq
 80070be:	681a      	ldreq	r2, [r3, #0]
 80070c0:	685b      	ldreq	r3, [r3, #4]
 80070c2:	6063      	str	r3, [r4, #4]
 80070c4:	bf04      	itt	eq
 80070c6:	1852      	addeq	r2, r2, r1
 80070c8:	6022      	streq	r2, [r4, #0]
 80070ca:	602c      	str	r4, [r5, #0]
 80070cc:	e7ec      	b.n	80070a8 <_free_r+0x28>
 80070ce:	461a      	mov	r2, r3
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	b10b      	cbz	r3, 80070d8 <_free_r+0x58>
 80070d4:	42a3      	cmp	r3, r4
 80070d6:	d9fa      	bls.n	80070ce <_free_r+0x4e>
 80070d8:	6811      	ldr	r1, [r2, #0]
 80070da:	1855      	adds	r5, r2, r1
 80070dc:	42a5      	cmp	r5, r4
 80070de:	d10b      	bne.n	80070f8 <_free_r+0x78>
 80070e0:	6824      	ldr	r4, [r4, #0]
 80070e2:	4421      	add	r1, r4
 80070e4:	1854      	adds	r4, r2, r1
 80070e6:	42a3      	cmp	r3, r4
 80070e8:	6011      	str	r1, [r2, #0]
 80070ea:	d1dd      	bne.n	80070a8 <_free_r+0x28>
 80070ec:	681c      	ldr	r4, [r3, #0]
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	6053      	str	r3, [r2, #4]
 80070f2:	4421      	add	r1, r4
 80070f4:	6011      	str	r1, [r2, #0]
 80070f6:	e7d7      	b.n	80070a8 <_free_r+0x28>
 80070f8:	d902      	bls.n	8007100 <_free_r+0x80>
 80070fa:	230c      	movs	r3, #12
 80070fc:	6003      	str	r3, [r0, #0]
 80070fe:	e7d3      	b.n	80070a8 <_free_r+0x28>
 8007100:	6825      	ldr	r5, [r4, #0]
 8007102:	1961      	adds	r1, r4, r5
 8007104:	428b      	cmp	r3, r1
 8007106:	bf04      	itt	eq
 8007108:	6819      	ldreq	r1, [r3, #0]
 800710a:	685b      	ldreq	r3, [r3, #4]
 800710c:	6063      	str	r3, [r4, #4]
 800710e:	bf04      	itt	eq
 8007110:	1949      	addeq	r1, r1, r5
 8007112:	6021      	streq	r1, [r4, #0]
 8007114:	6054      	str	r4, [r2, #4]
 8007116:	e7c7      	b.n	80070a8 <_free_r+0x28>
 8007118:	b003      	add	sp, #12
 800711a:	bd30      	pop	{r4, r5, pc}
 800711c:	2000024c 	.word	0x2000024c

08007120 <_malloc_r>:
 8007120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007122:	1ccd      	adds	r5, r1, #3
 8007124:	f025 0503 	bic.w	r5, r5, #3
 8007128:	3508      	adds	r5, #8
 800712a:	2d0c      	cmp	r5, #12
 800712c:	bf38      	it	cc
 800712e:	250c      	movcc	r5, #12
 8007130:	2d00      	cmp	r5, #0
 8007132:	4606      	mov	r6, r0
 8007134:	db01      	blt.n	800713a <_malloc_r+0x1a>
 8007136:	42a9      	cmp	r1, r5
 8007138:	d903      	bls.n	8007142 <_malloc_r+0x22>
 800713a:	230c      	movs	r3, #12
 800713c:	6033      	str	r3, [r6, #0]
 800713e:	2000      	movs	r0, #0
 8007140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007142:	f000 fa0f 	bl	8007564 <__malloc_lock>
 8007146:	4921      	ldr	r1, [pc, #132]	; (80071cc <_malloc_r+0xac>)
 8007148:	680a      	ldr	r2, [r1, #0]
 800714a:	4614      	mov	r4, r2
 800714c:	b99c      	cbnz	r4, 8007176 <_malloc_r+0x56>
 800714e:	4f20      	ldr	r7, [pc, #128]	; (80071d0 <_malloc_r+0xb0>)
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	b923      	cbnz	r3, 800715e <_malloc_r+0x3e>
 8007154:	4621      	mov	r1, r4
 8007156:	4630      	mov	r0, r6
 8007158:	f000 f998 	bl	800748c <_sbrk_r>
 800715c:	6038      	str	r0, [r7, #0]
 800715e:	4629      	mov	r1, r5
 8007160:	4630      	mov	r0, r6
 8007162:	f000 f993 	bl	800748c <_sbrk_r>
 8007166:	1c43      	adds	r3, r0, #1
 8007168:	d123      	bne.n	80071b2 <_malloc_r+0x92>
 800716a:	230c      	movs	r3, #12
 800716c:	6033      	str	r3, [r6, #0]
 800716e:	4630      	mov	r0, r6
 8007170:	f000 f9fe 	bl	8007570 <__malloc_unlock>
 8007174:	e7e3      	b.n	800713e <_malloc_r+0x1e>
 8007176:	6823      	ldr	r3, [r4, #0]
 8007178:	1b5b      	subs	r3, r3, r5
 800717a:	d417      	bmi.n	80071ac <_malloc_r+0x8c>
 800717c:	2b0b      	cmp	r3, #11
 800717e:	d903      	bls.n	8007188 <_malloc_r+0x68>
 8007180:	6023      	str	r3, [r4, #0]
 8007182:	441c      	add	r4, r3
 8007184:	6025      	str	r5, [r4, #0]
 8007186:	e004      	b.n	8007192 <_malloc_r+0x72>
 8007188:	6863      	ldr	r3, [r4, #4]
 800718a:	42a2      	cmp	r2, r4
 800718c:	bf0c      	ite	eq
 800718e:	600b      	streq	r3, [r1, #0]
 8007190:	6053      	strne	r3, [r2, #4]
 8007192:	4630      	mov	r0, r6
 8007194:	f000 f9ec 	bl	8007570 <__malloc_unlock>
 8007198:	f104 000b 	add.w	r0, r4, #11
 800719c:	1d23      	adds	r3, r4, #4
 800719e:	f020 0007 	bic.w	r0, r0, #7
 80071a2:	1ac2      	subs	r2, r0, r3
 80071a4:	d0cc      	beq.n	8007140 <_malloc_r+0x20>
 80071a6:	1a1b      	subs	r3, r3, r0
 80071a8:	50a3      	str	r3, [r4, r2]
 80071aa:	e7c9      	b.n	8007140 <_malloc_r+0x20>
 80071ac:	4622      	mov	r2, r4
 80071ae:	6864      	ldr	r4, [r4, #4]
 80071b0:	e7cc      	b.n	800714c <_malloc_r+0x2c>
 80071b2:	1cc4      	adds	r4, r0, #3
 80071b4:	f024 0403 	bic.w	r4, r4, #3
 80071b8:	42a0      	cmp	r0, r4
 80071ba:	d0e3      	beq.n	8007184 <_malloc_r+0x64>
 80071bc:	1a21      	subs	r1, r4, r0
 80071be:	4630      	mov	r0, r6
 80071c0:	f000 f964 	bl	800748c <_sbrk_r>
 80071c4:	3001      	adds	r0, #1
 80071c6:	d1dd      	bne.n	8007184 <_malloc_r+0x64>
 80071c8:	e7cf      	b.n	800716a <_malloc_r+0x4a>
 80071ca:	bf00      	nop
 80071cc:	2000024c 	.word	0x2000024c
 80071d0:	20000250 	.word	0x20000250

080071d4 <__ssputs_r>:
 80071d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071d8:	688e      	ldr	r6, [r1, #8]
 80071da:	429e      	cmp	r6, r3
 80071dc:	4682      	mov	sl, r0
 80071de:	460c      	mov	r4, r1
 80071e0:	4690      	mov	r8, r2
 80071e2:	461f      	mov	r7, r3
 80071e4:	d838      	bhi.n	8007258 <__ssputs_r+0x84>
 80071e6:	898a      	ldrh	r2, [r1, #12]
 80071e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80071ec:	d032      	beq.n	8007254 <__ssputs_r+0x80>
 80071ee:	6825      	ldr	r5, [r4, #0]
 80071f0:	6909      	ldr	r1, [r1, #16]
 80071f2:	eba5 0901 	sub.w	r9, r5, r1
 80071f6:	6965      	ldr	r5, [r4, #20]
 80071f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80071fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007200:	3301      	adds	r3, #1
 8007202:	444b      	add	r3, r9
 8007204:	106d      	asrs	r5, r5, #1
 8007206:	429d      	cmp	r5, r3
 8007208:	bf38      	it	cc
 800720a:	461d      	movcc	r5, r3
 800720c:	0553      	lsls	r3, r2, #21
 800720e:	d531      	bpl.n	8007274 <__ssputs_r+0xa0>
 8007210:	4629      	mov	r1, r5
 8007212:	f7ff ff85 	bl	8007120 <_malloc_r>
 8007216:	4606      	mov	r6, r0
 8007218:	b950      	cbnz	r0, 8007230 <__ssputs_r+0x5c>
 800721a:	230c      	movs	r3, #12
 800721c:	f8ca 3000 	str.w	r3, [sl]
 8007220:	89a3      	ldrh	r3, [r4, #12]
 8007222:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007226:	81a3      	strh	r3, [r4, #12]
 8007228:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800722c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007230:	6921      	ldr	r1, [r4, #16]
 8007232:	464a      	mov	r2, r9
 8007234:	f7ff fb88 	bl	8006948 <memcpy>
 8007238:	89a3      	ldrh	r3, [r4, #12]
 800723a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800723e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007242:	81a3      	strh	r3, [r4, #12]
 8007244:	6126      	str	r6, [r4, #16]
 8007246:	6165      	str	r5, [r4, #20]
 8007248:	444e      	add	r6, r9
 800724a:	eba5 0509 	sub.w	r5, r5, r9
 800724e:	6026      	str	r6, [r4, #0]
 8007250:	60a5      	str	r5, [r4, #8]
 8007252:	463e      	mov	r6, r7
 8007254:	42be      	cmp	r6, r7
 8007256:	d900      	bls.n	800725a <__ssputs_r+0x86>
 8007258:	463e      	mov	r6, r7
 800725a:	4632      	mov	r2, r6
 800725c:	6820      	ldr	r0, [r4, #0]
 800725e:	4641      	mov	r1, r8
 8007260:	f000 f966 	bl	8007530 <memmove>
 8007264:	68a3      	ldr	r3, [r4, #8]
 8007266:	6822      	ldr	r2, [r4, #0]
 8007268:	1b9b      	subs	r3, r3, r6
 800726a:	4432      	add	r2, r6
 800726c:	60a3      	str	r3, [r4, #8]
 800726e:	6022      	str	r2, [r4, #0]
 8007270:	2000      	movs	r0, #0
 8007272:	e7db      	b.n	800722c <__ssputs_r+0x58>
 8007274:	462a      	mov	r2, r5
 8007276:	f000 f981 	bl	800757c <_realloc_r>
 800727a:	4606      	mov	r6, r0
 800727c:	2800      	cmp	r0, #0
 800727e:	d1e1      	bne.n	8007244 <__ssputs_r+0x70>
 8007280:	6921      	ldr	r1, [r4, #16]
 8007282:	4650      	mov	r0, sl
 8007284:	f7ff fefc 	bl	8007080 <_free_r>
 8007288:	e7c7      	b.n	800721a <__ssputs_r+0x46>
	...

0800728c <_svfiprintf_r>:
 800728c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007290:	4698      	mov	r8, r3
 8007292:	898b      	ldrh	r3, [r1, #12]
 8007294:	061b      	lsls	r3, r3, #24
 8007296:	b09d      	sub	sp, #116	; 0x74
 8007298:	4607      	mov	r7, r0
 800729a:	460d      	mov	r5, r1
 800729c:	4614      	mov	r4, r2
 800729e:	d50e      	bpl.n	80072be <_svfiprintf_r+0x32>
 80072a0:	690b      	ldr	r3, [r1, #16]
 80072a2:	b963      	cbnz	r3, 80072be <_svfiprintf_r+0x32>
 80072a4:	2140      	movs	r1, #64	; 0x40
 80072a6:	f7ff ff3b 	bl	8007120 <_malloc_r>
 80072aa:	6028      	str	r0, [r5, #0]
 80072ac:	6128      	str	r0, [r5, #16]
 80072ae:	b920      	cbnz	r0, 80072ba <_svfiprintf_r+0x2e>
 80072b0:	230c      	movs	r3, #12
 80072b2:	603b      	str	r3, [r7, #0]
 80072b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072b8:	e0d1      	b.n	800745e <_svfiprintf_r+0x1d2>
 80072ba:	2340      	movs	r3, #64	; 0x40
 80072bc:	616b      	str	r3, [r5, #20]
 80072be:	2300      	movs	r3, #0
 80072c0:	9309      	str	r3, [sp, #36]	; 0x24
 80072c2:	2320      	movs	r3, #32
 80072c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80072c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80072cc:	2330      	movs	r3, #48	; 0x30
 80072ce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007478 <_svfiprintf_r+0x1ec>
 80072d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80072d6:	f04f 0901 	mov.w	r9, #1
 80072da:	4623      	mov	r3, r4
 80072dc:	469a      	mov	sl, r3
 80072de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072e2:	b10a      	cbz	r2, 80072e8 <_svfiprintf_r+0x5c>
 80072e4:	2a25      	cmp	r2, #37	; 0x25
 80072e6:	d1f9      	bne.n	80072dc <_svfiprintf_r+0x50>
 80072e8:	ebba 0b04 	subs.w	fp, sl, r4
 80072ec:	d00b      	beq.n	8007306 <_svfiprintf_r+0x7a>
 80072ee:	465b      	mov	r3, fp
 80072f0:	4622      	mov	r2, r4
 80072f2:	4629      	mov	r1, r5
 80072f4:	4638      	mov	r0, r7
 80072f6:	f7ff ff6d 	bl	80071d4 <__ssputs_r>
 80072fa:	3001      	adds	r0, #1
 80072fc:	f000 80aa 	beq.w	8007454 <_svfiprintf_r+0x1c8>
 8007300:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007302:	445a      	add	r2, fp
 8007304:	9209      	str	r2, [sp, #36]	; 0x24
 8007306:	f89a 3000 	ldrb.w	r3, [sl]
 800730a:	2b00      	cmp	r3, #0
 800730c:	f000 80a2 	beq.w	8007454 <_svfiprintf_r+0x1c8>
 8007310:	2300      	movs	r3, #0
 8007312:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007316:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800731a:	f10a 0a01 	add.w	sl, sl, #1
 800731e:	9304      	str	r3, [sp, #16]
 8007320:	9307      	str	r3, [sp, #28]
 8007322:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007326:	931a      	str	r3, [sp, #104]	; 0x68
 8007328:	4654      	mov	r4, sl
 800732a:	2205      	movs	r2, #5
 800732c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007330:	4851      	ldr	r0, [pc, #324]	; (8007478 <_svfiprintf_r+0x1ec>)
 8007332:	f7f8 ff75 	bl	8000220 <memchr>
 8007336:	9a04      	ldr	r2, [sp, #16]
 8007338:	b9d8      	cbnz	r0, 8007372 <_svfiprintf_r+0xe6>
 800733a:	06d0      	lsls	r0, r2, #27
 800733c:	bf44      	itt	mi
 800733e:	2320      	movmi	r3, #32
 8007340:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007344:	0711      	lsls	r1, r2, #28
 8007346:	bf44      	itt	mi
 8007348:	232b      	movmi	r3, #43	; 0x2b
 800734a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800734e:	f89a 3000 	ldrb.w	r3, [sl]
 8007352:	2b2a      	cmp	r3, #42	; 0x2a
 8007354:	d015      	beq.n	8007382 <_svfiprintf_r+0xf6>
 8007356:	9a07      	ldr	r2, [sp, #28]
 8007358:	4654      	mov	r4, sl
 800735a:	2000      	movs	r0, #0
 800735c:	f04f 0c0a 	mov.w	ip, #10
 8007360:	4621      	mov	r1, r4
 8007362:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007366:	3b30      	subs	r3, #48	; 0x30
 8007368:	2b09      	cmp	r3, #9
 800736a:	d94e      	bls.n	800740a <_svfiprintf_r+0x17e>
 800736c:	b1b0      	cbz	r0, 800739c <_svfiprintf_r+0x110>
 800736e:	9207      	str	r2, [sp, #28]
 8007370:	e014      	b.n	800739c <_svfiprintf_r+0x110>
 8007372:	eba0 0308 	sub.w	r3, r0, r8
 8007376:	fa09 f303 	lsl.w	r3, r9, r3
 800737a:	4313      	orrs	r3, r2
 800737c:	9304      	str	r3, [sp, #16]
 800737e:	46a2      	mov	sl, r4
 8007380:	e7d2      	b.n	8007328 <_svfiprintf_r+0x9c>
 8007382:	9b03      	ldr	r3, [sp, #12]
 8007384:	1d19      	adds	r1, r3, #4
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	9103      	str	r1, [sp, #12]
 800738a:	2b00      	cmp	r3, #0
 800738c:	bfbb      	ittet	lt
 800738e:	425b      	neglt	r3, r3
 8007390:	f042 0202 	orrlt.w	r2, r2, #2
 8007394:	9307      	strge	r3, [sp, #28]
 8007396:	9307      	strlt	r3, [sp, #28]
 8007398:	bfb8      	it	lt
 800739a:	9204      	strlt	r2, [sp, #16]
 800739c:	7823      	ldrb	r3, [r4, #0]
 800739e:	2b2e      	cmp	r3, #46	; 0x2e
 80073a0:	d10c      	bne.n	80073bc <_svfiprintf_r+0x130>
 80073a2:	7863      	ldrb	r3, [r4, #1]
 80073a4:	2b2a      	cmp	r3, #42	; 0x2a
 80073a6:	d135      	bne.n	8007414 <_svfiprintf_r+0x188>
 80073a8:	9b03      	ldr	r3, [sp, #12]
 80073aa:	1d1a      	adds	r2, r3, #4
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	9203      	str	r2, [sp, #12]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	bfb8      	it	lt
 80073b4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80073b8:	3402      	adds	r4, #2
 80073ba:	9305      	str	r3, [sp, #20]
 80073bc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007488 <_svfiprintf_r+0x1fc>
 80073c0:	7821      	ldrb	r1, [r4, #0]
 80073c2:	2203      	movs	r2, #3
 80073c4:	4650      	mov	r0, sl
 80073c6:	f7f8 ff2b 	bl	8000220 <memchr>
 80073ca:	b140      	cbz	r0, 80073de <_svfiprintf_r+0x152>
 80073cc:	2340      	movs	r3, #64	; 0x40
 80073ce:	eba0 000a 	sub.w	r0, r0, sl
 80073d2:	fa03 f000 	lsl.w	r0, r3, r0
 80073d6:	9b04      	ldr	r3, [sp, #16]
 80073d8:	4303      	orrs	r3, r0
 80073da:	3401      	adds	r4, #1
 80073dc:	9304      	str	r3, [sp, #16]
 80073de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073e2:	4826      	ldr	r0, [pc, #152]	; (800747c <_svfiprintf_r+0x1f0>)
 80073e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80073e8:	2206      	movs	r2, #6
 80073ea:	f7f8 ff19 	bl	8000220 <memchr>
 80073ee:	2800      	cmp	r0, #0
 80073f0:	d038      	beq.n	8007464 <_svfiprintf_r+0x1d8>
 80073f2:	4b23      	ldr	r3, [pc, #140]	; (8007480 <_svfiprintf_r+0x1f4>)
 80073f4:	bb1b      	cbnz	r3, 800743e <_svfiprintf_r+0x1b2>
 80073f6:	9b03      	ldr	r3, [sp, #12]
 80073f8:	3307      	adds	r3, #7
 80073fa:	f023 0307 	bic.w	r3, r3, #7
 80073fe:	3308      	adds	r3, #8
 8007400:	9303      	str	r3, [sp, #12]
 8007402:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007404:	4433      	add	r3, r6
 8007406:	9309      	str	r3, [sp, #36]	; 0x24
 8007408:	e767      	b.n	80072da <_svfiprintf_r+0x4e>
 800740a:	fb0c 3202 	mla	r2, ip, r2, r3
 800740e:	460c      	mov	r4, r1
 8007410:	2001      	movs	r0, #1
 8007412:	e7a5      	b.n	8007360 <_svfiprintf_r+0xd4>
 8007414:	2300      	movs	r3, #0
 8007416:	3401      	adds	r4, #1
 8007418:	9305      	str	r3, [sp, #20]
 800741a:	4619      	mov	r1, r3
 800741c:	f04f 0c0a 	mov.w	ip, #10
 8007420:	4620      	mov	r0, r4
 8007422:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007426:	3a30      	subs	r2, #48	; 0x30
 8007428:	2a09      	cmp	r2, #9
 800742a:	d903      	bls.n	8007434 <_svfiprintf_r+0x1a8>
 800742c:	2b00      	cmp	r3, #0
 800742e:	d0c5      	beq.n	80073bc <_svfiprintf_r+0x130>
 8007430:	9105      	str	r1, [sp, #20]
 8007432:	e7c3      	b.n	80073bc <_svfiprintf_r+0x130>
 8007434:	fb0c 2101 	mla	r1, ip, r1, r2
 8007438:	4604      	mov	r4, r0
 800743a:	2301      	movs	r3, #1
 800743c:	e7f0      	b.n	8007420 <_svfiprintf_r+0x194>
 800743e:	ab03      	add	r3, sp, #12
 8007440:	9300      	str	r3, [sp, #0]
 8007442:	462a      	mov	r2, r5
 8007444:	4b0f      	ldr	r3, [pc, #60]	; (8007484 <_svfiprintf_r+0x1f8>)
 8007446:	a904      	add	r1, sp, #16
 8007448:	4638      	mov	r0, r7
 800744a:	f7fe f80d 	bl	8005468 <_printf_float>
 800744e:	1c42      	adds	r2, r0, #1
 8007450:	4606      	mov	r6, r0
 8007452:	d1d6      	bne.n	8007402 <_svfiprintf_r+0x176>
 8007454:	89ab      	ldrh	r3, [r5, #12]
 8007456:	065b      	lsls	r3, r3, #25
 8007458:	f53f af2c 	bmi.w	80072b4 <_svfiprintf_r+0x28>
 800745c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800745e:	b01d      	add	sp, #116	; 0x74
 8007460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007464:	ab03      	add	r3, sp, #12
 8007466:	9300      	str	r3, [sp, #0]
 8007468:	462a      	mov	r2, r5
 800746a:	4b06      	ldr	r3, [pc, #24]	; (8007484 <_svfiprintf_r+0x1f8>)
 800746c:	a904      	add	r1, sp, #16
 800746e:	4638      	mov	r0, r7
 8007470:	f7fe fa9e 	bl	80059b0 <_printf_i>
 8007474:	e7eb      	b.n	800744e <_svfiprintf_r+0x1c2>
 8007476:	bf00      	nop
 8007478:	0800979c 	.word	0x0800979c
 800747c:	080097a6 	.word	0x080097a6
 8007480:	08005469 	.word	0x08005469
 8007484:	080071d5 	.word	0x080071d5
 8007488:	080097a2 	.word	0x080097a2

0800748c <_sbrk_r>:
 800748c:	b538      	push	{r3, r4, r5, lr}
 800748e:	4d06      	ldr	r5, [pc, #24]	; (80074a8 <_sbrk_r+0x1c>)
 8007490:	2300      	movs	r3, #0
 8007492:	4604      	mov	r4, r0
 8007494:	4608      	mov	r0, r1
 8007496:	602b      	str	r3, [r5, #0]
 8007498:	f7fb f9f2 	bl	8002880 <_sbrk>
 800749c:	1c43      	adds	r3, r0, #1
 800749e:	d102      	bne.n	80074a6 <_sbrk_r+0x1a>
 80074a0:	682b      	ldr	r3, [r5, #0]
 80074a2:	b103      	cbz	r3, 80074a6 <_sbrk_r+0x1a>
 80074a4:	6023      	str	r3, [r4, #0]
 80074a6:	bd38      	pop	{r3, r4, r5, pc}
 80074a8:	200002f0 	.word	0x200002f0

080074ac <__assert_func>:
 80074ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80074ae:	4614      	mov	r4, r2
 80074b0:	461a      	mov	r2, r3
 80074b2:	4b09      	ldr	r3, [pc, #36]	; (80074d8 <__assert_func+0x2c>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4605      	mov	r5, r0
 80074b8:	68d8      	ldr	r0, [r3, #12]
 80074ba:	b14c      	cbz	r4, 80074d0 <__assert_func+0x24>
 80074bc:	4b07      	ldr	r3, [pc, #28]	; (80074dc <__assert_func+0x30>)
 80074be:	9100      	str	r1, [sp, #0]
 80074c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80074c4:	4906      	ldr	r1, [pc, #24]	; (80074e0 <__assert_func+0x34>)
 80074c6:	462b      	mov	r3, r5
 80074c8:	f000 f80e 	bl	80074e8 <fiprintf>
 80074cc:	f000 faa4 	bl	8007a18 <abort>
 80074d0:	4b04      	ldr	r3, [pc, #16]	; (80074e4 <__assert_func+0x38>)
 80074d2:	461c      	mov	r4, r3
 80074d4:	e7f3      	b.n	80074be <__assert_func+0x12>
 80074d6:	bf00      	nop
 80074d8:	20000014 	.word	0x20000014
 80074dc:	080097ad 	.word	0x080097ad
 80074e0:	080097ba 	.word	0x080097ba
 80074e4:	080097e8 	.word	0x080097e8

080074e8 <fiprintf>:
 80074e8:	b40e      	push	{r1, r2, r3}
 80074ea:	b503      	push	{r0, r1, lr}
 80074ec:	4601      	mov	r1, r0
 80074ee:	ab03      	add	r3, sp, #12
 80074f0:	4805      	ldr	r0, [pc, #20]	; (8007508 <fiprintf+0x20>)
 80074f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80074f6:	6800      	ldr	r0, [r0, #0]
 80074f8:	9301      	str	r3, [sp, #4]
 80074fa:	f000 f88f 	bl	800761c <_vfiprintf_r>
 80074fe:	b002      	add	sp, #8
 8007500:	f85d eb04 	ldr.w	lr, [sp], #4
 8007504:	b003      	add	sp, #12
 8007506:	4770      	bx	lr
 8007508:	20000014 	.word	0x20000014

0800750c <__ascii_mbtowc>:
 800750c:	b082      	sub	sp, #8
 800750e:	b901      	cbnz	r1, 8007512 <__ascii_mbtowc+0x6>
 8007510:	a901      	add	r1, sp, #4
 8007512:	b142      	cbz	r2, 8007526 <__ascii_mbtowc+0x1a>
 8007514:	b14b      	cbz	r3, 800752a <__ascii_mbtowc+0x1e>
 8007516:	7813      	ldrb	r3, [r2, #0]
 8007518:	600b      	str	r3, [r1, #0]
 800751a:	7812      	ldrb	r2, [r2, #0]
 800751c:	1e10      	subs	r0, r2, #0
 800751e:	bf18      	it	ne
 8007520:	2001      	movne	r0, #1
 8007522:	b002      	add	sp, #8
 8007524:	4770      	bx	lr
 8007526:	4610      	mov	r0, r2
 8007528:	e7fb      	b.n	8007522 <__ascii_mbtowc+0x16>
 800752a:	f06f 0001 	mvn.w	r0, #1
 800752e:	e7f8      	b.n	8007522 <__ascii_mbtowc+0x16>

08007530 <memmove>:
 8007530:	4288      	cmp	r0, r1
 8007532:	b510      	push	{r4, lr}
 8007534:	eb01 0402 	add.w	r4, r1, r2
 8007538:	d902      	bls.n	8007540 <memmove+0x10>
 800753a:	4284      	cmp	r4, r0
 800753c:	4623      	mov	r3, r4
 800753e:	d807      	bhi.n	8007550 <memmove+0x20>
 8007540:	1e43      	subs	r3, r0, #1
 8007542:	42a1      	cmp	r1, r4
 8007544:	d008      	beq.n	8007558 <memmove+0x28>
 8007546:	f811 2b01 	ldrb.w	r2, [r1], #1
 800754a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800754e:	e7f8      	b.n	8007542 <memmove+0x12>
 8007550:	4402      	add	r2, r0
 8007552:	4601      	mov	r1, r0
 8007554:	428a      	cmp	r2, r1
 8007556:	d100      	bne.n	800755a <memmove+0x2a>
 8007558:	bd10      	pop	{r4, pc}
 800755a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800755e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007562:	e7f7      	b.n	8007554 <memmove+0x24>

08007564 <__malloc_lock>:
 8007564:	4801      	ldr	r0, [pc, #4]	; (800756c <__malloc_lock+0x8>)
 8007566:	f000 bc17 	b.w	8007d98 <__retarget_lock_acquire_recursive>
 800756a:	bf00      	nop
 800756c:	200002f8 	.word	0x200002f8

08007570 <__malloc_unlock>:
 8007570:	4801      	ldr	r0, [pc, #4]	; (8007578 <__malloc_unlock+0x8>)
 8007572:	f000 bc12 	b.w	8007d9a <__retarget_lock_release_recursive>
 8007576:	bf00      	nop
 8007578:	200002f8 	.word	0x200002f8

0800757c <_realloc_r>:
 800757c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800757e:	4607      	mov	r7, r0
 8007580:	4614      	mov	r4, r2
 8007582:	460e      	mov	r6, r1
 8007584:	b921      	cbnz	r1, 8007590 <_realloc_r+0x14>
 8007586:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800758a:	4611      	mov	r1, r2
 800758c:	f7ff bdc8 	b.w	8007120 <_malloc_r>
 8007590:	b922      	cbnz	r2, 800759c <_realloc_r+0x20>
 8007592:	f7ff fd75 	bl	8007080 <_free_r>
 8007596:	4625      	mov	r5, r4
 8007598:	4628      	mov	r0, r5
 800759a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800759c:	f000 fc62 	bl	8007e64 <_malloc_usable_size_r>
 80075a0:	42a0      	cmp	r0, r4
 80075a2:	d20f      	bcs.n	80075c4 <_realloc_r+0x48>
 80075a4:	4621      	mov	r1, r4
 80075a6:	4638      	mov	r0, r7
 80075a8:	f7ff fdba 	bl	8007120 <_malloc_r>
 80075ac:	4605      	mov	r5, r0
 80075ae:	2800      	cmp	r0, #0
 80075b0:	d0f2      	beq.n	8007598 <_realloc_r+0x1c>
 80075b2:	4631      	mov	r1, r6
 80075b4:	4622      	mov	r2, r4
 80075b6:	f7ff f9c7 	bl	8006948 <memcpy>
 80075ba:	4631      	mov	r1, r6
 80075bc:	4638      	mov	r0, r7
 80075be:	f7ff fd5f 	bl	8007080 <_free_r>
 80075c2:	e7e9      	b.n	8007598 <_realloc_r+0x1c>
 80075c4:	4635      	mov	r5, r6
 80075c6:	e7e7      	b.n	8007598 <_realloc_r+0x1c>

080075c8 <__sfputc_r>:
 80075c8:	6893      	ldr	r3, [r2, #8]
 80075ca:	3b01      	subs	r3, #1
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	b410      	push	{r4}
 80075d0:	6093      	str	r3, [r2, #8]
 80075d2:	da08      	bge.n	80075e6 <__sfputc_r+0x1e>
 80075d4:	6994      	ldr	r4, [r2, #24]
 80075d6:	42a3      	cmp	r3, r4
 80075d8:	db01      	blt.n	80075de <__sfputc_r+0x16>
 80075da:	290a      	cmp	r1, #10
 80075dc:	d103      	bne.n	80075e6 <__sfputc_r+0x1e>
 80075de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075e2:	f000 b94b 	b.w	800787c <__swbuf_r>
 80075e6:	6813      	ldr	r3, [r2, #0]
 80075e8:	1c58      	adds	r0, r3, #1
 80075ea:	6010      	str	r0, [r2, #0]
 80075ec:	7019      	strb	r1, [r3, #0]
 80075ee:	4608      	mov	r0, r1
 80075f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075f4:	4770      	bx	lr

080075f6 <__sfputs_r>:
 80075f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075f8:	4606      	mov	r6, r0
 80075fa:	460f      	mov	r7, r1
 80075fc:	4614      	mov	r4, r2
 80075fe:	18d5      	adds	r5, r2, r3
 8007600:	42ac      	cmp	r4, r5
 8007602:	d101      	bne.n	8007608 <__sfputs_r+0x12>
 8007604:	2000      	movs	r0, #0
 8007606:	e007      	b.n	8007618 <__sfputs_r+0x22>
 8007608:	f814 1b01 	ldrb.w	r1, [r4], #1
 800760c:	463a      	mov	r2, r7
 800760e:	4630      	mov	r0, r6
 8007610:	f7ff ffda 	bl	80075c8 <__sfputc_r>
 8007614:	1c43      	adds	r3, r0, #1
 8007616:	d1f3      	bne.n	8007600 <__sfputs_r+0xa>
 8007618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800761c <_vfiprintf_r>:
 800761c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007620:	460d      	mov	r5, r1
 8007622:	b09d      	sub	sp, #116	; 0x74
 8007624:	4614      	mov	r4, r2
 8007626:	4698      	mov	r8, r3
 8007628:	4606      	mov	r6, r0
 800762a:	b118      	cbz	r0, 8007634 <_vfiprintf_r+0x18>
 800762c:	6983      	ldr	r3, [r0, #24]
 800762e:	b90b      	cbnz	r3, 8007634 <_vfiprintf_r+0x18>
 8007630:	f000 fb14 	bl	8007c5c <__sinit>
 8007634:	4b89      	ldr	r3, [pc, #548]	; (800785c <_vfiprintf_r+0x240>)
 8007636:	429d      	cmp	r5, r3
 8007638:	d11b      	bne.n	8007672 <_vfiprintf_r+0x56>
 800763a:	6875      	ldr	r5, [r6, #4]
 800763c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800763e:	07d9      	lsls	r1, r3, #31
 8007640:	d405      	bmi.n	800764e <_vfiprintf_r+0x32>
 8007642:	89ab      	ldrh	r3, [r5, #12]
 8007644:	059a      	lsls	r2, r3, #22
 8007646:	d402      	bmi.n	800764e <_vfiprintf_r+0x32>
 8007648:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800764a:	f000 fba5 	bl	8007d98 <__retarget_lock_acquire_recursive>
 800764e:	89ab      	ldrh	r3, [r5, #12]
 8007650:	071b      	lsls	r3, r3, #28
 8007652:	d501      	bpl.n	8007658 <_vfiprintf_r+0x3c>
 8007654:	692b      	ldr	r3, [r5, #16]
 8007656:	b9eb      	cbnz	r3, 8007694 <_vfiprintf_r+0x78>
 8007658:	4629      	mov	r1, r5
 800765a:	4630      	mov	r0, r6
 800765c:	f000 f96e 	bl	800793c <__swsetup_r>
 8007660:	b1c0      	cbz	r0, 8007694 <_vfiprintf_r+0x78>
 8007662:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007664:	07dc      	lsls	r4, r3, #31
 8007666:	d50e      	bpl.n	8007686 <_vfiprintf_r+0x6a>
 8007668:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800766c:	b01d      	add	sp, #116	; 0x74
 800766e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007672:	4b7b      	ldr	r3, [pc, #492]	; (8007860 <_vfiprintf_r+0x244>)
 8007674:	429d      	cmp	r5, r3
 8007676:	d101      	bne.n	800767c <_vfiprintf_r+0x60>
 8007678:	68b5      	ldr	r5, [r6, #8]
 800767a:	e7df      	b.n	800763c <_vfiprintf_r+0x20>
 800767c:	4b79      	ldr	r3, [pc, #484]	; (8007864 <_vfiprintf_r+0x248>)
 800767e:	429d      	cmp	r5, r3
 8007680:	bf08      	it	eq
 8007682:	68f5      	ldreq	r5, [r6, #12]
 8007684:	e7da      	b.n	800763c <_vfiprintf_r+0x20>
 8007686:	89ab      	ldrh	r3, [r5, #12]
 8007688:	0598      	lsls	r0, r3, #22
 800768a:	d4ed      	bmi.n	8007668 <_vfiprintf_r+0x4c>
 800768c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800768e:	f000 fb84 	bl	8007d9a <__retarget_lock_release_recursive>
 8007692:	e7e9      	b.n	8007668 <_vfiprintf_r+0x4c>
 8007694:	2300      	movs	r3, #0
 8007696:	9309      	str	r3, [sp, #36]	; 0x24
 8007698:	2320      	movs	r3, #32
 800769a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800769e:	f8cd 800c 	str.w	r8, [sp, #12]
 80076a2:	2330      	movs	r3, #48	; 0x30
 80076a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007868 <_vfiprintf_r+0x24c>
 80076a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80076ac:	f04f 0901 	mov.w	r9, #1
 80076b0:	4623      	mov	r3, r4
 80076b2:	469a      	mov	sl, r3
 80076b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076b8:	b10a      	cbz	r2, 80076be <_vfiprintf_r+0xa2>
 80076ba:	2a25      	cmp	r2, #37	; 0x25
 80076bc:	d1f9      	bne.n	80076b2 <_vfiprintf_r+0x96>
 80076be:	ebba 0b04 	subs.w	fp, sl, r4
 80076c2:	d00b      	beq.n	80076dc <_vfiprintf_r+0xc0>
 80076c4:	465b      	mov	r3, fp
 80076c6:	4622      	mov	r2, r4
 80076c8:	4629      	mov	r1, r5
 80076ca:	4630      	mov	r0, r6
 80076cc:	f7ff ff93 	bl	80075f6 <__sfputs_r>
 80076d0:	3001      	adds	r0, #1
 80076d2:	f000 80aa 	beq.w	800782a <_vfiprintf_r+0x20e>
 80076d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076d8:	445a      	add	r2, fp
 80076da:	9209      	str	r2, [sp, #36]	; 0x24
 80076dc:	f89a 3000 	ldrb.w	r3, [sl]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	f000 80a2 	beq.w	800782a <_vfiprintf_r+0x20e>
 80076e6:	2300      	movs	r3, #0
 80076e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80076ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80076f0:	f10a 0a01 	add.w	sl, sl, #1
 80076f4:	9304      	str	r3, [sp, #16]
 80076f6:	9307      	str	r3, [sp, #28]
 80076f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80076fc:	931a      	str	r3, [sp, #104]	; 0x68
 80076fe:	4654      	mov	r4, sl
 8007700:	2205      	movs	r2, #5
 8007702:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007706:	4858      	ldr	r0, [pc, #352]	; (8007868 <_vfiprintf_r+0x24c>)
 8007708:	f7f8 fd8a 	bl	8000220 <memchr>
 800770c:	9a04      	ldr	r2, [sp, #16]
 800770e:	b9d8      	cbnz	r0, 8007748 <_vfiprintf_r+0x12c>
 8007710:	06d1      	lsls	r1, r2, #27
 8007712:	bf44      	itt	mi
 8007714:	2320      	movmi	r3, #32
 8007716:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800771a:	0713      	lsls	r3, r2, #28
 800771c:	bf44      	itt	mi
 800771e:	232b      	movmi	r3, #43	; 0x2b
 8007720:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007724:	f89a 3000 	ldrb.w	r3, [sl]
 8007728:	2b2a      	cmp	r3, #42	; 0x2a
 800772a:	d015      	beq.n	8007758 <_vfiprintf_r+0x13c>
 800772c:	9a07      	ldr	r2, [sp, #28]
 800772e:	4654      	mov	r4, sl
 8007730:	2000      	movs	r0, #0
 8007732:	f04f 0c0a 	mov.w	ip, #10
 8007736:	4621      	mov	r1, r4
 8007738:	f811 3b01 	ldrb.w	r3, [r1], #1
 800773c:	3b30      	subs	r3, #48	; 0x30
 800773e:	2b09      	cmp	r3, #9
 8007740:	d94e      	bls.n	80077e0 <_vfiprintf_r+0x1c4>
 8007742:	b1b0      	cbz	r0, 8007772 <_vfiprintf_r+0x156>
 8007744:	9207      	str	r2, [sp, #28]
 8007746:	e014      	b.n	8007772 <_vfiprintf_r+0x156>
 8007748:	eba0 0308 	sub.w	r3, r0, r8
 800774c:	fa09 f303 	lsl.w	r3, r9, r3
 8007750:	4313      	orrs	r3, r2
 8007752:	9304      	str	r3, [sp, #16]
 8007754:	46a2      	mov	sl, r4
 8007756:	e7d2      	b.n	80076fe <_vfiprintf_r+0xe2>
 8007758:	9b03      	ldr	r3, [sp, #12]
 800775a:	1d19      	adds	r1, r3, #4
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	9103      	str	r1, [sp, #12]
 8007760:	2b00      	cmp	r3, #0
 8007762:	bfbb      	ittet	lt
 8007764:	425b      	neglt	r3, r3
 8007766:	f042 0202 	orrlt.w	r2, r2, #2
 800776a:	9307      	strge	r3, [sp, #28]
 800776c:	9307      	strlt	r3, [sp, #28]
 800776e:	bfb8      	it	lt
 8007770:	9204      	strlt	r2, [sp, #16]
 8007772:	7823      	ldrb	r3, [r4, #0]
 8007774:	2b2e      	cmp	r3, #46	; 0x2e
 8007776:	d10c      	bne.n	8007792 <_vfiprintf_r+0x176>
 8007778:	7863      	ldrb	r3, [r4, #1]
 800777a:	2b2a      	cmp	r3, #42	; 0x2a
 800777c:	d135      	bne.n	80077ea <_vfiprintf_r+0x1ce>
 800777e:	9b03      	ldr	r3, [sp, #12]
 8007780:	1d1a      	adds	r2, r3, #4
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	9203      	str	r2, [sp, #12]
 8007786:	2b00      	cmp	r3, #0
 8007788:	bfb8      	it	lt
 800778a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800778e:	3402      	adds	r4, #2
 8007790:	9305      	str	r3, [sp, #20]
 8007792:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007878 <_vfiprintf_r+0x25c>
 8007796:	7821      	ldrb	r1, [r4, #0]
 8007798:	2203      	movs	r2, #3
 800779a:	4650      	mov	r0, sl
 800779c:	f7f8 fd40 	bl	8000220 <memchr>
 80077a0:	b140      	cbz	r0, 80077b4 <_vfiprintf_r+0x198>
 80077a2:	2340      	movs	r3, #64	; 0x40
 80077a4:	eba0 000a 	sub.w	r0, r0, sl
 80077a8:	fa03 f000 	lsl.w	r0, r3, r0
 80077ac:	9b04      	ldr	r3, [sp, #16]
 80077ae:	4303      	orrs	r3, r0
 80077b0:	3401      	adds	r4, #1
 80077b2:	9304      	str	r3, [sp, #16]
 80077b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077b8:	482c      	ldr	r0, [pc, #176]	; (800786c <_vfiprintf_r+0x250>)
 80077ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80077be:	2206      	movs	r2, #6
 80077c0:	f7f8 fd2e 	bl	8000220 <memchr>
 80077c4:	2800      	cmp	r0, #0
 80077c6:	d03f      	beq.n	8007848 <_vfiprintf_r+0x22c>
 80077c8:	4b29      	ldr	r3, [pc, #164]	; (8007870 <_vfiprintf_r+0x254>)
 80077ca:	bb1b      	cbnz	r3, 8007814 <_vfiprintf_r+0x1f8>
 80077cc:	9b03      	ldr	r3, [sp, #12]
 80077ce:	3307      	adds	r3, #7
 80077d0:	f023 0307 	bic.w	r3, r3, #7
 80077d4:	3308      	adds	r3, #8
 80077d6:	9303      	str	r3, [sp, #12]
 80077d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077da:	443b      	add	r3, r7
 80077dc:	9309      	str	r3, [sp, #36]	; 0x24
 80077de:	e767      	b.n	80076b0 <_vfiprintf_r+0x94>
 80077e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80077e4:	460c      	mov	r4, r1
 80077e6:	2001      	movs	r0, #1
 80077e8:	e7a5      	b.n	8007736 <_vfiprintf_r+0x11a>
 80077ea:	2300      	movs	r3, #0
 80077ec:	3401      	adds	r4, #1
 80077ee:	9305      	str	r3, [sp, #20]
 80077f0:	4619      	mov	r1, r3
 80077f2:	f04f 0c0a 	mov.w	ip, #10
 80077f6:	4620      	mov	r0, r4
 80077f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077fc:	3a30      	subs	r2, #48	; 0x30
 80077fe:	2a09      	cmp	r2, #9
 8007800:	d903      	bls.n	800780a <_vfiprintf_r+0x1ee>
 8007802:	2b00      	cmp	r3, #0
 8007804:	d0c5      	beq.n	8007792 <_vfiprintf_r+0x176>
 8007806:	9105      	str	r1, [sp, #20]
 8007808:	e7c3      	b.n	8007792 <_vfiprintf_r+0x176>
 800780a:	fb0c 2101 	mla	r1, ip, r1, r2
 800780e:	4604      	mov	r4, r0
 8007810:	2301      	movs	r3, #1
 8007812:	e7f0      	b.n	80077f6 <_vfiprintf_r+0x1da>
 8007814:	ab03      	add	r3, sp, #12
 8007816:	9300      	str	r3, [sp, #0]
 8007818:	462a      	mov	r2, r5
 800781a:	4b16      	ldr	r3, [pc, #88]	; (8007874 <_vfiprintf_r+0x258>)
 800781c:	a904      	add	r1, sp, #16
 800781e:	4630      	mov	r0, r6
 8007820:	f7fd fe22 	bl	8005468 <_printf_float>
 8007824:	4607      	mov	r7, r0
 8007826:	1c78      	adds	r0, r7, #1
 8007828:	d1d6      	bne.n	80077d8 <_vfiprintf_r+0x1bc>
 800782a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800782c:	07d9      	lsls	r1, r3, #31
 800782e:	d405      	bmi.n	800783c <_vfiprintf_r+0x220>
 8007830:	89ab      	ldrh	r3, [r5, #12]
 8007832:	059a      	lsls	r2, r3, #22
 8007834:	d402      	bmi.n	800783c <_vfiprintf_r+0x220>
 8007836:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007838:	f000 faaf 	bl	8007d9a <__retarget_lock_release_recursive>
 800783c:	89ab      	ldrh	r3, [r5, #12]
 800783e:	065b      	lsls	r3, r3, #25
 8007840:	f53f af12 	bmi.w	8007668 <_vfiprintf_r+0x4c>
 8007844:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007846:	e711      	b.n	800766c <_vfiprintf_r+0x50>
 8007848:	ab03      	add	r3, sp, #12
 800784a:	9300      	str	r3, [sp, #0]
 800784c:	462a      	mov	r2, r5
 800784e:	4b09      	ldr	r3, [pc, #36]	; (8007874 <_vfiprintf_r+0x258>)
 8007850:	a904      	add	r1, sp, #16
 8007852:	4630      	mov	r0, r6
 8007854:	f7fe f8ac 	bl	80059b0 <_printf_i>
 8007858:	e7e4      	b.n	8007824 <_vfiprintf_r+0x208>
 800785a:	bf00      	nop
 800785c:	08009914 	.word	0x08009914
 8007860:	08009934 	.word	0x08009934
 8007864:	080098f4 	.word	0x080098f4
 8007868:	0800979c 	.word	0x0800979c
 800786c:	080097a6 	.word	0x080097a6
 8007870:	08005469 	.word	0x08005469
 8007874:	080075f7 	.word	0x080075f7
 8007878:	080097a2 	.word	0x080097a2

0800787c <__swbuf_r>:
 800787c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800787e:	460e      	mov	r6, r1
 8007880:	4614      	mov	r4, r2
 8007882:	4605      	mov	r5, r0
 8007884:	b118      	cbz	r0, 800788e <__swbuf_r+0x12>
 8007886:	6983      	ldr	r3, [r0, #24]
 8007888:	b90b      	cbnz	r3, 800788e <__swbuf_r+0x12>
 800788a:	f000 f9e7 	bl	8007c5c <__sinit>
 800788e:	4b21      	ldr	r3, [pc, #132]	; (8007914 <__swbuf_r+0x98>)
 8007890:	429c      	cmp	r4, r3
 8007892:	d12b      	bne.n	80078ec <__swbuf_r+0x70>
 8007894:	686c      	ldr	r4, [r5, #4]
 8007896:	69a3      	ldr	r3, [r4, #24]
 8007898:	60a3      	str	r3, [r4, #8]
 800789a:	89a3      	ldrh	r3, [r4, #12]
 800789c:	071a      	lsls	r2, r3, #28
 800789e:	d52f      	bpl.n	8007900 <__swbuf_r+0x84>
 80078a0:	6923      	ldr	r3, [r4, #16]
 80078a2:	b36b      	cbz	r3, 8007900 <__swbuf_r+0x84>
 80078a4:	6923      	ldr	r3, [r4, #16]
 80078a6:	6820      	ldr	r0, [r4, #0]
 80078a8:	1ac0      	subs	r0, r0, r3
 80078aa:	6963      	ldr	r3, [r4, #20]
 80078ac:	b2f6      	uxtb	r6, r6
 80078ae:	4283      	cmp	r3, r0
 80078b0:	4637      	mov	r7, r6
 80078b2:	dc04      	bgt.n	80078be <__swbuf_r+0x42>
 80078b4:	4621      	mov	r1, r4
 80078b6:	4628      	mov	r0, r5
 80078b8:	f000 f93c 	bl	8007b34 <_fflush_r>
 80078bc:	bb30      	cbnz	r0, 800790c <__swbuf_r+0x90>
 80078be:	68a3      	ldr	r3, [r4, #8]
 80078c0:	3b01      	subs	r3, #1
 80078c2:	60a3      	str	r3, [r4, #8]
 80078c4:	6823      	ldr	r3, [r4, #0]
 80078c6:	1c5a      	adds	r2, r3, #1
 80078c8:	6022      	str	r2, [r4, #0]
 80078ca:	701e      	strb	r6, [r3, #0]
 80078cc:	6963      	ldr	r3, [r4, #20]
 80078ce:	3001      	adds	r0, #1
 80078d0:	4283      	cmp	r3, r0
 80078d2:	d004      	beq.n	80078de <__swbuf_r+0x62>
 80078d4:	89a3      	ldrh	r3, [r4, #12]
 80078d6:	07db      	lsls	r3, r3, #31
 80078d8:	d506      	bpl.n	80078e8 <__swbuf_r+0x6c>
 80078da:	2e0a      	cmp	r6, #10
 80078dc:	d104      	bne.n	80078e8 <__swbuf_r+0x6c>
 80078de:	4621      	mov	r1, r4
 80078e0:	4628      	mov	r0, r5
 80078e2:	f000 f927 	bl	8007b34 <_fflush_r>
 80078e6:	b988      	cbnz	r0, 800790c <__swbuf_r+0x90>
 80078e8:	4638      	mov	r0, r7
 80078ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078ec:	4b0a      	ldr	r3, [pc, #40]	; (8007918 <__swbuf_r+0x9c>)
 80078ee:	429c      	cmp	r4, r3
 80078f0:	d101      	bne.n	80078f6 <__swbuf_r+0x7a>
 80078f2:	68ac      	ldr	r4, [r5, #8]
 80078f4:	e7cf      	b.n	8007896 <__swbuf_r+0x1a>
 80078f6:	4b09      	ldr	r3, [pc, #36]	; (800791c <__swbuf_r+0xa0>)
 80078f8:	429c      	cmp	r4, r3
 80078fa:	bf08      	it	eq
 80078fc:	68ec      	ldreq	r4, [r5, #12]
 80078fe:	e7ca      	b.n	8007896 <__swbuf_r+0x1a>
 8007900:	4621      	mov	r1, r4
 8007902:	4628      	mov	r0, r5
 8007904:	f000 f81a 	bl	800793c <__swsetup_r>
 8007908:	2800      	cmp	r0, #0
 800790a:	d0cb      	beq.n	80078a4 <__swbuf_r+0x28>
 800790c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007910:	e7ea      	b.n	80078e8 <__swbuf_r+0x6c>
 8007912:	bf00      	nop
 8007914:	08009914 	.word	0x08009914
 8007918:	08009934 	.word	0x08009934
 800791c:	080098f4 	.word	0x080098f4

08007920 <__ascii_wctomb>:
 8007920:	b149      	cbz	r1, 8007936 <__ascii_wctomb+0x16>
 8007922:	2aff      	cmp	r2, #255	; 0xff
 8007924:	bf85      	ittet	hi
 8007926:	238a      	movhi	r3, #138	; 0x8a
 8007928:	6003      	strhi	r3, [r0, #0]
 800792a:	700a      	strbls	r2, [r1, #0]
 800792c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8007930:	bf98      	it	ls
 8007932:	2001      	movls	r0, #1
 8007934:	4770      	bx	lr
 8007936:	4608      	mov	r0, r1
 8007938:	4770      	bx	lr
	...

0800793c <__swsetup_r>:
 800793c:	4b32      	ldr	r3, [pc, #200]	; (8007a08 <__swsetup_r+0xcc>)
 800793e:	b570      	push	{r4, r5, r6, lr}
 8007940:	681d      	ldr	r5, [r3, #0]
 8007942:	4606      	mov	r6, r0
 8007944:	460c      	mov	r4, r1
 8007946:	b125      	cbz	r5, 8007952 <__swsetup_r+0x16>
 8007948:	69ab      	ldr	r3, [r5, #24]
 800794a:	b913      	cbnz	r3, 8007952 <__swsetup_r+0x16>
 800794c:	4628      	mov	r0, r5
 800794e:	f000 f985 	bl	8007c5c <__sinit>
 8007952:	4b2e      	ldr	r3, [pc, #184]	; (8007a0c <__swsetup_r+0xd0>)
 8007954:	429c      	cmp	r4, r3
 8007956:	d10f      	bne.n	8007978 <__swsetup_r+0x3c>
 8007958:	686c      	ldr	r4, [r5, #4]
 800795a:	89a3      	ldrh	r3, [r4, #12]
 800795c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007960:	0719      	lsls	r1, r3, #28
 8007962:	d42c      	bmi.n	80079be <__swsetup_r+0x82>
 8007964:	06dd      	lsls	r5, r3, #27
 8007966:	d411      	bmi.n	800798c <__swsetup_r+0x50>
 8007968:	2309      	movs	r3, #9
 800796a:	6033      	str	r3, [r6, #0]
 800796c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007970:	81a3      	strh	r3, [r4, #12]
 8007972:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007976:	e03e      	b.n	80079f6 <__swsetup_r+0xba>
 8007978:	4b25      	ldr	r3, [pc, #148]	; (8007a10 <__swsetup_r+0xd4>)
 800797a:	429c      	cmp	r4, r3
 800797c:	d101      	bne.n	8007982 <__swsetup_r+0x46>
 800797e:	68ac      	ldr	r4, [r5, #8]
 8007980:	e7eb      	b.n	800795a <__swsetup_r+0x1e>
 8007982:	4b24      	ldr	r3, [pc, #144]	; (8007a14 <__swsetup_r+0xd8>)
 8007984:	429c      	cmp	r4, r3
 8007986:	bf08      	it	eq
 8007988:	68ec      	ldreq	r4, [r5, #12]
 800798a:	e7e6      	b.n	800795a <__swsetup_r+0x1e>
 800798c:	0758      	lsls	r0, r3, #29
 800798e:	d512      	bpl.n	80079b6 <__swsetup_r+0x7a>
 8007990:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007992:	b141      	cbz	r1, 80079a6 <__swsetup_r+0x6a>
 8007994:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007998:	4299      	cmp	r1, r3
 800799a:	d002      	beq.n	80079a2 <__swsetup_r+0x66>
 800799c:	4630      	mov	r0, r6
 800799e:	f7ff fb6f 	bl	8007080 <_free_r>
 80079a2:	2300      	movs	r3, #0
 80079a4:	6363      	str	r3, [r4, #52]	; 0x34
 80079a6:	89a3      	ldrh	r3, [r4, #12]
 80079a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80079ac:	81a3      	strh	r3, [r4, #12]
 80079ae:	2300      	movs	r3, #0
 80079b0:	6063      	str	r3, [r4, #4]
 80079b2:	6923      	ldr	r3, [r4, #16]
 80079b4:	6023      	str	r3, [r4, #0]
 80079b6:	89a3      	ldrh	r3, [r4, #12]
 80079b8:	f043 0308 	orr.w	r3, r3, #8
 80079bc:	81a3      	strh	r3, [r4, #12]
 80079be:	6923      	ldr	r3, [r4, #16]
 80079c0:	b94b      	cbnz	r3, 80079d6 <__swsetup_r+0x9a>
 80079c2:	89a3      	ldrh	r3, [r4, #12]
 80079c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80079c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079cc:	d003      	beq.n	80079d6 <__swsetup_r+0x9a>
 80079ce:	4621      	mov	r1, r4
 80079d0:	4630      	mov	r0, r6
 80079d2:	f000 fa07 	bl	8007de4 <__smakebuf_r>
 80079d6:	89a0      	ldrh	r0, [r4, #12]
 80079d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80079dc:	f010 0301 	ands.w	r3, r0, #1
 80079e0:	d00a      	beq.n	80079f8 <__swsetup_r+0xbc>
 80079e2:	2300      	movs	r3, #0
 80079e4:	60a3      	str	r3, [r4, #8]
 80079e6:	6963      	ldr	r3, [r4, #20]
 80079e8:	425b      	negs	r3, r3
 80079ea:	61a3      	str	r3, [r4, #24]
 80079ec:	6923      	ldr	r3, [r4, #16]
 80079ee:	b943      	cbnz	r3, 8007a02 <__swsetup_r+0xc6>
 80079f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80079f4:	d1ba      	bne.n	800796c <__swsetup_r+0x30>
 80079f6:	bd70      	pop	{r4, r5, r6, pc}
 80079f8:	0781      	lsls	r1, r0, #30
 80079fa:	bf58      	it	pl
 80079fc:	6963      	ldrpl	r3, [r4, #20]
 80079fe:	60a3      	str	r3, [r4, #8]
 8007a00:	e7f4      	b.n	80079ec <__swsetup_r+0xb0>
 8007a02:	2000      	movs	r0, #0
 8007a04:	e7f7      	b.n	80079f6 <__swsetup_r+0xba>
 8007a06:	bf00      	nop
 8007a08:	20000014 	.word	0x20000014
 8007a0c:	08009914 	.word	0x08009914
 8007a10:	08009934 	.word	0x08009934
 8007a14:	080098f4 	.word	0x080098f4

08007a18 <abort>:
 8007a18:	b508      	push	{r3, lr}
 8007a1a:	2006      	movs	r0, #6
 8007a1c:	f000 fa52 	bl	8007ec4 <raise>
 8007a20:	2001      	movs	r0, #1
 8007a22:	f7fa feb5 	bl	8002790 <_exit>
	...

08007a28 <__sflush_r>:
 8007a28:	898a      	ldrh	r2, [r1, #12]
 8007a2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a2e:	4605      	mov	r5, r0
 8007a30:	0710      	lsls	r0, r2, #28
 8007a32:	460c      	mov	r4, r1
 8007a34:	d458      	bmi.n	8007ae8 <__sflush_r+0xc0>
 8007a36:	684b      	ldr	r3, [r1, #4]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	dc05      	bgt.n	8007a48 <__sflush_r+0x20>
 8007a3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	dc02      	bgt.n	8007a48 <__sflush_r+0x20>
 8007a42:	2000      	movs	r0, #0
 8007a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a4a:	2e00      	cmp	r6, #0
 8007a4c:	d0f9      	beq.n	8007a42 <__sflush_r+0x1a>
 8007a4e:	2300      	movs	r3, #0
 8007a50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007a54:	682f      	ldr	r7, [r5, #0]
 8007a56:	602b      	str	r3, [r5, #0]
 8007a58:	d032      	beq.n	8007ac0 <__sflush_r+0x98>
 8007a5a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007a5c:	89a3      	ldrh	r3, [r4, #12]
 8007a5e:	075a      	lsls	r2, r3, #29
 8007a60:	d505      	bpl.n	8007a6e <__sflush_r+0x46>
 8007a62:	6863      	ldr	r3, [r4, #4]
 8007a64:	1ac0      	subs	r0, r0, r3
 8007a66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007a68:	b10b      	cbz	r3, 8007a6e <__sflush_r+0x46>
 8007a6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a6c:	1ac0      	subs	r0, r0, r3
 8007a6e:	2300      	movs	r3, #0
 8007a70:	4602      	mov	r2, r0
 8007a72:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a74:	6a21      	ldr	r1, [r4, #32]
 8007a76:	4628      	mov	r0, r5
 8007a78:	47b0      	blx	r6
 8007a7a:	1c43      	adds	r3, r0, #1
 8007a7c:	89a3      	ldrh	r3, [r4, #12]
 8007a7e:	d106      	bne.n	8007a8e <__sflush_r+0x66>
 8007a80:	6829      	ldr	r1, [r5, #0]
 8007a82:	291d      	cmp	r1, #29
 8007a84:	d82c      	bhi.n	8007ae0 <__sflush_r+0xb8>
 8007a86:	4a2a      	ldr	r2, [pc, #168]	; (8007b30 <__sflush_r+0x108>)
 8007a88:	40ca      	lsrs	r2, r1
 8007a8a:	07d6      	lsls	r6, r2, #31
 8007a8c:	d528      	bpl.n	8007ae0 <__sflush_r+0xb8>
 8007a8e:	2200      	movs	r2, #0
 8007a90:	6062      	str	r2, [r4, #4]
 8007a92:	04d9      	lsls	r1, r3, #19
 8007a94:	6922      	ldr	r2, [r4, #16]
 8007a96:	6022      	str	r2, [r4, #0]
 8007a98:	d504      	bpl.n	8007aa4 <__sflush_r+0x7c>
 8007a9a:	1c42      	adds	r2, r0, #1
 8007a9c:	d101      	bne.n	8007aa2 <__sflush_r+0x7a>
 8007a9e:	682b      	ldr	r3, [r5, #0]
 8007aa0:	b903      	cbnz	r3, 8007aa4 <__sflush_r+0x7c>
 8007aa2:	6560      	str	r0, [r4, #84]	; 0x54
 8007aa4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007aa6:	602f      	str	r7, [r5, #0]
 8007aa8:	2900      	cmp	r1, #0
 8007aaa:	d0ca      	beq.n	8007a42 <__sflush_r+0x1a>
 8007aac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ab0:	4299      	cmp	r1, r3
 8007ab2:	d002      	beq.n	8007aba <__sflush_r+0x92>
 8007ab4:	4628      	mov	r0, r5
 8007ab6:	f7ff fae3 	bl	8007080 <_free_r>
 8007aba:	2000      	movs	r0, #0
 8007abc:	6360      	str	r0, [r4, #52]	; 0x34
 8007abe:	e7c1      	b.n	8007a44 <__sflush_r+0x1c>
 8007ac0:	6a21      	ldr	r1, [r4, #32]
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	4628      	mov	r0, r5
 8007ac6:	47b0      	blx	r6
 8007ac8:	1c41      	adds	r1, r0, #1
 8007aca:	d1c7      	bne.n	8007a5c <__sflush_r+0x34>
 8007acc:	682b      	ldr	r3, [r5, #0]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d0c4      	beq.n	8007a5c <__sflush_r+0x34>
 8007ad2:	2b1d      	cmp	r3, #29
 8007ad4:	d001      	beq.n	8007ada <__sflush_r+0xb2>
 8007ad6:	2b16      	cmp	r3, #22
 8007ad8:	d101      	bne.n	8007ade <__sflush_r+0xb6>
 8007ada:	602f      	str	r7, [r5, #0]
 8007adc:	e7b1      	b.n	8007a42 <__sflush_r+0x1a>
 8007ade:	89a3      	ldrh	r3, [r4, #12]
 8007ae0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ae4:	81a3      	strh	r3, [r4, #12]
 8007ae6:	e7ad      	b.n	8007a44 <__sflush_r+0x1c>
 8007ae8:	690f      	ldr	r7, [r1, #16]
 8007aea:	2f00      	cmp	r7, #0
 8007aec:	d0a9      	beq.n	8007a42 <__sflush_r+0x1a>
 8007aee:	0793      	lsls	r3, r2, #30
 8007af0:	680e      	ldr	r6, [r1, #0]
 8007af2:	bf08      	it	eq
 8007af4:	694b      	ldreq	r3, [r1, #20]
 8007af6:	600f      	str	r7, [r1, #0]
 8007af8:	bf18      	it	ne
 8007afa:	2300      	movne	r3, #0
 8007afc:	eba6 0807 	sub.w	r8, r6, r7
 8007b00:	608b      	str	r3, [r1, #8]
 8007b02:	f1b8 0f00 	cmp.w	r8, #0
 8007b06:	dd9c      	ble.n	8007a42 <__sflush_r+0x1a>
 8007b08:	6a21      	ldr	r1, [r4, #32]
 8007b0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007b0c:	4643      	mov	r3, r8
 8007b0e:	463a      	mov	r2, r7
 8007b10:	4628      	mov	r0, r5
 8007b12:	47b0      	blx	r6
 8007b14:	2800      	cmp	r0, #0
 8007b16:	dc06      	bgt.n	8007b26 <__sflush_r+0xfe>
 8007b18:	89a3      	ldrh	r3, [r4, #12]
 8007b1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b1e:	81a3      	strh	r3, [r4, #12]
 8007b20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b24:	e78e      	b.n	8007a44 <__sflush_r+0x1c>
 8007b26:	4407      	add	r7, r0
 8007b28:	eba8 0800 	sub.w	r8, r8, r0
 8007b2c:	e7e9      	b.n	8007b02 <__sflush_r+0xda>
 8007b2e:	bf00      	nop
 8007b30:	20400001 	.word	0x20400001

08007b34 <_fflush_r>:
 8007b34:	b538      	push	{r3, r4, r5, lr}
 8007b36:	690b      	ldr	r3, [r1, #16]
 8007b38:	4605      	mov	r5, r0
 8007b3a:	460c      	mov	r4, r1
 8007b3c:	b913      	cbnz	r3, 8007b44 <_fflush_r+0x10>
 8007b3e:	2500      	movs	r5, #0
 8007b40:	4628      	mov	r0, r5
 8007b42:	bd38      	pop	{r3, r4, r5, pc}
 8007b44:	b118      	cbz	r0, 8007b4e <_fflush_r+0x1a>
 8007b46:	6983      	ldr	r3, [r0, #24]
 8007b48:	b90b      	cbnz	r3, 8007b4e <_fflush_r+0x1a>
 8007b4a:	f000 f887 	bl	8007c5c <__sinit>
 8007b4e:	4b14      	ldr	r3, [pc, #80]	; (8007ba0 <_fflush_r+0x6c>)
 8007b50:	429c      	cmp	r4, r3
 8007b52:	d11b      	bne.n	8007b8c <_fflush_r+0x58>
 8007b54:	686c      	ldr	r4, [r5, #4]
 8007b56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d0ef      	beq.n	8007b3e <_fflush_r+0xa>
 8007b5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007b60:	07d0      	lsls	r0, r2, #31
 8007b62:	d404      	bmi.n	8007b6e <_fflush_r+0x3a>
 8007b64:	0599      	lsls	r1, r3, #22
 8007b66:	d402      	bmi.n	8007b6e <_fflush_r+0x3a>
 8007b68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b6a:	f000 f915 	bl	8007d98 <__retarget_lock_acquire_recursive>
 8007b6e:	4628      	mov	r0, r5
 8007b70:	4621      	mov	r1, r4
 8007b72:	f7ff ff59 	bl	8007a28 <__sflush_r>
 8007b76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b78:	07da      	lsls	r2, r3, #31
 8007b7a:	4605      	mov	r5, r0
 8007b7c:	d4e0      	bmi.n	8007b40 <_fflush_r+0xc>
 8007b7e:	89a3      	ldrh	r3, [r4, #12]
 8007b80:	059b      	lsls	r3, r3, #22
 8007b82:	d4dd      	bmi.n	8007b40 <_fflush_r+0xc>
 8007b84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b86:	f000 f908 	bl	8007d9a <__retarget_lock_release_recursive>
 8007b8a:	e7d9      	b.n	8007b40 <_fflush_r+0xc>
 8007b8c:	4b05      	ldr	r3, [pc, #20]	; (8007ba4 <_fflush_r+0x70>)
 8007b8e:	429c      	cmp	r4, r3
 8007b90:	d101      	bne.n	8007b96 <_fflush_r+0x62>
 8007b92:	68ac      	ldr	r4, [r5, #8]
 8007b94:	e7df      	b.n	8007b56 <_fflush_r+0x22>
 8007b96:	4b04      	ldr	r3, [pc, #16]	; (8007ba8 <_fflush_r+0x74>)
 8007b98:	429c      	cmp	r4, r3
 8007b9a:	bf08      	it	eq
 8007b9c:	68ec      	ldreq	r4, [r5, #12]
 8007b9e:	e7da      	b.n	8007b56 <_fflush_r+0x22>
 8007ba0:	08009914 	.word	0x08009914
 8007ba4:	08009934 	.word	0x08009934
 8007ba8:	080098f4 	.word	0x080098f4

08007bac <std>:
 8007bac:	2300      	movs	r3, #0
 8007bae:	b510      	push	{r4, lr}
 8007bb0:	4604      	mov	r4, r0
 8007bb2:	e9c0 3300 	strd	r3, r3, [r0]
 8007bb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007bba:	6083      	str	r3, [r0, #8]
 8007bbc:	8181      	strh	r1, [r0, #12]
 8007bbe:	6643      	str	r3, [r0, #100]	; 0x64
 8007bc0:	81c2      	strh	r2, [r0, #14]
 8007bc2:	6183      	str	r3, [r0, #24]
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	2208      	movs	r2, #8
 8007bc8:	305c      	adds	r0, #92	; 0x5c
 8007bca:	f7fd fba5 	bl	8005318 <memset>
 8007bce:	4b05      	ldr	r3, [pc, #20]	; (8007be4 <std+0x38>)
 8007bd0:	6263      	str	r3, [r4, #36]	; 0x24
 8007bd2:	4b05      	ldr	r3, [pc, #20]	; (8007be8 <std+0x3c>)
 8007bd4:	62a3      	str	r3, [r4, #40]	; 0x28
 8007bd6:	4b05      	ldr	r3, [pc, #20]	; (8007bec <std+0x40>)
 8007bd8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007bda:	4b05      	ldr	r3, [pc, #20]	; (8007bf0 <std+0x44>)
 8007bdc:	6224      	str	r4, [r4, #32]
 8007bde:	6323      	str	r3, [r4, #48]	; 0x30
 8007be0:	bd10      	pop	{r4, pc}
 8007be2:	bf00      	nop
 8007be4:	08007efd 	.word	0x08007efd
 8007be8:	08007f1f 	.word	0x08007f1f
 8007bec:	08007f57 	.word	0x08007f57
 8007bf0:	08007f7b 	.word	0x08007f7b

08007bf4 <_cleanup_r>:
 8007bf4:	4901      	ldr	r1, [pc, #4]	; (8007bfc <_cleanup_r+0x8>)
 8007bf6:	f000 b8af 	b.w	8007d58 <_fwalk_reent>
 8007bfa:	bf00      	nop
 8007bfc:	08007b35 	.word	0x08007b35

08007c00 <__sfmoreglue>:
 8007c00:	b570      	push	{r4, r5, r6, lr}
 8007c02:	1e4a      	subs	r2, r1, #1
 8007c04:	2568      	movs	r5, #104	; 0x68
 8007c06:	4355      	muls	r5, r2
 8007c08:	460e      	mov	r6, r1
 8007c0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007c0e:	f7ff fa87 	bl	8007120 <_malloc_r>
 8007c12:	4604      	mov	r4, r0
 8007c14:	b140      	cbz	r0, 8007c28 <__sfmoreglue+0x28>
 8007c16:	2100      	movs	r1, #0
 8007c18:	e9c0 1600 	strd	r1, r6, [r0]
 8007c1c:	300c      	adds	r0, #12
 8007c1e:	60a0      	str	r0, [r4, #8]
 8007c20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007c24:	f7fd fb78 	bl	8005318 <memset>
 8007c28:	4620      	mov	r0, r4
 8007c2a:	bd70      	pop	{r4, r5, r6, pc}

08007c2c <__sfp_lock_acquire>:
 8007c2c:	4801      	ldr	r0, [pc, #4]	; (8007c34 <__sfp_lock_acquire+0x8>)
 8007c2e:	f000 b8b3 	b.w	8007d98 <__retarget_lock_acquire_recursive>
 8007c32:	bf00      	nop
 8007c34:	200002fc 	.word	0x200002fc

08007c38 <__sfp_lock_release>:
 8007c38:	4801      	ldr	r0, [pc, #4]	; (8007c40 <__sfp_lock_release+0x8>)
 8007c3a:	f000 b8ae 	b.w	8007d9a <__retarget_lock_release_recursive>
 8007c3e:	bf00      	nop
 8007c40:	200002fc 	.word	0x200002fc

08007c44 <__sinit_lock_acquire>:
 8007c44:	4801      	ldr	r0, [pc, #4]	; (8007c4c <__sinit_lock_acquire+0x8>)
 8007c46:	f000 b8a7 	b.w	8007d98 <__retarget_lock_acquire_recursive>
 8007c4a:	bf00      	nop
 8007c4c:	200002f7 	.word	0x200002f7

08007c50 <__sinit_lock_release>:
 8007c50:	4801      	ldr	r0, [pc, #4]	; (8007c58 <__sinit_lock_release+0x8>)
 8007c52:	f000 b8a2 	b.w	8007d9a <__retarget_lock_release_recursive>
 8007c56:	bf00      	nop
 8007c58:	200002f7 	.word	0x200002f7

08007c5c <__sinit>:
 8007c5c:	b510      	push	{r4, lr}
 8007c5e:	4604      	mov	r4, r0
 8007c60:	f7ff fff0 	bl	8007c44 <__sinit_lock_acquire>
 8007c64:	69a3      	ldr	r3, [r4, #24]
 8007c66:	b11b      	cbz	r3, 8007c70 <__sinit+0x14>
 8007c68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c6c:	f7ff bff0 	b.w	8007c50 <__sinit_lock_release>
 8007c70:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007c74:	6523      	str	r3, [r4, #80]	; 0x50
 8007c76:	4b13      	ldr	r3, [pc, #76]	; (8007cc4 <__sinit+0x68>)
 8007c78:	4a13      	ldr	r2, [pc, #76]	; (8007cc8 <__sinit+0x6c>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	62a2      	str	r2, [r4, #40]	; 0x28
 8007c7e:	42a3      	cmp	r3, r4
 8007c80:	bf04      	itt	eq
 8007c82:	2301      	moveq	r3, #1
 8007c84:	61a3      	streq	r3, [r4, #24]
 8007c86:	4620      	mov	r0, r4
 8007c88:	f000 f820 	bl	8007ccc <__sfp>
 8007c8c:	6060      	str	r0, [r4, #4]
 8007c8e:	4620      	mov	r0, r4
 8007c90:	f000 f81c 	bl	8007ccc <__sfp>
 8007c94:	60a0      	str	r0, [r4, #8]
 8007c96:	4620      	mov	r0, r4
 8007c98:	f000 f818 	bl	8007ccc <__sfp>
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	60e0      	str	r0, [r4, #12]
 8007ca0:	2104      	movs	r1, #4
 8007ca2:	6860      	ldr	r0, [r4, #4]
 8007ca4:	f7ff ff82 	bl	8007bac <std>
 8007ca8:	68a0      	ldr	r0, [r4, #8]
 8007caa:	2201      	movs	r2, #1
 8007cac:	2109      	movs	r1, #9
 8007cae:	f7ff ff7d 	bl	8007bac <std>
 8007cb2:	68e0      	ldr	r0, [r4, #12]
 8007cb4:	2202      	movs	r2, #2
 8007cb6:	2112      	movs	r1, #18
 8007cb8:	f7ff ff78 	bl	8007bac <std>
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	61a3      	str	r3, [r4, #24]
 8007cc0:	e7d2      	b.n	8007c68 <__sinit+0xc>
 8007cc2:	bf00      	nop
 8007cc4:	08009570 	.word	0x08009570
 8007cc8:	08007bf5 	.word	0x08007bf5

08007ccc <__sfp>:
 8007ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cce:	4607      	mov	r7, r0
 8007cd0:	f7ff ffac 	bl	8007c2c <__sfp_lock_acquire>
 8007cd4:	4b1e      	ldr	r3, [pc, #120]	; (8007d50 <__sfp+0x84>)
 8007cd6:	681e      	ldr	r6, [r3, #0]
 8007cd8:	69b3      	ldr	r3, [r6, #24]
 8007cda:	b913      	cbnz	r3, 8007ce2 <__sfp+0x16>
 8007cdc:	4630      	mov	r0, r6
 8007cde:	f7ff ffbd 	bl	8007c5c <__sinit>
 8007ce2:	3648      	adds	r6, #72	; 0x48
 8007ce4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007ce8:	3b01      	subs	r3, #1
 8007cea:	d503      	bpl.n	8007cf4 <__sfp+0x28>
 8007cec:	6833      	ldr	r3, [r6, #0]
 8007cee:	b30b      	cbz	r3, 8007d34 <__sfp+0x68>
 8007cf0:	6836      	ldr	r6, [r6, #0]
 8007cf2:	e7f7      	b.n	8007ce4 <__sfp+0x18>
 8007cf4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007cf8:	b9d5      	cbnz	r5, 8007d30 <__sfp+0x64>
 8007cfa:	4b16      	ldr	r3, [pc, #88]	; (8007d54 <__sfp+0x88>)
 8007cfc:	60e3      	str	r3, [r4, #12]
 8007cfe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007d02:	6665      	str	r5, [r4, #100]	; 0x64
 8007d04:	f000 f847 	bl	8007d96 <__retarget_lock_init_recursive>
 8007d08:	f7ff ff96 	bl	8007c38 <__sfp_lock_release>
 8007d0c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007d10:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007d14:	6025      	str	r5, [r4, #0]
 8007d16:	61a5      	str	r5, [r4, #24]
 8007d18:	2208      	movs	r2, #8
 8007d1a:	4629      	mov	r1, r5
 8007d1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007d20:	f7fd fafa 	bl	8005318 <memset>
 8007d24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007d28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007d2c:	4620      	mov	r0, r4
 8007d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d30:	3468      	adds	r4, #104	; 0x68
 8007d32:	e7d9      	b.n	8007ce8 <__sfp+0x1c>
 8007d34:	2104      	movs	r1, #4
 8007d36:	4638      	mov	r0, r7
 8007d38:	f7ff ff62 	bl	8007c00 <__sfmoreglue>
 8007d3c:	4604      	mov	r4, r0
 8007d3e:	6030      	str	r0, [r6, #0]
 8007d40:	2800      	cmp	r0, #0
 8007d42:	d1d5      	bne.n	8007cf0 <__sfp+0x24>
 8007d44:	f7ff ff78 	bl	8007c38 <__sfp_lock_release>
 8007d48:	230c      	movs	r3, #12
 8007d4a:	603b      	str	r3, [r7, #0]
 8007d4c:	e7ee      	b.n	8007d2c <__sfp+0x60>
 8007d4e:	bf00      	nop
 8007d50:	08009570 	.word	0x08009570
 8007d54:	ffff0001 	.word	0xffff0001

08007d58 <_fwalk_reent>:
 8007d58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d5c:	4606      	mov	r6, r0
 8007d5e:	4688      	mov	r8, r1
 8007d60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007d64:	2700      	movs	r7, #0
 8007d66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d6a:	f1b9 0901 	subs.w	r9, r9, #1
 8007d6e:	d505      	bpl.n	8007d7c <_fwalk_reent+0x24>
 8007d70:	6824      	ldr	r4, [r4, #0]
 8007d72:	2c00      	cmp	r4, #0
 8007d74:	d1f7      	bne.n	8007d66 <_fwalk_reent+0xe>
 8007d76:	4638      	mov	r0, r7
 8007d78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d7c:	89ab      	ldrh	r3, [r5, #12]
 8007d7e:	2b01      	cmp	r3, #1
 8007d80:	d907      	bls.n	8007d92 <_fwalk_reent+0x3a>
 8007d82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d86:	3301      	adds	r3, #1
 8007d88:	d003      	beq.n	8007d92 <_fwalk_reent+0x3a>
 8007d8a:	4629      	mov	r1, r5
 8007d8c:	4630      	mov	r0, r6
 8007d8e:	47c0      	blx	r8
 8007d90:	4307      	orrs	r7, r0
 8007d92:	3568      	adds	r5, #104	; 0x68
 8007d94:	e7e9      	b.n	8007d6a <_fwalk_reent+0x12>

08007d96 <__retarget_lock_init_recursive>:
 8007d96:	4770      	bx	lr

08007d98 <__retarget_lock_acquire_recursive>:
 8007d98:	4770      	bx	lr

08007d9a <__retarget_lock_release_recursive>:
 8007d9a:	4770      	bx	lr

08007d9c <__swhatbuf_r>:
 8007d9c:	b570      	push	{r4, r5, r6, lr}
 8007d9e:	460e      	mov	r6, r1
 8007da0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007da4:	2900      	cmp	r1, #0
 8007da6:	b096      	sub	sp, #88	; 0x58
 8007da8:	4614      	mov	r4, r2
 8007daa:	461d      	mov	r5, r3
 8007dac:	da07      	bge.n	8007dbe <__swhatbuf_r+0x22>
 8007dae:	2300      	movs	r3, #0
 8007db0:	602b      	str	r3, [r5, #0]
 8007db2:	89b3      	ldrh	r3, [r6, #12]
 8007db4:	061a      	lsls	r2, r3, #24
 8007db6:	d410      	bmi.n	8007dda <__swhatbuf_r+0x3e>
 8007db8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007dbc:	e00e      	b.n	8007ddc <__swhatbuf_r+0x40>
 8007dbe:	466a      	mov	r2, sp
 8007dc0:	f000 f902 	bl	8007fc8 <_fstat_r>
 8007dc4:	2800      	cmp	r0, #0
 8007dc6:	dbf2      	blt.n	8007dae <__swhatbuf_r+0x12>
 8007dc8:	9a01      	ldr	r2, [sp, #4]
 8007dca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007dce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007dd2:	425a      	negs	r2, r3
 8007dd4:	415a      	adcs	r2, r3
 8007dd6:	602a      	str	r2, [r5, #0]
 8007dd8:	e7ee      	b.n	8007db8 <__swhatbuf_r+0x1c>
 8007dda:	2340      	movs	r3, #64	; 0x40
 8007ddc:	2000      	movs	r0, #0
 8007dde:	6023      	str	r3, [r4, #0]
 8007de0:	b016      	add	sp, #88	; 0x58
 8007de2:	bd70      	pop	{r4, r5, r6, pc}

08007de4 <__smakebuf_r>:
 8007de4:	898b      	ldrh	r3, [r1, #12]
 8007de6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007de8:	079d      	lsls	r5, r3, #30
 8007dea:	4606      	mov	r6, r0
 8007dec:	460c      	mov	r4, r1
 8007dee:	d507      	bpl.n	8007e00 <__smakebuf_r+0x1c>
 8007df0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007df4:	6023      	str	r3, [r4, #0]
 8007df6:	6123      	str	r3, [r4, #16]
 8007df8:	2301      	movs	r3, #1
 8007dfa:	6163      	str	r3, [r4, #20]
 8007dfc:	b002      	add	sp, #8
 8007dfe:	bd70      	pop	{r4, r5, r6, pc}
 8007e00:	ab01      	add	r3, sp, #4
 8007e02:	466a      	mov	r2, sp
 8007e04:	f7ff ffca 	bl	8007d9c <__swhatbuf_r>
 8007e08:	9900      	ldr	r1, [sp, #0]
 8007e0a:	4605      	mov	r5, r0
 8007e0c:	4630      	mov	r0, r6
 8007e0e:	f7ff f987 	bl	8007120 <_malloc_r>
 8007e12:	b948      	cbnz	r0, 8007e28 <__smakebuf_r+0x44>
 8007e14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e18:	059a      	lsls	r2, r3, #22
 8007e1a:	d4ef      	bmi.n	8007dfc <__smakebuf_r+0x18>
 8007e1c:	f023 0303 	bic.w	r3, r3, #3
 8007e20:	f043 0302 	orr.w	r3, r3, #2
 8007e24:	81a3      	strh	r3, [r4, #12]
 8007e26:	e7e3      	b.n	8007df0 <__smakebuf_r+0xc>
 8007e28:	4b0d      	ldr	r3, [pc, #52]	; (8007e60 <__smakebuf_r+0x7c>)
 8007e2a:	62b3      	str	r3, [r6, #40]	; 0x28
 8007e2c:	89a3      	ldrh	r3, [r4, #12]
 8007e2e:	6020      	str	r0, [r4, #0]
 8007e30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e34:	81a3      	strh	r3, [r4, #12]
 8007e36:	9b00      	ldr	r3, [sp, #0]
 8007e38:	6163      	str	r3, [r4, #20]
 8007e3a:	9b01      	ldr	r3, [sp, #4]
 8007e3c:	6120      	str	r0, [r4, #16]
 8007e3e:	b15b      	cbz	r3, 8007e58 <__smakebuf_r+0x74>
 8007e40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e44:	4630      	mov	r0, r6
 8007e46:	f000 f8d1 	bl	8007fec <_isatty_r>
 8007e4a:	b128      	cbz	r0, 8007e58 <__smakebuf_r+0x74>
 8007e4c:	89a3      	ldrh	r3, [r4, #12]
 8007e4e:	f023 0303 	bic.w	r3, r3, #3
 8007e52:	f043 0301 	orr.w	r3, r3, #1
 8007e56:	81a3      	strh	r3, [r4, #12]
 8007e58:	89a0      	ldrh	r0, [r4, #12]
 8007e5a:	4305      	orrs	r5, r0
 8007e5c:	81a5      	strh	r5, [r4, #12]
 8007e5e:	e7cd      	b.n	8007dfc <__smakebuf_r+0x18>
 8007e60:	08007bf5 	.word	0x08007bf5

08007e64 <_malloc_usable_size_r>:
 8007e64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e68:	1f18      	subs	r0, r3, #4
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	bfbc      	itt	lt
 8007e6e:	580b      	ldrlt	r3, [r1, r0]
 8007e70:	18c0      	addlt	r0, r0, r3
 8007e72:	4770      	bx	lr

08007e74 <_raise_r>:
 8007e74:	291f      	cmp	r1, #31
 8007e76:	b538      	push	{r3, r4, r5, lr}
 8007e78:	4604      	mov	r4, r0
 8007e7a:	460d      	mov	r5, r1
 8007e7c:	d904      	bls.n	8007e88 <_raise_r+0x14>
 8007e7e:	2316      	movs	r3, #22
 8007e80:	6003      	str	r3, [r0, #0]
 8007e82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e86:	bd38      	pop	{r3, r4, r5, pc}
 8007e88:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007e8a:	b112      	cbz	r2, 8007e92 <_raise_r+0x1e>
 8007e8c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007e90:	b94b      	cbnz	r3, 8007ea6 <_raise_r+0x32>
 8007e92:	4620      	mov	r0, r4
 8007e94:	f000 f830 	bl	8007ef8 <_getpid_r>
 8007e98:	462a      	mov	r2, r5
 8007e9a:	4601      	mov	r1, r0
 8007e9c:	4620      	mov	r0, r4
 8007e9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ea2:	f000 b817 	b.w	8007ed4 <_kill_r>
 8007ea6:	2b01      	cmp	r3, #1
 8007ea8:	d00a      	beq.n	8007ec0 <_raise_r+0x4c>
 8007eaa:	1c59      	adds	r1, r3, #1
 8007eac:	d103      	bne.n	8007eb6 <_raise_r+0x42>
 8007eae:	2316      	movs	r3, #22
 8007eb0:	6003      	str	r3, [r0, #0]
 8007eb2:	2001      	movs	r0, #1
 8007eb4:	e7e7      	b.n	8007e86 <_raise_r+0x12>
 8007eb6:	2400      	movs	r4, #0
 8007eb8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007ebc:	4628      	mov	r0, r5
 8007ebe:	4798      	blx	r3
 8007ec0:	2000      	movs	r0, #0
 8007ec2:	e7e0      	b.n	8007e86 <_raise_r+0x12>

08007ec4 <raise>:
 8007ec4:	4b02      	ldr	r3, [pc, #8]	; (8007ed0 <raise+0xc>)
 8007ec6:	4601      	mov	r1, r0
 8007ec8:	6818      	ldr	r0, [r3, #0]
 8007eca:	f7ff bfd3 	b.w	8007e74 <_raise_r>
 8007ece:	bf00      	nop
 8007ed0:	20000014 	.word	0x20000014

08007ed4 <_kill_r>:
 8007ed4:	b538      	push	{r3, r4, r5, lr}
 8007ed6:	4d07      	ldr	r5, [pc, #28]	; (8007ef4 <_kill_r+0x20>)
 8007ed8:	2300      	movs	r3, #0
 8007eda:	4604      	mov	r4, r0
 8007edc:	4608      	mov	r0, r1
 8007ede:	4611      	mov	r1, r2
 8007ee0:	602b      	str	r3, [r5, #0]
 8007ee2:	f7fa fc45 	bl	8002770 <_kill>
 8007ee6:	1c43      	adds	r3, r0, #1
 8007ee8:	d102      	bne.n	8007ef0 <_kill_r+0x1c>
 8007eea:	682b      	ldr	r3, [r5, #0]
 8007eec:	b103      	cbz	r3, 8007ef0 <_kill_r+0x1c>
 8007eee:	6023      	str	r3, [r4, #0]
 8007ef0:	bd38      	pop	{r3, r4, r5, pc}
 8007ef2:	bf00      	nop
 8007ef4:	200002f0 	.word	0x200002f0

08007ef8 <_getpid_r>:
 8007ef8:	f7fa bc32 	b.w	8002760 <_getpid>

08007efc <__sread>:
 8007efc:	b510      	push	{r4, lr}
 8007efe:	460c      	mov	r4, r1
 8007f00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f04:	f000 f894 	bl	8008030 <_read_r>
 8007f08:	2800      	cmp	r0, #0
 8007f0a:	bfab      	itete	ge
 8007f0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007f0e:	89a3      	ldrhlt	r3, [r4, #12]
 8007f10:	181b      	addge	r3, r3, r0
 8007f12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007f16:	bfac      	ite	ge
 8007f18:	6563      	strge	r3, [r4, #84]	; 0x54
 8007f1a:	81a3      	strhlt	r3, [r4, #12]
 8007f1c:	bd10      	pop	{r4, pc}

08007f1e <__swrite>:
 8007f1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f22:	461f      	mov	r7, r3
 8007f24:	898b      	ldrh	r3, [r1, #12]
 8007f26:	05db      	lsls	r3, r3, #23
 8007f28:	4605      	mov	r5, r0
 8007f2a:	460c      	mov	r4, r1
 8007f2c:	4616      	mov	r6, r2
 8007f2e:	d505      	bpl.n	8007f3c <__swrite+0x1e>
 8007f30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f34:	2302      	movs	r3, #2
 8007f36:	2200      	movs	r2, #0
 8007f38:	f000 f868 	bl	800800c <_lseek_r>
 8007f3c:	89a3      	ldrh	r3, [r4, #12]
 8007f3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f46:	81a3      	strh	r3, [r4, #12]
 8007f48:	4632      	mov	r2, r6
 8007f4a:	463b      	mov	r3, r7
 8007f4c:	4628      	mov	r0, r5
 8007f4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f52:	f000 b817 	b.w	8007f84 <_write_r>

08007f56 <__sseek>:
 8007f56:	b510      	push	{r4, lr}
 8007f58:	460c      	mov	r4, r1
 8007f5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f5e:	f000 f855 	bl	800800c <_lseek_r>
 8007f62:	1c43      	adds	r3, r0, #1
 8007f64:	89a3      	ldrh	r3, [r4, #12]
 8007f66:	bf15      	itete	ne
 8007f68:	6560      	strne	r0, [r4, #84]	; 0x54
 8007f6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007f6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007f72:	81a3      	strheq	r3, [r4, #12]
 8007f74:	bf18      	it	ne
 8007f76:	81a3      	strhne	r3, [r4, #12]
 8007f78:	bd10      	pop	{r4, pc}

08007f7a <__sclose>:
 8007f7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f7e:	f000 b813 	b.w	8007fa8 <_close_r>
	...

08007f84 <_write_r>:
 8007f84:	b538      	push	{r3, r4, r5, lr}
 8007f86:	4d07      	ldr	r5, [pc, #28]	; (8007fa4 <_write_r+0x20>)
 8007f88:	4604      	mov	r4, r0
 8007f8a:	4608      	mov	r0, r1
 8007f8c:	4611      	mov	r1, r2
 8007f8e:	2200      	movs	r2, #0
 8007f90:	602a      	str	r2, [r5, #0]
 8007f92:	461a      	mov	r2, r3
 8007f94:	f7fa fc23 	bl	80027de <_write>
 8007f98:	1c43      	adds	r3, r0, #1
 8007f9a:	d102      	bne.n	8007fa2 <_write_r+0x1e>
 8007f9c:	682b      	ldr	r3, [r5, #0]
 8007f9e:	b103      	cbz	r3, 8007fa2 <_write_r+0x1e>
 8007fa0:	6023      	str	r3, [r4, #0]
 8007fa2:	bd38      	pop	{r3, r4, r5, pc}
 8007fa4:	200002f0 	.word	0x200002f0

08007fa8 <_close_r>:
 8007fa8:	b538      	push	{r3, r4, r5, lr}
 8007faa:	4d06      	ldr	r5, [pc, #24]	; (8007fc4 <_close_r+0x1c>)
 8007fac:	2300      	movs	r3, #0
 8007fae:	4604      	mov	r4, r0
 8007fb0:	4608      	mov	r0, r1
 8007fb2:	602b      	str	r3, [r5, #0]
 8007fb4:	f7fa fc2f 	bl	8002816 <_close>
 8007fb8:	1c43      	adds	r3, r0, #1
 8007fba:	d102      	bne.n	8007fc2 <_close_r+0x1a>
 8007fbc:	682b      	ldr	r3, [r5, #0]
 8007fbe:	b103      	cbz	r3, 8007fc2 <_close_r+0x1a>
 8007fc0:	6023      	str	r3, [r4, #0]
 8007fc2:	bd38      	pop	{r3, r4, r5, pc}
 8007fc4:	200002f0 	.word	0x200002f0

08007fc8 <_fstat_r>:
 8007fc8:	b538      	push	{r3, r4, r5, lr}
 8007fca:	4d07      	ldr	r5, [pc, #28]	; (8007fe8 <_fstat_r+0x20>)
 8007fcc:	2300      	movs	r3, #0
 8007fce:	4604      	mov	r4, r0
 8007fd0:	4608      	mov	r0, r1
 8007fd2:	4611      	mov	r1, r2
 8007fd4:	602b      	str	r3, [r5, #0]
 8007fd6:	f7fa fc2a 	bl	800282e <_fstat>
 8007fda:	1c43      	adds	r3, r0, #1
 8007fdc:	d102      	bne.n	8007fe4 <_fstat_r+0x1c>
 8007fde:	682b      	ldr	r3, [r5, #0]
 8007fe0:	b103      	cbz	r3, 8007fe4 <_fstat_r+0x1c>
 8007fe2:	6023      	str	r3, [r4, #0]
 8007fe4:	bd38      	pop	{r3, r4, r5, pc}
 8007fe6:	bf00      	nop
 8007fe8:	200002f0 	.word	0x200002f0

08007fec <_isatty_r>:
 8007fec:	b538      	push	{r3, r4, r5, lr}
 8007fee:	4d06      	ldr	r5, [pc, #24]	; (8008008 <_isatty_r+0x1c>)
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	4604      	mov	r4, r0
 8007ff4:	4608      	mov	r0, r1
 8007ff6:	602b      	str	r3, [r5, #0]
 8007ff8:	f7fa fc29 	bl	800284e <_isatty>
 8007ffc:	1c43      	adds	r3, r0, #1
 8007ffe:	d102      	bne.n	8008006 <_isatty_r+0x1a>
 8008000:	682b      	ldr	r3, [r5, #0]
 8008002:	b103      	cbz	r3, 8008006 <_isatty_r+0x1a>
 8008004:	6023      	str	r3, [r4, #0]
 8008006:	bd38      	pop	{r3, r4, r5, pc}
 8008008:	200002f0 	.word	0x200002f0

0800800c <_lseek_r>:
 800800c:	b538      	push	{r3, r4, r5, lr}
 800800e:	4d07      	ldr	r5, [pc, #28]	; (800802c <_lseek_r+0x20>)
 8008010:	4604      	mov	r4, r0
 8008012:	4608      	mov	r0, r1
 8008014:	4611      	mov	r1, r2
 8008016:	2200      	movs	r2, #0
 8008018:	602a      	str	r2, [r5, #0]
 800801a:	461a      	mov	r2, r3
 800801c:	f7fa fc22 	bl	8002864 <_lseek>
 8008020:	1c43      	adds	r3, r0, #1
 8008022:	d102      	bne.n	800802a <_lseek_r+0x1e>
 8008024:	682b      	ldr	r3, [r5, #0]
 8008026:	b103      	cbz	r3, 800802a <_lseek_r+0x1e>
 8008028:	6023      	str	r3, [r4, #0]
 800802a:	bd38      	pop	{r3, r4, r5, pc}
 800802c:	200002f0 	.word	0x200002f0

08008030 <_read_r>:
 8008030:	b538      	push	{r3, r4, r5, lr}
 8008032:	4d07      	ldr	r5, [pc, #28]	; (8008050 <_read_r+0x20>)
 8008034:	4604      	mov	r4, r0
 8008036:	4608      	mov	r0, r1
 8008038:	4611      	mov	r1, r2
 800803a:	2200      	movs	r2, #0
 800803c:	602a      	str	r2, [r5, #0]
 800803e:	461a      	mov	r2, r3
 8008040:	f7fa fbb0 	bl	80027a4 <_read>
 8008044:	1c43      	adds	r3, r0, #1
 8008046:	d102      	bne.n	800804e <_read_r+0x1e>
 8008048:	682b      	ldr	r3, [r5, #0]
 800804a:	b103      	cbz	r3, 800804e <_read_r+0x1e>
 800804c:	6023      	str	r3, [r4, #0]
 800804e:	bd38      	pop	{r3, r4, r5, pc}
 8008050:	200002f0 	.word	0x200002f0
 8008054:	00000000 	.word	0x00000000

08008058 <cos>:
 8008058:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800805a:	ec53 2b10 	vmov	r2, r3, d0
 800805e:	4824      	ldr	r0, [pc, #144]	; (80080f0 <cos+0x98>)
 8008060:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008064:	4281      	cmp	r1, r0
 8008066:	dc06      	bgt.n	8008076 <cos+0x1e>
 8008068:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 80080e8 <cos+0x90>
 800806c:	f000 fb48 	bl	8008700 <__kernel_cos>
 8008070:	ec51 0b10 	vmov	r0, r1, d0
 8008074:	e007      	b.n	8008086 <cos+0x2e>
 8008076:	481f      	ldr	r0, [pc, #124]	; (80080f4 <cos+0x9c>)
 8008078:	4281      	cmp	r1, r0
 800807a:	dd09      	ble.n	8008090 <cos+0x38>
 800807c:	ee10 0a10 	vmov	r0, s0
 8008080:	4619      	mov	r1, r3
 8008082:	f7f8 f921 	bl	80002c8 <__aeabi_dsub>
 8008086:	ec41 0b10 	vmov	d0, r0, r1
 800808a:	b005      	add	sp, #20
 800808c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008090:	4668      	mov	r0, sp
 8008092:	f000 f889 	bl	80081a8 <__ieee754_rem_pio2>
 8008096:	f000 0003 	and.w	r0, r0, #3
 800809a:	2801      	cmp	r0, #1
 800809c:	d007      	beq.n	80080ae <cos+0x56>
 800809e:	2802      	cmp	r0, #2
 80080a0:	d012      	beq.n	80080c8 <cos+0x70>
 80080a2:	b9c0      	cbnz	r0, 80080d6 <cos+0x7e>
 80080a4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80080a8:	ed9d 0b00 	vldr	d0, [sp]
 80080ac:	e7de      	b.n	800806c <cos+0x14>
 80080ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 80080b2:	ed9d 0b00 	vldr	d0, [sp]
 80080b6:	f000 ff2b 	bl	8008f10 <__kernel_sin>
 80080ba:	ec53 2b10 	vmov	r2, r3, d0
 80080be:	ee10 0a10 	vmov	r0, s0
 80080c2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80080c6:	e7de      	b.n	8008086 <cos+0x2e>
 80080c8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80080cc:	ed9d 0b00 	vldr	d0, [sp]
 80080d0:	f000 fb16 	bl	8008700 <__kernel_cos>
 80080d4:	e7f1      	b.n	80080ba <cos+0x62>
 80080d6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80080da:	ed9d 0b00 	vldr	d0, [sp]
 80080de:	2001      	movs	r0, #1
 80080e0:	f000 ff16 	bl	8008f10 <__kernel_sin>
 80080e4:	e7c4      	b.n	8008070 <cos+0x18>
 80080e6:	bf00      	nop
	...
 80080f0:	3fe921fb 	.word	0x3fe921fb
 80080f4:	7fefffff 	.word	0x7fefffff

080080f8 <sin>:
 80080f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80080fa:	ec53 2b10 	vmov	r2, r3, d0
 80080fe:	4826      	ldr	r0, [pc, #152]	; (8008198 <sin+0xa0>)
 8008100:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008104:	4281      	cmp	r1, r0
 8008106:	dc07      	bgt.n	8008118 <sin+0x20>
 8008108:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8008190 <sin+0x98>
 800810c:	2000      	movs	r0, #0
 800810e:	f000 feff 	bl	8008f10 <__kernel_sin>
 8008112:	ec51 0b10 	vmov	r0, r1, d0
 8008116:	e007      	b.n	8008128 <sin+0x30>
 8008118:	4820      	ldr	r0, [pc, #128]	; (800819c <sin+0xa4>)
 800811a:	4281      	cmp	r1, r0
 800811c:	dd09      	ble.n	8008132 <sin+0x3a>
 800811e:	ee10 0a10 	vmov	r0, s0
 8008122:	4619      	mov	r1, r3
 8008124:	f7f8 f8d0 	bl	80002c8 <__aeabi_dsub>
 8008128:	ec41 0b10 	vmov	d0, r0, r1
 800812c:	b005      	add	sp, #20
 800812e:	f85d fb04 	ldr.w	pc, [sp], #4
 8008132:	4668      	mov	r0, sp
 8008134:	f000 f838 	bl	80081a8 <__ieee754_rem_pio2>
 8008138:	f000 0003 	and.w	r0, r0, #3
 800813c:	2801      	cmp	r0, #1
 800813e:	d008      	beq.n	8008152 <sin+0x5a>
 8008140:	2802      	cmp	r0, #2
 8008142:	d00d      	beq.n	8008160 <sin+0x68>
 8008144:	b9d0      	cbnz	r0, 800817c <sin+0x84>
 8008146:	ed9d 1b02 	vldr	d1, [sp, #8]
 800814a:	ed9d 0b00 	vldr	d0, [sp]
 800814e:	2001      	movs	r0, #1
 8008150:	e7dd      	b.n	800810e <sin+0x16>
 8008152:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008156:	ed9d 0b00 	vldr	d0, [sp]
 800815a:	f000 fad1 	bl	8008700 <__kernel_cos>
 800815e:	e7d8      	b.n	8008112 <sin+0x1a>
 8008160:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008164:	ed9d 0b00 	vldr	d0, [sp]
 8008168:	2001      	movs	r0, #1
 800816a:	f000 fed1 	bl	8008f10 <__kernel_sin>
 800816e:	ec53 2b10 	vmov	r2, r3, d0
 8008172:	ee10 0a10 	vmov	r0, s0
 8008176:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800817a:	e7d5      	b.n	8008128 <sin+0x30>
 800817c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008180:	ed9d 0b00 	vldr	d0, [sp]
 8008184:	f000 fabc 	bl	8008700 <__kernel_cos>
 8008188:	e7f1      	b.n	800816e <sin+0x76>
 800818a:	bf00      	nop
 800818c:	f3af 8000 	nop.w
	...
 8008198:	3fe921fb 	.word	0x3fe921fb
 800819c:	7fefffff 	.word	0x7fefffff

080081a0 <atan2f>:
 80081a0:	f000 ba0c 	b.w	80085bc <__ieee754_atan2f>
 80081a4:	0000      	movs	r0, r0
	...

080081a8 <__ieee754_rem_pio2>:
 80081a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ac:	ed2d 8b02 	vpush	{d8}
 80081b0:	ec55 4b10 	vmov	r4, r5, d0
 80081b4:	4bca      	ldr	r3, [pc, #808]	; (80084e0 <__ieee754_rem_pio2+0x338>)
 80081b6:	b08b      	sub	sp, #44	; 0x2c
 80081b8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80081bc:	4598      	cmp	r8, r3
 80081be:	4682      	mov	sl, r0
 80081c0:	9502      	str	r5, [sp, #8]
 80081c2:	dc08      	bgt.n	80081d6 <__ieee754_rem_pio2+0x2e>
 80081c4:	2200      	movs	r2, #0
 80081c6:	2300      	movs	r3, #0
 80081c8:	ed80 0b00 	vstr	d0, [r0]
 80081cc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80081d0:	f04f 0b00 	mov.w	fp, #0
 80081d4:	e028      	b.n	8008228 <__ieee754_rem_pio2+0x80>
 80081d6:	4bc3      	ldr	r3, [pc, #780]	; (80084e4 <__ieee754_rem_pio2+0x33c>)
 80081d8:	4598      	cmp	r8, r3
 80081da:	dc78      	bgt.n	80082ce <__ieee754_rem_pio2+0x126>
 80081dc:	9b02      	ldr	r3, [sp, #8]
 80081de:	4ec2      	ldr	r6, [pc, #776]	; (80084e8 <__ieee754_rem_pio2+0x340>)
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	ee10 0a10 	vmov	r0, s0
 80081e6:	a3b0      	add	r3, pc, #704	; (adr r3, 80084a8 <__ieee754_rem_pio2+0x300>)
 80081e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ec:	4629      	mov	r1, r5
 80081ee:	dd39      	ble.n	8008264 <__ieee754_rem_pio2+0xbc>
 80081f0:	f7f8 f86a 	bl	80002c8 <__aeabi_dsub>
 80081f4:	45b0      	cmp	r8, r6
 80081f6:	4604      	mov	r4, r0
 80081f8:	460d      	mov	r5, r1
 80081fa:	d01b      	beq.n	8008234 <__ieee754_rem_pio2+0x8c>
 80081fc:	a3ac      	add	r3, pc, #688	; (adr r3, 80084b0 <__ieee754_rem_pio2+0x308>)
 80081fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008202:	f7f8 f861 	bl	80002c8 <__aeabi_dsub>
 8008206:	4602      	mov	r2, r0
 8008208:	460b      	mov	r3, r1
 800820a:	e9ca 2300 	strd	r2, r3, [sl]
 800820e:	4620      	mov	r0, r4
 8008210:	4629      	mov	r1, r5
 8008212:	f7f8 f859 	bl	80002c8 <__aeabi_dsub>
 8008216:	a3a6      	add	r3, pc, #664	; (adr r3, 80084b0 <__ieee754_rem_pio2+0x308>)
 8008218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800821c:	f7f8 f854 	bl	80002c8 <__aeabi_dsub>
 8008220:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008224:	f04f 0b01 	mov.w	fp, #1
 8008228:	4658      	mov	r0, fp
 800822a:	b00b      	add	sp, #44	; 0x2c
 800822c:	ecbd 8b02 	vpop	{d8}
 8008230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008234:	a3a0      	add	r3, pc, #640	; (adr r3, 80084b8 <__ieee754_rem_pio2+0x310>)
 8008236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800823a:	f7f8 f845 	bl	80002c8 <__aeabi_dsub>
 800823e:	a3a0      	add	r3, pc, #640	; (adr r3, 80084c0 <__ieee754_rem_pio2+0x318>)
 8008240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008244:	4604      	mov	r4, r0
 8008246:	460d      	mov	r5, r1
 8008248:	f7f8 f83e 	bl	80002c8 <__aeabi_dsub>
 800824c:	4602      	mov	r2, r0
 800824e:	460b      	mov	r3, r1
 8008250:	e9ca 2300 	strd	r2, r3, [sl]
 8008254:	4620      	mov	r0, r4
 8008256:	4629      	mov	r1, r5
 8008258:	f7f8 f836 	bl	80002c8 <__aeabi_dsub>
 800825c:	a398      	add	r3, pc, #608	; (adr r3, 80084c0 <__ieee754_rem_pio2+0x318>)
 800825e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008262:	e7db      	b.n	800821c <__ieee754_rem_pio2+0x74>
 8008264:	f7f8 f832 	bl	80002cc <__adddf3>
 8008268:	45b0      	cmp	r8, r6
 800826a:	4604      	mov	r4, r0
 800826c:	460d      	mov	r5, r1
 800826e:	d016      	beq.n	800829e <__ieee754_rem_pio2+0xf6>
 8008270:	a38f      	add	r3, pc, #572	; (adr r3, 80084b0 <__ieee754_rem_pio2+0x308>)
 8008272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008276:	f7f8 f829 	bl	80002cc <__adddf3>
 800827a:	4602      	mov	r2, r0
 800827c:	460b      	mov	r3, r1
 800827e:	e9ca 2300 	strd	r2, r3, [sl]
 8008282:	4620      	mov	r0, r4
 8008284:	4629      	mov	r1, r5
 8008286:	f7f8 f81f 	bl	80002c8 <__aeabi_dsub>
 800828a:	a389      	add	r3, pc, #548	; (adr r3, 80084b0 <__ieee754_rem_pio2+0x308>)
 800828c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008290:	f7f8 f81c 	bl	80002cc <__adddf3>
 8008294:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8008298:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800829c:	e7c4      	b.n	8008228 <__ieee754_rem_pio2+0x80>
 800829e:	a386      	add	r3, pc, #536	; (adr r3, 80084b8 <__ieee754_rem_pio2+0x310>)
 80082a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a4:	f7f8 f812 	bl	80002cc <__adddf3>
 80082a8:	a385      	add	r3, pc, #532	; (adr r3, 80084c0 <__ieee754_rem_pio2+0x318>)
 80082aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ae:	4604      	mov	r4, r0
 80082b0:	460d      	mov	r5, r1
 80082b2:	f7f8 f80b 	bl	80002cc <__adddf3>
 80082b6:	4602      	mov	r2, r0
 80082b8:	460b      	mov	r3, r1
 80082ba:	e9ca 2300 	strd	r2, r3, [sl]
 80082be:	4620      	mov	r0, r4
 80082c0:	4629      	mov	r1, r5
 80082c2:	f7f8 f801 	bl	80002c8 <__aeabi_dsub>
 80082c6:	a37e      	add	r3, pc, #504	; (adr r3, 80084c0 <__ieee754_rem_pio2+0x318>)
 80082c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082cc:	e7e0      	b.n	8008290 <__ieee754_rem_pio2+0xe8>
 80082ce:	4b87      	ldr	r3, [pc, #540]	; (80084ec <__ieee754_rem_pio2+0x344>)
 80082d0:	4598      	cmp	r8, r3
 80082d2:	f300 80d9 	bgt.w	8008488 <__ieee754_rem_pio2+0x2e0>
 80082d6:	f000 fed9 	bl	800908c <fabs>
 80082da:	ec55 4b10 	vmov	r4, r5, d0
 80082de:	ee10 0a10 	vmov	r0, s0
 80082e2:	a379      	add	r3, pc, #484	; (adr r3, 80084c8 <__ieee754_rem_pio2+0x320>)
 80082e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e8:	4629      	mov	r1, r5
 80082ea:	f7f8 f9a5 	bl	8000638 <__aeabi_dmul>
 80082ee:	4b80      	ldr	r3, [pc, #512]	; (80084f0 <__ieee754_rem_pio2+0x348>)
 80082f0:	2200      	movs	r2, #0
 80082f2:	f7f7 ffeb 	bl	80002cc <__adddf3>
 80082f6:	f7f8 fc4f 	bl	8000b98 <__aeabi_d2iz>
 80082fa:	4683      	mov	fp, r0
 80082fc:	f7f8 f932 	bl	8000564 <__aeabi_i2d>
 8008300:	4602      	mov	r2, r0
 8008302:	460b      	mov	r3, r1
 8008304:	ec43 2b18 	vmov	d8, r2, r3
 8008308:	a367      	add	r3, pc, #412	; (adr r3, 80084a8 <__ieee754_rem_pio2+0x300>)
 800830a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800830e:	f7f8 f993 	bl	8000638 <__aeabi_dmul>
 8008312:	4602      	mov	r2, r0
 8008314:	460b      	mov	r3, r1
 8008316:	4620      	mov	r0, r4
 8008318:	4629      	mov	r1, r5
 800831a:	f7f7 ffd5 	bl	80002c8 <__aeabi_dsub>
 800831e:	a364      	add	r3, pc, #400	; (adr r3, 80084b0 <__ieee754_rem_pio2+0x308>)
 8008320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008324:	4606      	mov	r6, r0
 8008326:	460f      	mov	r7, r1
 8008328:	ec51 0b18 	vmov	r0, r1, d8
 800832c:	f7f8 f984 	bl	8000638 <__aeabi_dmul>
 8008330:	f1bb 0f1f 	cmp.w	fp, #31
 8008334:	4604      	mov	r4, r0
 8008336:	460d      	mov	r5, r1
 8008338:	dc0d      	bgt.n	8008356 <__ieee754_rem_pio2+0x1ae>
 800833a:	4b6e      	ldr	r3, [pc, #440]	; (80084f4 <__ieee754_rem_pio2+0x34c>)
 800833c:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8008340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008344:	4543      	cmp	r3, r8
 8008346:	d006      	beq.n	8008356 <__ieee754_rem_pio2+0x1ae>
 8008348:	4622      	mov	r2, r4
 800834a:	462b      	mov	r3, r5
 800834c:	4630      	mov	r0, r6
 800834e:	4639      	mov	r1, r7
 8008350:	f7f7 ffba 	bl	80002c8 <__aeabi_dsub>
 8008354:	e00f      	b.n	8008376 <__ieee754_rem_pio2+0x1ce>
 8008356:	462b      	mov	r3, r5
 8008358:	4622      	mov	r2, r4
 800835a:	4630      	mov	r0, r6
 800835c:	4639      	mov	r1, r7
 800835e:	f7f7 ffb3 	bl	80002c8 <__aeabi_dsub>
 8008362:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008366:	9303      	str	r3, [sp, #12]
 8008368:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800836c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8008370:	f1b8 0f10 	cmp.w	r8, #16
 8008374:	dc02      	bgt.n	800837c <__ieee754_rem_pio2+0x1d4>
 8008376:	e9ca 0100 	strd	r0, r1, [sl]
 800837a:	e039      	b.n	80083f0 <__ieee754_rem_pio2+0x248>
 800837c:	a34e      	add	r3, pc, #312	; (adr r3, 80084b8 <__ieee754_rem_pio2+0x310>)
 800837e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008382:	ec51 0b18 	vmov	r0, r1, d8
 8008386:	f7f8 f957 	bl	8000638 <__aeabi_dmul>
 800838a:	4604      	mov	r4, r0
 800838c:	460d      	mov	r5, r1
 800838e:	4602      	mov	r2, r0
 8008390:	460b      	mov	r3, r1
 8008392:	4630      	mov	r0, r6
 8008394:	4639      	mov	r1, r7
 8008396:	f7f7 ff97 	bl	80002c8 <__aeabi_dsub>
 800839a:	4602      	mov	r2, r0
 800839c:	460b      	mov	r3, r1
 800839e:	4680      	mov	r8, r0
 80083a0:	4689      	mov	r9, r1
 80083a2:	4630      	mov	r0, r6
 80083a4:	4639      	mov	r1, r7
 80083a6:	f7f7 ff8f 	bl	80002c8 <__aeabi_dsub>
 80083aa:	4622      	mov	r2, r4
 80083ac:	462b      	mov	r3, r5
 80083ae:	f7f7 ff8b 	bl	80002c8 <__aeabi_dsub>
 80083b2:	a343      	add	r3, pc, #268	; (adr r3, 80084c0 <__ieee754_rem_pio2+0x318>)
 80083b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b8:	4604      	mov	r4, r0
 80083ba:	460d      	mov	r5, r1
 80083bc:	ec51 0b18 	vmov	r0, r1, d8
 80083c0:	f7f8 f93a 	bl	8000638 <__aeabi_dmul>
 80083c4:	4622      	mov	r2, r4
 80083c6:	462b      	mov	r3, r5
 80083c8:	f7f7 ff7e 	bl	80002c8 <__aeabi_dsub>
 80083cc:	4602      	mov	r2, r0
 80083ce:	460b      	mov	r3, r1
 80083d0:	4604      	mov	r4, r0
 80083d2:	460d      	mov	r5, r1
 80083d4:	4640      	mov	r0, r8
 80083d6:	4649      	mov	r1, r9
 80083d8:	f7f7 ff76 	bl	80002c8 <__aeabi_dsub>
 80083dc:	9a03      	ldr	r2, [sp, #12]
 80083de:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80083e2:	1ad3      	subs	r3, r2, r3
 80083e4:	2b31      	cmp	r3, #49	; 0x31
 80083e6:	dc24      	bgt.n	8008432 <__ieee754_rem_pio2+0x28a>
 80083e8:	e9ca 0100 	strd	r0, r1, [sl]
 80083ec:	4646      	mov	r6, r8
 80083ee:	464f      	mov	r7, r9
 80083f0:	e9da 8900 	ldrd	r8, r9, [sl]
 80083f4:	4630      	mov	r0, r6
 80083f6:	4642      	mov	r2, r8
 80083f8:	464b      	mov	r3, r9
 80083fa:	4639      	mov	r1, r7
 80083fc:	f7f7 ff64 	bl	80002c8 <__aeabi_dsub>
 8008400:	462b      	mov	r3, r5
 8008402:	4622      	mov	r2, r4
 8008404:	f7f7 ff60 	bl	80002c8 <__aeabi_dsub>
 8008408:	9b02      	ldr	r3, [sp, #8]
 800840a:	2b00      	cmp	r3, #0
 800840c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008410:	f6bf af0a 	bge.w	8008228 <__ieee754_rem_pio2+0x80>
 8008414:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008418:	f8ca 3004 	str.w	r3, [sl, #4]
 800841c:	f8ca 8000 	str.w	r8, [sl]
 8008420:	f8ca 0008 	str.w	r0, [sl, #8]
 8008424:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008428:	f8ca 300c 	str.w	r3, [sl, #12]
 800842c:	f1cb 0b00 	rsb	fp, fp, #0
 8008430:	e6fa      	b.n	8008228 <__ieee754_rem_pio2+0x80>
 8008432:	a327      	add	r3, pc, #156	; (adr r3, 80084d0 <__ieee754_rem_pio2+0x328>)
 8008434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008438:	ec51 0b18 	vmov	r0, r1, d8
 800843c:	f7f8 f8fc 	bl	8000638 <__aeabi_dmul>
 8008440:	4604      	mov	r4, r0
 8008442:	460d      	mov	r5, r1
 8008444:	4602      	mov	r2, r0
 8008446:	460b      	mov	r3, r1
 8008448:	4640      	mov	r0, r8
 800844a:	4649      	mov	r1, r9
 800844c:	f7f7 ff3c 	bl	80002c8 <__aeabi_dsub>
 8008450:	4602      	mov	r2, r0
 8008452:	460b      	mov	r3, r1
 8008454:	4606      	mov	r6, r0
 8008456:	460f      	mov	r7, r1
 8008458:	4640      	mov	r0, r8
 800845a:	4649      	mov	r1, r9
 800845c:	f7f7 ff34 	bl	80002c8 <__aeabi_dsub>
 8008460:	4622      	mov	r2, r4
 8008462:	462b      	mov	r3, r5
 8008464:	f7f7 ff30 	bl	80002c8 <__aeabi_dsub>
 8008468:	a31b      	add	r3, pc, #108	; (adr r3, 80084d8 <__ieee754_rem_pio2+0x330>)
 800846a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800846e:	4604      	mov	r4, r0
 8008470:	460d      	mov	r5, r1
 8008472:	ec51 0b18 	vmov	r0, r1, d8
 8008476:	f7f8 f8df 	bl	8000638 <__aeabi_dmul>
 800847a:	4622      	mov	r2, r4
 800847c:	462b      	mov	r3, r5
 800847e:	f7f7 ff23 	bl	80002c8 <__aeabi_dsub>
 8008482:	4604      	mov	r4, r0
 8008484:	460d      	mov	r5, r1
 8008486:	e75f      	b.n	8008348 <__ieee754_rem_pio2+0x1a0>
 8008488:	4b1b      	ldr	r3, [pc, #108]	; (80084f8 <__ieee754_rem_pio2+0x350>)
 800848a:	4598      	cmp	r8, r3
 800848c:	dd36      	ble.n	80084fc <__ieee754_rem_pio2+0x354>
 800848e:	ee10 2a10 	vmov	r2, s0
 8008492:	462b      	mov	r3, r5
 8008494:	4620      	mov	r0, r4
 8008496:	4629      	mov	r1, r5
 8008498:	f7f7 ff16 	bl	80002c8 <__aeabi_dsub>
 800849c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80084a0:	e9ca 0100 	strd	r0, r1, [sl]
 80084a4:	e694      	b.n	80081d0 <__ieee754_rem_pio2+0x28>
 80084a6:	bf00      	nop
 80084a8:	54400000 	.word	0x54400000
 80084ac:	3ff921fb 	.word	0x3ff921fb
 80084b0:	1a626331 	.word	0x1a626331
 80084b4:	3dd0b461 	.word	0x3dd0b461
 80084b8:	1a600000 	.word	0x1a600000
 80084bc:	3dd0b461 	.word	0x3dd0b461
 80084c0:	2e037073 	.word	0x2e037073
 80084c4:	3ba3198a 	.word	0x3ba3198a
 80084c8:	6dc9c883 	.word	0x6dc9c883
 80084cc:	3fe45f30 	.word	0x3fe45f30
 80084d0:	2e000000 	.word	0x2e000000
 80084d4:	3ba3198a 	.word	0x3ba3198a
 80084d8:	252049c1 	.word	0x252049c1
 80084dc:	397b839a 	.word	0x397b839a
 80084e0:	3fe921fb 	.word	0x3fe921fb
 80084e4:	4002d97b 	.word	0x4002d97b
 80084e8:	3ff921fb 	.word	0x3ff921fb
 80084ec:	413921fb 	.word	0x413921fb
 80084f0:	3fe00000 	.word	0x3fe00000
 80084f4:	08009954 	.word	0x08009954
 80084f8:	7fefffff 	.word	0x7fefffff
 80084fc:	ea4f 5428 	mov.w	r4, r8, asr #20
 8008500:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8008504:	ee10 0a10 	vmov	r0, s0
 8008508:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800850c:	ee10 6a10 	vmov	r6, s0
 8008510:	460f      	mov	r7, r1
 8008512:	f7f8 fb41 	bl	8000b98 <__aeabi_d2iz>
 8008516:	f7f8 f825 	bl	8000564 <__aeabi_i2d>
 800851a:	4602      	mov	r2, r0
 800851c:	460b      	mov	r3, r1
 800851e:	4630      	mov	r0, r6
 8008520:	4639      	mov	r1, r7
 8008522:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008526:	f7f7 fecf 	bl	80002c8 <__aeabi_dsub>
 800852a:	4b22      	ldr	r3, [pc, #136]	; (80085b4 <__ieee754_rem_pio2+0x40c>)
 800852c:	2200      	movs	r2, #0
 800852e:	f7f8 f883 	bl	8000638 <__aeabi_dmul>
 8008532:	460f      	mov	r7, r1
 8008534:	4606      	mov	r6, r0
 8008536:	f7f8 fb2f 	bl	8000b98 <__aeabi_d2iz>
 800853a:	f7f8 f813 	bl	8000564 <__aeabi_i2d>
 800853e:	4602      	mov	r2, r0
 8008540:	460b      	mov	r3, r1
 8008542:	4630      	mov	r0, r6
 8008544:	4639      	mov	r1, r7
 8008546:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800854a:	f7f7 febd 	bl	80002c8 <__aeabi_dsub>
 800854e:	4b19      	ldr	r3, [pc, #100]	; (80085b4 <__ieee754_rem_pio2+0x40c>)
 8008550:	2200      	movs	r2, #0
 8008552:	f7f8 f871 	bl	8000638 <__aeabi_dmul>
 8008556:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800855a:	ad04      	add	r5, sp, #16
 800855c:	f04f 0803 	mov.w	r8, #3
 8008560:	46a9      	mov	r9, r5
 8008562:	2600      	movs	r6, #0
 8008564:	2700      	movs	r7, #0
 8008566:	4632      	mov	r2, r6
 8008568:	463b      	mov	r3, r7
 800856a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800856e:	46c3      	mov	fp, r8
 8008570:	3d08      	subs	r5, #8
 8008572:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8008576:	f7f8 fac7 	bl	8000b08 <__aeabi_dcmpeq>
 800857a:	2800      	cmp	r0, #0
 800857c:	d1f3      	bne.n	8008566 <__ieee754_rem_pio2+0x3be>
 800857e:	4b0e      	ldr	r3, [pc, #56]	; (80085b8 <__ieee754_rem_pio2+0x410>)
 8008580:	9301      	str	r3, [sp, #4]
 8008582:	2302      	movs	r3, #2
 8008584:	9300      	str	r3, [sp, #0]
 8008586:	4622      	mov	r2, r4
 8008588:	465b      	mov	r3, fp
 800858a:	4651      	mov	r1, sl
 800858c:	4648      	mov	r0, r9
 800858e:	f000 f97f 	bl	8008890 <__kernel_rem_pio2>
 8008592:	9b02      	ldr	r3, [sp, #8]
 8008594:	2b00      	cmp	r3, #0
 8008596:	4683      	mov	fp, r0
 8008598:	f6bf ae46 	bge.w	8008228 <__ieee754_rem_pio2+0x80>
 800859c:	f8da 3004 	ldr.w	r3, [sl, #4]
 80085a0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80085a4:	f8ca 3004 	str.w	r3, [sl, #4]
 80085a8:	f8da 300c 	ldr.w	r3, [sl, #12]
 80085ac:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80085b0:	e73a      	b.n	8008428 <__ieee754_rem_pio2+0x280>
 80085b2:	bf00      	nop
 80085b4:	41700000 	.word	0x41700000
 80085b8:	080099d4 	.word	0x080099d4

080085bc <__ieee754_atan2f>:
 80085bc:	ee10 2a90 	vmov	r2, s1
 80085c0:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80085c4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80085c8:	b510      	push	{r4, lr}
 80085ca:	eef0 7a40 	vmov.f32	s15, s0
 80085ce:	dc06      	bgt.n	80085de <__ieee754_atan2f+0x22>
 80085d0:	ee10 0a10 	vmov	r0, s0
 80085d4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80085d8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80085dc:	dd04      	ble.n	80085e8 <__ieee754_atan2f+0x2c>
 80085de:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80085e2:	eeb0 0a67 	vmov.f32	s0, s15
 80085e6:	bd10      	pop	{r4, pc}
 80085e8:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80085ec:	d103      	bne.n	80085f6 <__ieee754_atan2f+0x3a>
 80085ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085f2:	f000 be5b 	b.w	80092ac <atanf>
 80085f6:	1794      	asrs	r4, r2, #30
 80085f8:	f004 0402 	and.w	r4, r4, #2
 80085fc:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8008600:	b943      	cbnz	r3, 8008614 <__ieee754_atan2f+0x58>
 8008602:	2c02      	cmp	r4, #2
 8008604:	d05e      	beq.n	80086c4 <__ieee754_atan2f+0x108>
 8008606:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80086d8 <__ieee754_atan2f+0x11c>
 800860a:	2c03      	cmp	r4, #3
 800860c:	bf08      	it	eq
 800860e:	eef0 7a47 	vmoveq.f32	s15, s14
 8008612:	e7e6      	b.n	80085e2 <__ieee754_atan2f+0x26>
 8008614:	b941      	cbnz	r1, 8008628 <__ieee754_atan2f+0x6c>
 8008616:	eddf 7a31 	vldr	s15, [pc, #196]	; 80086dc <__ieee754_atan2f+0x120>
 800861a:	ed9f 0a31 	vldr	s0, [pc, #196]	; 80086e0 <__ieee754_atan2f+0x124>
 800861e:	2800      	cmp	r0, #0
 8008620:	bfb8      	it	lt
 8008622:	eef0 7a40 	vmovlt.f32	s15, s0
 8008626:	e7dc      	b.n	80085e2 <__ieee754_atan2f+0x26>
 8008628:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800862c:	d110      	bne.n	8008650 <__ieee754_atan2f+0x94>
 800862e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008632:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8008636:	d107      	bne.n	8008648 <__ieee754_atan2f+0x8c>
 8008638:	2c02      	cmp	r4, #2
 800863a:	d846      	bhi.n	80086ca <__ieee754_atan2f+0x10e>
 800863c:	4b29      	ldr	r3, [pc, #164]	; (80086e4 <__ieee754_atan2f+0x128>)
 800863e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008642:	edd4 7a00 	vldr	s15, [r4]
 8008646:	e7cc      	b.n	80085e2 <__ieee754_atan2f+0x26>
 8008648:	2c02      	cmp	r4, #2
 800864a:	d841      	bhi.n	80086d0 <__ieee754_atan2f+0x114>
 800864c:	4b26      	ldr	r3, [pc, #152]	; (80086e8 <__ieee754_atan2f+0x12c>)
 800864e:	e7f6      	b.n	800863e <__ieee754_atan2f+0x82>
 8008650:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008654:	d0df      	beq.n	8008616 <__ieee754_atan2f+0x5a>
 8008656:	1a5b      	subs	r3, r3, r1
 8008658:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800865c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8008660:	da1a      	bge.n	8008698 <__ieee754_atan2f+0xdc>
 8008662:	2a00      	cmp	r2, #0
 8008664:	da01      	bge.n	800866a <__ieee754_atan2f+0xae>
 8008666:	313c      	adds	r1, #60	; 0x3c
 8008668:	db19      	blt.n	800869e <__ieee754_atan2f+0xe2>
 800866a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800866e:	f000 fef1 	bl	8009454 <fabsf>
 8008672:	f000 fe1b 	bl	80092ac <atanf>
 8008676:	eef0 7a40 	vmov.f32	s15, s0
 800867a:	2c01      	cmp	r4, #1
 800867c:	d012      	beq.n	80086a4 <__ieee754_atan2f+0xe8>
 800867e:	2c02      	cmp	r4, #2
 8008680:	d017      	beq.n	80086b2 <__ieee754_atan2f+0xf6>
 8008682:	2c00      	cmp	r4, #0
 8008684:	d0ad      	beq.n	80085e2 <__ieee754_atan2f+0x26>
 8008686:	ed9f 0a19 	vldr	s0, [pc, #100]	; 80086ec <__ieee754_atan2f+0x130>
 800868a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800868e:	ed9f 0a18 	vldr	s0, [pc, #96]	; 80086f0 <__ieee754_atan2f+0x134>
 8008692:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008696:	e7a4      	b.n	80085e2 <__ieee754_atan2f+0x26>
 8008698:	eddf 7a10 	vldr	s15, [pc, #64]	; 80086dc <__ieee754_atan2f+0x120>
 800869c:	e7ed      	b.n	800867a <__ieee754_atan2f+0xbe>
 800869e:	eddf 7a15 	vldr	s15, [pc, #84]	; 80086f4 <__ieee754_atan2f+0x138>
 80086a2:	e7ea      	b.n	800867a <__ieee754_atan2f+0xbe>
 80086a4:	ee17 3a90 	vmov	r3, s15
 80086a8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80086ac:	ee07 3a90 	vmov	s15, r3
 80086b0:	e797      	b.n	80085e2 <__ieee754_atan2f+0x26>
 80086b2:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80086ec <__ieee754_atan2f+0x130>
 80086b6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80086ba:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80086f0 <__ieee754_atan2f+0x134>
 80086be:	ee70 7a67 	vsub.f32	s15, s0, s15
 80086c2:	e78e      	b.n	80085e2 <__ieee754_atan2f+0x26>
 80086c4:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80086f0 <__ieee754_atan2f+0x134>
 80086c8:	e78b      	b.n	80085e2 <__ieee754_atan2f+0x26>
 80086ca:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80086f8 <__ieee754_atan2f+0x13c>
 80086ce:	e788      	b.n	80085e2 <__ieee754_atan2f+0x26>
 80086d0:	eddf 7a08 	vldr	s15, [pc, #32]	; 80086f4 <__ieee754_atan2f+0x138>
 80086d4:	e785      	b.n	80085e2 <__ieee754_atan2f+0x26>
 80086d6:	bf00      	nop
 80086d8:	c0490fdb 	.word	0xc0490fdb
 80086dc:	3fc90fdb 	.word	0x3fc90fdb
 80086e0:	bfc90fdb 	.word	0xbfc90fdb
 80086e4:	08009adc 	.word	0x08009adc
 80086e8:	08009ae8 	.word	0x08009ae8
 80086ec:	33bbbd2e 	.word	0x33bbbd2e
 80086f0:	40490fdb 	.word	0x40490fdb
 80086f4:	00000000 	.word	0x00000000
 80086f8:	3f490fdb 	.word	0x3f490fdb
 80086fc:	00000000 	.word	0x00000000

08008700 <__kernel_cos>:
 8008700:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008704:	ec57 6b10 	vmov	r6, r7, d0
 8008708:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800870c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8008710:	ed8d 1b00 	vstr	d1, [sp]
 8008714:	da07      	bge.n	8008726 <__kernel_cos+0x26>
 8008716:	ee10 0a10 	vmov	r0, s0
 800871a:	4639      	mov	r1, r7
 800871c:	f7f8 fa3c 	bl	8000b98 <__aeabi_d2iz>
 8008720:	2800      	cmp	r0, #0
 8008722:	f000 8088 	beq.w	8008836 <__kernel_cos+0x136>
 8008726:	4632      	mov	r2, r6
 8008728:	463b      	mov	r3, r7
 800872a:	4630      	mov	r0, r6
 800872c:	4639      	mov	r1, r7
 800872e:	f7f7 ff83 	bl	8000638 <__aeabi_dmul>
 8008732:	4b51      	ldr	r3, [pc, #324]	; (8008878 <__kernel_cos+0x178>)
 8008734:	2200      	movs	r2, #0
 8008736:	4604      	mov	r4, r0
 8008738:	460d      	mov	r5, r1
 800873a:	f7f7 ff7d 	bl	8000638 <__aeabi_dmul>
 800873e:	a340      	add	r3, pc, #256	; (adr r3, 8008840 <__kernel_cos+0x140>)
 8008740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008744:	4682      	mov	sl, r0
 8008746:	468b      	mov	fp, r1
 8008748:	4620      	mov	r0, r4
 800874a:	4629      	mov	r1, r5
 800874c:	f7f7 ff74 	bl	8000638 <__aeabi_dmul>
 8008750:	a33d      	add	r3, pc, #244	; (adr r3, 8008848 <__kernel_cos+0x148>)
 8008752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008756:	f7f7 fdb9 	bl	80002cc <__adddf3>
 800875a:	4622      	mov	r2, r4
 800875c:	462b      	mov	r3, r5
 800875e:	f7f7 ff6b 	bl	8000638 <__aeabi_dmul>
 8008762:	a33b      	add	r3, pc, #236	; (adr r3, 8008850 <__kernel_cos+0x150>)
 8008764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008768:	f7f7 fdae 	bl	80002c8 <__aeabi_dsub>
 800876c:	4622      	mov	r2, r4
 800876e:	462b      	mov	r3, r5
 8008770:	f7f7 ff62 	bl	8000638 <__aeabi_dmul>
 8008774:	a338      	add	r3, pc, #224	; (adr r3, 8008858 <__kernel_cos+0x158>)
 8008776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800877a:	f7f7 fda7 	bl	80002cc <__adddf3>
 800877e:	4622      	mov	r2, r4
 8008780:	462b      	mov	r3, r5
 8008782:	f7f7 ff59 	bl	8000638 <__aeabi_dmul>
 8008786:	a336      	add	r3, pc, #216	; (adr r3, 8008860 <__kernel_cos+0x160>)
 8008788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800878c:	f7f7 fd9c 	bl	80002c8 <__aeabi_dsub>
 8008790:	4622      	mov	r2, r4
 8008792:	462b      	mov	r3, r5
 8008794:	f7f7 ff50 	bl	8000638 <__aeabi_dmul>
 8008798:	a333      	add	r3, pc, #204	; (adr r3, 8008868 <__kernel_cos+0x168>)
 800879a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800879e:	f7f7 fd95 	bl	80002cc <__adddf3>
 80087a2:	4622      	mov	r2, r4
 80087a4:	462b      	mov	r3, r5
 80087a6:	f7f7 ff47 	bl	8000638 <__aeabi_dmul>
 80087aa:	4622      	mov	r2, r4
 80087ac:	462b      	mov	r3, r5
 80087ae:	f7f7 ff43 	bl	8000638 <__aeabi_dmul>
 80087b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80087b6:	4604      	mov	r4, r0
 80087b8:	460d      	mov	r5, r1
 80087ba:	4630      	mov	r0, r6
 80087bc:	4639      	mov	r1, r7
 80087be:	f7f7 ff3b 	bl	8000638 <__aeabi_dmul>
 80087c2:	460b      	mov	r3, r1
 80087c4:	4602      	mov	r2, r0
 80087c6:	4629      	mov	r1, r5
 80087c8:	4620      	mov	r0, r4
 80087ca:	f7f7 fd7d 	bl	80002c8 <__aeabi_dsub>
 80087ce:	4b2b      	ldr	r3, [pc, #172]	; (800887c <__kernel_cos+0x17c>)
 80087d0:	4598      	cmp	r8, r3
 80087d2:	4606      	mov	r6, r0
 80087d4:	460f      	mov	r7, r1
 80087d6:	dc10      	bgt.n	80087fa <__kernel_cos+0xfa>
 80087d8:	4602      	mov	r2, r0
 80087da:	460b      	mov	r3, r1
 80087dc:	4650      	mov	r0, sl
 80087de:	4659      	mov	r1, fp
 80087e0:	f7f7 fd72 	bl	80002c8 <__aeabi_dsub>
 80087e4:	460b      	mov	r3, r1
 80087e6:	4926      	ldr	r1, [pc, #152]	; (8008880 <__kernel_cos+0x180>)
 80087e8:	4602      	mov	r2, r0
 80087ea:	2000      	movs	r0, #0
 80087ec:	f7f7 fd6c 	bl	80002c8 <__aeabi_dsub>
 80087f0:	ec41 0b10 	vmov	d0, r0, r1
 80087f4:	b003      	add	sp, #12
 80087f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087fa:	4b22      	ldr	r3, [pc, #136]	; (8008884 <__kernel_cos+0x184>)
 80087fc:	4920      	ldr	r1, [pc, #128]	; (8008880 <__kernel_cos+0x180>)
 80087fe:	4598      	cmp	r8, r3
 8008800:	bfcc      	ite	gt
 8008802:	4d21      	ldrgt	r5, [pc, #132]	; (8008888 <__kernel_cos+0x188>)
 8008804:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8008808:	2400      	movs	r4, #0
 800880a:	4622      	mov	r2, r4
 800880c:	462b      	mov	r3, r5
 800880e:	2000      	movs	r0, #0
 8008810:	f7f7 fd5a 	bl	80002c8 <__aeabi_dsub>
 8008814:	4622      	mov	r2, r4
 8008816:	4680      	mov	r8, r0
 8008818:	4689      	mov	r9, r1
 800881a:	462b      	mov	r3, r5
 800881c:	4650      	mov	r0, sl
 800881e:	4659      	mov	r1, fp
 8008820:	f7f7 fd52 	bl	80002c8 <__aeabi_dsub>
 8008824:	4632      	mov	r2, r6
 8008826:	463b      	mov	r3, r7
 8008828:	f7f7 fd4e 	bl	80002c8 <__aeabi_dsub>
 800882c:	4602      	mov	r2, r0
 800882e:	460b      	mov	r3, r1
 8008830:	4640      	mov	r0, r8
 8008832:	4649      	mov	r1, r9
 8008834:	e7da      	b.n	80087ec <__kernel_cos+0xec>
 8008836:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8008870 <__kernel_cos+0x170>
 800883a:	e7db      	b.n	80087f4 <__kernel_cos+0xf4>
 800883c:	f3af 8000 	nop.w
 8008840:	be8838d4 	.word	0xbe8838d4
 8008844:	bda8fae9 	.word	0xbda8fae9
 8008848:	bdb4b1c4 	.word	0xbdb4b1c4
 800884c:	3e21ee9e 	.word	0x3e21ee9e
 8008850:	809c52ad 	.word	0x809c52ad
 8008854:	3e927e4f 	.word	0x3e927e4f
 8008858:	19cb1590 	.word	0x19cb1590
 800885c:	3efa01a0 	.word	0x3efa01a0
 8008860:	16c15177 	.word	0x16c15177
 8008864:	3f56c16c 	.word	0x3f56c16c
 8008868:	5555554c 	.word	0x5555554c
 800886c:	3fa55555 	.word	0x3fa55555
 8008870:	00000000 	.word	0x00000000
 8008874:	3ff00000 	.word	0x3ff00000
 8008878:	3fe00000 	.word	0x3fe00000
 800887c:	3fd33332 	.word	0x3fd33332
 8008880:	3ff00000 	.word	0x3ff00000
 8008884:	3fe90000 	.word	0x3fe90000
 8008888:	3fd20000 	.word	0x3fd20000
 800888c:	00000000 	.word	0x00000000

08008890 <__kernel_rem_pio2>:
 8008890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008894:	ed2d 8b02 	vpush	{d8}
 8008898:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800889c:	f112 0f14 	cmn.w	r2, #20
 80088a0:	9308      	str	r3, [sp, #32]
 80088a2:	9101      	str	r1, [sp, #4]
 80088a4:	4bc6      	ldr	r3, [pc, #792]	; (8008bc0 <__kernel_rem_pio2+0x330>)
 80088a6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80088a8:	9009      	str	r0, [sp, #36]	; 0x24
 80088aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80088ae:	9304      	str	r3, [sp, #16]
 80088b0:	9b08      	ldr	r3, [sp, #32]
 80088b2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80088b6:	bfa8      	it	ge
 80088b8:	1ed4      	subge	r4, r2, #3
 80088ba:	9306      	str	r3, [sp, #24]
 80088bc:	bfb2      	itee	lt
 80088be:	2400      	movlt	r4, #0
 80088c0:	2318      	movge	r3, #24
 80088c2:	fb94 f4f3 	sdivge	r4, r4, r3
 80088c6:	f06f 0317 	mvn.w	r3, #23
 80088ca:	fb04 3303 	mla	r3, r4, r3, r3
 80088ce:	eb03 0a02 	add.w	sl, r3, r2
 80088d2:	9b04      	ldr	r3, [sp, #16]
 80088d4:	9a06      	ldr	r2, [sp, #24]
 80088d6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8008bb0 <__kernel_rem_pio2+0x320>
 80088da:	eb03 0802 	add.w	r8, r3, r2
 80088de:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80088e0:	1aa7      	subs	r7, r4, r2
 80088e2:	ae20      	add	r6, sp, #128	; 0x80
 80088e4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80088e8:	2500      	movs	r5, #0
 80088ea:	4545      	cmp	r5, r8
 80088ec:	dd18      	ble.n	8008920 <__kernel_rem_pio2+0x90>
 80088ee:	9b08      	ldr	r3, [sp, #32]
 80088f0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80088f4:	aa20      	add	r2, sp, #128	; 0x80
 80088f6:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8008bb0 <__kernel_rem_pio2+0x320>
 80088fa:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80088fe:	f1c3 0301 	rsb	r3, r3, #1
 8008902:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8008906:	9307      	str	r3, [sp, #28]
 8008908:	9b07      	ldr	r3, [sp, #28]
 800890a:	9a04      	ldr	r2, [sp, #16]
 800890c:	4443      	add	r3, r8
 800890e:	429a      	cmp	r2, r3
 8008910:	db2f      	blt.n	8008972 <__kernel_rem_pio2+0xe2>
 8008912:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008916:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800891a:	462f      	mov	r7, r5
 800891c:	2600      	movs	r6, #0
 800891e:	e01b      	b.n	8008958 <__kernel_rem_pio2+0xc8>
 8008920:	42ef      	cmn	r7, r5
 8008922:	d407      	bmi.n	8008934 <__kernel_rem_pio2+0xa4>
 8008924:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008928:	f7f7 fe1c 	bl	8000564 <__aeabi_i2d>
 800892c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008930:	3501      	adds	r5, #1
 8008932:	e7da      	b.n	80088ea <__kernel_rem_pio2+0x5a>
 8008934:	ec51 0b18 	vmov	r0, r1, d8
 8008938:	e7f8      	b.n	800892c <__kernel_rem_pio2+0x9c>
 800893a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800893e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008942:	f7f7 fe79 	bl	8000638 <__aeabi_dmul>
 8008946:	4602      	mov	r2, r0
 8008948:	460b      	mov	r3, r1
 800894a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800894e:	f7f7 fcbd 	bl	80002cc <__adddf3>
 8008952:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008956:	3601      	adds	r6, #1
 8008958:	9b06      	ldr	r3, [sp, #24]
 800895a:	429e      	cmp	r6, r3
 800895c:	f1a7 0708 	sub.w	r7, r7, #8
 8008960:	ddeb      	ble.n	800893a <__kernel_rem_pio2+0xaa>
 8008962:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008966:	3508      	adds	r5, #8
 8008968:	ecab 7b02 	vstmia	fp!, {d7}
 800896c:	f108 0801 	add.w	r8, r8, #1
 8008970:	e7ca      	b.n	8008908 <__kernel_rem_pio2+0x78>
 8008972:	9b04      	ldr	r3, [sp, #16]
 8008974:	aa0c      	add	r2, sp, #48	; 0x30
 8008976:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800897a:	930b      	str	r3, [sp, #44]	; 0x2c
 800897c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800897e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008982:	9c04      	ldr	r4, [sp, #16]
 8008984:	930a      	str	r3, [sp, #40]	; 0x28
 8008986:	ab98      	add	r3, sp, #608	; 0x260
 8008988:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800898c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8008990:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8008994:	f8cd b008 	str.w	fp, [sp, #8]
 8008998:	4625      	mov	r5, r4
 800899a:	2d00      	cmp	r5, #0
 800899c:	dc78      	bgt.n	8008a90 <__kernel_rem_pio2+0x200>
 800899e:	ec47 6b10 	vmov	d0, r6, r7
 80089a2:	4650      	mov	r0, sl
 80089a4:	f000 fbfc 	bl	80091a0 <scalbn>
 80089a8:	ec57 6b10 	vmov	r6, r7, d0
 80089ac:	2200      	movs	r2, #0
 80089ae:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80089b2:	ee10 0a10 	vmov	r0, s0
 80089b6:	4639      	mov	r1, r7
 80089b8:	f7f7 fe3e 	bl	8000638 <__aeabi_dmul>
 80089bc:	ec41 0b10 	vmov	d0, r0, r1
 80089c0:	f000 fb6e 	bl	80090a0 <floor>
 80089c4:	4b7f      	ldr	r3, [pc, #508]	; (8008bc4 <__kernel_rem_pio2+0x334>)
 80089c6:	ec51 0b10 	vmov	r0, r1, d0
 80089ca:	2200      	movs	r2, #0
 80089cc:	f7f7 fe34 	bl	8000638 <__aeabi_dmul>
 80089d0:	4602      	mov	r2, r0
 80089d2:	460b      	mov	r3, r1
 80089d4:	4630      	mov	r0, r6
 80089d6:	4639      	mov	r1, r7
 80089d8:	f7f7 fc76 	bl	80002c8 <__aeabi_dsub>
 80089dc:	460f      	mov	r7, r1
 80089de:	4606      	mov	r6, r0
 80089e0:	f7f8 f8da 	bl	8000b98 <__aeabi_d2iz>
 80089e4:	9007      	str	r0, [sp, #28]
 80089e6:	f7f7 fdbd 	bl	8000564 <__aeabi_i2d>
 80089ea:	4602      	mov	r2, r0
 80089ec:	460b      	mov	r3, r1
 80089ee:	4630      	mov	r0, r6
 80089f0:	4639      	mov	r1, r7
 80089f2:	f7f7 fc69 	bl	80002c8 <__aeabi_dsub>
 80089f6:	f1ba 0f00 	cmp.w	sl, #0
 80089fa:	4606      	mov	r6, r0
 80089fc:	460f      	mov	r7, r1
 80089fe:	dd70      	ble.n	8008ae2 <__kernel_rem_pio2+0x252>
 8008a00:	1e62      	subs	r2, r4, #1
 8008a02:	ab0c      	add	r3, sp, #48	; 0x30
 8008a04:	9d07      	ldr	r5, [sp, #28]
 8008a06:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008a0a:	f1ca 0118 	rsb	r1, sl, #24
 8008a0e:	fa40 f301 	asr.w	r3, r0, r1
 8008a12:	441d      	add	r5, r3
 8008a14:	408b      	lsls	r3, r1
 8008a16:	1ac0      	subs	r0, r0, r3
 8008a18:	ab0c      	add	r3, sp, #48	; 0x30
 8008a1a:	9507      	str	r5, [sp, #28]
 8008a1c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8008a20:	f1ca 0317 	rsb	r3, sl, #23
 8008a24:	fa40 f303 	asr.w	r3, r0, r3
 8008a28:	9302      	str	r3, [sp, #8]
 8008a2a:	9b02      	ldr	r3, [sp, #8]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	dd66      	ble.n	8008afe <__kernel_rem_pio2+0x26e>
 8008a30:	9b07      	ldr	r3, [sp, #28]
 8008a32:	2200      	movs	r2, #0
 8008a34:	3301      	adds	r3, #1
 8008a36:	9307      	str	r3, [sp, #28]
 8008a38:	4615      	mov	r5, r2
 8008a3a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8008a3e:	4294      	cmp	r4, r2
 8008a40:	f300 8099 	bgt.w	8008b76 <__kernel_rem_pio2+0x2e6>
 8008a44:	f1ba 0f00 	cmp.w	sl, #0
 8008a48:	dd07      	ble.n	8008a5a <__kernel_rem_pio2+0x1ca>
 8008a4a:	f1ba 0f01 	cmp.w	sl, #1
 8008a4e:	f000 80a5 	beq.w	8008b9c <__kernel_rem_pio2+0x30c>
 8008a52:	f1ba 0f02 	cmp.w	sl, #2
 8008a56:	f000 80c1 	beq.w	8008bdc <__kernel_rem_pio2+0x34c>
 8008a5a:	9b02      	ldr	r3, [sp, #8]
 8008a5c:	2b02      	cmp	r3, #2
 8008a5e:	d14e      	bne.n	8008afe <__kernel_rem_pio2+0x26e>
 8008a60:	4632      	mov	r2, r6
 8008a62:	463b      	mov	r3, r7
 8008a64:	4958      	ldr	r1, [pc, #352]	; (8008bc8 <__kernel_rem_pio2+0x338>)
 8008a66:	2000      	movs	r0, #0
 8008a68:	f7f7 fc2e 	bl	80002c8 <__aeabi_dsub>
 8008a6c:	4606      	mov	r6, r0
 8008a6e:	460f      	mov	r7, r1
 8008a70:	2d00      	cmp	r5, #0
 8008a72:	d044      	beq.n	8008afe <__kernel_rem_pio2+0x26e>
 8008a74:	4650      	mov	r0, sl
 8008a76:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8008bb8 <__kernel_rem_pio2+0x328>
 8008a7a:	f000 fb91 	bl	80091a0 <scalbn>
 8008a7e:	4630      	mov	r0, r6
 8008a80:	4639      	mov	r1, r7
 8008a82:	ec53 2b10 	vmov	r2, r3, d0
 8008a86:	f7f7 fc1f 	bl	80002c8 <__aeabi_dsub>
 8008a8a:	4606      	mov	r6, r0
 8008a8c:	460f      	mov	r7, r1
 8008a8e:	e036      	b.n	8008afe <__kernel_rem_pio2+0x26e>
 8008a90:	4b4e      	ldr	r3, [pc, #312]	; (8008bcc <__kernel_rem_pio2+0x33c>)
 8008a92:	2200      	movs	r2, #0
 8008a94:	4630      	mov	r0, r6
 8008a96:	4639      	mov	r1, r7
 8008a98:	f7f7 fdce 	bl	8000638 <__aeabi_dmul>
 8008a9c:	f7f8 f87c 	bl	8000b98 <__aeabi_d2iz>
 8008aa0:	f7f7 fd60 	bl	8000564 <__aeabi_i2d>
 8008aa4:	4b4a      	ldr	r3, [pc, #296]	; (8008bd0 <__kernel_rem_pio2+0x340>)
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	4680      	mov	r8, r0
 8008aaa:	4689      	mov	r9, r1
 8008aac:	f7f7 fdc4 	bl	8000638 <__aeabi_dmul>
 8008ab0:	4602      	mov	r2, r0
 8008ab2:	460b      	mov	r3, r1
 8008ab4:	4630      	mov	r0, r6
 8008ab6:	4639      	mov	r1, r7
 8008ab8:	f7f7 fc06 	bl	80002c8 <__aeabi_dsub>
 8008abc:	f7f8 f86c 	bl	8000b98 <__aeabi_d2iz>
 8008ac0:	9b02      	ldr	r3, [sp, #8]
 8008ac2:	f843 0b04 	str.w	r0, [r3], #4
 8008ac6:	3d01      	subs	r5, #1
 8008ac8:	9302      	str	r3, [sp, #8]
 8008aca:	ab70      	add	r3, sp, #448	; 0x1c0
 8008acc:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad4:	4640      	mov	r0, r8
 8008ad6:	4649      	mov	r1, r9
 8008ad8:	f7f7 fbf8 	bl	80002cc <__adddf3>
 8008adc:	4606      	mov	r6, r0
 8008ade:	460f      	mov	r7, r1
 8008ae0:	e75b      	b.n	800899a <__kernel_rem_pio2+0x10a>
 8008ae2:	d105      	bne.n	8008af0 <__kernel_rem_pio2+0x260>
 8008ae4:	1e63      	subs	r3, r4, #1
 8008ae6:	aa0c      	add	r2, sp, #48	; 0x30
 8008ae8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008aec:	15c3      	asrs	r3, r0, #23
 8008aee:	e79b      	b.n	8008a28 <__kernel_rem_pio2+0x198>
 8008af0:	4b38      	ldr	r3, [pc, #224]	; (8008bd4 <__kernel_rem_pio2+0x344>)
 8008af2:	2200      	movs	r2, #0
 8008af4:	f7f8 f826 	bl	8000b44 <__aeabi_dcmpge>
 8008af8:	2800      	cmp	r0, #0
 8008afa:	d139      	bne.n	8008b70 <__kernel_rem_pio2+0x2e0>
 8008afc:	9002      	str	r0, [sp, #8]
 8008afe:	2200      	movs	r2, #0
 8008b00:	2300      	movs	r3, #0
 8008b02:	4630      	mov	r0, r6
 8008b04:	4639      	mov	r1, r7
 8008b06:	f7f7 ffff 	bl	8000b08 <__aeabi_dcmpeq>
 8008b0a:	2800      	cmp	r0, #0
 8008b0c:	f000 80b4 	beq.w	8008c78 <__kernel_rem_pio2+0x3e8>
 8008b10:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 8008b14:	465b      	mov	r3, fp
 8008b16:	2200      	movs	r2, #0
 8008b18:	9904      	ldr	r1, [sp, #16]
 8008b1a:	428b      	cmp	r3, r1
 8008b1c:	da65      	bge.n	8008bea <__kernel_rem_pio2+0x35a>
 8008b1e:	2a00      	cmp	r2, #0
 8008b20:	d07b      	beq.n	8008c1a <__kernel_rem_pio2+0x38a>
 8008b22:	ab0c      	add	r3, sp, #48	; 0x30
 8008b24:	f1aa 0a18 	sub.w	sl, sl, #24
 8008b28:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	f000 80a0 	beq.w	8008c72 <__kernel_rem_pio2+0x3e2>
 8008b32:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8008bb8 <__kernel_rem_pio2+0x328>
 8008b36:	4650      	mov	r0, sl
 8008b38:	f000 fb32 	bl	80091a0 <scalbn>
 8008b3c:	4f23      	ldr	r7, [pc, #140]	; (8008bcc <__kernel_rem_pio2+0x33c>)
 8008b3e:	ec55 4b10 	vmov	r4, r5, d0
 8008b42:	46d8      	mov	r8, fp
 8008b44:	2600      	movs	r6, #0
 8008b46:	f1b8 0f00 	cmp.w	r8, #0
 8008b4a:	f280 80cf 	bge.w	8008cec <__kernel_rem_pio2+0x45c>
 8008b4e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8008bb0 <__kernel_rem_pio2+0x320>
 8008b52:	465f      	mov	r7, fp
 8008b54:	f04f 0800 	mov.w	r8, #0
 8008b58:	2f00      	cmp	r7, #0
 8008b5a:	f2c0 80fd 	blt.w	8008d58 <__kernel_rem_pio2+0x4c8>
 8008b5e:	ab70      	add	r3, sp, #448	; 0x1c0
 8008b60:	f8df a074 	ldr.w	sl, [pc, #116]	; 8008bd8 <__kernel_rem_pio2+0x348>
 8008b64:	ec55 4b18 	vmov	r4, r5, d8
 8008b68:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8008b6c:	2600      	movs	r6, #0
 8008b6e:	e0e5      	b.n	8008d3c <__kernel_rem_pio2+0x4ac>
 8008b70:	2302      	movs	r3, #2
 8008b72:	9302      	str	r3, [sp, #8]
 8008b74:	e75c      	b.n	8008a30 <__kernel_rem_pio2+0x1a0>
 8008b76:	f8db 3000 	ldr.w	r3, [fp]
 8008b7a:	b955      	cbnz	r5, 8008b92 <__kernel_rem_pio2+0x302>
 8008b7c:	b123      	cbz	r3, 8008b88 <__kernel_rem_pio2+0x2f8>
 8008b7e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8008b82:	f8cb 3000 	str.w	r3, [fp]
 8008b86:	2301      	movs	r3, #1
 8008b88:	3201      	adds	r2, #1
 8008b8a:	f10b 0b04 	add.w	fp, fp, #4
 8008b8e:	461d      	mov	r5, r3
 8008b90:	e755      	b.n	8008a3e <__kernel_rem_pio2+0x1ae>
 8008b92:	1acb      	subs	r3, r1, r3
 8008b94:	f8cb 3000 	str.w	r3, [fp]
 8008b98:	462b      	mov	r3, r5
 8008b9a:	e7f5      	b.n	8008b88 <__kernel_rem_pio2+0x2f8>
 8008b9c:	1e62      	subs	r2, r4, #1
 8008b9e:	ab0c      	add	r3, sp, #48	; 0x30
 8008ba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ba4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008ba8:	a90c      	add	r1, sp, #48	; 0x30
 8008baa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008bae:	e754      	b.n	8008a5a <__kernel_rem_pio2+0x1ca>
	...
 8008bbc:	3ff00000 	.word	0x3ff00000
 8008bc0:	08009b38 	.word	0x08009b38
 8008bc4:	40200000 	.word	0x40200000
 8008bc8:	3ff00000 	.word	0x3ff00000
 8008bcc:	3e700000 	.word	0x3e700000
 8008bd0:	41700000 	.word	0x41700000
 8008bd4:	3fe00000 	.word	0x3fe00000
 8008bd8:	08009af8 	.word	0x08009af8
 8008bdc:	1e62      	subs	r2, r4, #1
 8008bde:	ab0c      	add	r3, sp, #48	; 0x30
 8008be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008be4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008be8:	e7de      	b.n	8008ba8 <__kernel_rem_pio2+0x318>
 8008bea:	a90c      	add	r1, sp, #48	; 0x30
 8008bec:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008bf0:	3b01      	subs	r3, #1
 8008bf2:	430a      	orrs	r2, r1
 8008bf4:	e790      	b.n	8008b18 <__kernel_rem_pio2+0x288>
 8008bf6:	3301      	adds	r3, #1
 8008bf8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8008bfc:	2900      	cmp	r1, #0
 8008bfe:	d0fa      	beq.n	8008bf6 <__kernel_rem_pio2+0x366>
 8008c00:	9a08      	ldr	r2, [sp, #32]
 8008c02:	18e3      	adds	r3, r4, r3
 8008c04:	18a6      	adds	r6, r4, r2
 8008c06:	aa20      	add	r2, sp, #128	; 0x80
 8008c08:	1c65      	adds	r5, r4, #1
 8008c0a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8008c0e:	9302      	str	r3, [sp, #8]
 8008c10:	9b02      	ldr	r3, [sp, #8]
 8008c12:	42ab      	cmp	r3, r5
 8008c14:	da04      	bge.n	8008c20 <__kernel_rem_pio2+0x390>
 8008c16:	461c      	mov	r4, r3
 8008c18:	e6b5      	b.n	8008986 <__kernel_rem_pio2+0xf6>
 8008c1a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	e7eb      	b.n	8008bf8 <__kernel_rem_pio2+0x368>
 8008c20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c22:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008c26:	f7f7 fc9d 	bl	8000564 <__aeabi_i2d>
 8008c2a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008c2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c30:	46b3      	mov	fp, r6
 8008c32:	461c      	mov	r4, r3
 8008c34:	2700      	movs	r7, #0
 8008c36:	f04f 0800 	mov.w	r8, #0
 8008c3a:	f04f 0900 	mov.w	r9, #0
 8008c3e:	9b06      	ldr	r3, [sp, #24]
 8008c40:	429f      	cmp	r7, r3
 8008c42:	dd06      	ble.n	8008c52 <__kernel_rem_pio2+0x3c2>
 8008c44:	ab70      	add	r3, sp, #448	; 0x1c0
 8008c46:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008c4a:	e9c3 8900 	strd	r8, r9, [r3]
 8008c4e:	3501      	adds	r5, #1
 8008c50:	e7de      	b.n	8008c10 <__kernel_rem_pio2+0x380>
 8008c52:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8008c56:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8008c5a:	f7f7 fced 	bl	8000638 <__aeabi_dmul>
 8008c5e:	4602      	mov	r2, r0
 8008c60:	460b      	mov	r3, r1
 8008c62:	4640      	mov	r0, r8
 8008c64:	4649      	mov	r1, r9
 8008c66:	f7f7 fb31 	bl	80002cc <__adddf3>
 8008c6a:	3701      	adds	r7, #1
 8008c6c:	4680      	mov	r8, r0
 8008c6e:	4689      	mov	r9, r1
 8008c70:	e7e5      	b.n	8008c3e <__kernel_rem_pio2+0x3ae>
 8008c72:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008c76:	e754      	b.n	8008b22 <__kernel_rem_pio2+0x292>
 8008c78:	ec47 6b10 	vmov	d0, r6, r7
 8008c7c:	f1ca 0000 	rsb	r0, sl, #0
 8008c80:	f000 fa8e 	bl	80091a0 <scalbn>
 8008c84:	ec57 6b10 	vmov	r6, r7, d0
 8008c88:	4b9f      	ldr	r3, [pc, #636]	; (8008f08 <__kernel_rem_pio2+0x678>)
 8008c8a:	ee10 0a10 	vmov	r0, s0
 8008c8e:	2200      	movs	r2, #0
 8008c90:	4639      	mov	r1, r7
 8008c92:	f7f7 ff57 	bl	8000b44 <__aeabi_dcmpge>
 8008c96:	b300      	cbz	r0, 8008cda <__kernel_rem_pio2+0x44a>
 8008c98:	4b9c      	ldr	r3, [pc, #624]	; (8008f0c <__kernel_rem_pio2+0x67c>)
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	4630      	mov	r0, r6
 8008c9e:	4639      	mov	r1, r7
 8008ca0:	f7f7 fcca 	bl	8000638 <__aeabi_dmul>
 8008ca4:	f7f7 ff78 	bl	8000b98 <__aeabi_d2iz>
 8008ca8:	4605      	mov	r5, r0
 8008caa:	f7f7 fc5b 	bl	8000564 <__aeabi_i2d>
 8008cae:	4b96      	ldr	r3, [pc, #600]	; (8008f08 <__kernel_rem_pio2+0x678>)
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	f7f7 fcc1 	bl	8000638 <__aeabi_dmul>
 8008cb6:	460b      	mov	r3, r1
 8008cb8:	4602      	mov	r2, r0
 8008cba:	4639      	mov	r1, r7
 8008cbc:	4630      	mov	r0, r6
 8008cbe:	f7f7 fb03 	bl	80002c8 <__aeabi_dsub>
 8008cc2:	f7f7 ff69 	bl	8000b98 <__aeabi_d2iz>
 8008cc6:	f104 0b01 	add.w	fp, r4, #1
 8008cca:	ab0c      	add	r3, sp, #48	; 0x30
 8008ccc:	f10a 0a18 	add.w	sl, sl, #24
 8008cd0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008cd4:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8008cd8:	e72b      	b.n	8008b32 <__kernel_rem_pio2+0x2a2>
 8008cda:	4630      	mov	r0, r6
 8008cdc:	4639      	mov	r1, r7
 8008cde:	f7f7 ff5b 	bl	8000b98 <__aeabi_d2iz>
 8008ce2:	ab0c      	add	r3, sp, #48	; 0x30
 8008ce4:	46a3      	mov	fp, r4
 8008ce6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008cea:	e722      	b.n	8008b32 <__kernel_rem_pio2+0x2a2>
 8008cec:	ab70      	add	r3, sp, #448	; 0x1c0
 8008cee:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8008cf2:	ab0c      	add	r3, sp, #48	; 0x30
 8008cf4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8008cf8:	f7f7 fc34 	bl	8000564 <__aeabi_i2d>
 8008cfc:	4622      	mov	r2, r4
 8008cfe:	462b      	mov	r3, r5
 8008d00:	f7f7 fc9a 	bl	8000638 <__aeabi_dmul>
 8008d04:	4632      	mov	r2, r6
 8008d06:	e9c9 0100 	strd	r0, r1, [r9]
 8008d0a:	463b      	mov	r3, r7
 8008d0c:	4620      	mov	r0, r4
 8008d0e:	4629      	mov	r1, r5
 8008d10:	f7f7 fc92 	bl	8000638 <__aeabi_dmul>
 8008d14:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8008d18:	4604      	mov	r4, r0
 8008d1a:	460d      	mov	r5, r1
 8008d1c:	e713      	b.n	8008b46 <__kernel_rem_pio2+0x2b6>
 8008d1e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8008d22:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8008d26:	f7f7 fc87 	bl	8000638 <__aeabi_dmul>
 8008d2a:	4602      	mov	r2, r0
 8008d2c:	460b      	mov	r3, r1
 8008d2e:	4620      	mov	r0, r4
 8008d30:	4629      	mov	r1, r5
 8008d32:	f7f7 facb 	bl	80002cc <__adddf3>
 8008d36:	3601      	adds	r6, #1
 8008d38:	4604      	mov	r4, r0
 8008d3a:	460d      	mov	r5, r1
 8008d3c:	9b04      	ldr	r3, [sp, #16]
 8008d3e:	429e      	cmp	r6, r3
 8008d40:	dc01      	bgt.n	8008d46 <__kernel_rem_pio2+0x4b6>
 8008d42:	45b0      	cmp	r8, r6
 8008d44:	daeb      	bge.n	8008d1e <__kernel_rem_pio2+0x48e>
 8008d46:	ab48      	add	r3, sp, #288	; 0x120
 8008d48:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008d4c:	e9c3 4500 	strd	r4, r5, [r3]
 8008d50:	3f01      	subs	r7, #1
 8008d52:	f108 0801 	add.w	r8, r8, #1
 8008d56:	e6ff      	b.n	8008b58 <__kernel_rem_pio2+0x2c8>
 8008d58:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8008d5a:	2b02      	cmp	r3, #2
 8008d5c:	dc0b      	bgt.n	8008d76 <__kernel_rem_pio2+0x4e6>
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	dc6e      	bgt.n	8008e40 <__kernel_rem_pio2+0x5b0>
 8008d62:	d045      	beq.n	8008df0 <__kernel_rem_pio2+0x560>
 8008d64:	9b07      	ldr	r3, [sp, #28]
 8008d66:	f003 0007 	and.w	r0, r3, #7
 8008d6a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8008d6e:	ecbd 8b02 	vpop	{d8}
 8008d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d76:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8008d78:	2b03      	cmp	r3, #3
 8008d7a:	d1f3      	bne.n	8008d64 <__kernel_rem_pio2+0x4d4>
 8008d7c:	ab48      	add	r3, sp, #288	; 0x120
 8008d7e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8008d82:	46d0      	mov	r8, sl
 8008d84:	46d9      	mov	r9, fp
 8008d86:	f1b9 0f00 	cmp.w	r9, #0
 8008d8a:	f1a8 0808 	sub.w	r8, r8, #8
 8008d8e:	dc64      	bgt.n	8008e5a <__kernel_rem_pio2+0x5ca>
 8008d90:	465c      	mov	r4, fp
 8008d92:	2c01      	cmp	r4, #1
 8008d94:	f1aa 0a08 	sub.w	sl, sl, #8
 8008d98:	dc7e      	bgt.n	8008e98 <__kernel_rem_pio2+0x608>
 8008d9a:	2000      	movs	r0, #0
 8008d9c:	2100      	movs	r1, #0
 8008d9e:	f1bb 0f01 	cmp.w	fp, #1
 8008da2:	f300 8097 	bgt.w	8008ed4 <__kernel_rem_pio2+0x644>
 8008da6:	9b02      	ldr	r3, [sp, #8]
 8008da8:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 8008dac:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	f040 8099 	bne.w	8008ee8 <__kernel_rem_pio2+0x658>
 8008db6:	9b01      	ldr	r3, [sp, #4]
 8008db8:	e9c3 5600 	strd	r5, r6, [r3]
 8008dbc:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8008dc0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8008dc4:	e7ce      	b.n	8008d64 <__kernel_rem_pio2+0x4d4>
 8008dc6:	ab48      	add	r3, sp, #288	; 0x120
 8008dc8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dd0:	f7f7 fa7c 	bl	80002cc <__adddf3>
 8008dd4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008dd8:	f1bb 0f00 	cmp.w	fp, #0
 8008ddc:	daf3      	bge.n	8008dc6 <__kernel_rem_pio2+0x536>
 8008dde:	9b02      	ldr	r3, [sp, #8]
 8008de0:	b113      	cbz	r3, 8008de8 <__kernel_rem_pio2+0x558>
 8008de2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008de6:	4619      	mov	r1, r3
 8008de8:	9b01      	ldr	r3, [sp, #4]
 8008dea:	e9c3 0100 	strd	r0, r1, [r3]
 8008dee:	e7b9      	b.n	8008d64 <__kernel_rem_pio2+0x4d4>
 8008df0:	2000      	movs	r0, #0
 8008df2:	2100      	movs	r1, #0
 8008df4:	e7f0      	b.n	8008dd8 <__kernel_rem_pio2+0x548>
 8008df6:	ab48      	add	r3, sp, #288	; 0x120
 8008df8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e00:	f7f7 fa64 	bl	80002cc <__adddf3>
 8008e04:	3c01      	subs	r4, #1
 8008e06:	2c00      	cmp	r4, #0
 8008e08:	daf5      	bge.n	8008df6 <__kernel_rem_pio2+0x566>
 8008e0a:	9b02      	ldr	r3, [sp, #8]
 8008e0c:	b1e3      	cbz	r3, 8008e48 <__kernel_rem_pio2+0x5b8>
 8008e0e:	4602      	mov	r2, r0
 8008e10:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008e14:	9c01      	ldr	r4, [sp, #4]
 8008e16:	e9c4 2300 	strd	r2, r3, [r4]
 8008e1a:	4602      	mov	r2, r0
 8008e1c:	460b      	mov	r3, r1
 8008e1e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8008e22:	f7f7 fa51 	bl	80002c8 <__aeabi_dsub>
 8008e26:	ad4a      	add	r5, sp, #296	; 0x128
 8008e28:	2401      	movs	r4, #1
 8008e2a:	45a3      	cmp	fp, r4
 8008e2c:	da0f      	bge.n	8008e4e <__kernel_rem_pio2+0x5be>
 8008e2e:	9b02      	ldr	r3, [sp, #8]
 8008e30:	b113      	cbz	r3, 8008e38 <__kernel_rem_pio2+0x5a8>
 8008e32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008e36:	4619      	mov	r1, r3
 8008e38:	9b01      	ldr	r3, [sp, #4]
 8008e3a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8008e3e:	e791      	b.n	8008d64 <__kernel_rem_pio2+0x4d4>
 8008e40:	465c      	mov	r4, fp
 8008e42:	2000      	movs	r0, #0
 8008e44:	2100      	movs	r1, #0
 8008e46:	e7de      	b.n	8008e06 <__kernel_rem_pio2+0x576>
 8008e48:	4602      	mov	r2, r0
 8008e4a:	460b      	mov	r3, r1
 8008e4c:	e7e2      	b.n	8008e14 <__kernel_rem_pio2+0x584>
 8008e4e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8008e52:	f7f7 fa3b 	bl	80002cc <__adddf3>
 8008e56:	3401      	adds	r4, #1
 8008e58:	e7e7      	b.n	8008e2a <__kernel_rem_pio2+0x59a>
 8008e5a:	e9d8 4500 	ldrd	r4, r5, [r8]
 8008e5e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 8008e62:	4620      	mov	r0, r4
 8008e64:	4632      	mov	r2, r6
 8008e66:	463b      	mov	r3, r7
 8008e68:	4629      	mov	r1, r5
 8008e6a:	f7f7 fa2f 	bl	80002cc <__adddf3>
 8008e6e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008e72:	4602      	mov	r2, r0
 8008e74:	460b      	mov	r3, r1
 8008e76:	4620      	mov	r0, r4
 8008e78:	4629      	mov	r1, r5
 8008e7a:	f7f7 fa25 	bl	80002c8 <__aeabi_dsub>
 8008e7e:	4632      	mov	r2, r6
 8008e80:	463b      	mov	r3, r7
 8008e82:	f7f7 fa23 	bl	80002cc <__adddf3>
 8008e86:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008e8a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8008e8e:	ed88 7b00 	vstr	d7, [r8]
 8008e92:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8008e96:	e776      	b.n	8008d86 <__kernel_rem_pio2+0x4f6>
 8008e98:	e9da 8900 	ldrd	r8, r9, [sl]
 8008e9c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8008ea0:	4640      	mov	r0, r8
 8008ea2:	4632      	mov	r2, r6
 8008ea4:	463b      	mov	r3, r7
 8008ea6:	4649      	mov	r1, r9
 8008ea8:	f7f7 fa10 	bl	80002cc <__adddf3>
 8008eac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008eb0:	4602      	mov	r2, r0
 8008eb2:	460b      	mov	r3, r1
 8008eb4:	4640      	mov	r0, r8
 8008eb6:	4649      	mov	r1, r9
 8008eb8:	f7f7 fa06 	bl	80002c8 <__aeabi_dsub>
 8008ebc:	4632      	mov	r2, r6
 8008ebe:	463b      	mov	r3, r7
 8008ec0:	f7f7 fa04 	bl	80002cc <__adddf3>
 8008ec4:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008ec8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008ecc:	ed8a 7b00 	vstr	d7, [sl]
 8008ed0:	3c01      	subs	r4, #1
 8008ed2:	e75e      	b.n	8008d92 <__kernel_rem_pio2+0x502>
 8008ed4:	ab48      	add	r3, sp, #288	; 0x120
 8008ed6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ede:	f7f7 f9f5 	bl	80002cc <__adddf3>
 8008ee2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008ee6:	e75a      	b.n	8008d9e <__kernel_rem_pio2+0x50e>
 8008ee8:	9b01      	ldr	r3, [sp, #4]
 8008eea:	9a01      	ldr	r2, [sp, #4]
 8008eec:	601d      	str	r5, [r3, #0]
 8008eee:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8008ef2:	605c      	str	r4, [r3, #4]
 8008ef4:	609f      	str	r7, [r3, #8]
 8008ef6:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8008efa:	60d3      	str	r3, [r2, #12]
 8008efc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008f00:	6110      	str	r0, [r2, #16]
 8008f02:	6153      	str	r3, [r2, #20]
 8008f04:	e72e      	b.n	8008d64 <__kernel_rem_pio2+0x4d4>
 8008f06:	bf00      	nop
 8008f08:	41700000 	.word	0x41700000
 8008f0c:	3e700000 	.word	0x3e700000

08008f10 <__kernel_sin>:
 8008f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f14:	ed2d 8b04 	vpush	{d8-d9}
 8008f18:	eeb0 8a41 	vmov.f32	s16, s2
 8008f1c:	eef0 8a61 	vmov.f32	s17, s3
 8008f20:	ec55 4b10 	vmov	r4, r5, d0
 8008f24:	b083      	sub	sp, #12
 8008f26:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008f2a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8008f2e:	9001      	str	r0, [sp, #4]
 8008f30:	da06      	bge.n	8008f40 <__kernel_sin+0x30>
 8008f32:	ee10 0a10 	vmov	r0, s0
 8008f36:	4629      	mov	r1, r5
 8008f38:	f7f7 fe2e 	bl	8000b98 <__aeabi_d2iz>
 8008f3c:	2800      	cmp	r0, #0
 8008f3e:	d051      	beq.n	8008fe4 <__kernel_sin+0xd4>
 8008f40:	4622      	mov	r2, r4
 8008f42:	462b      	mov	r3, r5
 8008f44:	4620      	mov	r0, r4
 8008f46:	4629      	mov	r1, r5
 8008f48:	f7f7 fb76 	bl	8000638 <__aeabi_dmul>
 8008f4c:	4682      	mov	sl, r0
 8008f4e:	468b      	mov	fp, r1
 8008f50:	4602      	mov	r2, r0
 8008f52:	460b      	mov	r3, r1
 8008f54:	4620      	mov	r0, r4
 8008f56:	4629      	mov	r1, r5
 8008f58:	f7f7 fb6e 	bl	8000638 <__aeabi_dmul>
 8008f5c:	a341      	add	r3, pc, #260	; (adr r3, 8009064 <__kernel_sin+0x154>)
 8008f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f62:	4680      	mov	r8, r0
 8008f64:	4689      	mov	r9, r1
 8008f66:	4650      	mov	r0, sl
 8008f68:	4659      	mov	r1, fp
 8008f6a:	f7f7 fb65 	bl	8000638 <__aeabi_dmul>
 8008f6e:	a33f      	add	r3, pc, #252	; (adr r3, 800906c <__kernel_sin+0x15c>)
 8008f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f74:	f7f7 f9a8 	bl	80002c8 <__aeabi_dsub>
 8008f78:	4652      	mov	r2, sl
 8008f7a:	465b      	mov	r3, fp
 8008f7c:	f7f7 fb5c 	bl	8000638 <__aeabi_dmul>
 8008f80:	a33c      	add	r3, pc, #240	; (adr r3, 8009074 <__kernel_sin+0x164>)
 8008f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f86:	f7f7 f9a1 	bl	80002cc <__adddf3>
 8008f8a:	4652      	mov	r2, sl
 8008f8c:	465b      	mov	r3, fp
 8008f8e:	f7f7 fb53 	bl	8000638 <__aeabi_dmul>
 8008f92:	a33a      	add	r3, pc, #232	; (adr r3, 800907c <__kernel_sin+0x16c>)
 8008f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f98:	f7f7 f996 	bl	80002c8 <__aeabi_dsub>
 8008f9c:	4652      	mov	r2, sl
 8008f9e:	465b      	mov	r3, fp
 8008fa0:	f7f7 fb4a 	bl	8000638 <__aeabi_dmul>
 8008fa4:	a337      	add	r3, pc, #220	; (adr r3, 8009084 <__kernel_sin+0x174>)
 8008fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008faa:	f7f7 f98f 	bl	80002cc <__adddf3>
 8008fae:	9b01      	ldr	r3, [sp, #4]
 8008fb0:	4606      	mov	r6, r0
 8008fb2:	460f      	mov	r7, r1
 8008fb4:	b9eb      	cbnz	r3, 8008ff2 <__kernel_sin+0xe2>
 8008fb6:	4602      	mov	r2, r0
 8008fb8:	460b      	mov	r3, r1
 8008fba:	4650      	mov	r0, sl
 8008fbc:	4659      	mov	r1, fp
 8008fbe:	f7f7 fb3b 	bl	8000638 <__aeabi_dmul>
 8008fc2:	a325      	add	r3, pc, #148	; (adr r3, 8009058 <__kernel_sin+0x148>)
 8008fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc8:	f7f7 f97e 	bl	80002c8 <__aeabi_dsub>
 8008fcc:	4642      	mov	r2, r8
 8008fce:	464b      	mov	r3, r9
 8008fd0:	f7f7 fb32 	bl	8000638 <__aeabi_dmul>
 8008fd4:	4602      	mov	r2, r0
 8008fd6:	460b      	mov	r3, r1
 8008fd8:	4620      	mov	r0, r4
 8008fda:	4629      	mov	r1, r5
 8008fdc:	f7f7 f976 	bl	80002cc <__adddf3>
 8008fe0:	4604      	mov	r4, r0
 8008fe2:	460d      	mov	r5, r1
 8008fe4:	ec45 4b10 	vmov	d0, r4, r5
 8008fe8:	b003      	add	sp, #12
 8008fea:	ecbd 8b04 	vpop	{d8-d9}
 8008fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ff2:	4b1b      	ldr	r3, [pc, #108]	; (8009060 <__kernel_sin+0x150>)
 8008ff4:	ec51 0b18 	vmov	r0, r1, d8
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	f7f7 fb1d 	bl	8000638 <__aeabi_dmul>
 8008ffe:	4632      	mov	r2, r6
 8009000:	ec41 0b19 	vmov	d9, r0, r1
 8009004:	463b      	mov	r3, r7
 8009006:	4640      	mov	r0, r8
 8009008:	4649      	mov	r1, r9
 800900a:	f7f7 fb15 	bl	8000638 <__aeabi_dmul>
 800900e:	4602      	mov	r2, r0
 8009010:	460b      	mov	r3, r1
 8009012:	ec51 0b19 	vmov	r0, r1, d9
 8009016:	f7f7 f957 	bl	80002c8 <__aeabi_dsub>
 800901a:	4652      	mov	r2, sl
 800901c:	465b      	mov	r3, fp
 800901e:	f7f7 fb0b 	bl	8000638 <__aeabi_dmul>
 8009022:	ec53 2b18 	vmov	r2, r3, d8
 8009026:	f7f7 f94f 	bl	80002c8 <__aeabi_dsub>
 800902a:	a30b      	add	r3, pc, #44	; (adr r3, 8009058 <__kernel_sin+0x148>)
 800902c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009030:	4606      	mov	r6, r0
 8009032:	460f      	mov	r7, r1
 8009034:	4640      	mov	r0, r8
 8009036:	4649      	mov	r1, r9
 8009038:	f7f7 fafe 	bl	8000638 <__aeabi_dmul>
 800903c:	4602      	mov	r2, r0
 800903e:	460b      	mov	r3, r1
 8009040:	4630      	mov	r0, r6
 8009042:	4639      	mov	r1, r7
 8009044:	f7f7 f942 	bl	80002cc <__adddf3>
 8009048:	4602      	mov	r2, r0
 800904a:	460b      	mov	r3, r1
 800904c:	4620      	mov	r0, r4
 800904e:	4629      	mov	r1, r5
 8009050:	f7f7 f93a 	bl	80002c8 <__aeabi_dsub>
 8009054:	e7c4      	b.n	8008fe0 <__kernel_sin+0xd0>
 8009056:	bf00      	nop
 8009058:	55555549 	.word	0x55555549
 800905c:	3fc55555 	.word	0x3fc55555
 8009060:	3fe00000 	.word	0x3fe00000
 8009064:	5acfd57c 	.word	0x5acfd57c
 8009068:	3de5d93a 	.word	0x3de5d93a
 800906c:	8a2b9ceb 	.word	0x8a2b9ceb
 8009070:	3e5ae5e6 	.word	0x3e5ae5e6
 8009074:	57b1fe7d 	.word	0x57b1fe7d
 8009078:	3ec71de3 	.word	0x3ec71de3
 800907c:	19c161d5 	.word	0x19c161d5
 8009080:	3f2a01a0 	.word	0x3f2a01a0
 8009084:	1110f8a6 	.word	0x1110f8a6
 8009088:	3f811111 	.word	0x3f811111

0800908c <fabs>:
 800908c:	ec51 0b10 	vmov	r0, r1, d0
 8009090:	ee10 2a10 	vmov	r2, s0
 8009094:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009098:	ec43 2b10 	vmov	d0, r2, r3
 800909c:	4770      	bx	lr
	...

080090a0 <floor>:
 80090a0:	ec51 0b10 	vmov	r0, r1, d0
 80090a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090a8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80090ac:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80090b0:	2e13      	cmp	r6, #19
 80090b2:	ee10 5a10 	vmov	r5, s0
 80090b6:	ee10 8a10 	vmov	r8, s0
 80090ba:	460c      	mov	r4, r1
 80090bc:	dc32      	bgt.n	8009124 <floor+0x84>
 80090be:	2e00      	cmp	r6, #0
 80090c0:	da14      	bge.n	80090ec <floor+0x4c>
 80090c2:	a333      	add	r3, pc, #204	; (adr r3, 8009190 <floor+0xf0>)
 80090c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090c8:	f7f7 f900 	bl	80002cc <__adddf3>
 80090cc:	2200      	movs	r2, #0
 80090ce:	2300      	movs	r3, #0
 80090d0:	f7f7 fd42 	bl	8000b58 <__aeabi_dcmpgt>
 80090d4:	b138      	cbz	r0, 80090e6 <floor+0x46>
 80090d6:	2c00      	cmp	r4, #0
 80090d8:	da57      	bge.n	800918a <floor+0xea>
 80090da:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80090de:	431d      	orrs	r5, r3
 80090e0:	d001      	beq.n	80090e6 <floor+0x46>
 80090e2:	4c2d      	ldr	r4, [pc, #180]	; (8009198 <floor+0xf8>)
 80090e4:	2500      	movs	r5, #0
 80090e6:	4621      	mov	r1, r4
 80090e8:	4628      	mov	r0, r5
 80090ea:	e025      	b.n	8009138 <floor+0x98>
 80090ec:	4f2b      	ldr	r7, [pc, #172]	; (800919c <floor+0xfc>)
 80090ee:	4137      	asrs	r7, r6
 80090f0:	ea01 0307 	and.w	r3, r1, r7
 80090f4:	4303      	orrs	r3, r0
 80090f6:	d01f      	beq.n	8009138 <floor+0x98>
 80090f8:	a325      	add	r3, pc, #148	; (adr r3, 8009190 <floor+0xf0>)
 80090fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090fe:	f7f7 f8e5 	bl	80002cc <__adddf3>
 8009102:	2200      	movs	r2, #0
 8009104:	2300      	movs	r3, #0
 8009106:	f7f7 fd27 	bl	8000b58 <__aeabi_dcmpgt>
 800910a:	2800      	cmp	r0, #0
 800910c:	d0eb      	beq.n	80090e6 <floor+0x46>
 800910e:	2c00      	cmp	r4, #0
 8009110:	bfbe      	ittt	lt
 8009112:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8009116:	fa43 f606 	asrlt.w	r6, r3, r6
 800911a:	19a4      	addlt	r4, r4, r6
 800911c:	ea24 0407 	bic.w	r4, r4, r7
 8009120:	2500      	movs	r5, #0
 8009122:	e7e0      	b.n	80090e6 <floor+0x46>
 8009124:	2e33      	cmp	r6, #51	; 0x33
 8009126:	dd0b      	ble.n	8009140 <floor+0xa0>
 8009128:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800912c:	d104      	bne.n	8009138 <floor+0x98>
 800912e:	ee10 2a10 	vmov	r2, s0
 8009132:	460b      	mov	r3, r1
 8009134:	f7f7 f8ca 	bl	80002cc <__adddf3>
 8009138:	ec41 0b10 	vmov	d0, r0, r1
 800913c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009140:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8009144:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009148:	fa23 f707 	lsr.w	r7, r3, r7
 800914c:	4207      	tst	r7, r0
 800914e:	d0f3      	beq.n	8009138 <floor+0x98>
 8009150:	a30f      	add	r3, pc, #60	; (adr r3, 8009190 <floor+0xf0>)
 8009152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009156:	f7f7 f8b9 	bl	80002cc <__adddf3>
 800915a:	2200      	movs	r2, #0
 800915c:	2300      	movs	r3, #0
 800915e:	f7f7 fcfb 	bl	8000b58 <__aeabi_dcmpgt>
 8009162:	2800      	cmp	r0, #0
 8009164:	d0bf      	beq.n	80090e6 <floor+0x46>
 8009166:	2c00      	cmp	r4, #0
 8009168:	da02      	bge.n	8009170 <floor+0xd0>
 800916a:	2e14      	cmp	r6, #20
 800916c:	d103      	bne.n	8009176 <floor+0xd6>
 800916e:	3401      	adds	r4, #1
 8009170:	ea25 0507 	bic.w	r5, r5, r7
 8009174:	e7b7      	b.n	80090e6 <floor+0x46>
 8009176:	2301      	movs	r3, #1
 8009178:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800917c:	fa03 f606 	lsl.w	r6, r3, r6
 8009180:	4435      	add	r5, r6
 8009182:	4545      	cmp	r5, r8
 8009184:	bf38      	it	cc
 8009186:	18e4      	addcc	r4, r4, r3
 8009188:	e7f2      	b.n	8009170 <floor+0xd0>
 800918a:	2500      	movs	r5, #0
 800918c:	462c      	mov	r4, r5
 800918e:	e7aa      	b.n	80090e6 <floor+0x46>
 8009190:	8800759c 	.word	0x8800759c
 8009194:	7e37e43c 	.word	0x7e37e43c
 8009198:	bff00000 	.word	0xbff00000
 800919c:	000fffff 	.word	0x000fffff

080091a0 <scalbn>:
 80091a0:	b570      	push	{r4, r5, r6, lr}
 80091a2:	ec55 4b10 	vmov	r4, r5, d0
 80091a6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80091aa:	4606      	mov	r6, r0
 80091ac:	462b      	mov	r3, r5
 80091ae:	b99a      	cbnz	r2, 80091d8 <scalbn+0x38>
 80091b0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80091b4:	4323      	orrs	r3, r4
 80091b6:	d036      	beq.n	8009226 <scalbn+0x86>
 80091b8:	4b39      	ldr	r3, [pc, #228]	; (80092a0 <scalbn+0x100>)
 80091ba:	4629      	mov	r1, r5
 80091bc:	ee10 0a10 	vmov	r0, s0
 80091c0:	2200      	movs	r2, #0
 80091c2:	f7f7 fa39 	bl	8000638 <__aeabi_dmul>
 80091c6:	4b37      	ldr	r3, [pc, #220]	; (80092a4 <scalbn+0x104>)
 80091c8:	429e      	cmp	r6, r3
 80091ca:	4604      	mov	r4, r0
 80091cc:	460d      	mov	r5, r1
 80091ce:	da10      	bge.n	80091f2 <scalbn+0x52>
 80091d0:	a32b      	add	r3, pc, #172	; (adr r3, 8009280 <scalbn+0xe0>)
 80091d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d6:	e03a      	b.n	800924e <scalbn+0xae>
 80091d8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80091dc:	428a      	cmp	r2, r1
 80091de:	d10c      	bne.n	80091fa <scalbn+0x5a>
 80091e0:	ee10 2a10 	vmov	r2, s0
 80091e4:	4620      	mov	r0, r4
 80091e6:	4629      	mov	r1, r5
 80091e8:	f7f7 f870 	bl	80002cc <__adddf3>
 80091ec:	4604      	mov	r4, r0
 80091ee:	460d      	mov	r5, r1
 80091f0:	e019      	b.n	8009226 <scalbn+0x86>
 80091f2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80091f6:	460b      	mov	r3, r1
 80091f8:	3a36      	subs	r2, #54	; 0x36
 80091fa:	4432      	add	r2, r6
 80091fc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009200:	428a      	cmp	r2, r1
 8009202:	dd08      	ble.n	8009216 <scalbn+0x76>
 8009204:	2d00      	cmp	r5, #0
 8009206:	a120      	add	r1, pc, #128	; (adr r1, 8009288 <scalbn+0xe8>)
 8009208:	e9d1 0100 	ldrd	r0, r1, [r1]
 800920c:	da1c      	bge.n	8009248 <scalbn+0xa8>
 800920e:	a120      	add	r1, pc, #128	; (adr r1, 8009290 <scalbn+0xf0>)
 8009210:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009214:	e018      	b.n	8009248 <scalbn+0xa8>
 8009216:	2a00      	cmp	r2, #0
 8009218:	dd08      	ble.n	800922c <scalbn+0x8c>
 800921a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800921e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009222:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009226:	ec45 4b10 	vmov	d0, r4, r5
 800922a:	bd70      	pop	{r4, r5, r6, pc}
 800922c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009230:	da19      	bge.n	8009266 <scalbn+0xc6>
 8009232:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009236:	429e      	cmp	r6, r3
 8009238:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800923c:	dd0a      	ble.n	8009254 <scalbn+0xb4>
 800923e:	a112      	add	r1, pc, #72	; (adr r1, 8009288 <scalbn+0xe8>)
 8009240:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d1e2      	bne.n	800920e <scalbn+0x6e>
 8009248:	a30f      	add	r3, pc, #60	; (adr r3, 8009288 <scalbn+0xe8>)
 800924a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800924e:	f7f7 f9f3 	bl	8000638 <__aeabi_dmul>
 8009252:	e7cb      	b.n	80091ec <scalbn+0x4c>
 8009254:	a10a      	add	r1, pc, #40	; (adr r1, 8009280 <scalbn+0xe0>)
 8009256:	e9d1 0100 	ldrd	r0, r1, [r1]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d0b8      	beq.n	80091d0 <scalbn+0x30>
 800925e:	a10e      	add	r1, pc, #56	; (adr r1, 8009298 <scalbn+0xf8>)
 8009260:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009264:	e7b4      	b.n	80091d0 <scalbn+0x30>
 8009266:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800926a:	3236      	adds	r2, #54	; 0x36
 800926c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009270:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009274:	4620      	mov	r0, r4
 8009276:	4b0c      	ldr	r3, [pc, #48]	; (80092a8 <scalbn+0x108>)
 8009278:	2200      	movs	r2, #0
 800927a:	e7e8      	b.n	800924e <scalbn+0xae>
 800927c:	f3af 8000 	nop.w
 8009280:	c2f8f359 	.word	0xc2f8f359
 8009284:	01a56e1f 	.word	0x01a56e1f
 8009288:	8800759c 	.word	0x8800759c
 800928c:	7e37e43c 	.word	0x7e37e43c
 8009290:	8800759c 	.word	0x8800759c
 8009294:	fe37e43c 	.word	0xfe37e43c
 8009298:	c2f8f359 	.word	0xc2f8f359
 800929c:	81a56e1f 	.word	0x81a56e1f
 80092a0:	43500000 	.word	0x43500000
 80092a4:	ffff3cb0 	.word	0xffff3cb0
 80092a8:	3c900000 	.word	0x3c900000

080092ac <atanf>:
 80092ac:	b538      	push	{r3, r4, r5, lr}
 80092ae:	ee10 5a10 	vmov	r5, s0
 80092b2:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80092b6:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 80092ba:	eef0 7a40 	vmov.f32	s15, s0
 80092be:	db10      	blt.n	80092e2 <atanf+0x36>
 80092c0:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80092c4:	dd04      	ble.n	80092d0 <atanf+0x24>
 80092c6:	ee70 7a00 	vadd.f32	s15, s0, s0
 80092ca:	eeb0 0a67 	vmov.f32	s0, s15
 80092ce:	bd38      	pop	{r3, r4, r5, pc}
 80092d0:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8009408 <atanf+0x15c>
 80092d4:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800940c <atanf+0x160>
 80092d8:	2d00      	cmp	r5, #0
 80092da:	bfd8      	it	le
 80092dc:	eef0 7a40 	vmovle.f32	s15, s0
 80092e0:	e7f3      	b.n	80092ca <atanf+0x1e>
 80092e2:	4b4b      	ldr	r3, [pc, #300]	; (8009410 <atanf+0x164>)
 80092e4:	429c      	cmp	r4, r3
 80092e6:	dc10      	bgt.n	800930a <atanf+0x5e>
 80092e8:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 80092ec:	da0a      	bge.n	8009304 <atanf+0x58>
 80092ee:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8009414 <atanf+0x168>
 80092f2:	ee30 7a07 	vadd.f32	s14, s0, s14
 80092f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80092fa:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80092fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009302:	dce2      	bgt.n	80092ca <atanf+0x1e>
 8009304:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009308:	e013      	b.n	8009332 <atanf+0x86>
 800930a:	f000 f8a3 	bl	8009454 <fabsf>
 800930e:	4b42      	ldr	r3, [pc, #264]	; (8009418 <atanf+0x16c>)
 8009310:	429c      	cmp	r4, r3
 8009312:	dc4f      	bgt.n	80093b4 <atanf+0x108>
 8009314:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8009318:	429c      	cmp	r4, r3
 800931a:	dc41      	bgt.n	80093a0 <atanf+0xf4>
 800931c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8009320:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8009324:	eea0 7a27 	vfma.f32	s14, s0, s15
 8009328:	2300      	movs	r3, #0
 800932a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800932e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009332:	1c5a      	adds	r2, r3, #1
 8009334:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8009338:	eddf 5a38 	vldr	s11, [pc, #224]	; 800941c <atanf+0x170>
 800933c:	ed9f 6a38 	vldr	s12, [pc, #224]	; 8009420 <atanf+0x174>
 8009340:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8009424 <atanf+0x178>
 8009344:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8009428 <atanf+0x17c>
 8009348:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800934c:	eea7 6a25 	vfma.f32	s12, s14, s11
 8009350:	eddf 5a36 	vldr	s11, [pc, #216]	; 800942c <atanf+0x180>
 8009354:	eee6 5a07 	vfma.f32	s11, s12, s14
 8009358:	ed9f 6a35 	vldr	s12, [pc, #212]	; 8009430 <atanf+0x184>
 800935c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8009360:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009434 <atanf+0x188>
 8009364:	eee6 5a07 	vfma.f32	s11, s12, s14
 8009368:	ed9f 6a33 	vldr	s12, [pc, #204]	; 8009438 <atanf+0x18c>
 800936c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8009370:	eddf 5a32 	vldr	s11, [pc, #200]	; 800943c <atanf+0x190>
 8009374:	eee7 5a05 	vfma.f32	s11, s14, s10
 8009378:	ed9f 5a31 	vldr	s10, [pc, #196]	; 8009440 <atanf+0x194>
 800937c:	eea5 5a87 	vfma.f32	s10, s11, s14
 8009380:	eddf 5a30 	vldr	s11, [pc, #192]	; 8009444 <atanf+0x198>
 8009384:	eee5 5a07 	vfma.f32	s11, s10, s14
 8009388:	eea5 0a87 	vfma.f32	s0, s11, s14
 800938c:	ee20 0a07 	vmul.f32	s0, s0, s14
 8009390:	eea6 0a26 	vfma.f32	s0, s12, s13
 8009394:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009398:	d121      	bne.n	80093de <atanf+0x132>
 800939a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800939e:	e794      	b.n	80092ca <atanf+0x1e>
 80093a0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80093a4:	ee30 7a67 	vsub.f32	s14, s0, s15
 80093a8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80093ac:	2301      	movs	r3, #1
 80093ae:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80093b2:	e7be      	b.n	8009332 <atanf+0x86>
 80093b4:	4b24      	ldr	r3, [pc, #144]	; (8009448 <atanf+0x19c>)
 80093b6:	429c      	cmp	r4, r3
 80093b8:	dc0b      	bgt.n	80093d2 <atanf+0x126>
 80093ba:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80093be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80093c2:	eea0 7a27 	vfma.f32	s14, s0, s15
 80093c6:	2302      	movs	r3, #2
 80093c8:	ee70 6a67 	vsub.f32	s13, s0, s15
 80093cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093d0:	e7af      	b.n	8009332 <atanf+0x86>
 80093d2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80093d6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80093da:	2303      	movs	r3, #3
 80093dc:	e7a9      	b.n	8009332 <atanf+0x86>
 80093de:	4a1b      	ldr	r2, [pc, #108]	; (800944c <atanf+0x1a0>)
 80093e0:	491b      	ldr	r1, [pc, #108]	; (8009450 <atanf+0x1a4>)
 80093e2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80093e6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80093ea:	ed93 7a00 	vldr	s14, [r3]
 80093ee:	ee30 0a47 	vsub.f32	s0, s0, s14
 80093f2:	2d00      	cmp	r5, #0
 80093f4:	ee70 7a67 	vsub.f32	s15, s0, s15
 80093f8:	ed92 0a00 	vldr	s0, [r2]
 80093fc:	ee70 7a67 	vsub.f32	s15, s0, s15
 8009400:	bfb8      	it	lt
 8009402:	eef1 7a67 	vneglt.f32	s15, s15
 8009406:	e760      	b.n	80092ca <atanf+0x1e>
 8009408:	3fc90fdb 	.word	0x3fc90fdb
 800940c:	bfc90fdb 	.word	0xbfc90fdb
 8009410:	3edfffff 	.word	0x3edfffff
 8009414:	7149f2ca 	.word	0x7149f2ca
 8009418:	3f97ffff 	.word	0x3f97ffff
 800941c:	3c8569d7 	.word	0x3c8569d7
 8009420:	3d4bda59 	.word	0x3d4bda59
 8009424:	bd15a221 	.word	0xbd15a221
 8009428:	be4ccccd 	.word	0xbe4ccccd
 800942c:	3d886b35 	.word	0x3d886b35
 8009430:	3dba2e6e 	.word	0x3dba2e6e
 8009434:	3e124925 	.word	0x3e124925
 8009438:	3eaaaaab 	.word	0x3eaaaaab
 800943c:	bd6ef16b 	.word	0xbd6ef16b
 8009440:	bd9d8795 	.word	0xbd9d8795
 8009444:	bde38e38 	.word	0xbde38e38
 8009448:	401bffff 	.word	0x401bffff
 800944c:	08009b48 	.word	0x08009b48
 8009450:	08009b58 	.word	0x08009b58

08009454 <fabsf>:
 8009454:	ee10 3a10 	vmov	r3, s0
 8009458:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800945c:	ee00 3a10 	vmov	s0, r3
 8009460:	4770      	bx	lr
	...

08009464 <_init>:
 8009464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009466:	bf00      	nop
 8009468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800946a:	bc08      	pop	{r3}
 800946c:	469e      	mov	lr, r3
 800946e:	4770      	bx	lr

08009470 <_fini>:
 8009470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009472:	bf00      	nop
 8009474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009476:	bc08      	pop	{r3}
 8009478:	469e      	mov	lr, r3
 800947a:	4770      	bx	lr
